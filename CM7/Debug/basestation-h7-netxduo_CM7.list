
basestation-h7-netxduo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000147cc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003350  08014a6c  08014a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017dbc  08017dbc  0001da13  2**0
                  CONTENTS
  4 .ARM          00000008  08017dbc  08017dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017dc4  08017dc4  0001da13  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017dc4  08017dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017dc8  08017dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  24000000  08017dcc  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .Rx_PoolSection 00004983  24000090  08017e5c  00019090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000342c  24004a14  0801c7df  0001da14  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24007e40  0801c7df  0001de40  2**0
                  ALLOC
 12 .lwip_sec     00040200  30000000  30000000  0001e000  2**2
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001da13  2**0
                  CONTENTS, READONLY
 14 .debug_info   000278f7  00000000  00000000  0001da41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005f49  00000000  00000000  00045338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a00  00000000  00000000  0004b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014a9  00000000  00000000  0004cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00047248  00000000  00000000  0004e131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c1b6  00000000  00000000  00095379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001953fc  00000000  00000000  000c152f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0025692b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007350  00000000  00000000  00256970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0025dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004a14 	.word	0x24004a14
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014a54 	.word	0x08014a54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004a18 	.word	0x24004a18
 80002dc:	08014a54 	.word	0x08014a54

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <_write>:
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

int _write(int fd, char *ch, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)ch, len, HAL_MAX_DELAY);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <_write+0x28>)
 80007b4:	f005 fbac 	bl	8005f10 <HAL_UART_Transmit>
  return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24004a30 	.word	0x24004a30

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fc03 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f83b 	bl	800084c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <main+0x7c>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	4a19      	ldr	r2, [pc, #100]	@ (8000844 <main+0x7c>)
 80007de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <main+0x7c>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f002 fca1 	bl	800313c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	2000      	movs	r0, #0
 80007fe:	f002 fcb7 	bl	8003170 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
int32_t timeout = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000806:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000808:	bf00      	nop
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <main+0x7c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d104      	bne.n	8000820 <main+0x58>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf4      	bgt.n	800080a <main+0x42>
if ( timeout < 0 )
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da01      	bge.n	800082a <main+0x62>
{
Error_Handler();
 8000826:	f000 f92f 	bl	8000a88 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f000 f8d7 	bl	80009dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800082e:	f000 f889 	bl	8000944 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000832:	f006 fc87 	bl	8007144 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  printf("basestation-h7-netxduo\r\n");
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <main+0x80>)
 8000838:	f013 fa0c 	bl	8013c54 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 MX_LWIP_Process();
 800083c:	f006 fcd4 	bl	80071e8 <MX_LWIP_Process>
 8000840:	e7fc      	b.n	800083c <main+0x74>
 8000842:	bf00      	nop
 8000844:	58024400 	.word	0x58024400
 8000848:	08014a6c 	.word	0x08014a6c

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b09c      	sub	sp, #112	@ 0x70
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000856:	224c      	movs	r2, #76	@ 0x4c
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f013 faea 	bl	8013e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2220      	movs	r2, #32
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f013 fae4 	bl	8013e34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_SMPS_2V5_SUPPLIES_EXT);
 800086c:	202d      	movs	r0, #45	@ 0x2d
 800086e:	f002 fc93 	bl	8003198 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b31      	ldr	r3, [pc, #196]	@ (800093c <SystemClock_Config+0xf0>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a30      	ldr	r2, [pc, #192]	@ (800093c <SystemClock_Config+0xf0>)
 800087c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b2e      	ldr	r3, [pc, #184]	@ (800093c <SystemClock_Config+0xf0>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <SystemClock_Config+0xf4>)
 800088e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000890:	4a2b      	ldr	r2, [pc, #172]	@ (8000940 <SystemClock_Config+0xf4>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000898:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <SystemClock_Config+0xf4>)
 800089a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a4:	bf00      	nop
 80008a6:	4b25      	ldr	r3, [pc, #148]	@ (800093c <SystemClock_Config+0xf0>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008b2:	d1f8      	bne.n	80008a6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2340      	movs	r3, #64	@ 0x40
 80008be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008cc:	233c      	movs	r3, #60	@ 0x3c
 80008ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008dc:	230c      	movs	r3, #12
 80008de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fcad 	bl	800324c <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008f8:	f000 f8c6 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	233f      	movs	r3, #63	@ 0x3f
 80008fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2303      	movs	r3, #3
 8000902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000908:	2308      	movs	r3, #8
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800090c:	2340      	movs	r3, #64	@ 0x40
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000910:	2340      	movs	r3, #64	@ 0x40
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000918:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800091a:	2340      	movs	r3, #64	@ 0x40
 800091c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2104      	movs	r1, #4
 8000922:	4618      	mov	r0, r3
 8000924:	f003 f8ec 	bl	8003b00 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800092e:	f000 f8ab 	bl	8000a88 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3770      	adds	r7, #112	@ 0x70
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	58024800 	.word	0x58024800
 8000940:	58000400 	.word	0x58000400

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <MX_USART3_UART_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 800098e:	f005 fa6f 	bl	8005e70 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f876 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 80009a0:	f006 fb05 	bl	8006fae <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f86d 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 80009b2:	f006 fb3a 	bl	800702a <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f864 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_USART3_UART_Init+0x90>)
 80009c2:	f006 fabb 	bl	8006f3c <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f85c 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	24004a30 	.word	0x24004a30
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b28      	ldr	r3, [pc, #160]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a26      	ldr	r2, [pc, #152]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4a1f      	ldr	r2, [pc, #124]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	4a10      	ldr	r2, [pc, #64]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_GPIO_Init+0xa8>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	371c      	adds	r7, #28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	58024400 	.word	0x58024400

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  printf("Error_Handler(void)");
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <Error_Handler+0x14>)
 8000a8e:	f013 f879 	bl	8013b84 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a92:	b672      	cpsid	i
}
 8000a94:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a96:	bf00      	nop
 8000a98:	e7fd      	b.n	8000a96 <Error_Handler+0xe>
 8000a9a:	bf00      	nop
 8000a9c:	08014a84 	.word	0x08014a84

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_MspInit+0x30>)
 8000aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aac:	4a08      	ldr	r2, [pc, #32]	@ (8000ad0 <HAL_MspInit+0x30>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_MspInit+0x30>)
 8000ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	58024400 	.word	0x58024400

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	22c0      	movs	r2, #192	@ 0xc0
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f013 f99d 	bl	8013e34 <memset>
  if(huart->Instance==USART3)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a27      	ldr	r2, [pc, #156]	@ (8000b9c <HAL_UART_MspInit+0xc8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d146      	bne.n	8000b92 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b04:	f04f 0202 	mov.w	r2, #2
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fb7c 	bl	8004218 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b26:	f7ff ffaf 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <HAL_UART_MspInit+0xcc>)
 8000b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <HAL_UART_MspInit+0xcc>)
 8000b32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <HAL_UART_MspInit+0xcc>)
 8000b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_UART_MspInit+0xcc>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <HAL_UART_MspInit+0xcc>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_UART_MspInit+0xcc>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b80:	2307      	movs	r3, #7
 8000b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_UART_MspInit+0xd0>)
 8000b8e:	f002 f925 	bl	8002ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	37e8      	adds	r7, #232	@ 0xe8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004800 	.word	0x40004800
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	58020c00 	.word	0x58020c00

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 fa5d 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <ETH_IRQHandler+0x10>)
 8000c0e:	f000 ff37 	bl	8001a80 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	24004b1c 	.word	0x24004b1c

08000c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return 1;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_kill>:

int _kill(int pid, int sig)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <_kill+0x20>)
 8000c38:	2216      	movs	r2, #22
 8000c3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	24007e30 	.word	0x24007e30

08000c50 <_exit>:

void _exit (int status)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ffe5 	bl	8000c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c62:	bf00      	nop
 8000c64:	e7fd      	b.n	8000c62 <_exit+0x12>

08000c66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e00a      	b.n	8000c8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c78:	f3af 8000 	nop.w
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	60ba      	str	r2, [r7, #8]
 8000c84:	b2ca      	uxtb	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	dbf0      	blt.n	8000c78 <_read+0x12>
  }

  return len;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_isatty>:

int _isatty(int file)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d205      	bcs.n	8000d44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <_sbrk+0x6c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	24080000 	.word	0x24080000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	24004ac4 	.word	0x24004ac4
 8000d70:	24007e40 	.word	0x24007e40
 8000d74:	24007e30 	.word	0x24007e30

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d7c:	f7ff fc78 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f013 f893 	bl	8013ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fd0d 	bl	80007c8 <main>
  bx  lr
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000db4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000db8:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8000dbc:	08017dcc 	.word	0x08017dcc
  ldr r2, =_sbss
 8000dc0:	24004a14 	.word	0x24004a14
  ldr r4, =_ebss
 8000dc4:	24007e40 	.word	0x24007e40

08000dc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC3_IRQHandler>

08000dca <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <LAN8742_RegisterBusIO+0x28>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <LAN8742_RegisterBusIO+0x28>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <LAN8742_RegisterBusIO+0x28>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000df6:	e014      	b.n	8000e22 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d139      	bne.n	8000ebe <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e01c      	b.n	8000e9e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	f107 020c 	add.w	r2, r7, #12
 8000e6c:	2112      	movs	r1, #18
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	4798      	blx	r3
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da03      	bge.n	8000e80 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000e78:	f06f 0304 	mvn.w	r3, #4
 8000e7c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000e7e:	e00b      	b.n	8000e98 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d105      	bne.n	8000e98 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
         break;
 8000e96:	e005      	b.n	8000ea4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b1f      	cmp	r3, #31
 8000ea2:	d9df      	bls.n	8000e64 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b1f      	cmp	r3, #31
 8000eaa:	d902      	bls.n	8000eb2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000eac:	f06f 0302 	mvn.w	r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 }
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6810      	ldr	r0, [r2, #0]
 8000edc:	f107 020c 	add.w	r2, r7, #12
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4798      	blx	r3
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da02      	bge.n	8000ef0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eea:	f06f 0304 	mvn.w	r3, #4
 8000eee:	e06e      	b.n	8000fce <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	6810      	ldr	r0, [r2, #0]
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	2101      	movs	r1, #1
 8000efe:	4798      	blx	r3
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da02      	bge.n	8000f0c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f06:	f06f 0304 	mvn.w	r3, #4
 8000f0a:	e060      	b.n	8000fce <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e059      	b.n	8000fce <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6810      	ldr	r0, [r2, #0]
 8000f22:	f107 020c 	add.w	r2, r7, #12
 8000f26:	2100      	movs	r1, #0
 8000f28:	4798      	blx	r3
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da02      	bge.n	8000f36 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f30:	f06f 0304 	mvn.w	r3, #4
 8000f34:	e04b      	b.n	8000fce <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d11b      	bne.n	8000f78 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <LAN8742_GetLinkState+0x90>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f54:	2302      	movs	r3, #2
 8000f56:	e03a      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e033      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f70:	2304      	movs	r3, #4
 8000f72:	e02c      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f74:	2305      	movs	r3, #5
 8000f76:	e02a      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	f107 020c 	add.w	r2, r7, #12
 8000f84:	211f      	movs	r1, #31
 8000f86:	4798      	blx	r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da02      	bge.n	8000f94 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f8e:	f06f 0304 	mvn.w	r3, #4
 8000f92:	e01c      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e015      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 031c 	and.w	r3, r3, #28
 8000fa8:	2b18      	cmp	r3, #24
 8000faa:	d101      	bne.n	8000fb0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fac:	2302      	movs	r3, #2
 8000fae:	e00e      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 031c 	and.w	r3, r3, #28
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d101      	bne.n	8000fbe <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e007      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f003 031c 	and.w	r3, r3, #28
 8000fc4:	2b14      	cmp	r3, #20
 8000fc6:	d101      	bne.n	8000fcc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e000      	b.n	8000fce <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fcc:	2305      	movs	r3, #5
    }
  }
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f97c 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fe4:	f002 ff42 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_Init+0x68>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	4913      	ldr	r1, [pc, #76]	@ (8001044 <HAL_Init+0x6c>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_Init+0x68>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_Init+0x6c>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <HAL_Init+0x70>)
 800101a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_Init+0x74>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f814 	bl	8001050 <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e002      	b.n	8001038 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001032:	f7ff fd35 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	58024400 	.word	0x58024400
 8001044:	08017ba0 	.word	0x08017ba0
 8001048:	24000004 	.word	0x24000004
 800104c:	24000000 	.word	0x24000000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001058:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_InitTick+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e021      	b.n	80010a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <HAL_InitTick+0x64>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <HAL_InitTick+0x60>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f961 	bl	8001342 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001098:	f000 f92b 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_InitTick+0x68>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2400000c 	.word	0x2400000c
 80010b4:	24000000 	.word	0x24000000
 80010b8:	24000008 	.word	0x24000008

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c
 80010e0:	24004ac8 	.word	0x24004ac8

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	24004ac8 	.word	0x24004ac8

080010fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <HAL_GetREVID+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0c1b      	lsrs	r3, r3, #16
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	5c001000 	.word	0x5c001000

08001114 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001124:	4904      	ldr	r1, [pc, #16]	@ (8001138 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	58000400 	.word	0x58000400

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <__NVIC_SetPriorityGrouping+0x40>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	4313      	orrs	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	@ (800117c <__NVIC_SetPriorityGrouping+0x40>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	05fa0000 	.word	0x05fa0000

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	@ (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	@ (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <__NVIC_SetPriority+0x50>)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff40 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff33 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa4 	bl	8001298 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <HAL_GetCurrentCPUID+0x24>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	2b07      	cmp	r3, #7
 800136c:	d101      	bne.n	8001372 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800136e:	2303      	movs	r3, #3
 8001370:	e000      	b.n	8001374 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001372:	2301      	movs	r3, #1
  }
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0e3      	b.n	800155e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2223      	movs	r2, #35	@ 0x23
 80013a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f006 f8e9 	bl	8007580 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001568 <HAL_ETH_Init+0x1e4>)
 80013b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b4:	4a6c      	ldr	r2, [pc, #432]	@ (8001568 <HAL_ETH_Init+0x1e4>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013be:	4b6a      	ldr	r3, [pc, #424]	@ (8001568 <HAL_ETH_Init+0x1e4>)
 80013c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7a1b      	ldrb	r3, [r3, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d103      	bne.n	80013dc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fe9d 	bl	8001114 <HAL_SYSCFG_ETHInterfaceSelect>
 80013da:	e003      	b.n	80013e4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013dc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013e0:	f7ff fe98 	bl	8001114 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013e4:	4b61      	ldr	r3, [pc, #388]	@ (800156c <HAL_ETH_Init+0x1e8>)
 80013e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001400:	f7ff fe70 	bl	80010e4 <HAL_GetTick>
 8001404:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001406:	e011      	b.n	800142c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001408:	f7ff fe6c 	bl	80010e4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001416:	d909      	bls.n	800142c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2204      	movs	r2, #4
 800141c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	22e0      	movs	r2, #224	@ 0xe0
 8001424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e098      	b.n	800155e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1e4      	bne.n	8001408 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fefa 	bl	8002238 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001444:	f002 fe8c 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8001448:	4603      	mov	r3, r0
 800144a:	4a49      	ldr	r2, [pc, #292]	@ (8001570 <HAL_ETH_Init+0x1ec>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9a      	lsrs	r2, r3, #18
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3a01      	subs	r2, #1
 8001458:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f001 f8dd 	bl	800261c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800146a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800146e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800147a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800147e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	22e0      	movs	r2, #224	@ 0xe0
 800149a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e05d      	b.n	800155e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <HAL_ETH_Init+0x1f0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6952      	ldr	r2, [r2, #20]
 80014b6:	0051      	lsls	r1, r2, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	430b      	orrs	r3, r1
 80014be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014c2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f001 f945 	bl	8002756 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f001 f98b 	bl	80027e8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	3305      	adds	r3, #5
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	021a      	lsls	r2, r3, #8
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	3303      	adds	r3, #3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	061a      	lsls	r2, r3, #24
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	3302      	adds	r3, #2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	3301      	adds	r3, #1
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001510:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800151e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001520:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_ETH_Init+0x1f4>)
 8001532:	430b      	orrs	r3, r1
 8001534:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <HAL_ETH_Init+0x1f8>)
 8001546:	430b      	orrs	r3, r1
 8001548:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2210      	movs	r2, #16
 8001558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	58024400 	.word	0x58024400
 800156c:	58000400 	.word	0x58000400
 8001570:	431bde83 	.word	0x431bde83
 8001574:	ffff8001 	.word	0xffff8001
 8001578:	0c020060 	.word	0x0c020060
 800157c:	0c20c000 	.word	0x0c20c000

08001580 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800158e:	2b10      	cmp	r3, #16
 8001590:	d153      	bne.n	800163a <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2223      	movs	r2, #35	@ 0x23
 8001596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2204      	movs	r2, #4
 800159e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f9f3 	bl	800198c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0202 	orr.w	r2, r2, #2
 80015b4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0201 	orr.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015e2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015f2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800160e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800161a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001626:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800162a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2223      	movs	r2, #35	@ 0x23
 8001632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
  }
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001652:	2b23      	cmp	r3, #35	@ 0x23
 8001654:	d13f      	bne.n	80016d6 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2223      	movs	r2, #35	@ 0x23
 800165a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001666:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001676:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001682:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001692:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0202 	bic.w	r2, r2, #2
 80016c8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2210      	movs	r2, #16
 80016ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e07f      	b.n	800180a <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001710:	2b23      	cmp	r3, #35	@ 0x23
 8001712:	d179      	bne.n	8001808 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001714:	2200      	movs	r2, #0
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f001 f8c3 	bl	80028a4 <ETH_Prepare_Tx_Descriptors>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172a:	f043 0202 	orr.w	r2, r3, #2
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e068      	b.n	800180a <HAL_ETH_Transmit+0x126>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001738:	f3bf 8f4f 	dsb	sy
}
 800173c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3206      	adds	r2, #6
 8001746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	2b03      	cmp	r3, #3
 800175c:	d904      	bls.n	8001768 <HAL_ETH_Transmit+0x84>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	1f1a      	subs	r2, r3, #4
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3106      	adds	r1, #6
 8001774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001778:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800177c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8001780:	f7ff fcb0 	bl	80010e4 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001786:	e039      	b.n	80017fc <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001790:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d012      	beq.n	80017c2 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	f043 0208 	orr.w	r2, r3, #8
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e023      	b.n	800180a <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017c8:	d018      	beq.n	80017fc <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017ca:	f7ff fc8b 	bl	80010e4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d302      	bcc.n	80017e0 <HAL_ETH_Transmit+0xfc>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e6:	f043 0204 	orr.w	r2, r3, #4
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80017f6:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e006      	b.n	800180a <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	dbc1      	blt.n	8001788 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	e000      	b.n	800180a <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
  }
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b088      	sub	sp, #32
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0a2      	b.n	8001984 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001844:	2b23      	cmp	r3, #35	@ 0x23
 8001846:	d001      	beq.n	800184c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e09b      	b.n	8001984 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001850:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	3212      	adds	r2, #18
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001862:	f1c3 0304 	rsb	r3, r3, #4
 8001866:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001868:	e064      	b.n	8001934 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <HAL_ETH_ReadData+0x88>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d03a      	beq.n	8001910 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f006 f826 	bl	8007940 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	441a      	add	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	3301      	adds	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d902      	bls.n	8001922 <HAL_ETH_ReadData+0x110>
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	3b04      	subs	r3, #4
 8001920:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	3212      	adds	r2, #18
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001938:	2b00      	cmp	r3, #0
 800193a:	db06      	blt.n	800194a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d202      	bcs.n	800194a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001944:	7cfb      	ldrb	r3, [r7, #19]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d08f      	beq.n	800186a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	441a      	add	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f814 	bl	800198c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800196a:	7cfb      	ldrb	r3, [r7, #19]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d108      	bne.n	8001982 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3720      	adds	r7, #32
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001998:	2301      	movs	r3, #1
 800199a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	3212      	adds	r2, #18
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019b2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80019b4:	e038      	b.n	8001a28 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d112      	bne.n	80019e4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4618      	mov	r0, r3
 80019c4:	f005 ff8c 	bl	80078e0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	74fb      	strb	r3, [r7, #19]
 80019d2:	e007      	b.n	80019e4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	461a      	mov	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	461a      	mov	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80019e4:	7cfb      	ldrb	r3, [r7, #19]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01e      	beq.n	8001a28 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	e003      	b.n	8001a04 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001a02:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	3301      	adds	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d902      	bls.n	8001a16 <ETH_UpdateDescriptor+0x8a>
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	3b04      	subs	r3, #4
 8001a14:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	3212      	adds	r2, #18
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <ETH_UpdateDescriptor+0xa8>
 8001a2e:	7cfb      	ldrb	r3, [r7, #19]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1c0      	bne.n	80019b6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d01b      	beq.n	8001a76 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a48:	f3bf 8f5f 	dmb	sy
}
 8001a4c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6919      	ldr	r1, [r3, #16]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	18ca      	adds	r2, r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a66:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001a76:	bf00      	nop
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001a90:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a9a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001a9e:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001aae:	4b77      	ldr	r3, [pc, #476]	@ (8001c8c <HAL_ETH_IRQHandler+0x20c>)
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8001ab4:	4b76      	ldr	r3, [pc, #472]	@ (8001c90 <HAL_ETH_IRQHandler+0x210>)
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d010      	beq.n	8001ae6 <HAL_ETH_IRQHandler+0x66>
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001adc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8e1 	bl	8001ca8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <HAL_ETH_IRQHandler+0x92>
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b02:	461a      	mov	r2, r3
 8001b04:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001b08:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8c1 	bl	8001c94 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d047      	beq.n	8001bac <HAL_ETH_IRQHandler+0x12c>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d042      	beq.n	8001bac <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2c:	f043 0208 	orr.w	r2, r3, #8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01e      	beq.n	8001b7e <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b48:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001b4c:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001b50:	4013      	ands	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b60:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b70:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	22e0      	movs	r2, #224	@ 0xe0
 8001b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001b7c:	e013      	b.n	8001ba6 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b86:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001b8a:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001ba2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f888 	bl	8001cbc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d019      	beq.n	8001bf4 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc6:	f043 0210 	orr.w	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	22e0      	movs	r2, #224	@ 0xe0
 8001be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f868 	bl	8001cbc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00f      	beq.n	8001c1e <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c06:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f85d 	bl	8001cd0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00f      	beq.n	8001c48 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f852 	bl	8001ce4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001c48:	f7ff fb88 	bl	800135c <HAL_GetCurrentCPUID>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d10c      	bne.n	8001c6c <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_ETH_IRQHandler+0x20c>)
 8001c5e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c62:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f847 	bl	8001cf8 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8001c6a:	e00b      	b.n	8001c84 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_ETH_IRQHandler+0x210>)
 8001c78:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c7c:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f83a 	bl	8001cf8 <HAL_ETH_WakeUpCallback>
}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	58000080 	.word	0x58000080
 8001c90:	580000c0 	.word	0x580000c0

08001c94 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e03e      	b.n	8001dac <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d36:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	055b      	lsls	r3, r3, #21
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f043 030c 	orr.w	r3, r3, #12
 8001d5a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001d6e:	f7ff f9b9 	bl	80010e4 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d74:	e009      	b.n	8001d8a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001d76:	f7ff f9b5 	bl	80010e4 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d84:	d901      	bls.n	8001d8a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e010      	b.n	8001dac <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1ed      	bne.n	8001d76 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e03c      	b.n	8001e50 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dde:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	055b      	lsls	r3, r3, #21
 8001dea:	4313      	orrs	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f023 030c 	bic.w	r3, r3, #12
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <HAL_ETH_WritePHYRegister+0xa4>)
 8001e16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <HAL_ETH_WritePHYRegister+0xa4>)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001e22:	f7ff f95f 	bl	80010e4 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e28:	e009      	b.n	8001e3e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e2a:	f7ff f95b 	bl	80010e4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e38:	d901      	bls.n	8001e3e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e008      	b.n	8001e50 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ed      	bne.n	8001e2a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40028000 	.word	0x40028000

08001e5c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e1c3      	b.n	80021f8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 020c 	and.w	r2, r3, #12
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001efe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf0c      	ite	eq
 8001f8a:	2301      	moveq	r3, #1
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001fea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002080:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	0e5b      	lsrs	r3, r3, #25
 80020ba:	f003 021f 	and.w	r2, r3, #31
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 020f 	and.w	r2, r3, #15
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf14      	ite	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2300      	moveq	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	b29a      	uxth	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002166:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002184:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002194:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80021e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e00b      	b.n	8002230 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800221e:	2b10      	cmp	r3, #16
 8002220:	d105      	bne.n	800222e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002222:	6839      	ldr	r1, [r7, #0]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f857 	bl	80022d8 <ETH_SetMACConfig>

    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002248:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002250:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002252:	f001 ff85 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8002256:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d804      	bhi.n	800226a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e022      	b.n	80022b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4a16      	ldr	r2, [pc, #88]	@ (80022c8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d204      	bcs.n	800227c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	e019      	b.n	80022b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4a13      	ldr	r2, [pc, #76]	@ (80022cc <HAL_ETH_SetMDIOClockRange+0x94>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d915      	bls.n	80022b0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d804      	bhi.n	8002296 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e00c      	b.n	80022b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4a0e      	ldr	r2, [pc, #56]	@ (80022d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d804      	bhi.n	80022a8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e003      	b.n	80022b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80022ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	02160ebf 	.word	0x02160ebf
 80022c8:	03938700 	.word	0x03938700
 80022cc:	05f5e0ff 	.word	0x05f5e0ff
 80022d0:	08f0d17f 	.word	0x08f0d17f
 80022d4:	0ee6b27f 	.word	0x0ee6b27f

080022d8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80022ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	791b      	ldrb	r3, [r3, #4]
 80022f0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80022f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	7b1b      	ldrb	r3, [r3, #12]
 80022f8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	7b5b      	ldrb	r3, [r3, #13]
 8002300:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	7b9b      	ldrb	r3, [r3, #14]
 8002308:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800230a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	7bdb      	ldrb	r3, [r3, #15]
 8002310:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002312:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	7c12      	ldrb	r2, [r2, #16]
 8002318:	2a00      	cmp	r2, #0
 800231a:	d102      	bne.n	8002322 <ETH_SetMACConfig+0x4a>
 800231c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002320:	e000      	b.n	8002324 <ETH_SetMACConfig+0x4c>
 8002322:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002324:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	7c52      	ldrb	r2, [r2, #17]
 800232a:	2a00      	cmp	r2, #0
 800232c:	d102      	bne.n	8002334 <ETH_SetMACConfig+0x5c>
 800232e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002332:	e000      	b.n	8002336 <ETH_SetMACConfig+0x5e>
 8002334:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002336:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	7c9b      	ldrb	r3, [r3, #18]
 800233c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800233e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002344:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800234a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	7f1b      	ldrb	r3, [r3, #28]
 8002350:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	7f5b      	ldrb	r3, [r3, #29]
 8002358:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800235a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	7f92      	ldrb	r2, [r2, #30]
 8002360:	2a00      	cmp	r2, #0
 8002362:	d102      	bne.n	800236a <ETH_SetMACConfig+0x92>
 8002364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002368:	e000      	b.n	800236c <ETH_SetMACConfig+0x94>
 800236a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800236c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	7fdb      	ldrb	r3, [r3, #31]
 8002372:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002374:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	f892 2020 	ldrb.w	r2, [r2, #32]
 800237c:	2a00      	cmp	r2, #0
 800237e:	d102      	bne.n	8002386 <ETH_SetMACConfig+0xae>
 8002380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002384:	e000      	b.n	8002388 <ETH_SetMACConfig+0xb0>
 8002386:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002388:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800238e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002396:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002398:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b56      	ldr	r3, [pc, #344]	@ (8002504 <ETH_SetMACConfig+0x22c>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	430b      	orrs	r3, r1
 80023b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023d6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	d102      	bne.n	80023ea <ETH_SetMACConfig+0x112>
 80023e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023e8:	e000      	b.n	80023ec <ETH_SetMACConfig+0x114>
 80023ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023ec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4b42      	ldr	r3, [pc, #264]	@ (8002508 <ETH_SetMACConfig+0x230>)
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	430b      	orrs	r3, r1
 8002408:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002410:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4b3a      	ldr	r3, [pc, #232]	@ (800250c <ETH_SetMACConfig+0x234>)
 8002422:	4013      	ands	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	68f9      	ldr	r1, [r7, #12]
 800242a:	430b      	orrs	r3, r1
 800242c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002434:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800243a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002442:	2a00      	cmp	r2, #0
 8002444:	d101      	bne.n	800244a <ETH_SetMACConfig+0x172>
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	e000      	b.n	800244c <ETH_SetMACConfig+0x174>
 800244a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800244c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800245e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	430b      	orrs	r3, r1
 800246c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002474:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800247c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248a:	f023 0103 	bic.w	r1, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	430a      	orrs	r2, r1
 8002496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80024a2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80024be:	2a00      	cmp	r2, #0
 80024c0:	d101      	bne.n	80024c6 <ETH_SetMACConfig+0x1ee>
 80024c2:	2240      	movs	r2, #64	@ 0x40
 80024c4:	e000      	b.n	80024c8 <ETH_SetMACConfig+0x1f0>
 80024c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80024c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80024d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80024da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80024e8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	00048083 	.word	0x00048083
 8002508:	c0f88000 	.word	0xc0f88000
 800250c:	fffffef0 	.word	0xfffffef0

08002510 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b38      	ldr	r3, [pc, #224]	@ (8002608 <ETH_SetDMAConfig+0xf8>)
 8002526:	4013      	ands	r3, r2
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	6811      	ldr	r1, [r2, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	430b      	orrs	r3, r1
 8002532:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002536:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002542:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	7b1b      	ldrb	r3, [r3, #12]
 8002548:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4b2c      	ldr	r3, [pc, #176]	@ (800260c <ETH_SetDMAConfig+0xfc>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	430b      	orrs	r3, r1
 8002564:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002568:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	7b5b      	ldrb	r3, [r3, #13]
 800256e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002580:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002584:	4b22      	ldr	r3, [pc, #136]	@ (8002610 <ETH_SetDMAConfig+0x100>)
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	430b      	orrs	r3, r1
 8002590:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002594:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	7d1b      	ldrb	r3, [r3, #20]
 80025a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80025a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	7f5b      	ldrb	r3, [r3, #29]
 80025a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80025ba:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <ETH_SetDMAConfig+0x104>)
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ca:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	7f1b      	ldrb	r3, [r3, #28]
 80025d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <ETH_SetDMAConfig+0x108>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	68f9      	ldr	r1, [r7, #12]
 80025f2:	430b      	orrs	r3, r1
 80025f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025f8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	ffff87fd 	.word	0xffff87fd
 800260c:	ffff2ffe 	.word	0xffff2ffe
 8002610:	fffec000 	.word	0xfffec000
 8002614:	ffc0efef 	.word	0xffc0efef
 8002618:	7fc0ffff 	.word	0x7fc0ffff

0800261c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0a4      	sub	sp, #144	@ 0x90
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800262a:	2300      	movs	r3, #0
 800262c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002652:	2301      	movs	r3, #1
 8002654:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002658:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800265c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002664:	2300      	movs	r3, #0
 8002666:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002674:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002678:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002680:	2300      	movs	r3, #0
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002696:	2300      	movs	r3, #0
 8002698:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800269a:	2300      	movs	r3, #0
 800269c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800269e:	2300      	movs	r3, #0
 80026a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80026b4:	2320      	movs	r3, #32
 80026b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80026c6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026d0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80026d8:	2302      	movs	r3, #2
 80026da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80026f6:	2300      	movs	r3, #0
 80026f8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002700:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fde6 	bl	80022d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800270c:	2301      	movs	r3, #1
 800270e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002710:	2301      	movs	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002726:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800272a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002730:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002734:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800273c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	4619      	mov	r1, r3
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fee1 	bl	8002510 <ETH_SetDMAConfig>
}
 800274e:	bf00      	nop
 8002750:	3790      	adds	r7, #144	@ 0x90
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e01d      	b.n	80027a0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68d9      	ldr	r1, [r3, #12]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	3206      	adds	r2, #6
 8002796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3301      	adds	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d9de      	bls.n	8002764 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b4:	461a      	mov	r2, r3
 80027b6:	2303      	movs	r3, #3
 80027b8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e023      	b.n	800283e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6919      	ldr	r1, [r3, #16]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	3212      	adds	r2, #18
 8002834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3301      	adds	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d9d8      	bls.n	80027f6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286a:	461a      	mov	r2, r3
 800286c:	2303      	movs	r3, #3
 800286e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800287e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002892:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b091      	sub	sp, #68	@ 0x44
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3318      	adds	r3, #24
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028e6:	d007      	beq.n	80028f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ec:	3304      	adds	r3, #4
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80028f8:	2302      	movs	r3, #2
 80028fa:	e266      	b.n	8002dca <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d044      	beq.n	8002992 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b75      	ldr	r3, [pc, #468]	@ (8002ae4 <ETH_Prepare_Tx_Descriptors+0x240>)
 800290e:	4013      	ands	r3, r2
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002914:	431a      	orrs	r2, r3
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d027      	beq.n	8002992 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	b29a      	uxth	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800295c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	431a      	orrs	r2, r3
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002980:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002990:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00e      	beq.n	80029bc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	4b51      	ldr	r3, [pc, #324]	@ (8002ae8 <ETH_Prepare_Tx_Descriptors+0x244>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	6992      	ldr	r2, [r2, #24]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ae:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d036      	beq.n	8002a42 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80029d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80029dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029de:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80029e0:	f3bf 8f5f 	dmb	sy
}
 80029e4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f4:	3301      	adds	r3, #1
 80029f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d902      	bls.n	8002a04 <ETH_Prepare_Tx_Descriptors+0x160>
 80029fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a00:	3b04      	subs	r3, #4
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a10:	3301      	adds	r3, #1
 8002a12:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a20:	d10f      	bne.n	8002a42 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002a2c:	f3bf 8f5f 	dmb	sy
}
 8002a30:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e1c3      	b.n	8002dca <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	3301      	adds	r3, #1
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a5c:	6852      	ldr	r2, [r2, #4]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a62:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d012      	beq.n	8002a92 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	4b1a      	ldr	r3, [pc, #104]	@ (8002aec <ETH_Prepare_Tx_Descriptors+0x248>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a86:	6852      	ldr	r2, [r2, #4]
 8002a88:	0412      	lsls	r2, r2, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	e008      	b.n	8002aa4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <ETH_Prepare_Tx_Descriptors+0x248>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aa2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d021      	beq.n	8002af4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	04db      	lsls	r3, r3, #19
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	69d2      	ldr	r2, [r2, #28]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	e02e      	b.n	8002b42 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002ae4:	ffff0000 	.word	0xffff0000
 8002ae8:	ffffc000 	.word	0xffffc000
 8002aec:	c000ffff 	.word	0xc000ffff
 8002af0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce8 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	6852      	ldr	r2, [r2, #4]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b22:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b78:	f3bf 8f5f 	dmb	sy
}
 8002b7c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80da 	beq.w	8002d4c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002baa:	e0cf      	b.n	8002d4c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bba:	3301      	adds	r3, #1
 8002bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d902      	bls.n	8002bca <ETH_Prepare_Tx_Descriptors+0x326>
 8002bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bec:	d007      	beq.n	8002bfe <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d029      	beq.n	8002c52 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c10:	e019      	b.n	8002c46 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002c12:	f3bf 8f5f 	dmb	sy
}
 8002c16:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c26:	3301      	adds	r3, #1
 8002c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d902      	bls.n	8002c36 <ETH_Prepare_Tx_Descriptors+0x392>
 8002c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c32:	3b04      	subs	r3, #4
 8002c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	3301      	adds	r3, #1
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3e1      	bcc.n	8002c12 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0bb      	b.n	8002dca <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c54:	3301      	adds	r3, #1
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cec <ETH_Prepare_Tx_Descriptors+0x448>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c72:	6852      	ldr	r2, [r2, #4]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d012      	beq.n	8002ca8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c9c:	6852      	ldr	r2, [r2, #4]
 8002c9e:	0412      	lsls	r2, r2, #16
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	e008      	b.n	8002cba <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cb8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d018      	beq.n	8002cf8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	69d2      	ldr	r2, [r2, #28]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e020      	b.n	8002d28 <ETH_Prepare_Tx_Descriptors+0x484>
 8002ce6:	bf00      	nop
 8002ce8:	ffff8000 	.word	0xffff8000
 8002cec:	ffffc000 	.word	0xffffc000
 8002cf0:	c000ffff 	.word	0xc000ffff
 8002cf4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b36      	ldr	r3, [pc, #216]	@ (8002dd8 <ETH_Prepare_Tx_Descriptors+0x534>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	6852      	ldr	r2, [r2, #4]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d26:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002d2e:	f3bf 8f5f 	dmb	sy
}
 8002d32:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f af2b 	bne.w	8002bac <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	e005      	b.n	8002d76 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d96:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d98:	f3ef 8310 	mrs	r3, PRIMASK
 8002d9c:	613b      	str	r3, [r7, #16]
  return(result);
 8002d9e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	2301      	movs	r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f383 8810 	msr	PRIMASK, r3
}
 8002dac:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db4:	4413      	add	r3, r2
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f383 8810 	msr	PRIMASK, r3
}
 8002dc6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3744      	adds	r7, #68	@ 0x44
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	ffff8000 	.word	0xffff8000

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	@ 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dea:	4b89      	ldr	r3, [pc, #548]	@ (8003010 <HAL_GPIO_Init+0x234>)
 8002dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dee:	e194      	b.n	800311a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8186 	beq.w	8003114 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d005      	beq.n	8002e20 <HAL_GPIO_Init+0x44>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d130      	bne.n	8002e82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e56:	2201      	movs	r2, #1
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 0201 	and.w	r2, r3, #1
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d017      	beq.n	8002ebe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2203      	movs	r2, #3
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d123      	bne.n	8002f12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	08da      	lsrs	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3208      	adds	r2, #8
 8002ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	08da      	lsrs	r2, r3, #3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3208      	adds	r2, #8
 8002f0c:	69b9      	ldr	r1, [r7, #24]
 8002f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0203 	and.w	r2, r3, #3
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80e0 	beq.w	8003114 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f54:	4b2f      	ldr	r3, [pc, #188]	@ (8003014 <HAL_GPIO_Init+0x238>)
 8002f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8003014 <HAL_GPIO_Init+0x238>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f64:	4b2b      	ldr	r3, [pc, #172]	@ (8003014 <HAL_GPIO_Init+0x238>)
 8002f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f72:	4a29      	ldr	r2, [pc, #164]	@ (8003018 <HAL_GPIO_Init+0x23c>)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	220f      	movs	r2, #15
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a20      	ldr	r2, [pc, #128]	@ (800301c <HAL_GPIO_Init+0x240>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d052      	beq.n	8003044 <HAL_GPIO_Init+0x268>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <HAL_GPIO_Init+0x244>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d031      	beq.n	800300a <HAL_GPIO_Init+0x22e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003024 <HAL_GPIO_Init+0x248>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d02b      	beq.n	8003006 <HAL_GPIO_Init+0x22a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003028 <HAL_GPIO_Init+0x24c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d025      	beq.n	8003002 <HAL_GPIO_Init+0x226>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <HAL_GPIO_Init+0x250>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01f      	beq.n	8002ffe <HAL_GPIO_Init+0x222>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <HAL_GPIO_Init+0x254>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <HAL_GPIO_Init+0x21e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8003034 <HAL_GPIO_Init+0x258>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0x21a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	@ (8003038 <HAL_GPIO_Init+0x25c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_GPIO_Init+0x216>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a18      	ldr	r2, [pc, #96]	@ (800303c <HAL_GPIO_Init+0x260>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <HAL_GPIO_Init+0x212>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a17      	ldr	r2, [pc, #92]	@ (8003040 <HAL_GPIO_Init+0x264>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_GPIO_Init+0x20e>
 8002fe6:	2309      	movs	r3, #9
 8002fe8:	e02d      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 8002fea:	230a      	movs	r3, #10
 8002fec:	e02b      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 8002fee:	2308      	movs	r3, #8
 8002ff0:	e029      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	e027      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 8002ff6:	2306      	movs	r3, #6
 8002ff8:	e025      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 8002ffa:	2305      	movs	r3, #5
 8002ffc:	e023      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 8002ffe:	2304      	movs	r3, #4
 8003000:	e021      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 8003002:	2303      	movs	r3, #3
 8003004:	e01f      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 8003006:	2302      	movs	r3, #2
 8003008:	e01d      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 800300a:	2301      	movs	r3, #1
 800300c:	e01b      	b.n	8003046 <HAL_GPIO_Init+0x26a>
 800300e:	bf00      	nop
 8003010:	58000080 	.word	0x58000080
 8003014:	58024400 	.word	0x58024400
 8003018:	58000400 	.word	0x58000400
 800301c:	58020000 	.word	0x58020000
 8003020:	58020400 	.word	0x58020400
 8003024:	58020800 	.word	0x58020800
 8003028:	58020c00 	.word	0x58020c00
 800302c:	58021000 	.word	0x58021000
 8003030:	58021400 	.word	0x58021400
 8003034:	58021800 	.word	0x58021800
 8003038:	58021c00 	.word	0x58021c00
 800303c:	58022000 	.word	0x58022000
 8003040:	58022400 	.word	0x58022400
 8003044:	2300      	movs	r3, #0
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	f002 0203 	and.w	r2, r2, #3
 800304c:	0092      	lsls	r2, r2, #2
 800304e:	4093      	lsls	r3, r2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003056:	4938      	ldr	r1, [pc, #224]	@ (8003138 <HAL_GPIO_Init+0x35c>)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3302      	adds	r3, #2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800308a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	3301      	adds	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f ae63 	bne.w	8002df0 <HAL_GPIO_Init+0x14>
  }
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	3724      	adds	r7, #36	@ 0x24
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	58000400 	.word	0x58000400

0800313c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003144:	4a08      	ldr	r2, [pc, #32]	@ (8003168 <HAL_HSEM_FastTake+0x2c>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3320      	adds	r3, #32
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	4a07      	ldr	r2, [pc, #28]	@ (800316c <HAL_HSEM_FastTake+0x30>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	58026400 	.word	0x58026400
 800316c:	80000300 	.word	0x80000300

08003170 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800317a:	4906      	ldr	r1, [pc, #24]	@ (8003194 <HAL_HSEM_Release+0x24>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	58026400 	.word	0x58026400

08003198 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80031a0:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d00a      	beq.n	80031c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031ac:	4b26      	ldr	r3, [pc, #152]	@ (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e040      	b.n	8003240 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e03e      	b.n	8003240 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031c2:	4b21      	ldr	r3, [pc, #132]	@ (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80031ca:	491f      	ldr	r1, [pc, #124]	@ (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031d2:	f7fd ff87 	bl	80010e4 <HAL_GetTick>
 80031d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031d8:	e009      	b.n	80031ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031da:	f7fd ff83 	bl	80010e4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031e8:	d901      	bls.n	80031ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e028      	b.n	8003240 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031fa:	d1ee      	bne.n	80031da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b1e      	cmp	r3, #30
 8003200:	d008      	beq.n	8003214 <HAL_PWREx_ConfigSupply+0x7c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b2e      	cmp	r3, #46	@ 0x2e
 8003206:	d005      	beq.n	8003214 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b1d      	cmp	r3, #29
 800320c:	d002      	beq.n	8003214 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b2d      	cmp	r3, #45	@ 0x2d
 8003212:	d114      	bne.n	800323e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003214:	f7fd ff66 	bl	80010e4 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800321a:	e009      	b.n	8003230 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800321c:	f7fd ff62 	bl	80010e4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800322a:	d901      	bls.n	8003230 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e007      	b.n	8003240 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323c:	d1ee      	bne.n	800321c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	58024800 	.word	0x58024800

0800324c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	@ 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f000 bc48 	b.w	8003af0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8088 	beq.w	800337e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326e:	4b99      	ldr	r3, [pc, #612]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003278:	4b96      	ldr	r3, [pc, #600]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	2b10      	cmp	r3, #16
 8003282:	d007      	beq.n	8003294 <HAL_RCC_OscConfig+0x48>
 8003284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003286:	2b18      	cmp	r3, #24
 8003288:	d111      	bne.n	80032ae <HAL_RCC_OscConfig+0x62>
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	4b8f      	ldr	r3, [pc, #572]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d06d      	beq.n	800337c <HAL_RCC_OscConfig+0x130>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d169      	bne.n	800337c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f000 bc21 	b.w	8003af0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x7a>
 80032b8:	4b86      	ldr	r3, [pc, #536]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a85      	ldr	r2, [pc, #532]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e02e      	b.n	8003324 <HAL_RCC_OscConfig+0xd8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x9c>
 80032ce:	4b81      	ldr	r3, [pc, #516]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a80      	ldr	r2, [pc, #512]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80032d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b7e      	ldr	r3, [pc, #504]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7d      	ldr	r2, [pc, #500]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80032e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e01d      	b.n	8003324 <HAL_RCC_OscConfig+0xd8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0xc0>
 80032f2:	4b78      	ldr	r3, [pc, #480]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a77      	ldr	r2, [pc, #476]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b75      	ldr	r3, [pc, #468]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a74      	ldr	r2, [pc, #464]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xd8>
 800330c:	4b71      	ldr	r3, [pc, #452]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a70      	ldr	r2, [pc, #448]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b6e      	ldr	r3, [pc, #440]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6d      	ldr	r2, [pc, #436]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fd feda 	bl	80010e4 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fd fed6 	bl	80010e4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e3d4      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003346:	4b63      	ldr	r3, [pc, #396]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0xe8>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fd fec6 	bl	80010e4 <HAL_GetTick>
 8003358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fd fec2 	bl	80010e4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e3c0      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800336e:	4b59      	ldr	r3, [pc, #356]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x110>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80ca 	beq.w	8003520 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338c:	4b51      	ldr	r3, [pc, #324]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003394:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003396:	4b4f      	ldr	r3, [pc, #316]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_RCC_OscConfig+0x166>
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2b18      	cmp	r3, #24
 80033a6:	d156      	bne.n	8003456 <HAL_RCC_OscConfig+0x20a>
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d151      	bne.n	8003456 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b2:	4b48      	ldr	r3, [pc, #288]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_RCC_OscConfig+0x17e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e392      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033ca:	4b42      	ldr	r3, [pc, #264]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0219 	bic.w	r2, r3, #25
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	493f      	ldr	r1, [pc, #252]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd fe82 	bl	80010e4 <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fd fe7e 	bl	80010e4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e37c      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f6:	4b37      	ldr	r3, [pc, #220]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	f7fd fe7b 	bl	80010fc <HAL_GetREVID>
 8003406:	4603      	mov	r3, r0
 8003408:	f241 0203 	movw	r2, #4099	@ 0x1003
 800340c:	4293      	cmp	r3, r2
 800340e:	d817      	bhi.n	8003440 <HAL_RCC_OscConfig+0x1f4>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b40      	cmp	r3, #64	@ 0x40
 8003416:	d108      	bne.n	800342a <HAL_RCC_OscConfig+0x1de>
 8003418:	4b2e      	ldr	r3, [pc, #184]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003420:	4a2c      	ldr	r2, [pc, #176]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003426:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003428:	e07a      	b.n	8003520 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342a:	4b2a      	ldr	r3, [pc, #168]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	031b      	lsls	r3, r3, #12
 8003438:	4926      	ldr	r1, [pc, #152]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800343e:	e06f      	b.n	8003520 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003440:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	4921      	ldr	r1, [pc, #132]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003454:	e064      	b.n	8003520 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d047      	beq.n	80034ee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800345e:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0219 	bic.w	r2, r3, #25
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	491a      	ldr	r1, [pc, #104]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd fe38 	bl	80010e4 <HAL_GetTick>
 8003474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003478:	f7fd fe34 	bl	80010e4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e332      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800348a:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	f7fd fe31 	bl	80010fc <HAL_GetREVID>
 800349a:	4603      	mov	r3, r0
 800349c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d819      	bhi.n	80034d8 <HAL_RCC_OscConfig+0x28c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b40      	cmp	r3, #64	@ 0x40
 80034aa:	d108      	bne.n	80034be <HAL_RCC_OscConfig+0x272>
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80034b4:	4a07      	ldr	r2, [pc, #28]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80034b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ba:	6053      	str	r3, [r2, #4]
 80034bc:	e030      	b.n	8003520 <HAL_RCC_OscConfig+0x2d4>
 80034be:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	031b      	lsls	r3, r3, #12
 80034cc:	4901      	ldr	r1, [pc, #4]	@ (80034d4 <HAL_RCC_OscConfig+0x288>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
 80034d2:	e025      	b.n	8003520 <HAL_RCC_OscConfig+0x2d4>
 80034d4:	58024400 	.word	0x58024400
 80034d8:	4b9a      	ldr	r3, [pc, #616]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	4997      	ldr	r1, [pc, #604]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
 80034ec:	e018      	b.n	8003520 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ee:	4b95      	ldr	r3, [pc, #596]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a94      	ldr	r2, [pc, #592]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fd fdf3 	bl	80010e4 <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003502:	f7fd fdef 	bl	80010e4 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e2ed      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003514:	4b8b      	ldr	r3, [pc, #556]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a9 	beq.w	8003680 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800352e:	4b85      	ldr	r3, [pc, #532]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003536:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003538:	4b82      	ldr	r3, [pc, #520]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d007      	beq.n	8003554 <HAL_RCC_OscConfig+0x308>
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b18      	cmp	r3, #24
 8003548:	d13a      	bne.n	80035c0 <HAL_RCC_OscConfig+0x374>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d135      	bne.n	80035c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003554:	4b7b      	ldr	r3, [pc, #492]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_OscConfig+0x320>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b80      	cmp	r3, #128	@ 0x80
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e2c1      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800356c:	f7fd fdc6 	bl	80010fc <HAL_GetREVID>
 8003570:	4603      	mov	r3, r0
 8003572:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003576:	4293      	cmp	r3, r2
 8003578:	d817      	bhi.n	80035aa <HAL_RCC_OscConfig+0x35e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	2b20      	cmp	r3, #32
 8003580:	d108      	bne.n	8003594 <HAL_RCC_OscConfig+0x348>
 8003582:	4b70      	ldr	r3, [pc, #448]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800358a:	4a6e      	ldr	r2, [pc, #440]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 800358c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003590:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003592:	e075      	b.n	8003680 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003594:	4b6b      	ldr	r3, [pc, #428]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	069b      	lsls	r3, r3, #26
 80035a2:	4968      	ldr	r1, [pc, #416]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035a8:	e06a      	b.n	8003680 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035aa:	4b66      	ldr	r3, [pc, #408]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	4962      	ldr	r1, [pc, #392]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035be:	e05f      	b.n	8003680 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d042      	beq.n	800364e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80035ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fd fd86 	bl	80010e4 <HAL_GetTick>
 80035d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035dc:	f7fd fd82 	bl	80010e4 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e280      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035ee:	4b55      	ldr	r3, [pc, #340]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035fa:	f7fd fd7f 	bl	80010fc <HAL_GetREVID>
 80035fe:	4603      	mov	r3, r0
 8003600:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003604:	4293      	cmp	r3, r2
 8003606:	d817      	bhi.n	8003638 <HAL_RCC_OscConfig+0x3ec>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	2b20      	cmp	r3, #32
 800360e:	d108      	bne.n	8003622 <HAL_RCC_OscConfig+0x3d6>
 8003610:	4b4c      	ldr	r3, [pc, #304]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003618:	4a4a      	ldr	r2, [pc, #296]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 800361a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800361e:	6053      	str	r3, [r2, #4]
 8003620:	e02e      	b.n	8003680 <HAL_RCC_OscConfig+0x434>
 8003622:	4b48      	ldr	r3, [pc, #288]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	069b      	lsls	r3, r3, #26
 8003630:	4944      	ldr	r1, [pc, #272]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
 8003636:	e023      	b.n	8003680 <HAL_RCC_OscConfig+0x434>
 8003638:	4b42      	ldr	r3, [pc, #264]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	493f      	ldr	r1, [pc, #252]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003648:	4313      	orrs	r3, r2
 800364a:	60cb      	str	r3, [r1, #12]
 800364c:	e018      	b.n	8003680 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800364e:	4b3d      	ldr	r3, [pc, #244]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3c      	ldr	r2, [pc, #240]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fd fd43 	bl	80010e4 <HAL_GetTick>
 800365e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003662:	f7fd fd3f 	bl	80010e4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e23d      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003674:	4b33      	ldr	r3, [pc, #204]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d036      	beq.n	80036fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d019      	beq.n	80036c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003694:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003698:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fd fd20 	bl	80010e4 <HAL_GetTick>
 80036a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a8:	f7fd fd1c 	bl	80010e4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e21a      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036ba:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80036bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x45c>
 80036c6:	e018      	b.n	80036fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80036ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd fd06 	bl	80010e4 <HAL_GetTick>
 80036d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fd fd02 	bl	80010e4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e200      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036ee:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d039      	beq.n	800377a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01c      	beq.n	8003748 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a0c      	ldr	r2, [pc, #48]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003718:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800371a:	f7fd fce3 	bl	80010e4 <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003722:	f7fd fcdf 	bl	80010e4 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1dd      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003734:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <HAL_RCC_OscConfig+0x4f8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x4d6>
 8003740:	e01b      	b.n	800377a <HAL_RCC_OscConfig+0x52e>
 8003742:	bf00      	nop
 8003744:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003748:	4b9b      	ldr	r3, [pc, #620]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a9a      	ldr	r2, [pc, #616]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800374e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003752:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003754:	f7fd fcc6 	bl	80010e4 <HAL_GetTick>
 8003758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800375c:	f7fd fcc2 	bl	80010e4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e1c0      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800376e:	4b92      	ldr	r3, [pc, #584]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8081 	beq.w	800388a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003788:	4b8c      	ldr	r3, [pc, #560]	@ (80039bc <HAL_RCC_OscConfig+0x770>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a8b      	ldr	r2, [pc, #556]	@ (80039bc <HAL_RCC_OscConfig+0x770>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003794:	f7fd fca6 	bl	80010e4 <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fd fca2 	bl	80010e4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e1a0      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ae:	4b83      	ldr	r3, [pc, #524]	@ (80039bc <HAL_RCC_OscConfig+0x770>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x584>
 80037c2:	4b7d      	ldr	r3, [pc, #500]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c6:	4a7c      	ldr	r2, [pc, #496]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ce:	e02d      	b.n	800382c <HAL_RCC_OscConfig+0x5e0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10c      	bne.n	80037f2 <HAL_RCC_OscConfig+0x5a6>
 80037d8:	4b77      	ldr	r3, [pc, #476]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a76      	ldr	r2, [pc, #472]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e4:	4b74      	ldr	r3, [pc, #464]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	4a73      	ldr	r2, [pc, #460]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80037ea:	f023 0304 	bic.w	r3, r3, #4
 80037ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f0:	e01c      	b.n	800382c <HAL_RCC_OscConfig+0x5e0>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x5c8>
 80037fa:	4b6f      	ldr	r3, [pc, #444]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fe:	4a6e      	ldr	r2, [pc, #440]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	6713      	str	r3, [r2, #112]	@ 0x70
 8003806:	4b6c      	ldr	r3, [pc, #432]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380a:	4a6b      	ldr	r2, [pc, #428]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6713      	str	r3, [r2, #112]	@ 0x70
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0x5e0>
 8003814:	4b68      	ldr	r3, [pc, #416]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	4a67      	ldr	r2, [pc, #412]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003820:	4b65      	ldr	r3, [pc, #404]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003824:	4a64      	ldr	r2, [pc, #400]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003826:	f023 0304 	bic.w	r3, r3, #4
 800382a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d015      	beq.n	8003860 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd fc56 	bl	80010e4 <HAL_GetTick>
 8003838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fd fc52 	bl	80010e4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e14e      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003852:	4b59      	ldr	r3, [pc, #356]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ee      	beq.n	800383c <HAL_RCC_OscConfig+0x5f0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fd fc40 	bl	80010e4 <HAL_GetTick>
 8003864:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fd fc3c 	bl	80010e4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e138      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800387e:	4b4e      	ldr	r3, [pc, #312]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ee      	bne.n	8003868 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 812d 	beq.w	8003aee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003894:	4b48      	ldr	r3, [pc, #288]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800389c:	2b18      	cmp	r3, #24
 800389e:	f000 80bd 	beq.w	8003a1c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	f040 809e 	bne.w	80039e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ac:	4b42      	ldr	r3, [pc, #264]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a41      	ldr	r2, [pc, #260]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80038b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd fc14 	bl	80010e4 <HAL_GetTick>
 80038bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd fc10 	bl	80010e4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e10e      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038d2:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038de:	4b36      	ldr	r3, [pc, #216]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80038e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038e2:	4b37      	ldr	r3, [pc, #220]	@ (80039c0 <HAL_RCC_OscConfig+0x774>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4931      	ldr	r1, [pc, #196]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	3b01      	subs	r3, #1
 80038fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003906:	3b01      	subs	r3, #1
 8003908:	025b      	lsls	r3, r3, #9
 800390a:	b29b      	uxth	r3, r3
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003912:	3b01      	subs	r3, #1
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	3b01      	subs	r3, #1
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003928:	4923      	ldr	r1, [pc, #140]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800392e:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	4a21      	ldr	r2, [pc, #132]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800393a:	4b1f      	ldr	r3, [pc, #124]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800393c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800393e:	4b21      	ldr	r3, [pc, #132]	@ (80039c4 <HAL_RCC_OscConfig+0x778>)
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003946:	00d2      	lsls	r2, r2, #3
 8003948:	491b      	ldr	r1, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800394e:	4b1a      	ldr	r3, [pc, #104]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	f023 020c 	bic.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	4917      	ldr	r1, [pc, #92]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003960:	4b15      	ldr	r3, [pc, #84]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	f023 0202 	bic.w	r2, r3, #2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	4912      	ldr	r1, [pc, #72]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003972:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	4a10      	ldr	r2, [pc, #64]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397e:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003982:	4a0d      	ldr	r2, [pc, #52]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003996:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399a:	4a07      	ldr	r2, [pc, #28]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a2:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <HAL_RCC_OscConfig+0x76c>)
 80039a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fd fb99 	bl	80010e4 <HAL_GetTick>
 80039b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039b4:	e011      	b.n	80039da <HAL_RCC_OscConfig+0x78e>
 80039b6:	bf00      	nop
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58024800 	.word	0x58024800
 80039c0:	fffffc0c 	.word	0xfffffc0c
 80039c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd fb8c 	bl	80010e4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e08a      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039da:	4b47      	ldr	r3, [pc, #284]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x77c>
 80039e6:	e082      	b.n	8003aee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e8:	4b43      	ldr	r3, [pc, #268]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a42      	ldr	r2, [pc, #264]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 80039ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd fb76 	bl	80010e4 <HAL_GetTick>
 80039f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fd fb72 	bl	80010e4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e070      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x7b0>
 8003a1a:	e068      	b.n	8003aee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a1c:	4b36      	ldr	r3, [pc, #216]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a22:	4b35      	ldr	r3, [pc, #212]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d031      	beq.n	8003a94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f003 0203 	and.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d12a      	bne.n	8003a94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d122      	bne.n	8003a94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d11a      	bne.n	8003a94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0a5b      	lsrs	r3, r3, #9
 8003a62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d108      	bne.n	8003a94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	0e1b      	lsrs	r3, r3, #24
 8003a86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e02b      	b.n	8003af0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a98:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003aa2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d01f      	beq.n	8003aee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003aae:	4b12      	ldr	r3, [pc, #72]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	4a11      	ldr	r2, [pc, #68]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003aba:	f7fd fb13 	bl	80010e4 <HAL_GetTick>
 8003abe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ac0:	bf00      	nop
 8003ac2:	f7fd fb0f 	bl	80010e4 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d0f9      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ace:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <HAL_RCC_OscConfig+0x8b0>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ada:	00d2      	lsls	r2, r2, #3
 8003adc:	4906      	ldr	r1, [pc, #24]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ae2:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	4a04      	ldr	r2, [pc, #16]	@ (8003af8 <HAL_RCC_OscConfig+0x8ac>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3730      	adds	r7, #48	@ 0x30
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	58024400 	.word	0x58024400
 8003afc:	ffff0007 	.word	0xffff0007

08003b00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e19c      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b8a      	ldr	r3, [pc, #552]	@ (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d910      	bls.n	8003b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b87      	ldr	r3, [pc, #540]	@ (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 020f 	bic.w	r2, r3, #15
 8003b2a:	4985      	ldr	r1, [pc, #532]	@ (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b83      	ldr	r3, [pc, #524]	@ (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e184      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	4b7b      	ldr	r3, [pc, #492]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d908      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b60:	4b78      	ldr	r3, [pc, #480]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4975      	ldr	r1, [pc, #468]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d010      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	4b70      	ldr	r3, [pc, #448]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d908      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	496a      	ldr	r1, [pc, #424]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	4b64      	ldr	r3, [pc, #400]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d908      	bls.n	8003bce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bbc:	4b61      	ldr	r3, [pc, #388]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	495e      	ldr	r1, [pc, #376]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	4b59      	ldr	r3, [pc, #356]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d908      	bls.n	8003bfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bea:	4b56      	ldr	r3, [pc, #344]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4953      	ldr	r1, [pc, #332]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d908      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b4a      	ldr	r3, [pc, #296]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f023 020f 	bic.w	r2, r3, #15
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4947      	ldr	r1, [pc, #284]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d055      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c36:	4b43      	ldr	r3, [pc, #268]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4940      	ldr	r1, [pc, #256]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c50:	4b3c      	ldr	r3, [pc, #240]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d121      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0f6      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c68:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d115      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0ea      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c80:	4b30      	ldr	r3, [pc, #192]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0de      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c90:	4b2c      	ldr	r3, [pc, #176]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0d6      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ca0:	4b28      	ldr	r3, [pc, #160]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f023 0207 	bic.w	r2, r3, #7
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4925      	ldr	r1, [pc, #148]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb2:	f7fd fa17 	bl	80010e4 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cba:	f7fd fa13 	bl	80010e4 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0be      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d1eb      	bne.n	8003cba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d208      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfe:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f023 020f 	bic.w	r2, r3, #15
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	490e      	ldr	r1, [pc, #56]	@ (8003d44 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d10:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d214      	bcs.n	8003d48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 020f 	bic.w	r2, r3, #15
 8003d26:	4906      	ldr	r1, [pc, #24]	@ (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <HAL_RCC_ClockConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e086      	b.n	8003e4e <HAL_RCC_ClockConfig+0x34e>
 8003d40:	52002000 	.word	0x52002000
 8003d44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d010      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	4b3f      	ldr	r3, [pc, #252]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d208      	bcs.n	8003d76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d64:	4b3c      	ldr	r3, [pc, #240]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	4939      	ldr	r1, [pc, #228]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d010      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	4b34      	ldr	r3, [pc, #208]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d208      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d92:	4b31      	ldr	r3, [pc, #196]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	492e      	ldr	r1, [pc, #184]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d010      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699a      	ldr	r2, [r3, #24]
 8003db4:	4b28      	ldr	r3, [pc, #160]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d208      	bcs.n	8003dd2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4922      	ldr	r1, [pc, #136]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d010      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d208      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003dee:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	4917      	ldr	r1, [pc, #92]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e00:	f000 f834 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	4912      	ldr	r1, [pc, #72]	@ (8003e5c <HAL_RCC_ClockConfig+0x35c>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e58 <HAL_RCC_ClockConfig+0x358>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	4a0d      	ldr	r2, [pc, #52]	@ (8003e5c <HAL_RCC_ClockConfig+0x35c>)
 8003e28:	5cd3      	ldrb	r3, [r2, r3]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <HAL_RCC_ClockConfig+0x360>)
 8003e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e38:	4a0a      	ldr	r2, [pc, #40]	@ (8003e64 <HAL_RCC_ClockConfig+0x364>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <HAL_RCC_ClockConfig+0x368>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd f904 	bl	8001050 <HAL_InitTick>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	08017ba0 	.word	0x08017ba0
 8003e60:	24000004 	.word	0x24000004
 8003e64:	24000000 	.word	0x24000000
 8003e68:	24000008 	.word	0x24000008

08003e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	@ 0x24
 8003e70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e72:	4bb3      	ldr	r3, [pc, #716]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e7a:	2b18      	cmp	r3, #24
 8003e7c:	f200 8155 	bhi.w	800412a <HAL_RCC_GetSysClockFreq+0x2be>
 8003e80:	a201      	add	r2, pc, #4	@ (adr r2, 8003e88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003eed 	.word	0x08003eed
 8003e8c:	0800412b 	.word	0x0800412b
 8003e90:	0800412b 	.word	0x0800412b
 8003e94:	0800412b 	.word	0x0800412b
 8003e98:	0800412b 	.word	0x0800412b
 8003e9c:	0800412b 	.word	0x0800412b
 8003ea0:	0800412b 	.word	0x0800412b
 8003ea4:	0800412b 	.word	0x0800412b
 8003ea8:	08003f13 	.word	0x08003f13
 8003eac:	0800412b 	.word	0x0800412b
 8003eb0:	0800412b 	.word	0x0800412b
 8003eb4:	0800412b 	.word	0x0800412b
 8003eb8:	0800412b 	.word	0x0800412b
 8003ebc:	0800412b 	.word	0x0800412b
 8003ec0:	0800412b 	.word	0x0800412b
 8003ec4:	0800412b 	.word	0x0800412b
 8003ec8:	08003f19 	.word	0x08003f19
 8003ecc:	0800412b 	.word	0x0800412b
 8003ed0:	0800412b 	.word	0x0800412b
 8003ed4:	0800412b 	.word	0x0800412b
 8003ed8:	0800412b 	.word	0x0800412b
 8003edc:	0800412b 	.word	0x0800412b
 8003ee0:	0800412b 	.word	0x0800412b
 8003ee4:	0800412b 	.word	0x0800412b
 8003ee8:	08003f1f 	.word	0x08003f1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eec:	4b94      	ldr	r3, [pc, #592]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ef8:	4b91      	ldr	r3, [pc, #580]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	4a90      	ldr	r2, [pc, #576]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003f0a:	e111      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f0e:	61bb      	str	r3, [r7, #24]
      break;
 8003f10:	e10e      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003f12:	4b8d      	ldr	r3, [pc, #564]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f14:	61bb      	str	r3, [r7, #24]
      break;
 8003f16:	e10b      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003f18:	4b8c      	ldr	r3, [pc, #560]	@ (800414c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f1a:	61bb      	str	r3, [r7, #24]
      break;
 8003f1c:	e108      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f1e:	4b88      	ldr	r3, [pc, #544]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f28:	4b85      	ldr	r3, [pc, #532]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f34:	4b82      	ldr	r3, [pc, #520]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f3e:	4b80      	ldr	r3, [pc, #512]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80e1 	beq.w	8004124 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f000 8083 	beq.w	8004070 <HAL_RCC_GetSysClockFreq+0x204>
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	f200 80a1 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x114>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d056      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f7e:	e099      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f80:	4b6f      	ldr	r3, [pc, #444]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02d      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	4a6b      	ldr	r2, [pc, #428]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b62      	ldr	r3, [pc, #392]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003fe6:	e087      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004154 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b51      	ldr	r3, [pc, #324]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a02 	vldr	s12, [r7, #8]
 800400e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800402a:	e065      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004158 <HAL_RCC_GetSysClockFreq+0x2ec>
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b40      	ldr	r3, [pc, #256]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004052:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800406e:	e043      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800415c <HAL_RCC_GetSysClockFreq+0x2f0>
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	4b2f      	ldr	r3, [pc, #188]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004092:	ed97 6a02 	vldr	s12, [r7, #8]
 8004096:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 800409a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040b2:	e021      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004158 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004150 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	0a5b      	lsrs	r3, r3, #9
 80040fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004102:	3301      	adds	r3, #1
 8004104:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004110:	edd7 6a07 	vldr	s13, [r7, #28]
 8004114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411c:	ee17 3a90 	vmov	r3, s15
 8004120:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004122:	e005      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
      break;
 8004128:	e002      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800412a:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800412c:	61bb      	str	r3, [r7, #24]
      break;
 800412e:	bf00      	nop
  }

  return sysclockfreq;
 8004130:	69bb      	ldr	r3, [r7, #24]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	@ 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	58024400 	.word	0x58024400
 8004144:	03d09000 	.word	0x03d09000
 8004148:	003d0900 	.word	0x003d0900
 800414c:	017d7840 	.word	0x017d7840
 8004150:	46000000 	.word	0x46000000
 8004154:	4c742400 	.word	0x4c742400
 8004158:	4a742400 	.word	0x4a742400
 800415c:	4bbebc20 	.word	0x4bbebc20

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004166:	f7ff fe81 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 800416a:	4602      	mov	r2, r0
 800416c:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	490f      	ldr	r1, [pc, #60]	@ (80041b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004178:	5ccb      	ldrb	r3, [r1, r3]
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004184:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	4a09      	ldr	r2, [pc, #36]	@ (80041b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800418e:	5cd3      	ldrb	r3, [r2, r3]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	fa22 f303 	lsr.w	r3, r2, r3
 800419a:	4a07      	ldr	r2, [pc, #28]	@ (80041b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800419c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800419e:	4a07      	ldr	r2, [pc, #28]	@ (80041bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041a4:	4b04      	ldr	r3, [pc, #16]	@ (80041b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	58024400 	.word	0x58024400
 80041b4:	08017ba0 	.word	0x08017ba0
 80041b8:	24000004 	.word	0x24000004
 80041bc:	24000000 	.word	0x24000000

080041c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041c4:	f7ff ffcc 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4904      	ldr	r1, [pc, #16]	@ (80041e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	58024400 	.word	0x58024400
 80041e8:	08017ba0 	.word	0x08017ba0

080041ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80041f0:	f7ff ffb6 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4904      	ldr	r1, [pc, #16]	@ (8004214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	58024400 	.word	0x58024400
 8004214:	08017ba0 	.word	0x08017ba0

08004218 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800421c:	b0ca      	sub	sp, #296	@ 0x128
 800421e:	af00      	add	r7, sp, #0
 8004220:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004224:	2300      	movs	r3, #0
 8004226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800423c:	2500      	movs	r5, #0
 800423e:	ea54 0305 	orrs.w	r3, r4, r5
 8004242:	d049      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800424a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800424e:	d02f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004250:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004254:	d828      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004256:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800425a:	d01a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800425c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004260:	d822      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800426a:	d007      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800426c:	e01c      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426e:	4bb8      	ldr	r3, [pc, #736]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	4ab7      	ldr	r2, [pc, #732]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004278:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800427a:	e01a      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004280:	3308      	adds	r3, #8
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f001 fc8f 	bl	8005ba8 <RCCEx_PLL2_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004290:	e00f      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	3328      	adds	r3, #40	@ 0x28
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f001 fd36 	bl	8005d0c <RCCEx_PLL3_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042a6:	e004      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80042b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042ba:	4ba5      	ldr	r3, [pc, #660]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c8:	4aa1      	ldr	r2, [pc, #644]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042ca:	430b      	orrs	r3, r1
 80042cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80042ce:	e003      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80042e4:	f04f 0900 	mov.w	r9, #0
 80042e8:	ea58 0309 	orrs.w	r3, r8, r9
 80042ec:	d047      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d82a      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80042f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004300 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004315 	.word	0x08004315
 8004304:	08004323 	.word	0x08004323
 8004308:	08004339 	.word	0x08004339
 800430c:	08004357 	.word	0x08004357
 8004310:	08004357 	.word	0x08004357
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004314:	4b8e      	ldr	r3, [pc, #568]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	4a8d      	ldr	r2, [pc, #564]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800431a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004320:	e01a      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	3308      	adds	r3, #8
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fc3c 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004336:	e00f      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433c:	3328      	adds	r3, #40	@ 0x28
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f001 fce3 	bl	8005d0c <RCCEx_PLL3_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800434c:	e004      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004354:	e000      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004360:	4b7b      	ldr	r3, [pc, #492]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004364:	f023 0107 	bic.w	r1, r3, #7
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	4a78      	ldr	r2, [pc, #480]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004370:	430b      	orrs	r3, r1
 8004372:	6513      	str	r3, [r2, #80]	@ 0x50
 8004374:	e003      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800437a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800438a:	f04f 0b00 	mov.w	fp, #0
 800438e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004392:	d04c      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439e:	d030      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80043a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a4:	d829      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80043a8:	d02d      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80043aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80043ac:	d825      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043ae:	2b80      	cmp	r3, #128	@ 0x80
 80043b0:	d018      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d821      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d007      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80043be:	e01c      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c0:	4b63      	ldr	r3, [pc, #396]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	4a62      	ldr	r2, [pc, #392]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043cc:	e01c      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	3308      	adds	r3, #8
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 fbe6 	bl	8005ba8 <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043e2:	e011      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	3328      	adds	r3, #40	@ 0x28
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 fc8d 	bl	8005d0c <RCCEx_PLL3_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043f8:	e006      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004400:	e002      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004410:	4b4f      	ldr	r3, [pc, #316]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004414:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441e:	4a4c      	ldr	r2, [pc, #304]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004420:	430b      	orrs	r3, r1
 8004422:	6513      	str	r3, [r2, #80]	@ 0x50
 8004424:	e003      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800443a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004444:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004448:	460b      	mov	r3, r1
 800444a:	4313      	orrs	r3, r2
 800444c:	d053      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004456:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800445a:	d035      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800445c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004460:	d82e      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004462:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004466:	d031      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004468:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800446c:	d828      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800446e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004472:	d01a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004478:	d822      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800447e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004482:	d007      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004484:	e01c      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004486:	4b32      	ldr	r3, [pc, #200]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	4a31      	ldr	r2, [pc, #196]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800448c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004492:	e01c      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	3308      	adds	r3, #8
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f001 fb83 	bl	8005ba8 <RCCEx_PLL2_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044a8:	e011      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	3328      	adds	r3, #40	@ 0x28
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 fc2a 	bl	8005d0c <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044c6:	e002      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80044c8:	bf00      	nop
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80044cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80044d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ec:	e003      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004502:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800450c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004510:	460b      	mov	r3, r1
 8004512:	4313      	orrs	r3, r2
 8004514:	d056      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800451e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004522:	d038      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004524:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004528:	d831      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800452a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800452e:	d034      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004530:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004534:	d82b      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004536:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800453a:	d01d      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800453c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004540:	d825      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004546:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800454c:	e01f      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800454e:	bf00      	nop
 8004550:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004554:	4ba2      	ldr	r3, [pc, #648]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	4aa1      	ldr	r2, [pc, #644]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800455a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800455e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004560:	e01c      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	3308      	adds	r3, #8
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f001 fb1c 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004576:	e011      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	3328      	adds	r3, #40	@ 0x28
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fbc3 	bl	8005d0c <RCCEx_PLL3_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800458c:	e006      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004594:	e002      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800459a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80045a4:	4b8e      	ldr	r3, [pc, #568]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80045b4:	4a8a      	ldr	r2, [pc, #552]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045b6:	430b      	orrs	r3, r1
 80045b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80045ba:	e003      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80045d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80045da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d03a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ea:	2b30      	cmp	r3, #48	@ 0x30
 80045ec:	d01f      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80045ee:	2b30      	cmp	r3, #48	@ 0x30
 80045f0:	d819      	bhi.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d00c      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d815      	bhi.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d019      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d111      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004602:	4b77      	ldr	r3, [pc, #476]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	4a76      	ldr	r2, [pc, #472]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800460e:	e011      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004614:	3308      	adds	r3, #8
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fac5 	bl	8005ba8 <RCCEx_PLL2_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004624:	e006      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800462c:	e002      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800463c:	4b68      	ldr	r3, [pc, #416]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800463e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004640:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464a:	4a65      	ldr	r2, [pc, #404]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800464c:	430b      	orrs	r3, r1
 800464e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004650:	e003      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004666:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800466a:	2300      	movs	r3, #0
 800466c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004670:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004674:	460b      	mov	r3, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	d051      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004684:	d035      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004686:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800468a:	d82e      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800468c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004690:	d031      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004692:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004696:	d828      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800469c:	d01a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800469e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a2:	d822      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80046a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ac:	d007      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80046ae:	e01c      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b0:	4b4b      	ldr	r3, [pc, #300]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	4a4a      	ldr	r2, [pc, #296]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046bc:	e01c      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	3308      	adds	r3, #8
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 fa6e 	bl	8005ba8 <RCCEx_PLL2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046d2:	e011      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	3328      	adds	r3, #40	@ 0x28
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 fb15 	bl	8005d0c <RCCEx_PLL3_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80046e8:	e006      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80046f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004700:	4b37      	ldr	r3, [pc, #220]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004704:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470e:	4a34      	ldr	r2, [pc, #208]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004710:	430b      	orrs	r3, r1
 8004712:	6513      	str	r3, [r2, #80]	@ 0x50
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800472a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004734:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d056      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004748:	d033      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800474a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800474e:	d82c      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004750:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004754:	d02f      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004756:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800475a:	d826      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800475c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004760:	d02b      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004762:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004766:	d820      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800476c:	d012      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800476e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004772:	d81a      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d022      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800477c:	d115      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004782:	3308      	adds	r3, #8
 8004784:	2101      	movs	r1, #1
 8004786:	4618      	mov	r0, r3
 8004788:	f001 fa0e 	bl	8005ba8 <RCCEx_PLL2_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004792:	e015      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	3328      	adds	r3, #40	@ 0x28
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f001 fab5 	bl	8005d0c <RCCEx_PLL3_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80047a8:	e00a      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047b0:	e006      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047b2:	bf00      	nop
 80047b4:	e004      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047b6:	bf00      	nop
 80047b8:	e002      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80047be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047c8:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d6:	4a02      	ldr	r2, [pc, #8]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	6513      	str	r3, [r2, #80]	@ 0x50
 80047dc:	e006      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80047de:	bf00      	nop
 80047e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80047f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004802:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004806:	460b      	mov	r3, r1
 8004808:	4313      	orrs	r3, r2
 800480a:	d055      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004818:	d033      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800481a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800481e:	d82c      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004824:	d02f      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800482a:	d826      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800482c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004830:	d02b      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004832:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004836:	d820      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800483c:	d012      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800483e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004842:	d81a      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d022      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800484c:	d115      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	3308      	adds	r3, #8
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f9a6 	bl	8005ba8 <RCCEx_PLL2_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004862:	e015      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	3328      	adds	r3, #40	@ 0x28
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f001 fa4d 	bl	8005d0c <RCCEx_PLL3_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004878:	e00a      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004880:	e006      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004882:	bf00      	nop
 8004884:	e004      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004886:	bf00      	nop
 8004888:	e002      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800488a:	bf00      	nop
 800488c:	e000      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800488e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004898:	4ba3      	ldr	r3, [pc, #652]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800489a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80048a8:	4a9f      	ldr	r2, [pc, #636]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048aa:	430b      	orrs	r3, r1
 80048ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80048c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048c8:	2300      	movs	r3, #0
 80048ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80048ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048d2:	460b      	mov	r3, r1
 80048d4:	4313      	orrs	r3, r2
 80048d6:	d037      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e2:	d00e      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80048e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e8:	d816      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d018      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80048ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f2:	d111      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	4a8b      	ldr	r2, [pc, #556]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004900:	e00f      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	3308      	adds	r3, #8
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f001 f94c 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004916:	e004      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800492a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800492c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004938:	4a7b      	ldr	r2, [pc, #492]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800493a:	430b      	orrs	r3, r1
 800493c:	6513      	str	r3, [r2, #80]	@ 0x50
 800493e:	e003      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800495e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004962:	460b      	mov	r3, r1
 8004964:	4313      	orrs	r3, r2
 8004966:	d039      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496e:	2b03      	cmp	r3, #3
 8004970:	d81c      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004972:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049b5 	.word	0x080049b5
 800497c:	08004989 	.word	0x08004989
 8004980:	08004997 	.word	0x08004997
 8004984:	080049b5 	.word	0x080049b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004988:	4b67      	ldr	r3, [pc, #412]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	4a66      	ldr	r2, [pc, #408]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800498e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004994:	e00f      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499a:	3308      	adds	r3, #8
 800499c:	2102      	movs	r1, #2
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 f902 	bl	8005ba8 <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80049aa:	e004      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80049b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049be:	4b5a      	ldr	r3, [pc, #360]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c2:	f023 0103 	bic.w	r1, r3, #3
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049cc:	4a56      	ldr	r2, [pc, #344]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049ce:	430b      	orrs	r3, r1
 80049d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049d2:	e003      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80049e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80049f6:	460b      	mov	r3, r1
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f000 809f 	beq.w	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fe:	4b4b      	ldr	r3, [pc, #300]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a4a      	ldr	r2, [pc, #296]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a0a:	f7fc fb6b 	bl	80010e4 <HAL_GetTick>
 8004a0e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a12:	e00b      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a14:	f7fc fb66 	bl	80010e4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b64      	cmp	r3, #100	@ 0x64
 8004a22:	d903      	bls.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a2a:	e005      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ed      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d179      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a40:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a4c:	4053      	eors	r3, r2
 8004a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d015      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a56:	4b34      	ldr	r3, [pc, #208]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a62:	4b31      	ldr	r3, [pc, #196]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a66:	4a30      	ldr	r2, [pc, #192]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a72:	4a2d      	ldr	r2, [pc, #180]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a78:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a80:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a8e:	d118      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fc fb28 	bl	80010e4 <HAL_GetTick>
 8004a94:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a98:	e00d      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fc fb23 	bl	80010e4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004aa4:	1ad2      	subs	r2, r2, r3
 8004aa6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d903      	bls.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004ab4:	e005      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0eb      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d129      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ada:	d10e      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004aec:	091a      	lsrs	r2, r3, #4
 8004aee:	4b10      	ldr	r3, [pc, #64]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	4a0d      	ldr	r2, [pc, #52]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af4:	430b      	orrs	r3, r1
 8004af6:	6113      	str	r3, [r2, #16]
 8004af8:	e005      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004afa:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	4a0a      	ldr	r2, [pc, #40]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b04:	6113      	str	r3, [r2, #16]
 8004b06:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b08:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b16:	4a04      	ldr	r2, [pc, #16]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b1c:	e00e      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004b26:	e009      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	58024800 	.word	0x58024800
 8004b30:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f002 0301 	and.w	r3, r2, #1
 8004b48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f000 8089 	beq.w	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b64:	2b28      	cmp	r3, #40	@ 0x28
 8004b66:	d86b      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004b68:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004c49 	.word	0x08004c49
 8004b74:	08004c41 	.word	0x08004c41
 8004b78:	08004c41 	.word	0x08004c41
 8004b7c:	08004c41 	.word	0x08004c41
 8004b80:	08004c41 	.word	0x08004c41
 8004b84:	08004c41 	.word	0x08004c41
 8004b88:	08004c41 	.word	0x08004c41
 8004b8c:	08004c41 	.word	0x08004c41
 8004b90:	08004c15 	.word	0x08004c15
 8004b94:	08004c41 	.word	0x08004c41
 8004b98:	08004c41 	.word	0x08004c41
 8004b9c:	08004c41 	.word	0x08004c41
 8004ba0:	08004c41 	.word	0x08004c41
 8004ba4:	08004c41 	.word	0x08004c41
 8004ba8:	08004c41 	.word	0x08004c41
 8004bac:	08004c41 	.word	0x08004c41
 8004bb0:	08004c2b 	.word	0x08004c2b
 8004bb4:	08004c41 	.word	0x08004c41
 8004bb8:	08004c41 	.word	0x08004c41
 8004bbc:	08004c41 	.word	0x08004c41
 8004bc0:	08004c41 	.word	0x08004c41
 8004bc4:	08004c41 	.word	0x08004c41
 8004bc8:	08004c41 	.word	0x08004c41
 8004bcc:	08004c41 	.word	0x08004c41
 8004bd0:	08004c49 	.word	0x08004c49
 8004bd4:	08004c41 	.word	0x08004c41
 8004bd8:	08004c41 	.word	0x08004c41
 8004bdc:	08004c41 	.word	0x08004c41
 8004be0:	08004c41 	.word	0x08004c41
 8004be4:	08004c41 	.word	0x08004c41
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c41 	.word	0x08004c41
 8004bf0:	08004c49 	.word	0x08004c49
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c41 	.word	0x08004c41
 8004bfc:	08004c41 	.word	0x08004c41
 8004c00:	08004c41 	.word	0x08004c41
 8004c04:	08004c41 	.word	0x08004c41
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c49 	.word	0x08004c49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	3308      	adds	r3, #8
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 ffc3 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c28:	e00f      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2e:	3328      	adds	r3, #40	@ 0x28
 8004c30:	2101      	movs	r1, #1
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 f86a 	bl	8005d0c <RCCEx_PLL3_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c3e:	e004      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c46:	e000      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c52:	4bbf      	ldr	r3, [pc, #764]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c60:	4abb      	ldr	r2, [pc, #748]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c62:	430b      	orrs	r3, r1
 8004c64:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c66:	e003      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f002 0302 	and.w	r3, r2, #2
 8004c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c80:	2300      	movs	r3, #0
 8004c82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	d041      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d824      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004ced 	.word	0x08004ced
 8004ca4:	08004cb9 	.word	0x08004cb9
 8004ca8:	08004ccf 	.word	0x08004ccf
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
 8004cb4:	08004ced 	.word	0x08004ced
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 ff71 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ccc:	e00f      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	3328      	adds	r3, #40	@ 0x28
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 f818 	bl	8005d0c <RCCEx_PLL3_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ce2:	e004      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cea:	e000      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004cf6:	4b96      	ldr	r3, [pc, #600]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfa:	f023 0107 	bic.w	r1, r3, #7
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d04:	4a92      	ldr	r2, [pc, #584]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d06:	430b      	orrs	r3, r1
 8004d08:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d0a:	e003      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f002 0304 	and.w	r3, r2, #4
 8004d20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4313      	orrs	r3, r2
 8004d32:	d044      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d3c:	2b05      	cmp	r3, #5
 8004d3e:	d825      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004d40:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d95 	.word	0x08004d95
 8004d4c:	08004d61 	.word	0x08004d61
 8004d50:	08004d77 	.word	0x08004d77
 8004d54:	08004d95 	.word	0x08004d95
 8004d58:	08004d95 	.word	0x08004d95
 8004d5c:	08004d95 	.word	0x08004d95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d64:	3308      	adds	r3, #8
 8004d66:	2101      	movs	r1, #1
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 ff1d 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d74:	e00f      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7a:	3328      	adds	r3, #40	@ 0x28
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ffc4 	bl	8005d0c <RCCEx_PLL3_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d8a:	e004      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d92:	e000      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10b      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da2:	f023 0107 	bic.w	r1, r3, #7
 8004da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dae:	4a68      	ldr	r2, [pc, #416]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004db4:	e003      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f002 0320 	and.w	r3, r2, #32
 8004dca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	d055      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dea:	d033      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004df0:	d82c      	bhi.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df6:	d02f      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfc:	d826      	bhi.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e02:	d02b      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004e04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e08:	d820      	bhi.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e0e:	d012      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e14:	d81a      	bhi.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d022      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e1e:	d115      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e24:	3308      	adds	r3, #8
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 febd 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e34:	e015      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3a:	3328      	adds	r3, #40	@ 0x28
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 ff64 	bl	8005d0c <RCCEx_PLL3_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e52:	e006      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e54:	bf00      	nop
 8004e56:	e004      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e58:	bf00      	nop
 8004e5a:	e002      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e5c:	bf00      	nop
 8004e5e:	e000      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e6a:	4b39      	ldr	r3, [pc, #228]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	4a35      	ldr	r2, [pc, #212]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e80:	e003      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ea0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	d058      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004eb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004eb6:	d033      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004eb8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004ebc:	d82c      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec2:	d02f      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec8:	d826      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004eca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ece:	d02b      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ed4:	d820      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eda:	d012      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee0:	d81a      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d022      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d115      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fe57 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f00:	e015      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f06:	3328      	adds	r3, #40	@ 0x28
 8004f08:	2102      	movs	r1, #2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fefe 	bl	8005d0c <RCCEx_PLL3_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f16:	e00a      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f1e:	e006      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f20:	bf00      	nop
 8004f22:	e004      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f24:	bf00      	nop
 8004f26:	e002      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10e      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f36:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f46:	4a02      	ldr	r2, [pc, #8]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f4c:	e006      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004f4e:	bf00      	nop
 8004f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004f76:	460b      	mov	r3, r1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	d055      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004f88:	d033      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004f8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004f8e:	d82c      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f94:	d02f      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f9a:	d826      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004f9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004fa0:	d02b      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004fa2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004fa6:	d820      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fac:	d012      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb2:	d81a      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d022      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fbc:	d115      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fdee 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004fd2:	e015      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd8:	3328      	adds	r3, #40	@ 0x28
 8004fda:	2102      	movs	r1, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fe95 	bl	8005d0c <RCCEx_PLL3_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004fe8:	e00a      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ff0:	e006      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ff2:	bf00      	nop
 8004ff4:	e004      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ff6:	bf00      	nop
 8004ff8:	e002      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005008:	4ba1      	ldr	r3, [pc, #644]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800500a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005018:	4a9d      	ldr	r2, [pc, #628]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800501a:	430b      	orrs	r3, r1
 800501c:	6593      	str	r3, [r2, #88]	@ 0x58
 800501e:	e003      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f002 0308 	and.w	r3, r2, #8
 8005034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005038:	2300      	movs	r3, #0
 800503a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800503e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005042:	460b      	mov	r3, r1
 8005044:	4313      	orrs	r3, r2
 8005046:	d01e      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005054:	d10c      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505a:	3328      	adds	r3, #40	@ 0x28
 800505c:	2102      	movs	r1, #2
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fe54 	bl	8005d0c <RCCEx_PLL3_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005070:	4b87      	ldr	r3, [pc, #540]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005074:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005080:	4a83      	ldr	r2, [pc, #524]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005082:	430b      	orrs	r3, r1
 8005084:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f002 0310 	and.w	r3, r2, #16
 8005092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005096:	2300      	movs	r3, #0
 8005098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800509c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80050a0:	460b      	mov	r3, r1
 80050a2:	4313      	orrs	r3, r2
 80050a4:	d01e      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050b2:	d10c      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b8:	3328      	adds	r3, #40	@ 0x28
 80050ba:	2102      	movs	r1, #2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fe25 	bl	8005d0c <RCCEx_PLL3_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050ce:	4b70      	ldr	r3, [pc, #448]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050de:	4a6c      	ldr	r2, [pc, #432]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80050f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80050fe:	460b      	mov	r3, r1
 8005100:	4313      	orrs	r3, r2
 8005102:	d03e      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005108:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800510c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005110:	d022      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005116:	d81b      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005120:	d00b      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005122:	e015      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	3308      	adds	r3, #8
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fd3b 	bl	8005ba8 <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005138:	e00f      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	3328      	adds	r3, #40	@ 0x28
 8005140:	2102      	movs	r1, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fde2 	bl	8005d0c <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800514e:	e004      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005156:	e000      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005162:	4b4b      	ldr	r3, [pc, #300]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005166:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005172:	4a47      	ldr	r2, [pc, #284]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005174:	430b      	orrs	r3, r1
 8005176:	6593      	str	r3, [r2, #88]	@ 0x58
 8005178:	e003      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800517e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800518e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005190:	2300      	movs	r3, #0
 8005192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005194:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005198:	460b      	mov	r3, r1
 800519a:	4313      	orrs	r3, r2
 800519c:	d03b      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051aa:	d01f      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80051ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051b0:	d818      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80051b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b6:	d003      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80051b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051bc:	d007      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80051be:	e011      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c0:	4b33      	ldr	r3, [pc, #204]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	4a32      	ldr	r2, [pc, #200]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80051cc:	e00f      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d2:	3328      	adds	r3, #40	@ 0x28
 80051d4:	2101      	movs	r1, #1
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fd98 	bl	8005d0c <RCCEx_PLL3_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80051e2:	e004      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051ea:	e000      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80051ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f6:	4b26      	ldr	r3, [pc, #152]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	4a22      	ldr	r2, [pc, #136]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005208:	430b      	orrs	r3, r1
 800520a:	6553      	str	r3, [r2, #84]	@ 0x54
 800520c:	e003      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005212:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005222:	673b      	str	r3, [r7, #112]	@ 0x70
 8005224:	2300      	movs	r3, #0
 8005226:	677b      	str	r3, [r7, #116]	@ 0x74
 8005228:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800522c:	460b      	mov	r3, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	d034      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005240:	d007      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005242:	e011      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005244:	4b12      	ldr	r3, [pc, #72]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	4a11      	ldr	r2, [pc, #68]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800524a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800524e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005250:	e00e      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005256:	3308      	adds	r3, #8
 8005258:	2102      	movs	r1, #2
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fca4 	bl	8005ba8 <RCCEx_PLL2_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005266:	e003      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800526e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10d      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800527a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005286:	4a02      	ldr	r2, [pc, #8]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005288:	430b      	orrs	r3, r1
 800528a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800528c:	e006      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800528e:	bf00      	nop
 8005290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800529c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80052a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052aa:	2300      	movs	r3, #0
 80052ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80052b2:	460b      	mov	r3, r1
 80052b4:	4313      	orrs	r3, r2
 80052b6:	d00c      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052bc:	3328      	adds	r3, #40	@ 0x28
 80052be:	2102      	movs	r1, #2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fd23 	bl	8005d0c <RCCEx_PLL3_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80052de:	663b      	str	r3, [r7, #96]	@ 0x60
 80052e0:	2300      	movs	r3, #0
 80052e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80052e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80052e8:	460b      	mov	r3, r1
 80052ea:	4313      	orrs	r3, r2
 80052ec:	d038      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052fa:	d018      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80052fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005300:	d811      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005306:	d014      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800530c:	d80b      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d011      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005316:	d106      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005318:	4bc3      	ldr	r3, [pc, #780]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800531a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531c:	4ac2      	ldr	r2, [pc, #776]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800531e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005324:	e008      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800532c:	e004      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800532e:	bf00      	nop
 8005330:	e002      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005332:	bf00      	nop
 8005334:	e000      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005340:	4bb9      	ldr	r3, [pc, #740]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005344:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005350:	4ab5      	ldr	r2, [pc, #724]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005352:	430b      	orrs	r3, r1
 8005354:	6553      	str	r3, [r2, #84]	@ 0x54
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800535c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800536c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800536e:	2300      	movs	r3, #0
 8005370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005372:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800537c:	4baa      	ldr	r3, [pc, #680]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800537e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005380:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800538a:	4aa7      	ldr	r2, [pc, #668]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800538c:	430b      	orrs	r3, r1
 800538e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800539c:	653b      	str	r3, [r7, #80]	@ 0x50
 800539e:	2300      	movs	r3, #0
 80053a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80053a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053ac:	4b9e      	ldr	r3, [pc, #632]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80053b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80053bc:	4a9a      	ldr	r2, [pc, #616]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053be:	430b      	orrs	r3, r1
 80053c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80053ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d0:	2300      	movs	r3, #0
 80053d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053de:	4b92      	ldr	r3, [pc, #584]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ec:	4a8e      	ldr	r2, [pc, #568]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ee:	430b      	orrs	r3, r1
 80053f0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80053fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005400:	2300      	movs	r3, #0
 8005402:	647b      	str	r3, [r7, #68]	@ 0x44
 8005404:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005408:	460b      	mov	r3, r1
 800540a:	4313      	orrs	r3, r2
 800540c:	d00e      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800540e:	4b86      	ldr	r3, [pc, #536]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	4a85      	ldr	r2, [pc, #532]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005414:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005418:	6113      	str	r3, [r2, #16]
 800541a:	4b83      	ldr	r3, [pc, #524]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800541c:	6919      	ldr	r1, [r3, #16]
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005426:	4a80      	ldr	r2, [pc, #512]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005428:	430b      	orrs	r3, r1
 800542a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005438:	63bb      	str	r3, [r7, #56]	@ 0x38
 800543a:	2300      	movs	r3, #0
 800543c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800543e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005448:	4b77      	ldr	r3, [pc, #476]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800544a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005456:	4a74      	ldr	r2, [pc, #464]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005458:	430b      	orrs	r3, r1
 800545a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005468:	633b      	str	r3, [r7, #48]	@ 0x30
 800546a:	2300      	movs	r3, #0
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
 800546e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005472:	460b      	mov	r3, r1
 8005474:	4313      	orrs	r3, r2
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005478:	4b6b      	ldr	r3, [pc, #428]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800547a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005488:	4a67      	ldr	r2, [pc, #412]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800548a:	430b      	orrs	r3, r1
 800548c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	2100      	movs	r1, #0
 8005498:	62b9      	str	r1, [r7, #40]	@ 0x28
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d011      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ae:	3308      	adds	r3, #8
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fb78 	bl	8005ba8 <RCCEx_PLL2_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80054be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	2100      	movs	r1, #0
 80054d8:	6239      	str	r1, [r7, #32]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054e4:	460b      	mov	r3, r1
 80054e6:	4313      	orrs	r3, r2
 80054e8:	d011      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ee:	3308      	adds	r3, #8
 80054f0:	2101      	movs	r1, #1
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fb58 	bl	8005ba8 <RCCEx_PLL2_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80054fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800550a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	2100      	movs	r1, #0
 8005518:	61b9      	str	r1, [r7, #24]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005524:	460b      	mov	r3, r1
 8005526:	4313      	orrs	r3, r2
 8005528:	d011      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552e:	3308      	adds	r3, #8
 8005530:	2102      	movs	r1, #2
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fb38 	bl	8005ba8 <RCCEx_PLL2_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800553e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	2100      	movs	r1, #0
 8005558:	6139      	str	r1, [r7, #16]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005564:	460b      	mov	r3, r1
 8005566:	4313      	orrs	r3, r2
 8005568:	d011      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	3328      	adds	r3, #40	@ 0x28
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fbca 	bl	8005d0c <RCCEx_PLL3_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800557e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800558a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	2100      	movs	r1, #0
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055a4:	460b      	mov	r3, r1
 80055a6:	4313      	orrs	r3, r2
 80055a8:	d011      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	3328      	adds	r3, #40	@ 0x28
 80055b0:	2101      	movs	r1, #1
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fbaa 	bl	8005d0c <RCCEx_PLL3_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80055be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	2100      	movs	r1, #0
 80055d8:	6039      	str	r1, [r7, #0]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	607b      	str	r3, [r7, #4]
 80055e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055e4:	460b      	mov	r3, r1
 80055e6:	4313      	orrs	r3, r2
 80055e8:	d011      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	3328      	adds	r3, #40	@ 0x28
 80055f0:	2102      	movs	r1, #2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fb8a 	bl	8005d0c <RCCEx_PLL3_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800560a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800560e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
}
 800561c:	4618      	mov	r0, r3
 800561e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005622:	46bd      	mov	sp, r7
 8005624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005628:	58024400 	.word	0x58024400

0800562c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005630:	f7fe fd96 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	091b      	lsrs	r3, r3, #4
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4904      	ldr	r1, [pc, #16]	@ (8005654 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	58024400 	.word	0x58024400
 8005654:	08017ba0 	.word	0x08017ba0

08005658 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005658:	b480      	push	{r7}
 800565a:	b089      	sub	sp, #36	@ 0x24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005660:	4ba1      	ldr	r3, [pc, #644]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800566a:	4b9f      	ldr	r3, [pc, #636]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	0b1b      	lsrs	r3, r3, #12
 8005670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005674:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005676:	4b9c      	ldr	r3, [pc, #624]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	091b      	lsrs	r3, r3, #4
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005682:	4b99      	ldr	r3, [pc, #612]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005686:	08db      	lsrs	r3, r3, #3
 8005688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	fb02 f303 	mul.w	r3, r2, r3
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8111 	beq.w	80058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	f000 8083 	beq.w	80057b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	f200 80a1 	bhi.w	80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d056      	beq.n	8005770 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80056c2:	e099      	b.n	80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c4:	4b88      	ldr	r3, [pc, #544]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d02d      	beq.n	800572c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056d0:	4b85      	ldr	r3, [pc, #532]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	08db      	lsrs	r3, r3, #3
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	4a84      	ldr	r2, [pc, #528]	@ (80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fa:	4b7b      	ldr	r3, [pc, #492]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570a:	ed97 6a03 	vldr	s12, [r7, #12]
 800570e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800571e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800572a:	e087      	b.n	800583c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800573a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573e:	4b6a      	ldr	r3, [pc, #424]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005752:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800576e:	e065      	b.n	800583c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80058f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800577e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005782:	4b59      	ldr	r3, [pc, #356]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005792:	ed97 6a03 	vldr	s12, [r7, #12]
 8005796:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800579a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057b2:	e043      	b.n	800583c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80057c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c6:	4b48      	ldr	r3, [pc, #288]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057f6:	e021      	b.n	800583c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80058f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580a:	4b37      	ldr	r3, [pc, #220]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581a:	ed97 6a03 	vldr	s12, [r7, #12]
 800581e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800582e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800583a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800583c:	4b2a      	ldr	r3, [pc, #168]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	0a5b      	lsrs	r3, r3, #9
 8005842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005856:	edd7 6a07 	vldr	s13, [r7, #28]
 800585a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800585e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005862:	ee17 2a90 	vmov	r2, s15
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800586a:	4b1f      	ldr	r3, [pc, #124]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005884:	edd7 6a07 	vldr	s13, [r7, #28]
 8005888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800588c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005890:	ee17 2a90 	vmov	r2, s15
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005898:	4b13      	ldr	r3, [pc, #76]	@ (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800589a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589c:	0e1b      	lsrs	r3, r3, #24
 800589e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058be:	ee17 2a90 	vmov	r2, s15
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058c6:	e008      	b.n	80058da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
}
 80058da:	bf00      	nop
 80058dc:	3724      	adds	r7, #36	@ 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	58024400 	.word	0x58024400
 80058ec:	03d09000 	.word	0x03d09000
 80058f0:	46000000 	.word	0x46000000
 80058f4:	4c742400 	.word	0x4c742400
 80058f8:	4a742400 	.word	0x4a742400
 80058fc:	4bbebc20 	.word	0x4bbebc20

08005900 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005900:	b480      	push	{r7}
 8005902:	b089      	sub	sp, #36	@ 0x24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005908:	4ba1      	ldr	r3, [pc, #644]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005912:	4b9f      	ldr	r3, [pc, #636]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	0d1b      	lsrs	r3, r3, #20
 8005918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800591c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800591e:	4b9c      	ldr	r3, [pc, #624]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800592a:	4b99      	ldr	r3, [pc, #612]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592e:	08db      	lsrs	r3, r3, #3
 8005930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8111 	beq.w	8005b70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b02      	cmp	r3, #2
 8005952:	f000 8083 	beq.w	8005a5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b02      	cmp	r3, #2
 800595a:	f200 80a1 	bhi.w	8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d056      	beq.n	8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800596a:	e099      	b.n	8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596c:	4b88      	ldr	r3, [pc, #544]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02d      	beq.n	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005978:	4b85      	ldr	r3, [pc, #532]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	08db      	lsrs	r3, r3, #3
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	4a84      	ldr	r2, [pc, #528]	@ (8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059d2:	e087      	b.n	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a16:	e065      	b.n	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b59      	ldr	r3, [pc, #356]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a5a:	e043      	b.n	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6e:	4b48      	ldr	r3, [pc, #288]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a9e:	e021      	b.n	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b37      	ldr	r3, [pc, #220]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ae2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae8:	0a5b      	lsrs	r3, r3, #9
 8005aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0a:	ee17 2a90 	vmov	r2, s15
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005b12:	4b1f      	ldr	r3, [pc, #124]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	0c1b      	lsrs	r3, r3, #16
 8005b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b1c:	ee07 3a90 	vmov	s15, r3
 8005b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b38:	ee17 2a90 	vmov	r2, s15
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005b40:	4b13      	ldr	r3, [pc, #76]	@ (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b44:	0e1b      	lsrs	r3, r3, #24
 8005b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b66:	ee17 2a90 	vmov	r2, s15
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b6e:	e008      	b.n	8005b82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
}
 8005b82:	bf00      	nop
 8005b84:	3724      	adds	r7, #36	@ 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	58024400 	.word	0x58024400
 8005b94:	03d09000 	.word	0x03d09000
 8005b98:	46000000 	.word	0x46000000
 8005b9c:	4c742400 	.word	0x4c742400
 8005ba0:	4a742400 	.word	0x4a742400
 8005ba4:	4bbebc20 	.word	0x4bbebc20

08005ba8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bb6:	4b53      	ldr	r3, [pc, #332]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d101      	bne.n	8005bc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e099      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a4e      	ldr	r2, [pc, #312]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd2:	f7fb fa87 	bl	80010e4 <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bd8:	e008      	b.n	8005bec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bda:	f7fb fa83 	bl	80010e4 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e086      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bec:	4b45      	ldr	r3, [pc, #276]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f0      	bne.n	8005bda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005bf8:	4b42      	ldr	r3, [pc, #264]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	493f      	ldr	r1, [pc, #252]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	061b      	lsls	r3, r3, #24
 8005c38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c3c:	4931      	ldr	r1, [pc, #196]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c42:	4b30      	ldr	r3, [pc, #192]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	492d      	ldr	r1, [pc, #180]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c54:	4b2b      	ldr	r3, [pc, #172]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	f023 0220 	bic.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	4928      	ldr	r1, [pc, #160]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c66:	4b27      	ldr	r3, [pc, #156]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	4a26      	ldr	r2, [pc, #152]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c6c:	f023 0310 	bic.w	r3, r3, #16
 8005c70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c72:	4b24      	ldr	r3, [pc, #144]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c76:	4b24      	ldr	r3, [pc, #144]	@ (8005d08 <RCCEx_PLL2_Config+0x160>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	69d2      	ldr	r2, [r2, #28]
 8005c7e:	00d2      	lsls	r2, r2, #3
 8005c80:	4920      	ldr	r1, [pc, #128]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c86:	4b1f      	ldr	r3, [pc, #124]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c8c:	f043 0310 	orr.w	r3, r3, #16
 8005c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c98:	4b1a      	ldr	r3, [pc, #104]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	4a19      	ldr	r2, [pc, #100]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ca4:	e00f      	b.n	8005cc6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005cac:	4b15      	ldr	r3, [pc, #84]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	4a14      	ldr	r2, [pc, #80]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cb8:	e005      	b.n	8005cc6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005cba:	4b12      	ldr	r3, [pc, #72]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	4a11      	ldr	r2, [pc, #68]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a0e      	ldr	r2, [pc, #56]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd2:	f7fb fa07 	bl	80010e4 <HAL_GetTick>
 8005cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cd8:	e008      	b.n	8005cec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cda:	f7fb fa03 	bl	80010e4 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e006      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cec:	4b05      	ldr	r3, [pc, #20]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400
 8005d08:	ffff0007 	.word	0xffff0007

08005d0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d1a:	4b53      	ldr	r3, [pc, #332]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d101      	bne.n	8005d2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e099      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d36:	f7fb f9d5 	bl	80010e4 <HAL_GetTick>
 8005d3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d3c:	e008      	b.n	8005d50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d3e:	f7fb f9d1 	bl	80010e4 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e086      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d50:	4b45      	ldr	r3, [pc, #276]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f0      	bne.n	8005d3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d5c:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d60:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	051b      	lsls	r3, r3, #20
 8005d6a:	493f      	ldr	r1, [pc, #252]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	025b      	lsls	r3, r3, #9
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	041b      	lsls	r3, r3, #16
 8005d8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	061b      	lsls	r3, r3, #24
 8005d9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005da0:	4931      	ldr	r1, [pc, #196]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005da6:	4b30      	ldr	r3, [pc, #192]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	492d      	ldr	r1, [pc, #180]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005db8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	4928      	ldr	r1, [pc, #160]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005dca:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	4a26      	ldr	r2, [pc, #152]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005dd6:	4b24      	ldr	r3, [pc, #144]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dda:	4b24      	ldr	r3, [pc, #144]	@ (8005e6c <RCCEx_PLL3_Config+0x160>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	69d2      	ldr	r2, [r2, #28]
 8005de2:	00d2      	lsls	r2, r2, #3
 8005de4:	4920      	ldr	r1, [pc, #128]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dea:	4b1f      	ldr	r3, [pc, #124]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	4a19      	ldr	r2, [pc, #100]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e08:	e00f      	b.n	8005e2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d106      	bne.n	8005e1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e10:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	4a14      	ldr	r2, [pc, #80]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e1c:	e005      	b.n	8005e2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e1e:	4b12      	ldr	r3, [pc, #72]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e22:	4a11      	ldr	r2, [pc, #68]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e36:	f7fb f955 	bl	80010e4 <HAL_GetTick>
 8005e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e3c:	e008      	b.n	8005e50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e3e:	f7fb f951 	bl	80010e4 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e006      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	ffff0007 	.word	0xffff0007

08005e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e042      	b.n	8005f08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d106      	bne.n	8005e9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7fa fe1d 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2224      	movs	r2, #36	@ 0x24
 8005e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0201 	bic.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fe1e 	bl	8006afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f8b3 	bl	800602c <UART_SetConfig>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e01b      	b.n	8005f08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fe9d 	bl	8006c40 <UART_CheckIdleState>
 8005f06:	4603      	mov	r3, r0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	@ 0x28
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d17b      	bne.n	8006022 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_UART_Transmit+0x26>
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e074      	b.n	8006024 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2221      	movs	r2, #33	@ 0x21
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f4a:	f7fb f8cb 	bl	80010e4 <HAL_GetTick>
 8005f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f68:	d108      	bne.n	8005f7c <HAL_UART_Transmit+0x6c>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e003      	b.n	8005f84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f84:	e030      	b.n	8005fe8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	@ 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 feff 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e03d      	b.n	8006024 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	e007      	b.n	8005fd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1c8      	bne.n	8005f86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2140      	movs	r1, #64	@ 0x40
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fec8 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e006      	b.n	8006024 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	e000      	b.n	8006024 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006022:	2302      	movs	r3, #2
  }
}
 8006024:	4618      	mov	r0, r3
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800602c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006030:	b092      	sub	sp, #72	@ 0x48
 8006032:	af00      	add	r7, sp, #0
 8006034:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	431a      	orrs	r2, r3
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	431a      	orrs	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	4313      	orrs	r3, r2
 8006052:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4bbe      	ldr	r3, [pc, #760]	@ (8006354 <UART_SetConfig+0x328>)
 800605c:	4013      	ands	r3, r2
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006064:	430b      	orrs	r3, r1
 8006066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4ab3      	ldr	r2, [pc, #716]	@ (8006358 <UART_SetConfig+0x32c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006094:	4313      	orrs	r3, r2
 8006096:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	4baf      	ldr	r3, [pc, #700]	@ (800635c <UART_SetConfig+0x330>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b2:	f023 010f 	bic.w	r1, r3, #15
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4aa6      	ldr	r2, [pc, #664]	@ (8006360 <UART_SetConfig+0x334>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d177      	bne.n	80061bc <UART_SetConfig+0x190>
 80060cc:	4ba5      	ldr	r3, [pc, #660]	@ (8006364 <UART_SetConfig+0x338>)
 80060ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060d4:	2b28      	cmp	r3, #40	@ 0x28
 80060d6:	d86d      	bhi.n	80061b4 <UART_SetConfig+0x188>
 80060d8:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <UART_SetConfig+0xb4>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	08006185 	.word	0x08006185
 80060e4:	080061b5 	.word	0x080061b5
 80060e8:	080061b5 	.word	0x080061b5
 80060ec:	080061b5 	.word	0x080061b5
 80060f0:	080061b5 	.word	0x080061b5
 80060f4:	080061b5 	.word	0x080061b5
 80060f8:	080061b5 	.word	0x080061b5
 80060fc:	080061b5 	.word	0x080061b5
 8006100:	0800618d 	.word	0x0800618d
 8006104:	080061b5 	.word	0x080061b5
 8006108:	080061b5 	.word	0x080061b5
 800610c:	080061b5 	.word	0x080061b5
 8006110:	080061b5 	.word	0x080061b5
 8006114:	080061b5 	.word	0x080061b5
 8006118:	080061b5 	.word	0x080061b5
 800611c:	080061b5 	.word	0x080061b5
 8006120:	08006195 	.word	0x08006195
 8006124:	080061b5 	.word	0x080061b5
 8006128:	080061b5 	.word	0x080061b5
 800612c:	080061b5 	.word	0x080061b5
 8006130:	080061b5 	.word	0x080061b5
 8006134:	080061b5 	.word	0x080061b5
 8006138:	080061b5 	.word	0x080061b5
 800613c:	080061b5 	.word	0x080061b5
 8006140:	0800619d 	.word	0x0800619d
 8006144:	080061b5 	.word	0x080061b5
 8006148:	080061b5 	.word	0x080061b5
 800614c:	080061b5 	.word	0x080061b5
 8006150:	080061b5 	.word	0x080061b5
 8006154:	080061b5 	.word	0x080061b5
 8006158:	080061b5 	.word	0x080061b5
 800615c:	080061b5 	.word	0x080061b5
 8006160:	080061a5 	.word	0x080061a5
 8006164:	080061b5 	.word	0x080061b5
 8006168:	080061b5 	.word	0x080061b5
 800616c:	080061b5 	.word	0x080061b5
 8006170:	080061b5 	.word	0x080061b5
 8006174:	080061b5 	.word	0x080061b5
 8006178:	080061b5 	.word	0x080061b5
 800617c:	080061b5 	.word	0x080061b5
 8006180:	080061ad 	.word	0x080061ad
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e222      	b.n	80065d2 <UART_SetConfig+0x5a6>
 800618c:	2304      	movs	r3, #4
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e21e      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006194:	2308      	movs	r3, #8
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619a:	e21a      	b.n	80065d2 <UART_SetConfig+0x5a6>
 800619c:	2310      	movs	r3, #16
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e216      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80061a4:	2320      	movs	r3, #32
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e212      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80061ac:	2340      	movs	r3, #64	@ 0x40
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e20e      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e20a      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a69      	ldr	r2, [pc, #420]	@ (8006368 <UART_SetConfig+0x33c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d130      	bne.n	8006228 <UART_SetConfig+0x1fc>
 80061c6:	4b67      	ldr	r3, [pc, #412]	@ (8006364 <UART_SetConfig+0x338>)
 80061c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d826      	bhi.n	8006220 <UART_SetConfig+0x1f4>
 80061d2:	a201      	add	r2, pc, #4	@ (adr r2, 80061d8 <UART_SetConfig+0x1ac>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061f1 	.word	0x080061f1
 80061dc:	080061f9 	.word	0x080061f9
 80061e0:	08006201 	.word	0x08006201
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006219 	.word	0x08006219
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e1ec      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80061f8:	2304      	movs	r3, #4
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e1e8      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006200:	2308      	movs	r3, #8
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e1e4      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006208:	2310      	movs	r3, #16
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e1e0      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006210:	2320      	movs	r3, #32
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e1dc      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006218:	2340      	movs	r3, #64	@ 0x40
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e1d8      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006220:	2380      	movs	r3, #128	@ 0x80
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e1d4      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a4f      	ldr	r2, [pc, #316]	@ (800636c <UART_SetConfig+0x340>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d130      	bne.n	8006294 <UART_SetConfig+0x268>
 8006232:	4b4c      	ldr	r3, [pc, #304]	@ (8006364 <UART_SetConfig+0x338>)
 8006234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b05      	cmp	r3, #5
 800623c:	d826      	bhi.n	800628c <UART_SetConfig+0x260>
 800623e:	a201      	add	r2, pc, #4	@ (adr r2, 8006244 <UART_SetConfig+0x218>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	0800625d 	.word	0x0800625d
 8006248:	08006265 	.word	0x08006265
 800624c:	0800626d 	.word	0x0800626d
 8006250:	08006275 	.word	0x08006275
 8006254:	0800627d 	.word	0x0800627d
 8006258:	08006285 	.word	0x08006285
 800625c:	2300      	movs	r3, #0
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e1b6      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006264:	2304      	movs	r3, #4
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e1b2      	b.n	80065d2 <UART_SetConfig+0x5a6>
 800626c:	2308      	movs	r3, #8
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e1ae      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006274:	2310      	movs	r3, #16
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e1aa      	b.n	80065d2 <UART_SetConfig+0x5a6>
 800627c:	2320      	movs	r3, #32
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e1a6      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006284:	2340      	movs	r3, #64	@ 0x40
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e1a2      	b.n	80065d2 <UART_SetConfig+0x5a6>
 800628c:	2380      	movs	r3, #128	@ 0x80
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e19e      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a35      	ldr	r2, [pc, #212]	@ (8006370 <UART_SetConfig+0x344>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d130      	bne.n	8006300 <UART_SetConfig+0x2d4>
 800629e:	4b31      	ldr	r3, [pc, #196]	@ (8006364 <UART_SetConfig+0x338>)
 80062a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b05      	cmp	r3, #5
 80062a8:	d826      	bhi.n	80062f8 <UART_SetConfig+0x2cc>
 80062aa:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <UART_SetConfig+0x284>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062c9 	.word	0x080062c9
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	080062d9 	.word	0x080062d9
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	2300      	movs	r3, #0
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e180      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80062d0:	2304      	movs	r3, #4
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e17c      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80062d8:	2308      	movs	r3, #8
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e178      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80062e0:	2310      	movs	r3, #16
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e174      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80062e8:	2320      	movs	r3, #32
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ee:	e170      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80062f0:	2340      	movs	r3, #64	@ 0x40
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e16c      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80062f8:	2380      	movs	r3, #128	@ 0x80
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e168      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1b      	ldr	r2, [pc, #108]	@ (8006374 <UART_SetConfig+0x348>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d142      	bne.n	8006390 <UART_SetConfig+0x364>
 800630a:	4b16      	ldr	r3, [pc, #88]	@ (8006364 <UART_SetConfig+0x338>)
 800630c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	2b05      	cmp	r3, #5
 8006314:	d838      	bhi.n	8006388 <UART_SetConfig+0x35c>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <UART_SetConfig+0x2f0>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006335 	.word	0x08006335
 8006320:	0800633d 	.word	0x0800633d
 8006324:	08006345 	.word	0x08006345
 8006328:	0800634d 	.word	0x0800634d
 800632c:	08006379 	.word	0x08006379
 8006330:	08006381 	.word	0x08006381
 8006334:	2300      	movs	r3, #0
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e14a      	b.n	80065d2 <UART_SetConfig+0x5a6>
 800633c:	2304      	movs	r3, #4
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e146      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006344:	2308      	movs	r3, #8
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e142      	b.n	80065d2 <UART_SetConfig+0x5a6>
 800634c:	2310      	movs	r3, #16
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006352:	e13e      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006354:	cfff69f3 	.word	0xcfff69f3
 8006358:	58000c00 	.word	0x58000c00
 800635c:	11fff4ff 	.word	0x11fff4ff
 8006360:	40011000 	.word	0x40011000
 8006364:	58024400 	.word	0x58024400
 8006368:	40004400 	.word	0x40004400
 800636c:	40004800 	.word	0x40004800
 8006370:	40004c00 	.word	0x40004c00
 8006374:	40005000 	.word	0x40005000
 8006378:	2320      	movs	r3, #32
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800637e:	e128      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006380:	2340      	movs	r3, #64	@ 0x40
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006386:	e124      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006388:	2380      	movs	r3, #128	@ 0x80
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638e:	e120      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4acb      	ldr	r2, [pc, #812]	@ (80066c4 <UART_SetConfig+0x698>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d176      	bne.n	8006488 <UART_SetConfig+0x45c>
 800639a:	4bcb      	ldr	r3, [pc, #812]	@ (80066c8 <UART_SetConfig+0x69c>)
 800639c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063a2:	2b28      	cmp	r3, #40	@ 0x28
 80063a4:	d86c      	bhi.n	8006480 <UART_SetConfig+0x454>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <UART_SetConfig+0x380>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	08006451 	.word	0x08006451
 80063b0:	08006481 	.word	0x08006481
 80063b4:	08006481 	.word	0x08006481
 80063b8:	08006481 	.word	0x08006481
 80063bc:	08006481 	.word	0x08006481
 80063c0:	08006481 	.word	0x08006481
 80063c4:	08006481 	.word	0x08006481
 80063c8:	08006481 	.word	0x08006481
 80063cc:	08006459 	.word	0x08006459
 80063d0:	08006481 	.word	0x08006481
 80063d4:	08006481 	.word	0x08006481
 80063d8:	08006481 	.word	0x08006481
 80063dc:	08006481 	.word	0x08006481
 80063e0:	08006481 	.word	0x08006481
 80063e4:	08006481 	.word	0x08006481
 80063e8:	08006481 	.word	0x08006481
 80063ec:	08006461 	.word	0x08006461
 80063f0:	08006481 	.word	0x08006481
 80063f4:	08006481 	.word	0x08006481
 80063f8:	08006481 	.word	0x08006481
 80063fc:	08006481 	.word	0x08006481
 8006400:	08006481 	.word	0x08006481
 8006404:	08006481 	.word	0x08006481
 8006408:	08006481 	.word	0x08006481
 800640c:	08006469 	.word	0x08006469
 8006410:	08006481 	.word	0x08006481
 8006414:	08006481 	.word	0x08006481
 8006418:	08006481 	.word	0x08006481
 800641c:	08006481 	.word	0x08006481
 8006420:	08006481 	.word	0x08006481
 8006424:	08006481 	.word	0x08006481
 8006428:	08006481 	.word	0x08006481
 800642c:	08006471 	.word	0x08006471
 8006430:	08006481 	.word	0x08006481
 8006434:	08006481 	.word	0x08006481
 8006438:	08006481 	.word	0x08006481
 800643c:	08006481 	.word	0x08006481
 8006440:	08006481 	.word	0x08006481
 8006444:	08006481 	.word	0x08006481
 8006448:	08006481 	.word	0x08006481
 800644c:	08006479 	.word	0x08006479
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006456:	e0bc      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006458:	2304      	movs	r3, #4
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645e:	e0b8      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006460:	2308      	movs	r3, #8
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006466:	e0b4      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006468:	2310      	movs	r3, #16
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646e:	e0b0      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006470:	2320      	movs	r3, #32
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006476:	e0ac      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006478:	2340      	movs	r3, #64	@ 0x40
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647e:	e0a8      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e0a4      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a8f      	ldr	r2, [pc, #572]	@ (80066cc <UART_SetConfig+0x6a0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d130      	bne.n	80064f4 <UART_SetConfig+0x4c8>
 8006492:	4b8d      	ldr	r3, [pc, #564]	@ (80066c8 <UART_SetConfig+0x69c>)
 8006494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b05      	cmp	r3, #5
 800649c:	d826      	bhi.n	80064ec <UART_SetConfig+0x4c0>
 800649e:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <UART_SetConfig+0x478>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064bd 	.word	0x080064bd
 80064a8:	080064c5 	.word	0x080064c5
 80064ac:	080064cd 	.word	0x080064cd
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c2:	e086      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80064c4:	2304      	movs	r3, #4
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ca:	e082      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80064cc:	2308      	movs	r3, #8
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d2:	e07e      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80064d4:	2310      	movs	r3, #16
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e07a      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80064dc:	2320      	movs	r3, #32
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e076      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80064e4:	2340      	movs	r3, #64	@ 0x40
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e072      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80064ec:	2380      	movs	r3, #128	@ 0x80
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e06e      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a75      	ldr	r2, [pc, #468]	@ (80066d0 <UART_SetConfig+0x6a4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d130      	bne.n	8006560 <UART_SetConfig+0x534>
 80064fe:	4b72      	ldr	r3, [pc, #456]	@ (80066c8 <UART_SetConfig+0x69c>)
 8006500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b05      	cmp	r3, #5
 8006508:	d826      	bhi.n	8006558 <UART_SetConfig+0x52c>
 800650a:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <UART_SetConfig+0x4e4>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006529 	.word	0x08006529
 8006514:	08006531 	.word	0x08006531
 8006518:	08006539 	.word	0x08006539
 800651c:	08006541 	.word	0x08006541
 8006520:	08006549 	.word	0x08006549
 8006524:	08006551 	.word	0x08006551
 8006528:	2300      	movs	r3, #0
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652e:	e050      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006530:	2304      	movs	r3, #4
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006536:	e04c      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006538:	2308      	movs	r3, #8
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e048      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006540:	2310      	movs	r3, #16
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e044      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006548:	2320      	movs	r3, #32
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e040      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006550:	2340      	movs	r3, #64	@ 0x40
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e03c      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006558:	2380      	movs	r3, #128	@ 0x80
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e038      	b.n	80065d2 <UART_SetConfig+0x5a6>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5b      	ldr	r2, [pc, #364]	@ (80066d4 <UART_SetConfig+0x6a8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d130      	bne.n	80065cc <UART_SetConfig+0x5a0>
 800656a:	4b57      	ldr	r3, [pc, #348]	@ (80066c8 <UART_SetConfig+0x69c>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	2b05      	cmp	r3, #5
 8006574:	d826      	bhi.n	80065c4 <UART_SetConfig+0x598>
 8006576:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <UART_SetConfig+0x550>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	08006595 	.word	0x08006595
 8006580:	0800659d 	.word	0x0800659d
 8006584:	080065a5 	.word	0x080065a5
 8006588:	080065ad 	.word	0x080065ad
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065bd 	.word	0x080065bd
 8006594:	2302      	movs	r3, #2
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659a:	e01a      	b.n	80065d2 <UART_SetConfig+0x5a6>
 800659c:	2304      	movs	r3, #4
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a2:	e016      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80065a4:	2308      	movs	r3, #8
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065aa:	e012      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80065ac:	2310      	movs	r3, #16
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b2:	e00e      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80065b4:	2320      	movs	r3, #32
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ba:	e00a      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80065bc:	2340      	movs	r3, #64	@ 0x40
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c2:	e006      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80065c4:	2380      	movs	r3, #128	@ 0x80
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ca:	e002      	b.n	80065d2 <UART_SetConfig+0x5a6>
 80065cc:	2380      	movs	r3, #128	@ 0x80
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a3f      	ldr	r2, [pc, #252]	@ (80066d4 <UART_SetConfig+0x6a8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	f040 80f8 	bne.w	80067ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	dc46      	bgt.n	8006674 <UART_SetConfig+0x648>
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	f2c0 8082 	blt.w	80066f0 <UART_SetConfig+0x6c4>
 80065ec:	3b02      	subs	r3, #2
 80065ee:	2b1e      	cmp	r3, #30
 80065f0:	d87e      	bhi.n	80066f0 <UART_SetConfig+0x6c4>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0x5cc>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	0800667b 	.word	0x0800667b
 80065fc:	080066f1 	.word	0x080066f1
 8006600:	08006683 	.word	0x08006683
 8006604:	080066f1 	.word	0x080066f1
 8006608:	080066f1 	.word	0x080066f1
 800660c:	080066f1 	.word	0x080066f1
 8006610:	08006693 	.word	0x08006693
 8006614:	080066f1 	.word	0x080066f1
 8006618:	080066f1 	.word	0x080066f1
 800661c:	080066f1 	.word	0x080066f1
 8006620:	080066f1 	.word	0x080066f1
 8006624:	080066f1 	.word	0x080066f1
 8006628:	080066f1 	.word	0x080066f1
 800662c:	080066f1 	.word	0x080066f1
 8006630:	080066a3 	.word	0x080066a3
 8006634:	080066f1 	.word	0x080066f1
 8006638:	080066f1 	.word	0x080066f1
 800663c:	080066f1 	.word	0x080066f1
 8006640:	080066f1 	.word	0x080066f1
 8006644:	080066f1 	.word	0x080066f1
 8006648:	080066f1 	.word	0x080066f1
 800664c:	080066f1 	.word	0x080066f1
 8006650:	080066f1 	.word	0x080066f1
 8006654:	080066f1 	.word	0x080066f1
 8006658:	080066f1 	.word	0x080066f1
 800665c:	080066f1 	.word	0x080066f1
 8006660:	080066f1 	.word	0x080066f1
 8006664:	080066f1 	.word	0x080066f1
 8006668:	080066f1 	.word	0x080066f1
 800666c:	080066f1 	.word	0x080066f1
 8006670:	080066e3 	.word	0x080066e3
 8006674:	2b40      	cmp	r3, #64	@ 0x40
 8006676:	d037      	beq.n	80066e8 <UART_SetConfig+0x6bc>
 8006678:	e03a      	b.n	80066f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800667a:	f7fe ffd7 	bl	800562c <HAL_RCCEx_GetD3PCLK1Freq>
 800667e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006680:	e03c      	b.n	80066fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe ffe6 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006690:	e034      	b.n	80066fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006692:	f107 0318 	add.w	r3, r7, #24
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff f932 	bl	8005900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a0:	e02c      	b.n	80066fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a2:	4b09      	ldr	r3, [pc, #36]	@ (80066c8 <UART_SetConfig+0x69c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d016      	beq.n	80066dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066ae:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <UART_SetConfig+0x69c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	08db      	lsrs	r3, r3, #3
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	4a07      	ldr	r2, [pc, #28]	@ (80066d8 <UART_SetConfig+0x6ac>)
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066c0:	e01c      	b.n	80066fc <UART_SetConfig+0x6d0>
 80066c2:	bf00      	nop
 80066c4:	40011400 	.word	0x40011400
 80066c8:	58024400 	.word	0x58024400
 80066cc:	40007800 	.word	0x40007800
 80066d0:	40007c00 	.word	0x40007c00
 80066d4:	58000c00 	.word	0x58000c00
 80066d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80066dc:	4b9d      	ldr	r3, [pc, #628]	@ (8006954 <UART_SetConfig+0x928>)
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066e0:	e00c      	b.n	80066fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066e2:	4b9d      	ldr	r3, [pc, #628]	@ (8006958 <UART_SetConfig+0x92c>)
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066e6:	e009      	b.n	80066fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ee:	e005      	b.n	80066fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 81de 	beq.w	8006ac0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006708:	4a94      	ldr	r2, [pc, #592]	@ (800695c <UART_SetConfig+0x930>)
 800670a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800670e:	461a      	mov	r2, r3
 8006710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006712:	fbb3 f3f2 	udiv	r3, r3, r2
 8006716:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	4413      	add	r3, r2
 8006722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006724:	429a      	cmp	r2, r3
 8006726:	d305      	bcc.n	8006734 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800672e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006730:	429a      	cmp	r2, r3
 8006732:	d903      	bls.n	800673c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800673a:	e1c1      	b.n	8006ac0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800673c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800673e:	2200      	movs	r2, #0
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	60fa      	str	r2, [r7, #12]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	4a84      	ldr	r2, [pc, #528]	@ (800695c <UART_SetConfig+0x930>)
 800674a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674e:	b29b      	uxth	r3, r3
 8006750:	2200      	movs	r2, #0
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	607a      	str	r2, [r7, #4]
 8006756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800675a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800675e:	f7f9 fe0f 	bl	8000380 <__aeabi_uldivmod>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4610      	mov	r0, r2
 8006768:	4619      	mov	r1, r3
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	020b      	lsls	r3, r1, #8
 8006774:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006778:	0202      	lsls	r2, r0, #8
 800677a:	6979      	ldr	r1, [r7, #20]
 800677c:	6849      	ldr	r1, [r1, #4]
 800677e:	0849      	lsrs	r1, r1, #1
 8006780:	2000      	movs	r0, #0
 8006782:	460c      	mov	r4, r1
 8006784:	4605      	mov	r5, r0
 8006786:	eb12 0804 	adds.w	r8, r2, r4
 800678a:	eb43 0905 	adc.w	r9, r3, r5
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	469a      	mov	sl, r3
 8006796:	4693      	mov	fp, r2
 8006798:	4652      	mov	r2, sl
 800679a:	465b      	mov	r3, fp
 800679c:	4640      	mov	r0, r8
 800679e:	4649      	mov	r1, r9
 80067a0:	f7f9 fdee 	bl	8000380 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4613      	mov	r3, r2
 80067aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b2:	d308      	bcc.n	80067c6 <UART_SetConfig+0x79a>
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ba:	d204      	bcs.n	80067c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067c2:	60da      	str	r2, [r3, #12]
 80067c4:	e17c      	b.n	8006ac0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80067cc:	e178      	b.n	8006ac0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067d6:	f040 80c5 	bne.w	8006964 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80067da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80067de:	2b20      	cmp	r3, #32
 80067e0:	dc48      	bgt.n	8006874 <UART_SetConfig+0x848>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	db7b      	blt.n	80068de <UART_SetConfig+0x8b2>
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d879      	bhi.n	80068de <UART_SetConfig+0x8b2>
 80067ea:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <UART_SetConfig+0x7c4>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	0800687b 	.word	0x0800687b
 80067f4:	08006883 	.word	0x08006883
 80067f8:	080068df 	.word	0x080068df
 80067fc:	080068df 	.word	0x080068df
 8006800:	0800688b 	.word	0x0800688b
 8006804:	080068df 	.word	0x080068df
 8006808:	080068df 	.word	0x080068df
 800680c:	080068df 	.word	0x080068df
 8006810:	0800689b 	.word	0x0800689b
 8006814:	080068df 	.word	0x080068df
 8006818:	080068df 	.word	0x080068df
 800681c:	080068df 	.word	0x080068df
 8006820:	080068df 	.word	0x080068df
 8006824:	080068df 	.word	0x080068df
 8006828:	080068df 	.word	0x080068df
 800682c:	080068df 	.word	0x080068df
 8006830:	080068ab 	.word	0x080068ab
 8006834:	080068df 	.word	0x080068df
 8006838:	080068df 	.word	0x080068df
 800683c:	080068df 	.word	0x080068df
 8006840:	080068df 	.word	0x080068df
 8006844:	080068df 	.word	0x080068df
 8006848:	080068df 	.word	0x080068df
 800684c:	080068df 	.word	0x080068df
 8006850:	080068df 	.word	0x080068df
 8006854:	080068df 	.word	0x080068df
 8006858:	080068df 	.word	0x080068df
 800685c:	080068df 	.word	0x080068df
 8006860:	080068df 	.word	0x080068df
 8006864:	080068df 	.word	0x080068df
 8006868:	080068df 	.word	0x080068df
 800686c:	080068df 	.word	0x080068df
 8006870:	080068d1 	.word	0x080068d1
 8006874:	2b40      	cmp	r3, #64	@ 0x40
 8006876:	d02e      	beq.n	80068d6 <UART_SetConfig+0x8aa>
 8006878:	e031      	b.n	80068de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800687a:	f7fd fca1 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 800687e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006880:	e033      	b.n	80068ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006882:	f7fd fcb3 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 8006886:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006888:	e02f      	b.n	80068ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800688a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fee2 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006898:	e027      	b.n	80068ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800689a:	f107 0318 	add.w	r3, r7, #24
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff f82e 	bl	8005900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068a8:	e01f      	b.n	80068ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006960 <UART_SetConfig+0x934>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006960 <UART_SetConfig+0x934>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	08db      	lsrs	r3, r3, #3
 80068bc:	f003 0303 	and.w	r3, r3, #3
 80068c0:	4a24      	ldr	r2, [pc, #144]	@ (8006954 <UART_SetConfig+0x928>)
 80068c2:	fa22 f303 	lsr.w	r3, r2, r3
 80068c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068c8:	e00f      	b.n	80068ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80068ca:	4b22      	ldr	r3, [pc, #136]	@ (8006954 <UART_SetConfig+0x928>)
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ce:	e00c      	b.n	80068ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068d0:	4b21      	ldr	r3, [pc, #132]	@ (8006958 <UART_SetConfig+0x92c>)
 80068d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068d4:	e009      	b.n	80068ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068dc:	e005      	b.n	80068ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80068e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80e7 	beq.w	8006ac0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	4a19      	ldr	r2, [pc, #100]	@ (800695c <UART_SetConfig+0x930>)
 80068f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068fc:	461a      	mov	r2, r3
 80068fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006900:	fbb3 f3f2 	udiv	r3, r3, r2
 8006904:	005a      	lsls	r2, r3, #1
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	441a      	add	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	fbb2 f3f3 	udiv	r3, r2, r3
 8006916:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691a:	2b0f      	cmp	r3, #15
 800691c:	d916      	bls.n	800694c <UART_SetConfig+0x920>
 800691e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006924:	d212      	bcs.n	800694c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	b29b      	uxth	r3, r3
 800692a:	f023 030f 	bic.w	r3, r3, #15
 800692e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	085b      	lsrs	r3, r3, #1
 8006934:	b29b      	uxth	r3, r3
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	b29a      	uxth	r2, r3
 800693c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800693e:	4313      	orrs	r3, r2
 8006940:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006948:	60da      	str	r2, [r3, #12]
 800694a:	e0b9      	b.n	8006ac0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006952:	e0b5      	b.n	8006ac0 <UART_SetConfig+0xa94>
 8006954:	03d09000 	.word	0x03d09000
 8006958:	003d0900 	.word	0x003d0900
 800695c:	08017bb0 	.word	0x08017bb0
 8006960:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006964:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006968:	2b20      	cmp	r3, #32
 800696a:	dc49      	bgt.n	8006a00 <UART_SetConfig+0x9d4>
 800696c:	2b00      	cmp	r3, #0
 800696e:	db7c      	blt.n	8006a6a <UART_SetConfig+0xa3e>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d87a      	bhi.n	8006a6a <UART_SetConfig+0xa3e>
 8006974:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <UART_SetConfig+0x950>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	08006a07 	.word	0x08006a07
 8006980:	08006a0f 	.word	0x08006a0f
 8006984:	08006a6b 	.word	0x08006a6b
 8006988:	08006a6b 	.word	0x08006a6b
 800698c:	08006a17 	.word	0x08006a17
 8006990:	08006a6b 	.word	0x08006a6b
 8006994:	08006a6b 	.word	0x08006a6b
 8006998:	08006a6b 	.word	0x08006a6b
 800699c:	08006a27 	.word	0x08006a27
 80069a0:	08006a6b 	.word	0x08006a6b
 80069a4:	08006a6b 	.word	0x08006a6b
 80069a8:	08006a6b 	.word	0x08006a6b
 80069ac:	08006a6b 	.word	0x08006a6b
 80069b0:	08006a6b 	.word	0x08006a6b
 80069b4:	08006a6b 	.word	0x08006a6b
 80069b8:	08006a6b 	.word	0x08006a6b
 80069bc:	08006a37 	.word	0x08006a37
 80069c0:	08006a6b 	.word	0x08006a6b
 80069c4:	08006a6b 	.word	0x08006a6b
 80069c8:	08006a6b 	.word	0x08006a6b
 80069cc:	08006a6b 	.word	0x08006a6b
 80069d0:	08006a6b 	.word	0x08006a6b
 80069d4:	08006a6b 	.word	0x08006a6b
 80069d8:	08006a6b 	.word	0x08006a6b
 80069dc:	08006a6b 	.word	0x08006a6b
 80069e0:	08006a6b 	.word	0x08006a6b
 80069e4:	08006a6b 	.word	0x08006a6b
 80069e8:	08006a6b 	.word	0x08006a6b
 80069ec:	08006a6b 	.word	0x08006a6b
 80069f0:	08006a6b 	.word	0x08006a6b
 80069f4:	08006a6b 	.word	0x08006a6b
 80069f8:	08006a6b 	.word	0x08006a6b
 80069fc:	08006a5d 	.word	0x08006a5d
 8006a00:	2b40      	cmp	r3, #64	@ 0x40
 8006a02:	d02e      	beq.n	8006a62 <UART_SetConfig+0xa36>
 8006a04:	e031      	b.n	8006a6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a06:	f7fd fbdb 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8006a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a0c:	e033      	b.n	8006a76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a0e:	f7fd fbed 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 8006a12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a14:	e02f      	b.n	8006a76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fe1c 	bl	8005658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a24:	e027      	b.n	8006a76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a26:	f107 0318 	add.w	r3, r7, #24
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe ff68 	bl	8005900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a34:	e01f      	b.n	8006a76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a36:	4b2d      	ldr	r3, [pc, #180]	@ (8006aec <UART_SetConfig+0xac0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a42:	4b2a      	ldr	r3, [pc, #168]	@ (8006aec <UART_SetConfig+0xac0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	4a28      	ldr	r2, [pc, #160]	@ (8006af0 <UART_SetConfig+0xac4>)
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a54:	e00f      	b.n	8006a76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006a56:	4b26      	ldr	r3, [pc, #152]	@ (8006af0 <UART_SetConfig+0xac4>)
 8006a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5a:	e00c      	b.n	8006a76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a5c:	4b25      	ldr	r3, [pc, #148]	@ (8006af4 <UART_SetConfig+0xac8>)
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a60:	e009      	b.n	8006a76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a68:	e005      	b.n	8006a76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a74:	bf00      	nop
    }

    if (pclk != 0U)
 8006a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d021      	beq.n	8006ac0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	4a1d      	ldr	r2, [pc, #116]	@ (8006af8 <UART_SetConfig+0xacc>)
 8006a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	441a      	add	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	2b0f      	cmp	r3, #15
 8006aa4:	d909      	bls.n	8006aba <UART_SetConfig+0xa8e>
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aac:	d205      	bcs.n	8006aba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
 8006ab8:	e002      	b.n	8006ac0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006adc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3748      	adds	r7, #72	@ 0x48
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aea:	bf00      	nop
 8006aec:	58024400 	.word	0x58024400
 8006af0:	03d09000 	.word	0x03d09000
 8006af4:	003d0900 	.word	0x003d0900
 8006af8:	08017bb0 	.word	0x08017bb0

08006afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01a      	beq.n	8006c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bfa:	d10a      	bne.n	8006c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  }
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b098      	sub	sp, #96	@ 0x60
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c50:	f7fa fa48 	bl	80010e4 <HAL_GetTick>
 8006c54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d12f      	bne.n	8006cc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f88e 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d022      	beq.n	8006cc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e063      	b.n	8006d8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d149      	bne.n	8006d66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f857 	bl	8006d94 <UART_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d03c      	beq.n	8006d66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e6      	bne.n	8006cec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3308      	adds	r3, #8
 8006d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d3e:	61fa      	str	r2, [r7, #28]
 8006d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	69b9      	ldr	r1, [r7, #24]
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e5      	bne.n	8006d1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e012      	b.n	8006d8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3758      	adds	r7, #88	@ 0x58
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da4:	e04f      	b.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dac:	d04b      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dae:	f7fa f999 	bl	80010e4 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d302      	bcc.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e04e      	b.n	8006e66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d037      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b80      	cmp	r3, #128	@ 0x80
 8006dda:	d034      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b40      	cmp	r3, #64	@ 0x40
 8006de0:	d031      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d110      	bne.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2208      	movs	r2, #8
 8006df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f839 	bl	8006e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2208      	movs	r2, #8
 8006e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e029      	b.n	8006e66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e20:	d111      	bne.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f81f 	bl	8006e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e00f      	b.n	8006e66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	bf0c      	ite	eq
 8006e56:	2301      	moveq	r3, #1
 8006e58:	2300      	movne	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d0a0      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b095      	sub	sp, #84	@ 0x54
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e6      	bne.n	8006e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8006f38 <UART_EndRxTransfer+0xc8>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e5      	bne.n	8006eaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d118      	bne.n	8006f18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f023 0310 	bic.w	r3, r3, #16
 8006efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6979      	ldr	r1, [r7, #20]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	613b      	str	r3, [r7, #16]
   return(result);
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e6      	bne.n	8006ee6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f2c:	bf00      	nop
 8006f2e:	3754      	adds	r7, #84	@ 0x54
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	effffffe 	.word	0xeffffffe

08006f3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e027      	b.n	8006fa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2224      	movs	r2, #36	@ 0x24
 8006f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0201 	bic.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e02d      	b.n	8007022 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2224      	movs	r2, #36	@ 0x24
 8006fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f850 	bl	80070a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800703e:	2302      	movs	r3, #2
 8007040:	e02d      	b.n	800709e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2224      	movs	r2, #36	@ 0x24
 800704e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0201 	bic.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f812 	bl	80070a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d108      	bne.n	80070ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070c8:	e031      	b.n	800712e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070ca:	2310      	movs	r3, #16
 80070cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ce:	2310      	movs	r3, #16
 80070d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	0e5b      	lsrs	r3, r3, #25
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	0f5b      	lsrs	r3, r3, #29
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	7b3a      	ldrb	r2, [r7, #12]
 80070f6:	4911      	ldr	r1, [pc, #68]	@ (800713c <UARTEx_SetNbDataToProcess+0x94>)
 80070f8:	5c8a      	ldrb	r2, [r1, r2]
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070fe:	7b3a      	ldrb	r2, [r7, #12]
 8007100:	490f      	ldr	r1, [pc, #60]	@ (8007140 <UARTEx_SetNbDataToProcess+0x98>)
 8007102:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007104:	fb93 f3f2 	sdiv	r3, r3, r2
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	7b7a      	ldrb	r2, [r7, #13]
 8007114:	4909      	ldr	r1, [pc, #36]	@ (800713c <UARTEx_SetNbDataToProcess+0x94>)
 8007116:	5c8a      	ldrb	r2, [r1, r2]
 8007118:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800711c:	7b7a      	ldrb	r2, [r7, #13]
 800711e:	4908      	ldr	r1, [pc, #32]	@ (8007140 <UARTEx_SetNbDataToProcess+0x98>)
 8007120:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007122:	fb93 f3f2 	sdiv	r3, r3, r2
 8007126:	b29a      	uxth	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	08017bc8 	.word	0x08017bc8
 8007140:	08017bd0 	.word	0x08017bd0

08007144 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800714a:	f003 fdb3 	bl	800acb4 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800714e:	4b12      	ldr	r3, [pc, #72]	@ (8007198 <MX_LWIP_Init+0x54>)
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007154:	4b11      	ldr	r3, [pc, #68]	@ (800719c <MX_LWIP_Init+0x58>)
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800715a:	4b11      	ldr	r3, [pc, #68]	@ (80071a0 <MX_LWIP_Init+0x5c>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007160:	4b10      	ldr	r3, [pc, #64]	@ (80071a4 <MX_LWIP_Init+0x60>)
 8007162:	9302      	str	r3, [sp, #8]
 8007164:	4b10      	ldr	r3, [pc, #64]	@ (80071a8 <MX_LWIP_Init+0x64>)
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	2300      	movs	r3, #0
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	4b0c      	ldr	r3, [pc, #48]	@ (80071a0 <MX_LWIP_Init+0x5c>)
 800716e:	4a0b      	ldr	r2, [pc, #44]	@ (800719c <MX_LWIP_Init+0x58>)
 8007170:	4909      	ldr	r1, [pc, #36]	@ (8007198 <MX_LWIP_Init+0x54>)
 8007172:	480e      	ldr	r0, [pc, #56]	@ (80071ac <MX_LWIP_Init+0x68>)
 8007174:	f005 fbba 	bl	800c8ec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007178:	480c      	ldr	r0, [pc, #48]	@ (80071ac <MX_LWIP_Init+0x68>)
 800717a:	f005 fd71 	bl	800cc60 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800717e:	480b      	ldr	r0, [pc, #44]	@ (80071ac <MX_LWIP_Init+0x68>)
 8007180:	f005 fd7e 	bl	800cc80 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007184:	490a      	ldr	r1, [pc, #40]	@ (80071b0 <MX_LWIP_Init+0x6c>)
 8007186:	4809      	ldr	r0, [pc, #36]	@ (80071ac <MX_LWIP_Init+0x68>)
 8007188:	f005 fe80 	bl	800ce8c <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800718c:	4807      	ldr	r0, [pc, #28]	@ (80071ac <MX_LWIP_Init+0x68>)
 800718e:	f000 ffeb 	bl	8008168 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007192:	bf00      	nop
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	24004b08 	.word	0x24004b08
 800719c:	24004b0c 	.word	0x24004b0c
 80071a0:	24004b10 	.word	0x24004b10
 80071a4:	0800a629 	.word	0x0800a629
 80071a8:	080074e1 	.word	0x080074e1
 80071ac:	24004ad0 	.word	0x24004ad0
 80071b0:	08007205 	.word	0x08007205

080071b4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80071bc:	f7f9 ff92 	bl	80010e4 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <Ethernet_Link_Periodic_Handle+0x30>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b63      	cmp	r3, #99	@ 0x63
 80071ca:	d907      	bls.n	80071dc <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80071cc:	f7f9 ff8a 	bl	80010e4 <HAL_GetTick>
 80071d0:	4603      	mov	r3, r0
 80071d2:	4a04      	ldr	r2, [pc, #16]	@ (80071e4 <Ethernet_Link_Periodic_Handle+0x30>)
 80071d4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 faf6 	bl	80077c8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	24004acc 	.word	0x24004acc

080071e8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80071ec:	4804      	ldr	r0, [pc, #16]	@ (8007200 <MX_LWIP_Process+0x18>)
 80071ee:	f000 f957 	bl	80074a0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80071f2:	f00b fec9 	bl	8012f88 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80071f6:	4802      	ldr	r0, [pc, #8]	@ (8007200 <MX_LWIP_Process+0x18>)
 80071f8:	f7ff ffdc 	bl	80071b4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80071fc:	bf00      	nop
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	24004ad0 	.word	0x24004ad0

08007204 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
	  printf("got link\r\n");
 800721c:	4805      	ldr	r0, [pc, #20]	@ (8007234 <ethernet_link_status_updated+0x30>)
 800721e:	f00c fd19 	bl	8013c54 <puts>
  {
/* USER CODE BEGIN 6 */
	  printf("lost link\r\n");
/* USER CODE END 6 */
  }
}
 8007222:	e002      	b.n	800722a <ethernet_link_status_updated+0x26>
	  printf("lost link\r\n");
 8007224:	4804      	ldr	r0, [pc, #16]	@ (8007238 <ethernet_link_status_updated+0x34>)
 8007226:	f00c fd15 	bl	8013c54 <puts>
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	08014a98 	.word	0x08014a98
 8007238:	08014aa4 	.word	0x08014aa4

0800723c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007248:	4b3f      	ldr	r3, [pc, #252]	@ (8007348 <low_level_init+0x10c>)
 800724a:	4a40      	ldr	r2, [pc, #256]	@ (800734c <low_level_init+0x110>)
 800724c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800724e:	2300      	movs	r3, #0
 8007250:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007252:	2380      	movs	r3, #128	@ 0x80
 8007254:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007256:	23e1      	movs	r3, #225	@ 0xe1
 8007258:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800725a:	2300      	movs	r3, #0
 800725c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800725e:	2300      	movs	r3, #0
 8007260:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007262:	2300      	movs	r3, #0
 8007264:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007266:	4a38      	ldr	r2, [pc, #224]	@ (8007348 <low_level_init+0x10c>)
 8007268:	f107 0308 	add.w	r3, r7, #8
 800726c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800726e:	4b36      	ldr	r3, [pc, #216]	@ (8007348 <low_level_init+0x10c>)
 8007270:	2201      	movs	r2, #1
 8007272:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007274:	4b34      	ldr	r3, [pc, #208]	@ (8007348 <low_level_init+0x10c>)
 8007276:	4a36      	ldr	r2, [pc, #216]	@ (8007350 <low_level_init+0x114>)
 8007278:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800727a:	4b33      	ldr	r3, [pc, #204]	@ (8007348 <low_level_init+0x10c>)
 800727c:	4a35      	ldr	r2, [pc, #212]	@ (8007354 <low_level_init+0x118>)
 800727e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007280:	4b31      	ldr	r3, [pc, #196]	@ (8007348 <low_level_init+0x10c>)
 8007282:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007286:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007288:	482f      	ldr	r0, [pc, #188]	@ (8007348 <low_level_init+0x10c>)
 800728a:	f7fa f87b 	bl	8001384 <HAL_ETH_Init>
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007292:	2238      	movs	r2, #56	@ 0x38
 8007294:	2100      	movs	r1, #0
 8007296:	4830      	ldr	r0, [pc, #192]	@ (8007358 <low_level_init+0x11c>)
 8007298:	f00c fdcc 	bl	8013e34 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800729c:	4b2e      	ldr	r3, [pc, #184]	@ (8007358 <low_level_init+0x11c>)
 800729e:	2221      	movs	r2, #33	@ 0x21
 80072a0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80072a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007358 <low_level_init+0x11c>)
 80072a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80072a8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80072aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007358 <low_level_init+0x11c>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80072b0:	482a      	ldr	r0, [pc, #168]	@ (800735c <low_level_init+0x120>)
 80072b2:	f005 f9e3 	bl	800c67c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2206      	movs	r2, #6
 80072ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80072be:	4b22      	ldr	r3, [pc, #136]	@ (8007348 <low_level_init+0x10c>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80072ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007348 <low_level_init+0x10c>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	785a      	ldrb	r2, [r3, #1]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80072d6:	4b1c      	ldr	r3, [pc, #112]	@ (8007348 <low_level_init+0x10c>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	789a      	ldrb	r2, [r3, #2]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80072e2:	4b19      	ldr	r3, [pc, #100]	@ (8007348 <low_level_init+0x10c>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	78da      	ldrb	r2, [r3, #3]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80072ee:	4b16      	ldr	r3, [pc, #88]	@ (8007348 <low_level_init+0x10c>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	791a      	ldrb	r2, [r3, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80072fa:	4b13      	ldr	r3, [pc, #76]	@ (8007348 <low_level_init+0x10c>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	795a      	ldrb	r2, [r3, #5]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800730c:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007314:	f043 030a 	orr.w	r3, r3, #10
 8007318:	b2da      	uxtb	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007320:	490f      	ldr	r1, [pc, #60]	@ (8007360 <low_level_init+0x124>)
 8007322:	4810      	ldr	r0, [pc, #64]	@ (8007364 <low_level_init+0x128>)
 8007324:	f7f9 fd51 	bl	8000dca <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007328:	480e      	ldr	r0, [pc, #56]	@ (8007364 <low_level_init+0x128>)
 800732a:	f7f9 fd80 	bl	8000e2e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fa47 	bl	80077c8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800733a:	e001      	b.n	8007340 <low_level_init+0x104>
    Error_Handler();
 800733c:	f7f9 fba4 	bl	8000a88 <Error_Handler>
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	24004b1c 	.word	0x24004b1c
 800734c:	40028000 	.word	0x40028000
 8007350:	30040060 	.word	0x30040060
 8007354:	30040000 	.word	0x30040000
 8007358:	24004bcc 	.word	0x24004bcc
 800735c:	08017bd8 	.word	0x08017bd8
 8007360:	24000010 	.word	0x24000010
 8007364:	24004c04 	.word	0x24004c04

08007368 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b092      	sub	sp, #72	@ 0x48
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007380:	f107 030c 	add.w	r3, r7, #12
 8007384:	2230      	movs	r2, #48	@ 0x30
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f00c fd53 	bl	8013e34 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800738e:	f107 030c 	add.w	r3, r7, #12
 8007392:	2230      	movs	r2, #48	@ 0x30
 8007394:	2100      	movs	r1, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f00c fd4c 	bl	8013e34 <memset>

  for(q = p; q != NULL; q = q->next)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	643b      	str	r3, [r7, #64]	@ 0x40
 80073a0:	e045      	b.n	800742e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80073a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d902      	bls.n	80073ae <low_level_output+0x46>
      return ERR_IF;
 80073a8:	f06f 030b 	mvn.w	r3, #11
 80073ac:	e055      	b.n	800745a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80073ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073b0:	6859      	ldr	r1, [r3, #4]
 80073b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073b4:	4613      	mov	r3, r2
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	3348      	adds	r3, #72	@ 0x48
 80073be:	443b      	add	r3, r7
 80073c0:	3b3c      	subs	r3, #60	@ 0x3c
 80073c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80073c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073c6:	895b      	ldrh	r3, [r3, #10]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	3348      	adds	r3, #72	@ 0x48
 80073d6:	443b      	add	r3, r7
 80073d8:	3b38      	subs	r3, #56	@ 0x38
 80073da:	6019      	str	r1, [r3, #0]

    if(i>0)
 80073dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d011      	beq.n	8007406 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80073e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	f107 000c 	add.w	r0, r7, #12
 80073ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073ec:	460b      	mov	r3, r1
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	440b      	add	r3, r1
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	18c1      	adds	r1, r0, r3
 80073f6:	4613      	mov	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	3348      	adds	r3, #72	@ 0x48
 8007400:	443b      	add	r3, r7
 8007402:	3b34      	subs	r3, #52	@ 0x34
 8007404:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800740e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007410:	4613      	mov	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	3348      	adds	r3, #72	@ 0x48
 800741a:	443b      	add	r3, r7
 800741c:	3b34      	subs	r3, #52	@ 0x34
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007424:	3301      	adds	r3, #1
 8007426:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	643b      	str	r3, [r7, #64]	@ 0x40
 800742e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1b6      	bne.n	80073a2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	891b      	ldrh	r3, [r3, #8]
 8007438:	461a      	mov	r2, r3
 800743a:	4b0a      	ldr	r3, [pc, #40]	@ (8007464 <low_level_output+0xfc>)
 800743c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800743e:	4a09      	ldr	r2, [pc, #36]	@ (8007464 <low_level_output+0xfc>)
 8007440:	f107 030c 	add.w	r3, r7, #12
 8007444:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007446:	4a07      	ldr	r2, [pc, #28]	@ (8007464 <low_level_output+0xfc>)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800744c:	2214      	movs	r2, #20
 800744e:	4905      	ldr	r1, [pc, #20]	@ (8007464 <low_level_output+0xfc>)
 8007450:	4805      	ldr	r0, [pc, #20]	@ (8007468 <low_level_output+0x100>)
 8007452:	f7fa f947 	bl	80016e4 <HAL_ETH_Transmit>

  return errval;
 8007456:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800745a:	4618      	mov	r0, r3
 800745c:	3748      	adds	r7, #72	@ 0x48
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	24004bcc 	.word	0x24004bcc
 8007468:	24004b1c 	.word	0x24004b1c

0800746c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007478:	4b07      	ldr	r3, [pc, #28]	@ (8007498 <low_level_input+0x2c>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007480:	f107 030c 	add.w	r3, r7, #12
 8007484:	4619      	mov	r1, r3
 8007486:	4805      	ldr	r0, [pc, #20]	@ (800749c <low_level_input+0x30>)
 8007488:	f7fa f9c3 	bl	8001812 <HAL_ETH_ReadData>
  }

  return p;
 800748c:	68fb      	ldr	r3, [r7, #12]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	24004b18 	.word	0x24004b18
 800749c:	24004b1c 	.word	0x24004b1c

080074a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff ffdd 	bl	800746c <low_level_input>
 80074b2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	4798      	blx	r3
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f006 f85e 	bl	800d58c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1ea      	bne.n	80074ac <ethernetif_input+0xc>
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d106      	bne.n	80074fc <ethernetif_init+0x1c>
 80074ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007528 <ethernetif_init+0x48>)
 80074f0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80074f4:	490d      	ldr	r1, [pc, #52]	@ (800752c <ethernetif_init+0x4c>)
 80074f6:	480e      	ldr	r0, [pc, #56]	@ (8007530 <ethernetif_init+0x50>)
 80074f8:	f00c fb44 	bl	8013b84 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2273      	movs	r2, #115	@ 0x73
 8007500:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2274      	movs	r2, #116	@ 0x74
 8007508:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a09      	ldr	r2, [pc, #36]	@ (8007534 <ethernetif_init+0x54>)
 8007510:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a08      	ldr	r2, [pc, #32]	@ (8007538 <ethernetif_init+0x58>)
 8007516:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff fe8f 	bl	800723c <low_level_init>

  return ERR_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	08014ab0 	.word	0x08014ab0
 800752c:	08014acc 	.word	0x08014acc
 8007530:	08014adc 	.word	0x08014adc
 8007534:	0800a029 	.word	0x0800a029
 8007538:	08007369 	.word	0x08007369

0800753c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	4807      	ldr	r0, [pc, #28]	@ (8007568 <pbuf_free_custom+0x2c>)
 800754c:	f005 f978 	bl	800c840 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007550:	4b06      	ldr	r3, [pc, #24]	@ (800756c <pbuf_free_custom+0x30>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d102      	bne.n	800755e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007558:	4b04      	ldr	r3, [pc, #16]	@ (800756c <pbuf_free_custom+0x30>)
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
  }
}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	08017bd8 	.word	0x08017bd8
 800756c:	24004b18 	.word	0x24004b18

08007570 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007574:	f7f9 fdb6 	bl	80010e4 <HAL_GetTick>
 8007578:	4603      	mov	r3, r0
}
 800757a:	4618      	mov	r0, r3
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08e      	sub	sp, #56	@ 0x38
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5d      	ldr	r2, [pc, #372]	@ (8007714 <HAL_ETH_MspInit+0x194>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	f040 80b3 	bne.w	800770a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80075a4:	4b5c      	ldr	r3, [pc, #368]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075aa:	4a5b      	ldr	r2, [pc, #364]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075b0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80075b4:	4b58      	ldr	r3, [pc, #352]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80075c2:	4b55      	ldr	r3, [pc, #340]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075c8:	4a53      	ldr	r2, [pc, #332]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80075d2:	4b51      	ldr	r3, [pc, #324]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075dc:	61fb      	str	r3, [r7, #28]
 80075de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80075e0:	4b4d      	ldr	r3, [pc, #308]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075e6:	4a4c      	ldr	r2, [pc, #304]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80075f0:	4b49      	ldr	r3, [pc, #292]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 80075f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075fe:	4b46      	ldr	r3, [pc, #280]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 8007600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007604:	4a44      	ldr	r2, [pc, #272]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 8007606:	f043 0304 	orr.w	r3, r3, #4
 800760a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800760e:	4b42      	ldr	r3, [pc, #264]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 8007610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800761c:	4b3e      	ldr	r3, [pc, #248]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 800761e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007622:	4a3d      	ldr	r2, [pc, #244]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 8007624:	f043 0301 	orr.w	r3, r3, #1
 8007628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800762c:	4b3a      	ldr	r3, [pc, #232]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 800762e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800763a:	4b37      	ldr	r3, [pc, #220]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 800763c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007640:	4a35      	ldr	r2, [pc, #212]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 8007642:	f043 0302 	orr.w	r3, r3, #2
 8007646:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800764a:	4b33      	ldr	r3, [pc, #204]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 800764c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007658:	4b2f      	ldr	r3, [pc, #188]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 800765a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800765e:	4a2e      	ldr	r2, [pc, #184]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 8007660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007664:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007668:	4b2b      	ldr	r3, [pc, #172]	@ (8007718 <HAL_ETH_MspInit+0x198>)
 800766a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800766e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007672:	60bb      	str	r3, [r7, #8]
 8007674:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007676:	2332      	movs	r3, #50	@ 0x32
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767a:	2302      	movs	r3, #2
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800767e:	2300      	movs	r3, #0
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007682:	2300      	movs	r3, #0
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007686:	230b      	movs	r3, #11
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800768a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800768e:	4619      	mov	r1, r3
 8007690:	4822      	ldr	r0, [pc, #136]	@ (800771c <HAL_ETH_MspInit+0x19c>)
 8007692:	f7fb fba3 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007696:	2386      	movs	r3, #134	@ 0x86
 8007698:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800769a:	2302      	movs	r3, #2
 800769c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076a2:	2300      	movs	r3, #0
 80076a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076a6:	230b      	movs	r3, #11
 80076a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ae:	4619      	mov	r1, r3
 80076b0:	481b      	ldr	r0, [pc, #108]	@ (8007720 <HAL_ETH_MspInit+0x1a0>)
 80076b2:	f7fb fb93 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80076b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80076ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076bc:	2302      	movs	r3, #2
 80076be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c4:	2300      	movs	r3, #0
 80076c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076c8:	230b      	movs	r3, #11
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d0:	4619      	mov	r1, r3
 80076d2:	4814      	ldr	r0, [pc, #80]	@ (8007724 <HAL_ETH_MspInit+0x1a4>)
 80076d4:	f7fb fb82 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80076d8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80076dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076de:	2302      	movs	r3, #2
 80076e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076e6:	2300      	movs	r3, #0
 80076e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076ea:	230b      	movs	r3, #11
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80076ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076f2:	4619      	mov	r1, r3
 80076f4:	480c      	ldr	r0, [pc, #48]	@ (8007728 <HAL_ETH_MspInit+0x1a8>)
 80076f6:	f7fb fb71 	bl	8002ddc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	203d      	movs	r0, #61	@ 0x3d
 8007700:	f7f9 fdf7 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007704:	203d      	movs	r0, #61	@ 0x3d
 8007706:	f7f9 fe0e 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800770a:	bf00      	nop
 800770c:	3738      	adds	r7, #56	@ 0x38
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40028000 	.word	0x40028000
 8007718:	58024400 	.word	0x58024400
 800771c:	58020800 	.word	0x58020800
 8007720:	58020000 	.word	0x58020000
 8007724:	58020400 	.word	0x58020400
 8007728:	58021800 	.word	0x58021800

0800772c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007730:	4802      	ldr	r0, [pc, #8]	@ (800773c <ETH_PHY_IO_Init+0x10>)
 8007732:	f7fa fd81 	bl	8002238 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	bd80      	pop	{r7, pc}
 800773c:	24004b1c 	.word	0x24004b1c

08007740 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
  return 0;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	68f9      	ldr	r1, [r7, #12]
 8007762:	4807      	ldr	r0, [pc, #28]	@ (8007780 <ETH_PHY_IO_ReadReg+0x30>)
 8007764:	f7fa fad2 	bl	8001d0c <HAL_ETH_ReadPHYRegister>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800776e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007772:	e000      	b.n	8007776 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	24004b1c 	.word	0x24004b1c

08007784 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	4807      	ldr	r0, [pc, #28]	@ (80077b4 <ETH_PHY_IO_WriteReg+0x30>)
 8007798:	f7fa fb0c 	bl	8001db4 <HAL_ETH_WritePHYRegister>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077a6:	e000      	b.n	80077aa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	24004b1c 	.word	0x24004b1c

080077b8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80077bc:	f7f9 fc92 	bl	80010e4 <HAL_GetTick>
 80077c0:	4603      	mov	r3, r0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b0a0      	sub	sp, #128	@ 0x80
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	2264      	movs	r2, #100	@ 0x64
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f00c fb2b 	bl	8013e34 <memset>
  int32_t PHYLinkState = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077e6:	2300      	movs	r3, #0
 80077e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077ea:	2300      	movs	r3, #0
 80077ec:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80077ee:	483a      	ldr	r0, [pc, #232]	@ (80078d8 <ethernet_link_check_state+0x110>)
 80077f0:	f7f9 fb6a 	bl	8000ec8 <LAN8742_GetLinkState>
 80077f4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80077fc:	089b      	lsrs	r3, r3, #2
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00c      	beq.n	8007822 <ethernet_link_check_state+0x5a>
 8007808:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800780a:	2b01      	cmp	r3, #1
 800780c:	dc09      	bgt.n	8007822 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800780e:	4833      	ldr	r0, [pc, #204]	@ (80078dc <ethernet_link_check_state+0x114>)
 8007810:	f7f9 ff18 	bl	8001644 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f005 fa9f 	bl	800cd58 <netif_set_down>
    netif_set_link_down(netif);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f005 fb06 	bl	800ce2c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007820:	e055      	b.n	80078ce <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d14e      	bne.n	80078ce <ethernet_link_check_state+0x106>
 8007830:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007832:	2b01      	cmp	r3, #1
 8007834:	dd4b      	ble.n	80078ce <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007838:	3b02      	subs	r3, #2
 800783a:	2b03      	cmp	r3, #3
 800783c:	d82a      	bhi.n	8007894 <ethernet_link_check_state+0xcc>
 800783e:	a201      	add	r2, pc, #4	@ (adr r2, 8007844 <ethernet_link_check_state+0x7c>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	08007855 	.word	0x08007855
 8007848:	08007867 	.word	0x08007867
 800784c:	08007877 	.word	0x08007877
 8007850:	08007887 	.word	0x08007887
      duplex = ETH_FULLDUPLEX_MODE;
 8007854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007858:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800785a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800785e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007860:	2301      	movs	r3, #1
 8007862:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007864:	e017      	b.n	8007896 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007866:	2300      	movs	r3, #0
 8007868:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800786a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800786e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007870:	2301      	movs	r3, #1
 8007872:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007874:	e00f      	b.n	8007896 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800787a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800787c:	2300      	movs	r3, #0
 800787e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007880:	2301      	movs	r3, #1
 8007882:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007884:	e007      	b.n	8007896 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007886:	2300      	movs	r3, #0
 8007888:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800788a:	2300      	movs	r3, #0
 800788c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800788e:	2301      	movs	r3, #1
 8007890:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007892:	e000      	b.n	8007896 <ethernet_link_check_state+0xce>
      break;
 8007894:	bf00      	nop
    if(linkchanged)
 8007896:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d018      	beq.n	80078ce <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800789c:	f107 030c 	add.w	r3, r7, #12
 80078a0:	4619      	mov	r1, r3
 80078a2:	480e      	ldr	r0, [pc, #56]	@ (80078dc <ethernet_link_check_state+0x114>)
 80078a4:	f7fa fada 	bl	8001e5c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80078a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078aa:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80078ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078ae:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80078b0:	f107 030c 	add.w	r3, r7, #12
 80078b4:	4619      	mov	r1, r3
 80078b6:	4809      	ldr	r0, [pc, #36]	@ (80078dc <ethernet_link_check_state+0x114>)
 80078b8:	f7fa fca4 	bl	8002204 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80078bc:	4807      	ldr	r0, [pc, #28]	@ (80078dc <ethernet_link_check_state+0x114>)
 80078be:	f7f9 fe5f 	bl	8001580 <HAL_ETH_Start>
      netif_set_up(netif);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f005 f9dc 	bl	800cc80 <netif_set_up>
      netif_set_link_up(netif);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f005 fa77 	bl	800cdbc <netif_set_link_up>
}
 80078ce:	bf00      	nop
 80078d0:	3780      	adds	r7, #128	@ 0x80
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	24004c04 	.word	0x24004c04
 80078dc:	24004b1c 	.word	0x24004b1c

080078e0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80078e8:	4812      	ldr	r0, [pc, #72]	@ (8007934 <HAL_ETH_RxAllocateCallback+0x54>)
 80078ea:	f004 ff3b 	bl	800c764 <memp_malloc_pool>
 80078ee:	60f8      	str	r0, [r7, #12]
  if (p)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d014      	beq.n	8007920 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f103 0220 	add.w	r2, r3, #32
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a0d      	ldr	r2, [pc, #52]	@ (8007938 <HAL_ETH_RxAllocateCallback+0x58>)
 8007904:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800790e:	9201      	str	r2, [sp, #4]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2241      	movs	r2, #65	@ 0x41
 8007916:	2100      	movs	r1, #0
 8007918:	2000      	movs	r0, #0
 800791a:	f005 fc7d 	bl	800d218 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800791e:	e005      	b.n	800792c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007920:	4b06      	ldr	r3, [pc, #24]	@ (800793c <HAL_ETH_RxAllocateCallback+0x5c>)
 8007922:	2201      	movs	r2, #1
 8007924:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	08017bd8 	.word	0x08017bd8
 8007938:	0800753d 	.word	0x0800753d
 800793c:	24004b18 	.word	0x24004b18

08007940 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007940:	b480      	push	{r7}
 8007942:	b08d      	sub	sp, #52	@ 0x34
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3b20      	subs	r3, #32
 800795e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8007960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007968:	2200      	movs	r2, #0
 800796a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800796c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796e:	887a      	ldrh	r2, [r7, #2]
 8007970:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	e003      	b.n	800798a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007988:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800798e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007996:	e009      	b.n	80079ac <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799a:	891a      	ldrh	r2, [r3, #8]
 800799c:	887b      	ldrh	r3, [r7, #2]
 800799e:	4413      	add	r3, r2
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80079a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f2      	bne.n	8007998 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80079b2:	887b      	ldrh	r3, [r7, #2]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	623a      	str	r2, [r7, #32]
 80079b8:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dd1d      	ble.n	80079fc <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	f003 021f 	and.w	r2, r3, #31
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	4413      	add	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80079d0:	f3bf 8f4f 	dsb	sy
}
 80079d4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80079d6:	4a0d      	ldr	r2, [pc, #52]	@ (8007a0c <HAL_ETH_RxLinkCallback+0xcc>)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	3320      	adds	r3, #32
 80079e2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	3b20      	subs	r3, #32
 80079e8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dcf2      	bgt.n	80079d6 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80079f0:	f3bf 8f4f 	dsb	sy
}
 80079f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80079f6:	f3bf 8f6f 	isb	sy
}
 80079fa:	bf00      	nop
}
 80079fc:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80079fe:	bf00      	nop
 8007a00:	3734      	adds	r7, #52	@ 0x34
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	e000ed00 	.word	0xe000ed00

08007a10 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	b21a      	sxth	r2, r3
 8007a20:	88fb      	ldrh	r3, [r7, #6]
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	b21b      	sxth	r3, r3
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b21b      	sxth	r3, r3
 8007a2c:	b29b      	uxth	r3, r3
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	061a      	lsls	r2, r3, #24
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	0e1b      	lsrs	r3, r3, #24
 8007a5e:	4313      	orrs	r3, r2
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8007a70:	4b20      	ldr	r3, [pc, #128]	@ (8007af4 <dhcp_inc_pcb_refcount+0x88>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d133      	bne.n	8007ae0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8007a78:	4b1f      	ldr	r3, [pc, #124]	@ (8007af8 <dhcp_inc_pcb_refcount+0x8c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <dhcp_inc_pcb_refcount+0x20>
 8007a80:	4b1e      	ldr	r3, [pc, #120]	@ (8007afc <dhcp_inc_pcb_refcount+0x90>)
 8007a82:	22e5      	movs	r2, #229	@ 0xe5
 8007a84:	491e      	ldr	r1, [pc, #120]	@ (8007b00 <dhcp_inc_pcb_refcount+0x94>)
 8007a86:	481f      	ldr	r0, [pc, #124]	@ (8007b04 <dhcp_inc_pcb_refcount+0x98>)
 8007a88:	f00c f87c 	bl	8013b84 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8007a8c:	f00b ff32 	bl	80138f4 <udp_new>
 8007a90:	4603      	mov	r3, r0
 8007a92:	4a19      	ldr	r2, [pc, #100]	@ (8007af8 <dhcp_inc_pcb_refcount+0x8c>)
 8007a94:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8007a96:	4b18      	ldr	r3, [pc, #96]	@ (8007af8 <dhcp_inc_pcb_refcount+0x8c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d102      	bne.n	8007aa4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8007a9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007aa2:	e024      	b.n	8007aee <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8007aa4:	4b14      	ldr	r3, [pc, #80]	@ (8007af8 <dhcp_inc_pcb_refcount+0x8c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	7a5a      	ldrb	r2, [r3, #9]
 8007aaa:	4b13      	ldr	r3, [pc, #76]	@ (8007af8 <dhcp_inc_pcb_refcount+0x8c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0220 	orr.w	r2, r2, #32
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8007ab6:	4b10      	ldr	r3, [pc, #64]	@ (8007af8 <dhcp_inc_pcb_refcount+0x8c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2244      	movs	r2, #68	@ 0x44
 8007abc:	4912      	ldr	r1, [pc, #72]	@ (8007b08 <dhcp_inc_pcb_refcount+0x9c>)
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f00b fdc0 	bl	8013644 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8007af8 <dhcp_inc_pcb_refcount+0x8c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2243      	movs	r2, #67	@ 0x43
 8007aca:	490f      	ldr	r1, [pc, #60]	@ (8007b08 <dhcp_inc_pcb_refcount+0x9c>)
 8007acc:	4618      	mov	r0, r3
 8007ace:	f00b fe41 	bl	8013754 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8007ad2:	4b09      	ldr	r3, [pc, #36]	@ (8007af8 <dhcp_inc_pcb_refcount+0x8c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	490c      	ldr	r1, [pc, #48]	@ (8007b0c <dhcp_inc_pcb_refcount+0xa0>)
 8007ada:	4618      	mov	r0, r3
 8007adc:	f00b fea8 	bl	8013830 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8007ae0:	4b04      	ldr	r3, [pc, #16]	@ (8007af4 <dhcp_inc_pcb_refcount+0x88>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	4b02      	ldr	r3, [pc, #8]	@ (8007af4 <dhcp_inc_pcb_refcount+0x88>)
 8007aea:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	24004c50 	.word	0x24004c50
 8007af8:	24004c4c 	.word	0x24004c4c
 8007afc:	08014b04 	.word	0x08014b04
 8007b00:	08014b74 	.word	0x08014b74
 8007b04:	08014b9c 	.word	0x08014b9c
 8007b08:	08017bf4 	.word	0x08017bf4
 8007b0c:	08009399 	.word	0x08009399

08007b10 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8007b14:	4b0e      	ldr	r3, [pc, #56]	@ (8007b50 <dhcp_dec_pcb_refcount+0x40>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d105      	bne.n	8007b28 <dhcp_dec_pcb_refcount+0x18>
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b54 <dhcp_dec_pcb_refcount+0x44>)
 8007b1e:	22ff      	movs	r2, #255	@ 0xff
 8007b20:	490d      	ldr	r1, [pc, #52]	@ (8007b58 <dhcp_dec_pcb_refcount+0x48>)
 8007b22:	480e      	ldr	r0, [pc, #56]	@ (8007b5c <dhcp_dec_pcb_refcount+0x4c>)
 8007b24:	f00c f82e 	bl	8013b84 <iprintf>
  dhcp_pcb_refcount--;
 8007b28:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <dhcp_dec_pcb_refcount+0x40>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	4b07      	ldr	r3, [pc, #28]	@ (8007b50 <dhcp_dec_pcb_refcount+0x40>)
 8007b32:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8007b34:	4b06      	ldr	r3, [pc, #24]	@ (8007b50 <dhcp_dec_pcb_refcount+0x40>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d107      	bne.n	8007b4c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8007b3c:	4b08      	ldr	r3, [pc, #32]	@ (8007b60 <dhcp_dec_pcb_refcount+0x50>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f00b fe95 	bl	8013870 <udp_remove>
    dhcp_pcb = NULL;
 8007b46:	4b06      	ldr	r3, [pc, #24]	@ (8007b60 <dhcp_dec_pcb_refcount+0x50>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	24004c50 	.word	0x24004c50
 8007b54:	08014b04 	.word	0x08014b04
 8007b58:	08014bc4 	.word	0x08014bc4
 8007b5c:	08014b9c 	.word	0x08014b9c
 8007b60:	24004c4c 	.word	0x24004c4c

08007b64 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b70:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007b72:	210c      	movs	r1, #12
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f001 f851 	bl	8008c1c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007b7a:	4b06      	ldr	r3, [pc, #24]	@ (8007b94 <dhcp_handle_nak+0x30>)
 8007b7c:	4a05      	ldr	r2, [pc, #20]	@ (8007b94 <dhcp_handle_nak+0x30>)
 8007b7e:	4905      	ldr	r1, [pc, #20]	@ (8007b94 <dhcp_handle_nak+0x30>)
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f005 f823 	bl	800cbcc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fc4a 	bl	8008420 <dhcp_discover>
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	08017bf4 	.word	0x08017bf4

08007b98 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8007ba6:	2108      	movs	r1, #8
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f001 f837 	bl	8008c1c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	331c      	adds	r3, #28
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f002 fb38 	bl	800a22c <etharp_query>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	799b      	ldrb	r3, [r3, #6]
 8007bc4:	2bff      	cmp	r3, #255	@ 0xff
 8007bc6:	d005      	beq.n	8007bd4 <dhcp_check+0x3c>
    dhcp->tries++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	799b      	ldrb	r3, [r3, #6]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8007bd4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007bd8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007bda:	893b      	ldrh	r3, [r7, #8]
 8007bdc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8007be0:	4a06      	ldr	r2, [pc, #24]	@ (8007bfc <dhcp_check+0x64>)
 8007be2:	fb82 1203 	smull	r1, r2, r2, r3
 8007be6:	1152      	asrs	r2, r2, #5
 8007be8:	17db      	asrs	r3, r3, #31
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	10624dd3 	.word	0x10624dd3

08007c00 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8007c10:	4b0c      	ldr	r3, [pc, #48]	@ (8007c44 <dhcp_handle_offer+0x44>)
 8007c12:	789b      	ldrb	r3, [r3, #2]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d011      	beq.n	8007c3c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c48 <dhcp_handle_offer+0x48>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff ff09 	bl	8007a3a <lwip_htonl>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	691a      	ldr	r2, [r3, #16]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f808 	bl	8007c4c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	24004c44 	.word	0x24004c44
 8007c48:	24004c24 	.word	0x24004c24

08007c4c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8007c4c:	b5b0      	push	{r4, r5, r7, lr}
 8007c4e:	b08a      	sub	sp, #40	@ 0x28
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d109      	bne.n	8007c6e <dhcp_select+0x22>
 8007c5a:	4b71      	ldr	r3, [pc, #452]	@ (8007e20 <dhcp_select+0x1d4>)
 8007c5c:	f240 1277 	movw	r2, #375	@ 0x177
 8007c60:	4970      	ldr	r1, [pc, #448]	@ (8007e24 <dhcp_select+0x1d8>)
 8007c62:	4871      	ldr	r0, [pc, #452]	@ (8007e28 <dhcp_select+0x1dc>)
 8007c64:	f00b ff8e 	bl	8013b84 <iprintf>
 8007c68:	f06f 030f 	mvn.w	r3, #15
 8007c6c:	e0d3      	b.n	8007e16 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c72:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <dhcp_select+0x42>
 8007c7a:	4b69      	ldr	r3, [pc, #420]	@ (8007e20 <dhcp_select+0x1d4>)
 8007c7c:	f240 1279 	movw	r2, #377	@ 0x179
 8007c80:	496a      	ldr	r1, [pc, #424]	@ (8007e2c <dhcp_select+0x1e0>)
 8007c82:	4869      	ldr	r0, [pc, #420]	@ (8007e28 <dhcp_select+0x1dc>)
 8007c84:	f00b ff7e 	bl	8013b84 <iprintf>
 8007c88:	f06f 0305 	mvn.w	r3, #5
 8007c8c:	e0c3      	b.n	8007e16 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8007c8e:	2101      	movs	r1, #1
 8007c90:	69b8      	ldr	r0, [r7, #24]
 8007c92:	f000 ffc3 	bl	8008c1c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007c96:	f107 030c 	add.w	r3, r7, #12
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	69b9      	ldr	r1, [r7, #24]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fc48 	bl	8009534 <dhcp_create_msg>
 8007ca4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8085 	beq.w	8007db8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007cb4:	89b8      	ldrh	r0, [r7, #12]
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	2239      	movs	r2, #57	@ 0x39
 8007cc0:	f000 ffc6 	bl	8008c50 <dhcp_option>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007cc8:	89b8      	ldrh	r0, [r7, #12]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f001 f815 	bl	8008d04 <dhcp_option_short>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007cde:	89b8      	ldrh	r0, [r7, #12]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8007ce6:	2304      	movs	r3, #4
 8007ce8:	2232      	movs	r2, #50	@ 0x32
 8007cea:	f000 ffb1 	bl	8008c50 <dhcp_option>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007cf2:	89bc      	ldrh	r4, [r7, #12]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fe9b 	bl	8007a3a <lwip_htonl>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f001 f82c 	bl	8008d68 <dhcp_option_long>
 8007d10:	4603      	mov	r3, r0
 8007d12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8007d14:	89b8      	ldrh	r0, [r7, #12]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	2236      	movs	r2, #54	@ 0x36
 8007d20:	f000 ff96 	bl	8008c50 <dhcp_option>
 8007d24:	4603      	mov	r3, r0
 8007d26:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8007d28:	89bc      	ldrh	r4, [r7, #12]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7ff fe80 	bl	8007a3a <lwip_htonl>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4620      	mov	r0, r4
 8007d42:	f001 f811 	bl	8008d68 <dhcp_option_long>
 8007d46:	4603      	mov	r3, r0
 8007d48:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007d4a:	89b8      	ldrh	r0, [r7, #12]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8007d52:	2303      	movs	r3, #3
 8007d54:	2237      	movs	r2, #55	@ 0x37
 8007d56:	f000 ff7b 	bl	8008c50 <dhcp_option>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007d5e:	2300      	movs	r3, #0
 8007d60:	77bb      	strb	r3, [r7, #30]
 8007d62:	e00e      	b.n	8007d82 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007d64:	89b8      	ldrh	r0, [r7, #12]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8007d6c:	7fbb      	ldrb	r3, [r7, #30]
 8007d6e:	4a30      	ldr	r2, [pc, #192]	@ (8007e30 <dhcp_select+0x1e4>)
 8007d70:	5cd3      	ldrb	r3, [r2, r3]
 8007d72:	461a      	mov	r2, r3
 8007d74:	f000 ffa0 	bl	8008cb8 <dhcp_option_byte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007d7c:	7fbb      	ldrb	r3, [r7, #30]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	77bb      	strb	r3, [r7, #30]
 8007d82:	7fbb      	ldrb	r3, [r7, #30]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d9ed      	bls.n	8007d64 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007d88:	89b8      	ldrh	r0, [r7, #12]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	33f0      	adds	r3, #240	@ 0xf0
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f001 fca5 	bl	80096e0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007d96:	4b27      	ldr	r3, [pc, #156]	@ (8007e34 <dhcp_select+0x1e8>)
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	4b27      	ldr	r3, [pc, #156]	@ (8007e38 <dhcp_select+0x1ec>)
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	2343      	movs	r3, #67	@ 0x43
 8007da4:	4a25      	ldr	r2, [pc, #148]	@ (8007e3c <dhcp_select+0x1f0>)
 8007da6:	6979      	ldr	r1, [r7, #20]
 8007da8:	f00b fb66 	bl	8013478 <udp_sendto_if_src>
 8007dac:	4603      	mov	r3, r0
 8007dae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8007db0:	6978      	ldr	r0, [r7, #20]
 8007db2:	f005 fbeb 	bl	800d58c <pbuf_free>
 8007db6:	e001      	b.n	8007dbc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8007db8:	23ff      	movs	r3, #255	@ 0xff
 8007dba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	799b      	ldrb	r3, [r3, #6]
 8007dc0:	2bff      	cmp	r3, #255	@ 0xff
 8007dc2:	d005      	beq.n	8007dd0 <dhcp_select+0x184>
    dhcp->tries++;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	799b      	ldrb	r3, [r3, #6]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	799b      	ldrb	r3, [r3, #6]
 8007dd4:	2b05      	cmp	r3, #5
 8007dd6:	d80d      	bhi.n	8007df4 <dhcp_select+0x1a8>
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	799b      	ldrb	r3, [r3, #6]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	2301      	movs	r3, #1
 8007de0:	4093      	lsls	r3, r2
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	0152      	lsls	r2, r2, #5
 8007de8:	1ad2      	subs	r2, r2, r3
 8007dea:	0092      	lsls	r2, r2, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	e001      	b.n	8007df8 <dhcp_select+0x1ac>
 8007df4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007df8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007dfa:	89fb      	ldrh	r3, [r7, #14]
 8007dfc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8007e00:	4a0f      	ldr	r2, [pc, #60]	@ (8007e40 <dhcp_select+0x1f4>)
 8007e02:	fb82 1203 	smull	r1, r2, r2, r3
 8007e06:	1152      	asrs	r2, r2, #5
 8007e08:	17db      	asrs	r3, r3, #31
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8007e12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3720      	adds	r7, #32
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	08014b04 	.word	0x08014b04
 8007e24:	08014be8 	.word	0x08014be8
 8007e28:	08014b9c 	.word	0x08014b9c
 8007e2c:	08014c04 	.word	0x08014c04
 8007e30:	24000024 	.word	0x24000024
 8007e34:	24004c4c 	.word	0x24004c4c
 8007e38:	08017bf4 	.word	0x08017bf4
 8007e3c:	08017bf8 	.word	0x08017bf8
 8007e40:	10624dd3 	.word	0x10624dd3

08007e44 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8007e4a:	4b27      	ldr	r3, [pc, #156]	@ (8007ee8 <dhcp_coarse_tmr+0xa4>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	607b      	str	r3, [r7, #4]
 8007e50:	e042      	b.n	8007ed8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e56:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d039      	beq.n	8007ed2 <dhcp_coarse_tmr+0x8e>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	795b      	ldrb	r3, [r3, #5]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d035      	beq.n	8007ed2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	8a9b      	ldrh	r3, [r3, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d012      	beq.n	8007e94 <dhcp_coarse_tmr+0x50>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	8a5b      	ldrh	r3, [r3, #18]
 8007e72:	3301      	adds	r3, #1
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	825a      	strh	r2, [r3, #18]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	8a5a      	ldrh	r2, [r3, #18]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	8a9b      	ldrh	r3, [r3, #20]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d106      	bne.n	8007e94 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fe2e 	bl	8008ae8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f96b 	bl	8008168 <dhcp_start>
 8007e92:	e01e      	b.n	8007ed2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	8a1b      	ldrh	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <dhcp_coarse_tmr+0x70>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	8a1b      	ldrh	r3, [r3, #16]
 8007ea0:	1e5a      	subs	r2, r3, #1
 8007ea2:	b291      	uxth	r1, r2
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	8211      	strh	r1, [r2, #16]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d103      	bne.n	8007eb4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f8c7 	bl	8008040 <dhcp_t2_timeout>
 8007eb2:	e00e      	b.n	8007ed2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	89db      	ldrh	r3, [r3, #14]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <dhcp_coarse_tmr+0x8e>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	89db      	ldrh	r3, [r3, #14]
 8007ec0:	1e5a      	subs	r2, r3, #1
 8007ec2:	b291      	uxth	r1, r2
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	81d1      	strh	r1, [r2, #14]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d102      	bne.n	8007ed2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f888 	bl	8007fe2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	607b      	str	r3, [r7, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1b9      	bne.n	8007e52 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	24007c88 	.word	0x24007c88

08007eec <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8007ef2:	4b16      	ldr	r3, [pc, #88]	@ (8007f4c <dhcp_fine_tmr+0x60>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	e020      	b.n	8007f3c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efe:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d017      	beq.n	8007f36 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	891b      	ldrh	r3, [r3, #8]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d906      	bls.n	8007f1c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	891b      	ldrh	r3, [r3, #8]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	811a      	strh	r2, [r3, #8]
 8007f1a:	e00c      	b.n	8007f36 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	891b      	ldrh	r3, [r3, #8]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d108      	bne.n	8007f36 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	891b      	ldrh	r3, [r3, #8]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f80d 	bl	8007f50 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1db      	bne.n	8007efa <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8007f42:	bf00      	nop
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	24007c88 	.word	0x24007c88

08007f50 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	795b      	ldrb	r3, [r3, #5]
 8007f62:	2b0c      	cmp	r3, #12
 8007f64:	d003      	beq.n	8007f6e <dhcp_timeout+0x1e>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	795b      	ldrb	r3, [r3, #5]
 8007f6a:	2b06      	cmp	r3, #6
 8007f6c:	d103      	bne.n	8007f76 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa56 	bl	8008420 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8007f74:	e031      	b.n	8007fda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	795b      	ldrb	r3, [r3, #5]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d10e      	bne.n	8007f9c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	799b      	ldrb	r3, [r3, #6]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d803      	bhi.n	8007f8e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fe60 	bl	8007c4c <dhcp_select>
}
 8007f8c:	e025      	b.n	8007fda <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fdaa 	bl	8008ae8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f8e7 	bl	8008168 <dhcp_start>
}
 8007f9a:	e01e      	b.n	8007fda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	795b      	ldrb	r3, [r3, #5]
 8007fa0:	2b08      	cmp	r3, #8
 8007fa2:	d10b      	bne.n	8007fbc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	799b      	ldrb	r3, [r3, #6]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d803      	bhi.n	8007fb4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff fdf3 	bl	8007b98 <dhcp_check>
}
 8007fb2:	e012      	b.n	8007fda <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fad5 	bl	8008564 <dhcp_bind>
}
 8007fba:	e00e      	b.n	8007fda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	795b      	ldrb	r3, [r3, #5]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d10a      	bne.n	8007fda <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	799b      	ldrb	r3, [r3, #6]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d803      	bhi.n	8007fd4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fcd7 	bl	8008980 <dhcp_reboot>
}
 8007fd2:	e002      	b.n	8007fda <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fa23 	bl	8008420 <dhcp_discover>
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	795b      	ldrb	r3, [r3, #5]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d007      	beq.n	8008008 <dhcp_t1_timeout+0x26>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	795b      	ldrb	r3, [r3, #5]
 8007ffc:	2b0a      	cmp	r3, #10
 8007ffe:	d003      	beq.n	8008008 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008004:	2b05      	cmp	r3, #5
 8008006:	d117      	bne.n	8008038 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fb85 	bl	8008718 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	899b      	ldrh	r3, [r3, #12]
 8008012:	461a      	mov	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8a5b      	ldrh	r3, [r3, #18]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b01      	cmp	r3, #1
 800801c:	dd0c      	ble.n	8008038 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	899b      	ldrh	r3, [r3, #12]
 8008022:	461a      	mov	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8a5b      	ldrh	r3, [r3, #18]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	da00      	bge.n	8008030 <dhcp_t1_timeout+0x4e>
 800802e:	3301      	adds	r3, #1
 8008030:	105b      	asrs	r3, r3, #1
 8008032:	b29a      	uxth	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8008038:	bf00      	nop
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	795b      	ldrb	r3, [r3, #5]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d00b      	beq.n	800806e <dhcp_t2_timeout+0x2e>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	795b      	ldrb	r3, [r3, #5]
 800805a:	2b0a      	cmp	r3, #10
 800805c:	d007      	beq.n	800806e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008062:	2b05      	cmp	r3, #5
 8008064:	d003      	beq.n	800806e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	795b      	ldrb	r3, [r3, #5]
 800806a:	2b04      	cmp	r3, #4
 800806c:	d117      	bne.n	800809e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fbec 	bl	800884c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8a9b      	ldrh	r3, [r3, #20]
 8008078:	461a      	mov	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8a5b      	ldrh	r3, [r3, #18]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b01      	cmp	r3, #1
 8008082:	dd0c      	ble.n	800809e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8a9b      	ldrh	r3, [r3, #20]
 8008088:	461a      	mov	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8a5b      	ldrh	r3, [r3, #18]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	da00      	bge.n	8008096 <dhcp_t2_timeout+0x56>
 8008094:	3301      	adds	r3, #1
 8008096:	105b      	asrs	r3, r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80080c4:	4b26      	ldr	r3, [pc, #152]	@ (8008160 <dhcp_handle_ack+0xb8>)
 80080c6:	78db      	ldrb	r3, [r3, #3]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80080cc:	4b25      	ldr	r3, [pc, #148]	@ (8008164 <dhcp_handle_ack+0xbc>)
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80080d4:	4b22      	ldr	r3, [pc, #136]	@ (8008160 <dhcp_handle_ack+0xb8>)
 80080d6:	791b      	ldrb	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80080dc:	4b21      	ldr	r3, [pc, #132]	@ (8008164 <dhcp_handle_ack+0xbc>)
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80080e4:	e004      	b.n	80080f0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ea:	085a      	lsrs	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80080f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008160 <dhcp_handle_ack+0xb8>)
 80080f2:	795b      	ldrb	r3, [r3, #5]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80080f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008164 <dhcp_handle_ack+0xbc>)
 80080fa:	695a      	ldr	r2, [r3, #20]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8008100:	e007      	b.n	8008112 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008106:	4613      	mov	r3, r2
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	08da      	lsrs	r2, r3, #3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800811a:	4b11      	ldr	r3, [pc, #68]	@ (8008160 <dhcp_handle_ack+0xb8>)
 800811c:	799b      	ldrb	r3, [r3, #6]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8008122:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <dhcp_handle_ack+0xbc>)
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	4618      	mov	r0, r3
 8008128:	f7ff fc87 	bl	8007a3a <lwip_htonl>
 800812c:	4602      	mov	r2, r0
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	71da      	strb	r2, [r3, #7]
 8008138:	e002      	b.n	8008140 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <dhcp_handle_ack+0xb8>)
 8008142:	79db      	ldrb	r3, [r3, #7]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d007      	beq.n	8008158 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8008148:	4b06      	ldr	r3, [pc, #24]	@ (8008164 <dhcp_handle_ack+0xbc>)
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff fc74 	bl	8007a3a <lwip_htonl>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	24004c44 	.word	0x24004c44
 8008164:	24004c24 	.word	0x24004c24

08008168 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <dhcp_start+0x22>
 8008176:	4b37      	ldr	r3, [pc, #220]	@ (8008254 <dhcp_start+0xec>)
 8008178:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800817c:	4936      	ldr	r1, [pc, #216]	@ (8008258 <dhcp_start+0xf0>)
 800817e:	4837      	ldr	r0, [pc, #220]	@ (800825c <dhcp_start+0xf4>)
 8008180:	f00b fd00 	bl	8013b84 <iprintf>
 8008184:	f06f 030f 	mvn.w	r3, #15
 8008188:	e060      	b.n	800824c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d109      	bne.n	80081ac <dhcp_start+0x44>
 8008198:	4b2e      	ldr	r3, [pc, #184]	@ (8008254 <dhcp_start+0xec>)
 800819a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800819e:	4930      	ldr	r1, [pc, #192]	@ (8008260 <dhcp_start+0xf8>)
 80081a0:	482e      	ldr	r0, [pc, #184]	@ (800825c <dhcp_start+0xf4>)
 80081a2:	f00b fcef 	bl	8013b84 <iprintf>
 80081a6:	f06f 030f 	mvn.w	r3, #15
 80081aa:	e04f      	b.n	800824c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081b6:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80081ba:	d202      	bcs.n	80081c2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80081bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081c0:	e044      	b.n	800824c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10d      	bne.n	80081e4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80081c8:	2034      	movs	r0, #52	@ 0x34
 80081ca:	f004 f95d 	bl	800c488 <mem_malloc>
 80081ce:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80081d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081da:	e037      	b.n	800824c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80081e2:	e005      	b.n	80081f0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	791b      	ldrb	r3, [r3, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80081ec:	f7ff fc90 	bl	8007b10 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80081f0:	2234      	movs	r2, #52	@ 0x34
 80081f2:	2100      	movs	r1, #0
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f00b fe1d 	bl	8013e34 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80081fa:	f7ff fc37 	bl	8007a6c <dhcp_inc_pcb_refcount>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <dhcp_start+0xa2>
    return ERR_MEM;
 8008204:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008208:	e020      	b.n	800824c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800821e:	2102      	movs	r1, #2
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fcfb 	bl	8008c1c <dhcp_set_state>
    return ERR_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	e010      	b.n	800824c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f8f8 	bl	8008420 <dhcp_discover>
 8008230:	4603      	mov	r3, r0
 8008232:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8008234:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fc53 	bl	8008ae8 <dhcp_release_and_stop>
    return ERR_MEM;
 8008242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008246:	e001      	b.n	800824c <dhcp_start+0xe4>
  }
  return result;
 8008248:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	08014b04 	.word	0x08014b04
 8008258:	08014c20 	.word	0x08014c20
 800825c:	08014b9c 	.word	0x08014b9c
 8008260:	08014c64 	.word	0x08014c64

08008264 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d025      	beq.n	80082c4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	795b      	ldrb	r3, [r3, #5]
 800827c:	2b0a      	cmp	r3, #10
 800827e:	d008      	beq.n	8008292 <dhcp_network_changed+0x2e>
 8008280:	2b0a      	cmp	r3, #10
 8008282:	dc0d      	bgt.n	80082a0 <dhcp_network_changed+0x3c>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01f      	beq.n	80082c8 <dhcp_network_changed+0x64>
 8008288:	2b00      	cmp	r3, #0
 800828a:	db09      	blt.n	80082a0 <dhcp_network_changed+0x3c>
 800828c:	3b03      	subs	r3, #3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d806      	bhi.n	80082a0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fb71 	bl	8008980 <dhcp_reboot>
      break;
 800829e:	e014      	b.n	80082ca <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	795b      	ldrb	r3, [r3, #5]
 80082a4:	2b0c      	cmp	r3, #12
 80082a6:	d906      	bls.n	80082b6 <dhcp_network_changed+0x52>
 80082a8:	4b09      	ldr	r3, [pc, #36]	@ (80082d0 <dhcp_network_changed+0x6c>)
 80082aa:	f240 326d 	movw	r2, #877	@ 0x36d
 80082ae:	4909      	ldr	r1, [pc, #36]	@ (80082d4 <dhcp_network_changed+0x70>)
 80082b0:	4809      	ldr	r0, [pc, #36]	@ (80082d8 <dhcp_network_changed+0x74>)
 80082b2:	f00b fc67 	bl	8013b84 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8af 	bl	8008420 <dhcp_discover>
      break;
 80082c2:	e002      	b.n	80082ca <dhcp_network_changed+0x66>
    return;
 80082c4:	bf00      	nop
 80082c6:	e000      	b.n	80082ca <dhcp_network_changed+0x66>
      break;
 80082c8:	bf00      	nop
  }
}
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	08014b04 	.word	0x08014b04
 80082d4:	08014c88 	.word	0x08014c88
 80082d8:	08014b9c 	.word	0x08014b9c

080082dc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d107      	bne.n	80082fc <dhcp_arp_reply+0x20>
 80082ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008328 <dhcp_arp_reply+0x4c>)
 80082ee:	f240 328b 	movw	r2, #907	@ 0x38b
 80082f2:	490e      	ldr	r1, [pc, #56]	@ (800832c <dhcp_arp_reply+0x50>)
 80082f4:	480e      	ldr	r0, [pc, #56]	@ (8008330 <dhcp_arp_reply+0x54>)
 80082f6:	f00b fc45 	bl	8013b84 <iprintf>
 80082fa:	e012      	b.n	8008322 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008300:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00c      	beq.n	8008322 <dhcp_arp_reply+0x46>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	795b      	ldrb	r3, [r3, #5]
 800830c:	2b08      	cmp	r3, #8
 800830e:	d108      	bne.n	8008322 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	429a      	cmp	r2, r3
 800831a:	d102      	bne.n	8008322 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f809 	bl	8008334 <dhcp_decline>
    }
  }
}
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	08014b04 	.word	0x08014b04
 800832c:	08014c20 	.word	0x08014c20
 8008330:	08014b9c 	.word	0x08014b9c

08008334 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8008334:	b5b0      	push	{r4, r5, r7, lr}
 8008336:	b08a      	sub	sp, #40	@ 0x28
 8008338:	af02      	add	r7, sp, #8
 800833a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008340:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8008342:	210c      	movs	r1, #12
 8008344:	69b8      	ldr	r0, [r7, #24]
 8008346:	f000 fc69 	bl	8008c1c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800834a:	f107 030c 	add.w	r3, r7, #12
 800834e:	2204      	movs	r2, #4
 8008350:	69b9      	ldr	r1, [r7, #24]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f8ee 	bl	8009534 <dhcp_create_msg>
 8008358:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d035      	beq.n	80083cc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008366:	89b8      	ldrh	r0, [r7, #12]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800836e:	2304      	movs	r3, #4
 8008370:	2232      	movs	r2, #50	@ 0x32
 8008372:	f000 fc6d 	bl	8008c50 <dhcp_option>
 8008376:	4603      	mov	r3, r0
 8008378:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800837a:	89bc      	ldrh	r4, [r7, #12]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff fb57 	bl	8007a3a <lwip_htonl>
 800838c:	4603      	mov	r3, r0
 800838e:	461a      	mov	r2, r3
 8008390:	4629      	mov	r1, r5
 8008392:	4620      	mov	r0, r4
 8008394:	f000 fce8 	bl	8008d68 <dhcp_option_long>
 8008398:	4603      	mov	r3, r0
 800839a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800839c:	89b8      	ldrh	r0, [r7, #12]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	33f0      	adds	r3, #240	@ 0xf0
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4619      	mov	r1, r3
 80083a6:	f001 f99b 	bl	80096e0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80083aa:	4b19      	ldr	r3, [pc, #100]	@ (8008410 <dhcp_decline+0xdc>)
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	4b19      	ldr	r3, [pc, #100]	@ (8008414 <dhcp_decline+0xe0>)
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	2343      	movs	r3, #67	@ 0x43
 80083b8:	4a17      	ldr	r2, [pc, #92]	@ (8008418 <dhcp_decline+0xe4>)
 80083ba:	6979      	ldr	r1, [r7, #20]
 80083bc:	f00b f85c 	bl	8013478 <udp_sendto_if_src>
 80083c0:	4603      	mov	r3, r0
 80083c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80083c4:	6978      	ldr	r0, [r7, #20]
 80083c6:	f005 f8e1 	bl	800d58c <pbuf_free>
 80083ca:	e001      	b.n	80083d0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80083cc:	23ff      	movs	r3, #255	@ 0xff
 80083ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	799b      	ldrb	r3, [r3, #6]
 80083d4:	2bff      	cmp	r3, #255	@ 0xff
 80083d6:	d005      	beq.n	80083e4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	799b      	ldrb	r3, [r3, #6]
 80083dc:	3301      	adds	r3, #1
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80083e4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80083e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80083ea:	89fb      	ldrh	r3, [r7, #14]
 80083ec:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80083f0:	4a0a      	ldr	r2, [pc, #40]	@ (800841c <dhcp_decline+0xe8>)
 80083f2:	fb82 1203 	smull	r1, r2, r2, r3
 80083f6:	1152      	asrs	r2, r2, #5
 80083f8:	17db      	asrs	r3, r3, #31
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008402:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bdb0      	pop	{r4, r5, r7, pc}
 800840e:	bf00      	nop
 8008410:	24004c4c 	.word	0x24004c4c
 8008414:	08017bf4 	.word	0x08017bf4
 8008418:	08017bf8 	.word	0x08017bf8
 800841c:	10624dd3 	.word	0x10624dd3

08008420 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	@ 0x28
 8008424:	af02      	add	r7, sp, #8
 8008426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	2200      	movs	r2, #0
 8008436:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008438:	2106      	movs	r1, #6
 800843a:	69b8      	ldr	r0, [r7, #24]
 800843c:	f000 fbee 	bl	8008c1c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8008440:	f107 0308 	add.w	r3, r7, #8
 8008444:	2201      	movs	r2, #1
 8008446:	69b9      	ldr	r1, [r7, #24]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f873 	bl	8009534 <dhcp_create_msg>
 800844e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d04b      	beq.n	80084ee <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800845c:	8938      	ldrh	r0, [r7, #8]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008464:	2302      	movs	r3, #2
 8008466:	2239      	movs	r2, #57	@ 0x39
 8008468:	f000 fbf2 	bl	8008c50 <dhcp_option>
 800846c:	4603      	mov	r3, r0
 800846e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008470:	8938      	ldrh	r0, [r7, #8]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800847c:	461a      	mov	r2, r3
 800847e:	f000 fc41 	bl	8008d04 <dhcp_option_short>
 8008482:	4603      	mov	r3, r0
 8008484:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008486:	8938      	ldrh	r0, [r7, #8]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800848e:	2303      	movs	r3, #3
 8008490:	2237      	movs	r2, #55	@ 0x37
 8008492:	f000 fbdd 	bl	8008c50 <dhcp_option>
 8008496:	4603      	mov	r3, r0
 8008498:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800849a:	2300      	movs	r3, #0
 800849c:	77fb      	strb	r3, [r7, #31]
 800849e:	e00e      	b.n	80084be <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80084a0:	8938      	ldrh	r0, [r7, #8]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80084a8:	7ffb      	ldrb	r3, [r7, #31]
 80084aa:	4a29      	ldr	r2, [pc, #164]	@ (8008550 <dhcp_discover+0x130>)
 80084ac:	5cd3      	ldrb	r3, [r2, r3]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f000 fc02 	bl	8008cb8 <dhcp_option_byte>
 80084b4:	4603      	mov	r3, r0
 80084b6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80084b8:	7ffb      	ldrb	r3, [r7, #31]
 80084ba:	3301      	adds	r3, #1
 80084bc:	77fb      	strb	r3, [r7, #31]
 80084be:	7ffb      	ldrb	r3, [r7, #31]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d9ed      	bls.n	80084a0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80084c4:	8938      	ldrh	r0, [r7, #8]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	33f0      	adds	r3, #240	@ 0xf0
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4619      	mov	r1, r3
 80084ce:	f001 f907 	bl	80096e0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80084d2:	4b20      	ldr	r3, [pc, #128]	@ (8008554 <dhcp_discover+0x134>)
 80084d4:	6818      	ldr	r0, [r3, #0]
 80084d6:	4b20      	ldr	r3, [pc, #128]	@ (8008558 <dhcp_discover+0x138>)
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	2343      	movs	r3, #67	@ 0x43
 80084e0:	4a1e      	ldr	r2, [pc, #120]	@ (800855c <dhcp_discover+0x13c>)
 80084e2:	6939      	ldr	r1, [r7, #16]
 80084e4:	f00a ffc8 	bl	8013478 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80084e8:	6938      	ldr	r0, [r7, #16]
 80084ea:	f005 f84f 	bl	800d58c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	799b      	ldrb	r3, [r3, #6]
 80084f2:	2bff      	cmp	r3, #255	@ 0xff
 80084f4:	d005      	beq.n	8008502 <dhcp_discover+0xe2>
    dhcp->tries++;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	799b      	ldrb	r3, [r3, #6]
 80084fa:	3301      	adds	r3, #1
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	799b      	ldrb	r3, [r3, #6]
 8008506:	2b05      	cmp	r3, #5
 8008508:	d80d      	bhi.n	8008526 <dhcp_discover+0x106>
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	799b      	ldrb	r3, [r3, #6]
 800850e:	461a      	mov	r2, r3
 8008510:	2301      	movs	r3, #1
 8008512:	4093      	lsls	r3, r2
 8008514:	b29b      	uxth	r3, r3
 8008516:	461a      	mov	r2, r3
 8008518:	0152      	lsls	r2, r2, #5
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	0092      	lsls	r2, r2, #2
 800851e:	4413      	add	r3, r2
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	b29b      	uxth	r3, r3
 8008524:	e001      	b.n	800852a <dhcp_discover+0x10a>
 8008526:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800852a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800852c:	897b      	ldrh	r3, [r7, #10]
 800852e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8008532:	4a0b      	ldr	r2, [pc, #44]	@ (8008560 <dhcp_discover+0x140>)
 8008534:	fb82 1203 	smull	r1, r2, r2, r3
 8008538:	1152      	asrs	r2, r2, #5
 800853a:	17db      	asrs	r3, r3, #31
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	b29a      	uxth	r2, r3
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008544:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	24000024 	.word	0x24000024
 8008554:	24004c4c 	.word	0x24004c4c
 8008558:	08017bf4 	.word	0x08017bf4
 800855c:	08017bf8 	.word	0x08017bf8
 8008560:	10624dd3 	.word	0x10624dd3

08008564 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d107      	bne.n	8008582 <dhcp_bind+0x1e>
 8008572:	4b64      	ldr	r3, [pc, #400]	@ (8008704 <dhcp_bind+0x1a0>)
 8008574:	f240 4215 	movw	r2, #1045	@ 0x415
 8008578:	4963      	ldr	r1, [pc, #396]	@ (8008708 <dhcp_bind+0x1a4>)
 800857a:	4864      	ldr	r0, [pc, #400]	@ (800870c <dhcp_bind+0x1a8>)
 800857c:	f00b fb02 	bl	8013b84 <iprintf>
 8008580:	e0bc      	b.n	80086fc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008586:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d107      	bne.n	800859e <dhcp_bind+0x3a>
 800858e:	4b5d      	ldr	r3, [pc, #372]	@ (8008704 <dhcp_bind+0x1a0>)
 8008590:	f240 4217 	movw	r2, #1047	@ 0x417
 8008594:	495e      	ldr	r1, [pc, #376]	@ (8008710 <dhcp_bind+0x1ac>)
 8008596:	485d      	ldr	r0, [pc, #372]	@ (800870c <dhcp_bind+0x1a8>)
 8008598:	f00b faf4 	bl	8013b84 <iprintf>
 800859c:	e0ae      	b.n	80086fc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2200      	movs	r2, #0
 80085a2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085ac:	d019      	beq.n	80085e2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	331e      	adds	r3, #30
 80085b4:	4a57      	ldr	r2, [pc, #348]	@ (8008714 <dhcp_bind+0x1b0>)
 80085b6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ba:	095b      	lsrs	r3, r3, #5
 80085bc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c4:	d302      	bcc.n	80085cc <dhcp_bind+0x68>
      timeout = 0xffff;
 80085c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80085ca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	8a9b      	ldrh	r3, [r3, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d102      	bne.n	80085e2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	2201      	movs	r2, #1
 80085e0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085ea:	d01d      	beq.n	8008628 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f0:	331e      	adds	r3, #30
 80085f2:	4a48      	ldr	r2, [pc, #288]	@ (8008714 <dhcp_bind+0x1b0>)
 80085f4:	fba2 2303 	umull	r2, r3, r2, r3
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008602:	d302      	bcc.n	800860a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8008604:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008608:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	b29a      	uxth	r2, r3
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	895b      	ldrh	r3, [r3, #10]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2201      	movs	r2, #1
 800861e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	895a      	ldrh	r2, [r3, #10]
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008630:	d01d      	beq.n	800866e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008636:	331e      	adds	r3, #30
 8008638:	4a36      	ldr	r2, [pc, #216]	@ (8008714 <dhcp_bind+0x1b0>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008648:	d302      	bcc.n	8008650 <dhcp_bind+0xec>
      timeout = 0xffff;
 800864a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800864e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	b29a      	uxth	r2, r3
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	899b      	ldrh	r3, [r3, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2201      	movs	r2, #1
 8008664:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	899a      	ldrh	r2, [r3, #12]
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	895a      	ldrh	r2, [r3, #10]
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	899b      	ldrh	r3, [r3, #12]
 8008676:	429a      	cmp	r2, r3
 8008678:	d306      	bcc.n	8008688 <dhcp_bind+0x124>
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	899b      	ldrh	r3, [r3, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	2200      	movs	r2, #0
 8008686:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	79db      	ldrb	r3, [r3, #7]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	e014      	b.n	80086c2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	331c      	adds	r3, #28
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80086a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	db02      	blt.n	80086ae <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80086a8:	23ff      	movs	r3, #255	@ 0xff
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	e009      	b.n	80086c2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	2bbf      	cmp	r3, #191	@ 0xbf
 80086b2:	d903      	bls.n	80086bc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80086b4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80086b8:	613b      	str	r3, [r7, #16]
 80086ba:	e002      	b.n	80086c2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80086bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80086c0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d108      	bne.n	80086e0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	69da      	ldr	r2, [r3, #28]
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80086de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80086e0:	210a      	movs	r1, #10
 80086e2:	69b8      	ldr	r0, [r7, #24]
 80086e4:	f000 fa9a 	bl	8008c1c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	f103 011c 	add.w	r1, r3, #28
 80086ee:	f107 030c 	add.w	r3, r7, #12
 80086f2:	f107 0210 	add.w	r2, r7, #16
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f004 fa68 	bl	800cbcc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80086fc:	3720      	adds	r7, #32
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	08014b04 	.word	0x08014b04
 8008708:	08014c9c 	.word	0x08014c9c
 800870c:	08014b9c 	.word	0x08014b9c
 8008710:	08014cb8 	.word	0x08014cb8
 8008714:	88888889 	.word	0x88888889

08008718 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	@ 0x28
 800871c:	af02      	add	r7, sp, #8
 800871e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008724:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8008726:	2105      	movs	r1, #5
 8008728:	69b8      	ldr	r0, [r7, #24]
 800872a:	f000 fa77 	bl	8008c1c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800872e:	f107 030c 	add.w	r3, r7, #12
 8008732:	2203      	movs	r2, #3
 8008734:	69b9      	ldr	r1, [r7, #24]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fefc 	bl	8009534 <dhcp_create_msg>
 800873c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d04e      	beq.n	80087e2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800874a:	89b8      	ldrh	r0, [r7, #12]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008752:	2302      	movs	r3, #2
 8008754:	2239      	movs	r2, #57	@ 0x39
 8008756:	f000 fa7b 	bl	8008c50 <dhcp_option>
 800875a:	4603      	mov	r3, r0
 800875c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800875e:	89b8      	ldrh	r0, [r7, #12]
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800876a:	461a      	mov	r2, r3
 800876c:	f000 faca 	bl	8008d04 <dhcp_option_short>
 8008770:	4603      	mov	r3, r0
 8008772:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008774:	89b8      	ldrh	r0, [r7, #12]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800877c:	2303      	movs	r3, #3
 800877e:	2237      	movs	r2, #55	@ 0x37
 8008780:	f000 fa66 	bl	8008c50 <dhcp_option>
 8008784:	4603      	mov	r3, r0
 8008786:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008788:	2300      	movs	r3, #0
 800878a:	77bb      	strb	r3, [r7, #30]
 800878c:	e00e      	b.n	80087ac <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800878e:	89b8      	ldrh	r0, [r7, #12]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008796:	7fbb      	ldrb	r3, [r7, #30]
 8008798:	4a29      	ldr	r2, [pc, #164]	@ (8008840 <dhcp_renew+0x128>)
 800879a:	5cd3      	ldrb	r3, [r2, r3]
 800879c:	461a      	mov	r2, r3
 800879e:	f000 fa8b 	bl	8008cb8 <dhcp_option_byte>
 80087a2:	4603      	mov	r3, r0
 80087a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80087a6:	7fbb      	ldrb	r3, [r7, #30]
 80087a8:	3301      	adds	r3, #1
 80087aa:	77bb      	strb	r3, [r7, #30]
 80087ac:	7fbb      	ldrb	r3, [r7, #30]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d9ed      	bls.n	800878e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80087b2:	89b8      	ldrh	r0, [r7, #12]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	33f0      	adds	r3, #240	@ 0xf0
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	4619      	mov	r1, r3
 80087bc:	f000 ff90 	bl	80096e0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80087c0:	4b20      	ldr	r3, [pc, #128]	@ (8008844 <dhcp_renew+0x12c>)
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f103 0218 	add.w	r2, r3, #24
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	2343      	movs	r3, #67	@ 0x43
 80087d0:	6979      	ldr	r1, [r7, #20]
 80087d2:	f00a fddd 	bl	8013390 <udp_sendto_if>
 80087d6:	4603      	mov	r3, r0
 80087d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80087da:	6978      	ldr	r0, [r7, #20]
 80087dc:	f004 fed6 	bl	800d58c <pbuf_free>
 80087e0:	e001      	b.n	80087e6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80087e2:	23ff      	movs	r3, #255	@ 0xff
 80087e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	799b      	ldrb	r3, [r3, #6]
 80087ea:	2bff      	cmp	r3, #255	@ 0xff
 80087ec:	d005      	beq.n	80087fa <dhcp_renew+0xe2>
    dhcp->tries++;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	799b      	ldrb	r3, [r3, #6]
 80087f2:	3301      	adds	r3, #1
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	799b      	ldrb	r3, [r3, #6]
 80087fe:	2b09      	cmp	r3, #9
 8008800:	d809      	bhi.n	8008816 <dhcp_renew+0xfe>
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	799b      	ldrb	r3, [r3, #6]
 8008806:	461a      	mov	r2, r3
 8008808:	0152      	lsls	r2, r2, #5
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	0092      	lsls	r2, r2, #2
 800880e:	4413      	add	r3, r2
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	b29b      	uxth	r3, r3
 8008814:	e001      	b.n	800881a <dhcp_renew+0x102>
 8008816:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800881a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800881c:	89fb      	ldrh	r3, [r7, #14]
 800881e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8008822:	4a09      	ldr	r2, [pc, #36]	@ (8008848 <dhcp_renew+0x130>)
 8008824:	fb82 1203 	smull	r1, r2, r2, r3
 8008828:	1152      	asrs	r2, r2, #5
 800882a:	17db      	asrs	r3, r3, #31
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	b29a      	uxth	r2, r3
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008834:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3720      	adds	r7, #32
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	24000024 	.word	0x24000024
 8008844:	24004c4c 	.word	0x24004c4c
 8008848:	10624dd3 	.word	0x10624dd3

0800884c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	@ 0x28
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800885a:	2104      	movs	r1, #4
 800885c:	69b8      	ldr	r0, [r7, #24]
 800885e:	f000 f9dd 	bl	8008c1c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008862:	f107 030c 	add.w	r3, r7, #12
 8008866:	2203      	movs	r2, #3
 8008868:	69b9      	ldr	r1, [r7, #24]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fe62 	bl	8009534 <dhcp_create_msg>
 8008870:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d04c      	beq.n	8008912 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800887e:	89b8      	ldrh	r0, [r7, #12]
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008886:	2302      	movs	r3, #2
 8008888:	2239      	movs	r2, #57	@ 0x39
 800888a:	f000 f9e1 	bl	8008c50 <dhcp_option>
 800888e:	4603      	mov	r3, r0
 8008890:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008892:	89b8      	ldrh	r0, [r7, #12]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800889e:	461a      	mov	r2, r3
 80088a0:	f000 fa30 	bl	8008d04 <dhcp_option_short>
 80088a4:	4603      	mov	r3, r0
 80088a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80088a8:	89b8      	ldrh	r0, [r7, #12]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80088b0:	2303      	movs	r3, #3
 80088b2:	2237      	movs	r2, #55	@ 0x37
 80088b4:	f000 f9cc 	bl	8008c50 <dhcp_option>
 80088b8:	4603      	mov	r3, r0
 80088ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80088bc:	2300      	movs	r3, #0
 80088be:	77bb      	strb	r3, [r7, #30]
 80088c0:	e00e      	b.n	80088e0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80088c2:	89b8      	ldrh	r0, [r7, #12]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80088ca:	7fbb      	ldrb	r3, [r7, #30]
 80088cc:	4a28      	ldr	r2, [pc, #160]	@ (8008970 <dhcp_rebind+0x124>)
 80088ce:	5cd3      	ldrb	r3, [r2, r3]
 80088d0:	461a      	mov	r2, r3
 80088d2:	f000 f9f1 	bl	8008cb8 <dhcp_option_byte>
 80088d6:	4603      	mov	r3, r0
 80088d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80088da:	7fbb      	ldrb	r3, [r7, #30]
 80088dc:	3301      	adds	r3, #1
 80088de:	77bb      	strb	r3, [r7, #30]
 80088e0:	7fbb      	ldrb	r3, [r7, #30]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d9ed      	bls.n	80088c2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80088e6:	89b8      	ldrh	r0, [r7, #12]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	33f0      	adds	r3, #240	@ 0xf0
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	4619      	mov	r1, r3
 80088f0:	f000 fef6 	bl	80096e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80088f4:	4b1f      	ldr	r3, [pc, #124]	@ (8008974 <dhcp_rebind+0x128>)
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	2343      	movs	r3, #67	@ 0x43
 80088fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008978 <dhcp_rebind+0x12c>)
 8008900:	6979      	ldr	r1, [r7, #20]
 8008902:	f00a fd45 	bl	8013390 <udp_sendto_if>
 8008906:	4603      	mov	r3, r0
 8008908:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800890a:	6978      	ldr	r0, [r7, #20]
 800890c:	f004 fe3e 	bl	800d58c <pbuf_free>
 8008910:	e001      	b.n	8008916 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008912:	23ff      	movs	r3, #255	@ 0xff
 8008914:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	799b      	ldrb	r3, [r3, #6]
 800891a:	2bff      	cmp	r3, #255	@ 0xff
 800891c:	d005      	beq.n	800892a <dhcp_rebind+0xde>
    dhcp->tries++;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	799b      	ldrb	r3, [r3, #6]
 8008922:	3301      	adds	r3, #1
 8008924:	b2da      	uxtb	r2, r3
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	799b      	ldrb	r3, [r3, #6]
 800892e:	2b09      	cmp	r3, #9
 8008930:	d809      	bhi.n	8008946 <dhcp_rebind+0xfa>
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	799b      	ldrb	r3, [r3, #6]
 8008936:	461a      	mov	r2, r3
 8008938:	0152      	lsls	r2, r2, #5
 800893a:	1ad2      	subs	r2, r2, r3
 800893c:	0092      	lsls	r2, r2, #2
 800893e:	4413      	add	r3, r2
 8008940:	00db      	lsls	r3, r3, #3
 8008942:	b29b      	uxth	r3, r3
 8008944:	e001      	b.n	800894a <dhcp_rebind+0xfe>
 8008946:	f242 7310 	movw	r3, #10000	@ 0x2710
 800894a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800894c:	89fb      	ldrh	r3, [r7, #14]
 800894e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8008952:	4a0a      	ldr	r2, [pc, #40]	@ (800897c <dhcp_rebind+0x130>)
 8008954:	fb82 1203 	smull	r1, r2, r2, r3
 8008958:	1152      	asrs	r2, r2, #5
 800895a:	17db      	asrs	r3, r3, #31
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	b29a      	uxth	r2, r3
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008964:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3720      	adds	r7, #32
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	24000024 	.word	0x24000024
 8008974:	24004c4c 	.word	0x24004c4c
 8008978:	08017bf8 	.word	0x08017bf8
 800897c:	10624dd3 	.word	0x10624dd3

08008980 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8008980:	b5b0      	push	{r4, r5, r7, lr}
 8008982:	b08a      	sub	sp, #40	@ 0x28
 8008984:	af02      	add	r7, sp, #8
 8008986:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800898e:	2103      	movs	r1, #3
 8008990:	69b8      	ldr	r0, [r7, #24]
 8008992:	f000 f943 	bl	8008c1c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	2203      	movs	r2, #3
 800899c:	69b9      	ldr	r1, [r7, #24]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fdc8 	bl	8009534 <dhcp_create_msg>
 80089a4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d066      	beq.n	8008a7a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80089b2:	89b8      	ldrh	r0, [r7, #12]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80089ba:	2302      	movs	r3, #2
 80089bc:	2239      	movs	r2, #57	@ 0x39
 80089be:	f000 f947 	bl	8008c50 <dhcp_option>
 80089c2:	4603      	mov	r3, r0
 80089c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80089c6:	89b8      	ldrh	r0, [r7, #12]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	33f0      	adds	r3, #240	@ 0xf0
 80089cc:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80089d0:	4619      	mov	r1, r3
 80089d2:	f000 f997 	bl	8008d04 <dhcp_option_short>
 80089d6:	4603      	mov	r3, r0
 80089d8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80089da:	89b8      	ldrh	r0, [r7, #12]
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80089e2:	2304      	movs	r3, #4
 80089e4:	2232      	movs	r2, #50	@ 0x32
 80089e6:	f000 f933 	bl	8008c50 <dhcp_option>
 80089ea:	4603      	mov	r3, r0
 80089ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80089ee:	89bc      	ldrh	r4, [r7, #12]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff f81d 	bl	8007a3a <lwip_htonl>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	4629      	mov	r1, r5
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f9ae 	bl	8008d68 <dhcp_option_long>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008a10:	89b8      	ldrh	r0, [r7, #12]
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008a18:	2303      	movs	r3, #3
 8008a1a:	2237      	movs	r2, #55	@ 0x37
 8008a1c:	f000 f918 	bl	8008c50 <dhcp_option>
 8008a20:	4603      	mov	r3, r0
 8008a22:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008a24:	2300      	movs	r3, #0
 8008a26:	77bb      	strb	r3, [r7, #30]
 8008a28:	e00e      	b.n	8008a48 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008a2a:	89b8      	ldrh	r0, [r7, #12]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008a32:	7fbb      	ldrb	r3, [r7, #30]
 8008a34:	4a28      	ldr	r2, [pc, #160]	@ (8008ad8 <dhcp_reboot+0x158>)
 8008a36:	5cd3      	ldrb	r3, [r2, r3]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f000 f93d 	bl	8008cb8 <dhcp_option_byte>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008a42:	7fbb      	ldrb	r3, [r7, #30]
 8008a44:	3301      	adds	r3, #1
 8008a46:	77bb      	strb	r3, [r7, #30]
 8008a48:	7fbb      	ldrb	r3, [r7, #30]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d9ed      	bls.n	8008a2a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008a4e:	89b8      	ldrh	r0, [r7, #12]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	33f0      	adds	r3, #240	@ 0xf0
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	4619      	mov	r1, r3
 8008a58:	f000 fe42 	bl	80096e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8008adc <dhcp_reboot+0x15c>)
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	2343      	movs	r3, #67	@ 0x43
 8008a66:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae0 <dhcp_reboot+0x160>)
 8008a68:	6979      	ldr	r1, [r7, #20]
 8008a6a:	f00a fc91 	bl	8013390 <udp_sendto_if>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8008a72:	6978      	ldr	r0, [r7, #20]
 8008a74:	f004 fd8a 	bl	800d58c <pbuf_free>
 8008a78:	e001      	b.n	8008a7e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008a7a:	23ff      	movs	r3, #255	@ 0xff
 8008a7c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	799b      	ldrb	r3, [r3, #6]
 8008a82:	2bff      	cmp	r3, #255	@ 0xff
 8008a84:	d005      	beq.n	8008a92 <dhcp_reboot+0x112>
    dhcp->tries++;
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	799b      	ldrb	r3, [r3, #6]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	799b      	ldrb	r3, [r3, #6]
 8008a96:	2b09      	cmp	r3, #9
 8008a98:	d809      	bhi.n	8008aae <dhcp_reboot+0x12e>
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	799b      	ldrb	r3, [r3, #6]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	0152      	lsls	r2, r2, #5
 8008aa2:	1ad2      	subs	r2, r2, r3
 8008aa4:	0092      	lsls	r2, r2, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	00db      	lsls	r3, r3, #3
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	e001      	b.n	8008ab2 <dhcp_reboot+0x132>
 8008aae:	f242 7310 	movw	r3, #10000	@ 0x2710
 8008ab2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008ab4:	89fb      	ldrh	r3, [r7, #14]
 8008ab6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8008aba:	4a0a      	ldr	r2, [pc, #40]	@ (8008ae4 <dhcp_reboot+0x164>)
 8008abc:	fb82 1203 	smull	r1, r2, r2, r3
 8008ac0:	1152      	asrs	r2, r2, #5
 8008ac2:	17db      	asrs	r3, r3, #31
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008acc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ad8:	24000024 	.word	0x24000024
 8008adc:	24004c4c 	.word	0x24004c4c
 8008ae0:	08017bf8 	.word	0x08017bf8
 8008ae4:	10624dd3 	.word	0x10624dd3

08008ae8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8008ae8:	b5b0      	push	{r4, r5, r7, lr}
 8008aea:	b08a      	sub	sp, #40	@ 0x28
 8008aec:	af02      	add	r7, sp, #8
 8008aee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 8084 	beq.w	8008c06 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	795b      	ldrb	r3, [r3, #5]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 8081 	beq.w	8008c0a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	2200      	movs	r2, #0
 8008b12:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	2200      	movs	r2, #0
 8008b18:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	2200      	movs	r2, #0
 8008b24:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	829a      	strh	r2, [r3, #20]
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	8a9a      	ldrh	r2, [r3, #20]
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	825a      	strh	r2, [r3, #18]
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	8a5a      	ldrh	r2, [r3, #18]
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	821a      	strh	r2, [r3, #16]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	8a1a      	ldrh	r2, [r3, #16]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fdee 	bl	800973c <dhcp_supplied_address>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d03b      	beq.n	8008bde <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8008b66:	f107 030e 	add.w	r3, r7, #14
 8008b6a:	2207      	movs	r2, #7
 8008b6c:	69f9      	ldr	r1, [r7, #28]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fce0 	bl	8009534 <dhcp_create_msg>
 8008b74:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d030      	beq.n	8008bde <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008b82:	89f8      	ldrh	r0, [r7, #14]
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8008b8a:	2304      	movs	r3, #4
 8008b8c:	2236      	movs	r2, #54	@ 0x36
 8008b8e:	f000 f85f 	bl	8008c50 <dhcp_option>
 8008b92:	4603      	mov	r3, r0
 8008b94:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8008b96:	89fc      	ldrh	r4, [r7, #14]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe ff4a 	bl	8007a3a <lwip_htonl>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4629      	mov	r1, r5
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 f8db 	bl	8008d68 <dhcp_option_long>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008bb6:	89f8      	ldrh	r0, [r7, #14]
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	33f0      	adds	r3, #240	@ 0xf0
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	f000 fd8e 	bl	80096e0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008bc4:	4b13      	ldr	r3, [pc, #76]	@ (8008c14 <dhcp_release_and_stop+0x12c>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	f107 0210 	add.w	r2, r7, #16
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2343      	movs	r3, #67	@ 0x43
 8008bd2:	69b9      	ldr	r1, [r7, #24]
 8008bd4:	f00a fbdc 	bl	8013390 <udp_sendto_if>
      pbuf_free(p_out);
 8008bd8:	69b8      	ldr	r0, [r7, #24]
 8008bda:	f004 fcd7 	bl	800d58c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008bde:	4b0e      	ldr	r3, [pc, #56]	@ (8008c18 <dhcp_release_and_stop+0x130>)
 8008be0:	4a0d      	ldr	r2, [pc, #52]	@ (8008c18 <dhcp_release_and_stop+0x130>)
 8008be2:	490d      	ldr	r1, [pc, #52]	@ (8008c18 <dhcp_release_and_stop+0x130>)
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f003 fff1 	bl	800cbcc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8008bea:	2100      	movs	r1, #0
 8008bec:	69f8      	ldr	r0, [r7, #28]
 8008bee:	f000 f815 	bl	8008c1c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	791b      	ldrb	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008bfa:	f7fe ff89 	bl	8007b10 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2200      	movs	r2, #0
 8008c02:	711a      	strb	r2, [r3, #4]
 8008c04:	e002      	b.n	8008c0c <dhcp_release_and_stop+0x124>
    return;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <dhcp_release_and_stop+0x124>
    return;
 8008c0a:	bf00      	nop
  }
}
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bdb0      	pop	{r4, r5, r7, pc}
 8008c12:	bf00      	nop
 8008c14:	24004c4c 	.word	0x24004c4c
 8008c18:	08017bf4 	.word	0x08017bf4

08008c1c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	795b      	ldrb	r3, [r3, #5]
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d008      	beq.n	8008c44 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	78fa      	ldrb	r2, [r7, #3]
 8008c36:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	811a      	strh	r2, [r3, #8]
  }
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6039      	str	r1, [r7, #0]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	80fb      	strh	r3, [r7, #6]
 8008c60:	460b      	mov	r3, r1
 8008c62:	717b      	strb	r3, [r7, #5]
 8008c64:	4613      	mov	r3, r2
 8008c66:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008c68:	88fa      	ldrh	r2, [r7, #6]
 8008c6a:	793b      	ldrb	r3, [r7, #4]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	3302      	adds	r3, #2
 8008c70:	2b44      	cmp	r3, #68	@ 0x44
 8008c72:	d906      	bls.n	8008c82 <dhcp_option+0x32>
 8008c74:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <dhcp_option+0x5c>)
 8008c76:	f240 529a 	movw	r2, #1434	@ 0x59a
 8008c7a:	490d      	ldr	r1, [pc, #52]	@ (8008cb0 <dhcp_option+0x60>)
 8008c7c:	480d      	ldr	r0, [pc, #52]	@ (8008cb4 <dhcp_option+0x64>)
 8008c7e:	f00a ff81 	bl	8013b84 <iprintf>
  options[options_out_len++] = option_type;
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	80fa      	strh	r2, [r7, #6]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	797a      	ldrb	r2, [r7, #5]
 8008c90:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8008c92:	88fb      	ldrh	r3, [r7, #6]
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	80fa      	strh	r2, [r7, #6]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	793a      	ldrb	r2, [r7, #4]
 8008ca0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8008ca2:	88fb      	ldrh	r3, [r7, #6]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	08014b04 	.word	0x08014b04
 8008cb0:	08014cd0 	.word	0x08014cd0
 8008cb4:	08014b9c 	.word	0x08014b9c

08008cb8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	6039      	str	r1, [r7, #0]
 8008cc2:	80fb      	strh	r3, [r7, #6]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8008cc8:	88fb      	ldrh	r3, [r7, #6]
 8008cca:	2b43      	cmp	r3, #67	@ 0x43
 8008ccc:	d906      	bls.n	8008cdc <dhcp_option_byte+0x24>
 8008cce:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf8 <dhcp_option_byte+0x40>)
 8008cd0:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8008cd4:	4909      	ldr	r1, [pc, #36]	@ (8008cfc <dhcp_option_byte+0x44>)
 8008cd6:	480a      	ldr	r0, [pc, #40]	@ (8008d00 <dhcp_option_byte+0x48>)
 8008cd8:	f00a ff54 	bl	8013b84 <iprintf>
  options[options_out_len++] = value;
 8008cdc:	88fb      	ldrh	r3, [r7, #6]
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	80fa      	strh	r2, [r7, #6]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	797a      	ldrb	r2, [r7, #5]
 8008cea:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8008cec:	88fb      	ldrh	r3, [r7, #6]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	08014b04 	.word	0x08014b04
 8008cfc:	08014d14 	.word	0x08014d14
 8008d00:	08014b9c 	.word	0x08014b9c

08008d04 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	6039      	str	r1, [r7, #0]
 8008d0e:	80fb      	strh	r3, [r7, #6]
 8008d10:	4613      	mov	r3, r2
 8008d12:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	3302      	adds	r3, #2
 8008d18:	2b44      	cmp	r3, #68	@ 0x44
 8008d1a:	d906      	bls.n	8008d2a <dhcp_option_short+0x26>
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d5c <dhcp_option_short+0x58>)
 8008d1e:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8008d22:	490f      	ldr	r1, [pc, #60]	@ (8008d60 <dhcp_option_short+0x5c>)
 8008d24:	480f      	ldr	r0, [pc, #60]	@ (8008d64 <dhcp_option_short+0x60>)
 8008d26:	f00a ff2d 	bl	8013b84 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8008d2a:	88bb      	ldrh	r3, [r7, #4]
 8008d2c:	0a1b      	lsrs	r3, r3, #8
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	88fb      	ldrh	r3, [r7, #6]
 8008d32:	1c59      	adds	r1, r3, #1
 8008d34:	80f9      	strh	r1, [r7, #6]
 8008d36:	4619      	mov	r1, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	440b      	add	r3, r1
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	80fa      	strh	r2, [r7, #6]
 8008d46:	461a      	mov	r2, r3
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	88ba      	ldrh	r2, [r7, #4]
 8008d4e:	b2d2      	uxtb	r2, r2
 8008d50:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8008d52:	88fb      	ldrh	r3, [r7, #6]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	08014b04 	.word	0x08014b04
 8008d60:	08014d4c 	.word	0x08014d4c
 8008d64:	08014b9c 	.word	0x08014b9c

08008d68 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008d76:	89fb      	ldrh	r3, [r7, #14]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	2b44      	cmp	r3, #68	@ 0x44
 8008d7c:	d906      	bls.n	8008d8c <dhcp_option_long+0x24>
 8008d7e:	4b19      	ldr	r3, [pc, #100]	@ (8008de4 <dhcp_option_long+0x7c>)
 8008d80:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8008d84:	4918      	ldr	r1, [pc, #96]	@ (8008de8 <dhcp_option_long+0x80>)
 8008d86:	4819      	ldr	r0, [pc, #100]	@ (8008dec <dhcp_option_long+0x84>)
 8008d88:	f00a fefc 	bl	8013b84 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	0e1a      	lsrs	r2, r3, #24
 8008d90:	89fb      	ldrh	r3, [r7, #14]
 8008d92:	1c59      	adds	r1, r3, #1
 8008d94:	81f9      	strh	r1, [r7, #14]
 8008d96:	4619      	mov	r1, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	440b      	add	r3, r1
 8008d9c:	b2d2      	uxtb	r2, r2
 8008d9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	0c1a      	lsrs	r2, r3, #16
 8008da4:	89fb      	ldrh	r3, [r7, #14]
 8008da6:	1c59      	adds	r1, r3, #1
 8008da8:	81f9      	strh	r1, [r7, #14]
 8008daa:	4619      	mov	r1, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	440b      	add	r3, r1
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	0a1a      	lsrs	r2, r3, #8
 8008db8:	89fb      	ldrh	r3, [r7, #14]
 8008dba:	1c59      	adds	r1, r3, #1
 8008dbc:	81f9      	strh	r1, [r7, #14]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	440b      	add	r3, r1
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8008dc8:	89fb      	ldrh	r3, [r7, #14]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	81fa      	strh	r2, [r7, #14]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8008dda:	89fb      	ldrh	r3, [r7, #14]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	08014b04 	.word	0x08014b04
 8008de8:	08014d88 	.word	0x08014d88
 8008dec:	08014b9c 	.word	0x08014b9c

08008df0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b090      	sub	sp, #64	@ 0x40
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8008e02:	2208      	movs	r2, #8
 8008e04:	2100      	movs	r1, #0
 8008e06:	48b5      	ldr	r0, [pc, #724]	@ (80090dc <dhcp_parse_reply+0x2ec>)
 8008e08:	f00b f814 	bl	8013e34 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	895b      	ldrh	r3, [r3, #10]
 8008e10:	2b2b      	cmp	r3, #43	@ 0x2b
 8008e12:	d802      	bhi.n	8008e1a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8008e14:	f06f 0301 	mvn.w	r3, #1
 8008e18:	e2a7      	b.n	800936a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8008e20:	23f0      	movs	r3, #240	@ 0xf0
 8008e22:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	891b      	ldrh	r3, [r3, #8]
 8008e28:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8008e2e:	e00c      	b.n	8008e4a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8008e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e32:	895b      	ldrh	r3, [r3, #10]
 8008e34:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	895b      	ldrh	r3, [r3, #10]
 8008e3e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8008e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <dhcp_parse_reply+0x6a>
 8008e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e52:	895b      	ldrh	r3, [r3, #10]
 8008e54:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d2ea      	bcs.n	8008e30 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d102      	bne.n	8008e66 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8008e60:	f06f 0301 	mvn.w	r3, #1
 8008e64:	e281      	b.n	800936a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8008e66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008e68:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8008e6a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008e6c:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8008e74:	e239      	b.n	80092ea <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8008e76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008e78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e7a:	4413      	add	r3, r2
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8008e86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e8a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8008e8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008e8e:	3302      	adds	r3, #2
 8008e90:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8008e92:	8bfa      	ldrh	r2, [r7, #30]
 8008e94:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d202      	bcs.n	8008ea0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8008e9a:	f06f 0301 	mvn.w	r3, #1
 8008e9e:	e264      	b.n	800936a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8008ea0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ea6:	8952      	ldrh	r2, [r2, #10]
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	da07      	bge.n	8008ebc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8008eac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008eae:	3301      	adds	r3, #1
 8008eb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008eb2:	4413      	add	r3, r2
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008eba:	e00b      	b.n	8008ed4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d004      	beq.n	8008ece <dhcp_parse_reply+0xde>
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	e000      	b.n	8008ed0 <dhcp_parse_reply+0xe0>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8008ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ed8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	2b3b      	cmp	r3, #59	@ 0x3b
 8008ee0:	f200 812c 	bhi.w	800913c <dhcp_parse_reply+0x34c>
 8008ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8008eec <dhcp_parse_reply+0xfc>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008fdd 	.word	0x08008fdd
 8008ef0:	08008fed 	.word	0x08008fed
 8008ef4:	0800913d 	.word	0x0800913d
 8008ef8:	0800900f 	.word	0x0800900f
 8008efc:	0800913d 	.word	0x0800913d
 8008f00:	0800913d 	.word	0x0800913d
 8008f04:	0800913d 	.word	0x0800913d
 8008f08:	0800913d 	.word	0x0800913d
 8008f0c:	0800913d 	.word	0x0800913d
 8008f10:	0800913d 	.word	0x0800913d
 8008f14:	0800913d 	.word	0x0800913d
 8008f18:	0800913d 	.word	0x0800913d
 8008f1c:	0800913d 	.word	0x0800913d
 8008f20:	0800913d 	.word	0x0800913d
 8008f24:	0800913d 	.word	0x0800913d
 8008f28:	0800913d 	.word	0x0800913d
 8008f2c:	0800913d 	.word	0x0800913d
 8008f30:	0800913d 	.word	0x0800913d
 8008f34:	0800913d 	.word	0x0800913d
 8008f38:	0800913d 	.word	0x0800913d
 8008f3c:	0800913d 	.word	0x0800913d
 8008f40:	0800913d 	.word	0x0800913d
 8008f44:	0800913d 	.word	0x0800913d
 8008f48:	0800913d 	.word	0x0800913d
 8008f4c:	0800913d 	.word	0x0800913d
 8008f50:	0800913d 	.word	0x0800913d
 8008f54:	0800913d 	.word	0x0800913d
 8008f58:	0800913d 	.word	0x0800913d
 8008f5c:	0800913d 	.word	0x0800913d
 8008f60:	0800913d 	.word	0x0800913d
 8008f64:	0800913d 	.word	0x0800913d
 8008f68:	0800913d 	.word	0x0800913d
 8008f6c:	0800913d 	.word	0x0800913d
 8008f70:	0800913d 	.word	0x0800913d
 8008f74:	0800913d 	.word	0x0800913d
 8008f78:	0800913d 	.word	0x0800913d
 8008f7c:	0800913d 	.word	0x0800913d
 8008f80:	0800913d 	.word	0x0800913d
 8008f84:	0800913d 	.word	0x0800913d
 8008f88:	0800913d 	.word	0x0800913d
 8008f8c:	0800913d 	.word	0x0800913d
 8008f90:	0800913d 	.word	0x0800913d
 8008f94:	0800913d 	.word	0x0800913d
 8008f98:	0800913d 	.word	0x0800913d
 8008f9c:	0800913d 	.word	0x0800913d
 8008fa0:	0800913d 	.word	0x0800913d
 8008fa4:	0800913d 	.word	0x0800913d
 8008fa8:	0800913d 	.word	0x0800913d
 8008fac:	0800913d 	.word	0x0800913d
 8008fb0:	0800913d 	.word	0x0800913d
 8008fb4:	0800913d 	.word	0x0800913d
 8008fb8:	0800903b 	.word	0x0800903b
 8008fbc:	0800905d 	.word	0x0800905d
 8008fc0:	08009099 	.word	0x08009099
 8008fc4:	080090bb 	.word	0x080090bb
 8008fc8:	0800913d 	.word	0x0800913d
 8008fcc:	0800913d 	.word	0x0800913d
 8008fd0:	0800913d 	.word	0x0800913d
 8008fd4:	080090f9 	.word	0x080090f9
 8008fd8:	0800911b 	.word	0x0800911b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fe6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8008fea:	e0ab      	b.n	8009144 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008fec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d009      	beq.n	8009008 <dhcp_parse_reply+0x218>
 8008ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80090e0 <dhcp_parse_reply+0x2f0>)
 8008ff6:	f240 622e 	movw	r2, #1582	@ 0x62e
 8008ffa:	493a      	ldr	r1, [pc, #232]	@ (80090e4 <dhcp_parse_reply+0x2f4>)
 8008ffc:	483a      	ldr	r0, [pc, #232]	@ (80090e8 <dhcp_parse_reply+0x2f8>)
 8008ffe:	f00a fdc1 	bl	8013b84 <iprintf>
 8009002:	f06f 0305 	mvn.w	r3, #5
 8009006:	e1b0      	b.n	800936a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8009008:	2306      	movs	r3, #6
 800900a:	623b      	str	r3, [r7, #32]
        break;
 800900c:	e09a      	b.n	8009144 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800900e:	2304      	movs	r3, #4
 8009010:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8009014:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009018:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800901c:	429a      	cmp	r2, r3
 800901e:	d209      	bcs.n	8009034 <dhcp_parse_reply+0x244>
 8009020:	4b2f      	ldr	r3, [pc, #188]	@ (80090e0 <dhcp_parse_reply+0x2f0>)
 8009022:	f240 6233 	movw	r2, #1587	@ 0x633
 8009026:	4931      	ldr	r1, [pc, #196]	@ (80090ec <dhcp_parse_reply+0x2fc>)
 8009028:	482f      	ldr	r0, [pc, #188]	@ (80090e8 <dhcp_parse_reply+0x2f8>)
 800902a:	f00a fdab 	bl	8013b84 <iprintf>
 800902e:	f06f 0305 	mvn.w	r3, #5
 8009032:	e19a      	b.n	800936a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8009034:	2307      	movs	r3, #7
 8009036:	623b      	str	r3, [r7, #32]
        break;
 8009038:	e084      	b.n	8009144 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800903a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800903e:	2b04      	cmp	r3, #4
 8009040:	d009      	beq.n	8009056 <dhcp_parse_reply+0x266>
 8009042:	4b27      	ldr	r3, [pc, #156]	@ (80090e0 <dhcp_parse_reply+0x2f0>)
 8009044:	f240 6241 	movw	r2, #1601	@ 0x641
 8009048:	4926      	ldr	r1, [pc, #152]	@ (80090e4 <dhcp_parse_reply+0x2f4>)
 800904a:	4827      	ldr	r0, [pc, #156]	@ (80090e8 <dhcp_parse_reply+0x2f8>)
 800904c:	f00a fd9a 	bl	8013b84 <iprintf>
 8009050:	f06f 0305 	mvn.w	r3, #5
 8009054:	e189      	b.n	800936a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8009056:	2303      	movs	r3, #3
 8009058:	623b      	str	r3, [r7, #32]
        break;
 800905a:	e073      	b.n	8009144 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800905c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009060:	2b01      	cmp	r3, #1
 8009062:	d009      	beq.n	8009078 <dhcp_parse_reply+0x288>
 8009064:	4b1e      	ldr	r3, [pc, #120]	@ (80090e0 <dhcp_parse_reply+0x2f0>)
 8009066:	f240 624f 	movw	r2, #1615	@ 0x64f
 800906a:	4921      	ldr	r1, [pc, #132]	@ (80090f0 <dhcp_parse_reply+0x300>)
 800906c:	481e      	ldr	r0, [pc, #120]	@ (80090e8 <dhcp_parse_reply+0x2f8>)
 800906e:	f00a fd89 	bl	8013b84 <iprintf>
 8009072:	f06f 0305 	mvn.w	r3, #5
 8009076:	e178      	b.n	800936a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8009078:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800907a:	2bf0      	cmp	r3, #240	@ 0xf0
 800907c:	d009      	beq.n	8009092 <dhcp_parse_reply+0x2a2>
 800907e:	4b18      	ldr	r3, [pc, #96]	@ (80090e0 <dhcp_parse_reply+0x2f0>)
 8009080:	f240 6251 	movw	r2, #1617	@ 0x651
 8009084:	491b      	ldr	r1, [pc, #108]	@ (80090f4 <dhcp_parse_reply+0x304>)
 8009086:	4818      	ldr	r0, [pc, #96]	@ (80090e8 <dhcp_parse_reply+0x2f8>)
 8009088:	f00a fd7c 	bl	8013b84 <iprintf>
 800908c:	f06f 0305 	mvn.w	r3, #5
 8009090:	e16b      	b.n	800936a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8009092:	2300      	movs	r3, #0
 8009094:	623b      	str	r3, [r7, #32]
        break;
 8009096:	e055      	b.n	8009144 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800909c:	2b01      	cmp	r3, #1
 800909e:	d009      	beq.n	80090b4 <dhcp_parse_reply+0x2c4>
 80090a0:	4b0f      	ldr	r3, [pc, #60]	@ (80090e0 <dhcp_parse_reply+0x2f0>)
 80090a2:	f240 6255 	movw	r2, #1621	@ 0x655
 80090a6:	4912      	ldr	r1, [pc, #72]	@ (80090f0 <dhcp_parse_reply+0x300>)
 80090a8:	480f      	ldr	r0, [pc, #60]	@ (80090e8 <dhcp_parse_reply+0x2f8>)
 80090aa:	f00a fd6b 	bl	8013b84 <iprintf>
 80090ae:	f06f 0305 	mvn.w	r3, #5
 80090b2:	e15a      	b.n	800936a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	623b      	str	r3, [r7, #32]
        break;
 80090b8:	e044      	b.n	8009144 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80090ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d009      	beq.n	80090d6 <dhcp_parse_reply+0x2e6>
 80090c2:	4b07      	ldr	r3, [pc, #28]	@ (80090e0 <dhcp_parse_reply+0x2f0>)
 80090c4:	f240 6259 	movw	r2, #1625	@ 0x659
 80090c8:	4906      	ldr	r1, [pc, #24]	@ (80090e4 <dhcp_parse_reply+0x2f4>)
 80090ca:	4807      	ldr	r0, [pc, #28]	@ (80090e8 <dhcp_parse_reply+0x2f8>)
 80090cc:	f00a fd5a 	bl	8013b84 <iprintf>
 80090d0:	f06f 0305 	mvn.w	r3, #5
 80090d4:	e149      	b.n	800936a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80090d6:	2302      	movs	r3, #2
 80090d8:	623b      	str	r3, [r7, #32]
        break;
 80090da:	e033      	b.n	8009144 <dhcp_parse_reply+0x354>
 80090dc:	24004c44 	.word	0x24004c44
 80090e0:	08014b04 	.word	0x08014b04
 80090e4:	08014dc4 	.word	0x08014dc4
 80090e8:	08014b9c 	.word	0x08014b9c
 80090ec:	08014dd0 	.word	0x08014dd0
 80090f0:	08014de4 	.word	0x08014de4
 80090f4:	08014df0 	.word	0x08014df0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80090f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090fc:	2b04      	cmp	r3, #4
 80090fe:	d009      	beq.n	8009114 <dhcp_parse_reply+0x324>
 8009100:	4b9c      	ldr	r3, [pc, #624]	@ (8009374 <dhcp_parse_reply+0x584>)
 8009102:	f240 625d 	movw	r2, #1629	@ 0x65d
 8009106:	499c      	ldr	r1, [pc, #624]	@ (8009378 <dhcp_parse_reply+0x588>)
 8009108:	489c      	ldr	r0, [pc, #624]	@ (800937c <dhcp_parse_reply+0x58c>)
 800910a:	f00a fd3b 	bl	8013b84 <iprintf>
 800910e:	f06f 0305 	mvn.w	r3, #5
 8009112:	e12a      	b.n	800936a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8009114:	2304      	movs	r3, #4
 8009116:	623b      	str	r3, [r7, #32]
        break;
 8009118:	e014      	b.n	8009144 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800911a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800911e:	2b04      	cmp	r3, #4
 8009120:	d009      	beq.n	8009136 <dhcp_parse_reply+0x346>
 8009122:	4b94      	ldr	r3, [pc, #592]	@ (8009374 <dhcp_parse_reply+0x584>)
 8009124:	f240 6261 	movw	r2, #1633	@ 0x661
 8009128:	4993      	ldr	r1, [pc, #588]	@ (8009378 <dhcp_parse_reply+0x588>)
 800912a:	4894      	ldr	r0, [pc, #592]	@ (800937c <dhcp_parse_reply+0x58c>)
 800912c:	f00a fd2a 	bl	8013b84 <iprintf>
 8009130:	f06f 0305 	mvn.w	r3, #5
 8009134:	e119      	b.n	800936a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8009136:	2305      	movs	r3, #5
 8009138:	623b      	str	r3, [r7, #32]
        break;
 800913a:	e003      	b.n	8009144 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8009142:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <dhcp_parse_reply+0x362>
      offset++;
 800914a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800914c:	3301      	adds	r3, #1
 800914e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009150:	e0a1      	b.n	8009296 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8009152:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009158:	4413      	add	r3, r2
 800915a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800915e:	4293      	cmp	r3, r2
 8009160:	dd02      	ble.n	8009168 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8009162:	f06f 0301 	mvn.w	r3, #1
 8009166:	e100      	b.n	800936a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8009168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800916c:	b29a      	uxth	r2, r3
 800916e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009170:	4413      	add	r3, r2
 8009172:	b29b      	uxth	r3, r3
 8009174:	3302      	adds	r3, #2
 8009176:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8009178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 808a 	beq.w	8009296 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	db02      	blt.n	8009192 <dhcp_parse_reply+0x3a2>
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	2b07      	cmp	r3, #7
 8009190:	dd06      	ble.n	80091a0 <dhcp_parse_reply+0x3b0>
 8009192:	4b78      	ldr	r3, [pc, #480]	@ (8009374 <dhcp_parse_reply+0x584>)
 8009194:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8009198:	4979      	ldr	r1, [pc, #484]	@ (8009380 <dhcp_parse_reply+0x590>)
 800919a:	4878      	ldr	r0, [pc, #480]	@ (800937c <dhcp_parse_reply+0x58c>)
 800919c:	f00a fcf2 	bl	8013b84 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80091a0:	4a78      	ldr	r2, [pc, #480]	@ (8009384 <dhcp_parse_reply+0x594>)
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	4413      	add	r3, r2
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d174      	bne.n	8009296 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80091ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	bf28      	it	cs
 80091b4:	2304      	movcs	r3, #4
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80091ba:	8bfb      	ldrh	r3, [r7, #30]
 80091bc:	8aba      	ldrh	r2, [r7, #20]
 80091be:	f107 0108 	add.w	r1, r7, #8
 80091c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091c4:	f004 fbdc 	bl	800d980 <pbuf_copy_partial>
 80091c8:	4603      	mov	r3, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	8abb      	ldrh	r3, [r7, #20]
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d002      	beq.n	80091d8 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80091d2:	f06f 0301 	mvn.w	r3, #1
 80091d6:	e0c8      	b.n	800936a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80091d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d933      	bls.n	8009248 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80091e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <dhcp_parse_reply+0x412>
 80091ee:	4b61      	ldr	r3, [pc, #388]	@ (8009374 <dhcp_parse_reply+0x584>)
 80091f0:	f240 6281 	movw	r2, #1665	@ 0x681
 80091f4:	4964      	ldr	r1, [pc, #400]	@ (8009388 <dhcp_parse_reply+0x598>)
 80091f6:	4861      	ldr	r0, [pc, #388]	@ (800937c <dhcp_parse_reply+0x58c>)
 80091f8:	f00a fcc4 	bl	8013b84 <iprintf>
 80091fc:	f06f 0305 	mvn.w	r3, #5
 8009200:	e0b3      	b.n	800936a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8009202:	4a60      	ldr	r2, [pc, #384]	@ (8009384 <dhcp_parse_reply+0x594>)
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	4413      	add	r3, r2
 8009208:	2201      	movs	r2, #1
 800920a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe fc13 	bl	8007a3a <lwip_htonl>
 8009214:	4602      	mov	r2, r0
 8009216:	495d      	ldr	r1, [pc, #372]	@ (800938c <dhcp_parse_reply+0x59c>)
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800921e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009222:	3b04      	subs	r3, #4
 8009224:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8009228:	8bfb      	ldrh	r3, [r7, #30]
 800922a:	3304      	adds	r3, #4
 800922c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800922e:	8a7a      	ldrh	r2, [r7, #18]
 8009230:	8bfb      	ldrh	r3, [r7, #30]
 8009232:	429a      	cmp	r2, r3
 8009234:	d202      	bcs.n	800923c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8009236:	f06f 0301 	mvn.w	r3, #1
 800923a:	e096      	b.n	800936a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800923c:	8a7b      	ldrh	r3, [r7, #18]
 800923e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	3301      	adds	r3, #1
 8009244:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8009246:	e79e      	b.n	8009186 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8009248:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800924c:	2b04      	cmp	r3, #4
 800924e:	d106      	bne.n	800925e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fbf1 	bl	8007a3a <lwip_htonl>
 8009258:	4603      	mov	r3, r0
 800925a:	60bb      	str	r3, [r7, #8]
 800925c:	e011      	b.n	8009282 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800925e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009262:	2b01      	cmp	r3, #1
 8009264:	d009      	beq.n	800927a <dhcp_parse_reply+0x48a>
 8009266:	4b43      	ldr	r3, [pc, #268]	@ (8009374 <dhcp_parse_reply+0x584>)
 8009268:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800926c:	4948      	ldr	r1, [pc, #288]	@ (8009390 <dhcp_parse_reply+0x5a0>)
 800926e:	4843      	ldr	r0, [pc, #268]	@ (800937c <dhcp_parse_reply+0x58c>)
 8009270:	f00a fc88 	bl	8013b84 <iprintf>
 8009274:	f06f 0305 	mvn.w	r3, #5
 8009278:	e077      	b.n	800936a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800927a:	f107 0308 	add.w	r3, r7, #8
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8009282:	4a40      	ldr	r2, [pc, #256]	@ (8009384 <dhcp_parse_reply+0x594>)
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	4413      	add	r3, r2
 8009288:	2201      	movs	r2, #1
 800928a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	493f      	ldr	r1, [pc, #252]	@ (800938c <dhcp_parse_reply+0x59c>)
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	895b      	ldrh	r3, [r3, #10]
 800929a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800929c:	429a      	cmp	r2, r3
 800929e:	d324      	bcc.n	80092ea <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	895b      	ldrh	r3, [r3, #10]
 80092a4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	895b      	ldrh	r3, [r3, #10]
 80092ae:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80092b4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80092b6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d213      	bcs.n	80092e4 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80092c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d109      	bne.n	80092dc <dhcp_parse_reply+0x4ec>
 80092c8:	4b2a      	ldr	r3, [pc, #168]	@ (8009374 <dhcp_parse_reply+0x584>)
 80092ca:	f240 629d 	movw	r2, #1693	@ 0x69d
 80092ce:	4931      	ldr	r1, [pc, #196]	@ (8009394 <dhcp_parse_reply+0x5a4>)
 80092d0:	482a      	ldr	r0, [pc, #168]	@ (800937c <dhcp_parse_reply+0x58c>)
 80092d2:	f00a fc57 	bl	8013b84 <iprintf>
 80092d6:	f06f 0305 	mvn.w	r3, #5
 80092da:	e046      	b.n	800936a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092e2:	e002      	b.n	80092ea <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80092e4:	f06f 0301 	mvn.w	r3, #1
 80092e8:	e03f      	b.n	800936a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <dhcp_parse_reply+0x516>
 80092f0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80092f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d206      	bcs.n	8009306 <dhcp_parse_reply+0x516>
 80092f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80092fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092fc:	4413      	add	r3, r2
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2bff      	cmp	r3, #255	@ 0xff
 8009302:	f47f adb8 	bne.w	8008e76 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009306:	4b1f      	ldr	r3, [pc, #124]	@ (8009384 <dhcp_parse_reply+0x594>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d018      	beq.n	8009340 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800930e:	4b1f      	ldr	r3, [pc, #124]	@ (800938c <dhcp_parse_reply+0x59c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009314:	4b1b      	ldr	r3, [pc, #108]	@ (8009384 <dhcp_parse_reply+0x594>)
 8009316:	2200      	movs	r2, #0
 8009318:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d102      	bne.n	8009326 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8009320:	2301      	movs	r3, #1
 8009322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009324:	e00c      	b.n	8009340 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d102      	bne.n	8009332 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800932c:	2301      	movs	r3, #1
 800932e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009330:	e006      	b.n	8009340 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b03      	cmp	r3, #3
 8009336:	d103      	bne.n	8009340 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8009338:	2301      	movs	r3, #1
 800933a:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 800933c:	2301      	movs	r3, #1
 800933e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8009340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d006      	beq.n	8009354 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 800934a:	236c      	movs	r3, #108	@ 0x6c
 800934c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800934e:	23ec      	movs	r3, #236	@ 0xec
 8009350:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8009352:	e56a      	b.n	8008e2a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8009354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 800935e:	232c      	movs	r3, #44	@ 0x2c
 8009360:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8009362:	236c      	movs	r3, #108	@ 0x6c
 8009364:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8009366:	e560      	b.n	8008e2a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3740      	adds	r7, #64	@ 0x40
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	08014b04 	.word	0x08014b04
 8009378:	08014dc4 	.word	0x08014dc4
 800937c:	08014b9c 	.word	0x08014b9c
 8009380:	08014e08 	.word	0x08014e08
 8009384:	24004c44 	.word	0x24004c44
 8009388:	08014e1c 	.word	0x08014e1c
 800938c:	24004c24 	.word	0x24004c24
 8009390:	08014e34 	.word	0x08014e34
 8009394:	08014e48 	.word	0x08014e48

08009398 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	@ 0x28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80093a6:	4b60      	ldr	r3, [pc, #384]	@ (8009528 <dhcp_recv+0x190>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 809d 	beq.w	80094fa <dhcp_recv+0x162>
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	791b      	ldrb	r3, [r3, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8098 	beq.w	80094fa <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	895b      	ldrh	r3, [r3, #10]
 80093ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80093d0:	f240 8095 	bls.w	80094fe <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b02      	cmp	r3, #2
 80093da:	f040 8092 	bne.w	8009502 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80093de:	2300      	movs	r3, #0
 80093e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80093e4:	e012      	b.n	800940c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80093e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093ea:	6a3a      	ldr	r2, [r7, #32]
 80093ec:	4413      	add	r3, r2
 80093ee:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80093f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093f6:	69b9      	ldr	r1, [r7, #24]
 80093f8:	440b      	add	r3, r1
 80093fa:	7f1b      	ldrb	r3, [r3, #28]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	f040 8082 	bne.w	8009506 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009406:	3301      	adds	r3, #1
 8009408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009412:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009416:	429a      	cmp	r2, r3
 8009418:	d203      	bcs.n	8009422 <dhcp_recv+0x8a>
 800941a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800941e:	2b05      	cmp	r3, #5
 8009420:	d9e1      	bls.n	80093e6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fb07 	bl	8007a3a <lwip_htonl>
 800942c:	4602      	mov	r2, r0
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d169      	bne.n	800950a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8009436:	69f9      	ldr	r1, [r7, #28]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fcd9 	bl	8008df0 <dhcp_parse_reply>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d164      	bne.n	800950e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009444:	4b39      	ldr	r3, [pc, #228]	@ (800952c <dhcp_recv+0x194>)
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d062      	beq.n	8009512 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8009452:	4b37      	ldr	r3, [pc, #220]	@ (8009530 <dhcp_recv+0x198>)
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8009458:	7cfb      	ldrb	r3, [r7, #19]
 800945a:	2b05      	cmp	r3, #5
 800945c:	d12a      	bne.n	80094b4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	795b      	ldrb	r3, [r3, #5]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d112      	bne.n	800948c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8009466:	6979      	ldr	r1, [r7, #20]
 8009468:	6a38      	ldr	r0, [r7, #32]
 800946a:	f7fe fe1d 	bl	80080a8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800947c:	6a38      	ldr	r0, [r7, #32]
 800947e:	f7fe fb8b 	bl	8007b98 <dhcp_check>
 8009482:	e049      	b.n	8009518 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8009484:	6a38      	ldr	r0, [r7, #32]
 8009486:	f7ff f86d 	bl	8008564 <dhcp_bind>
 800948a:	e045      	b.n	8009518 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	795b      	ldrb	r3, [r3, #5]
 8009490:	2b03      	cmp	r3, #3
 8009492:	d007      	beq.n	80094a4 <dhcp_recv+0x10c>
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	795b      	ldrb	r3, [r3, #5]
 8009498:	2b04      	cmp	r3, #4
 800949a:	d003      	beq.n	80094a4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80094a0:	2b05      	cmp	r3, #5
 80094a2:	d139      	bne.n	8009518 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80094a4:	6979      	ldr	r1, [r7, #20]
 80094a6:	6a38      	ldr	r0, [r7, #32]
 80094a8:	f7fe fdfe 	bl	80080a8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80094ac:	6a38      	ldr	r0, [r7, #32]
 80094ae:	f7ff f859 	bl	8008564 <dhcp_bind>
 80094b2:	e031      	b.n	8009518 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80094b4:	7cfb      	ldrb	r3, [r7, #19]
 80094b6:	2b06      	cmp	r3, #6
 80094b8:	d113      	bne.n	80094e2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d00b      	beq.n	80094da <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	795b      	ldrb	r3, [r3, #5]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d007      	beq.n	80094da <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d003      	beq.n	80094da <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	795b      	ldrb	r3, [r3, #5]
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d103      	bne.n	80094e2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80094da:	6a38      	ldr	r0, [r7, #32]
 80094dc:	f7fe fb42 	bl	8007b64 <dhcp_handle_nak>
 80094e0:	e01a      	b.n	8009518 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80094e2:	7cfb      	ldrb	r3, [r7, #19]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d116      	bne.n	8009516 <dhcp_recv+0x17e>
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	795b      	ldrb	r3, [r3, #5]
 80094ec:	2b06      	cmp	r3, #6
 80094ee:	d112      	bne.n	8009516 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80094f0:	6979      	ldr	r1, [r7, #20]
 80094f2:	6a38      	ldr	r0, [r7, #32]
 80094f4:	f7fe fb84 	bl	8007c00 <dhcp_handle_offer>
 80094f8:	e00e      	b.n	8009518 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80094fa:	bf00      	nop
 80094fc:	e00c      	b.n	8009518 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80094fe:	bf00      	nop
 8009500:	e00a      	b.n	8009518 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009502:	bf00      	nop
 8009504:	e008      	b.n	8009518 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8009506:	bf00      	nop
 8009508:	e006      	b.n	8009518 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800950a:	bf00      	nop
 800950c:	e004      	b.n	8009518 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800950e:	bf00      	nop
 8009510:	e002      	b.n	8009518 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009512:	bf00      	nop
 8009514:	e000      	b.n	8009518 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8009516:	bf00      	nop
  pbuf_free(p);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f004 f837 	bl	800d58c <pbuf_free>
}
 800951e:	bf00      	nop
 8009520:	3728      	adds	r7, #40	@ 0x28
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	24004d4c 	.word	0x24004d4c
 800952c:	24004c44 	.word	0x24004c44
 8009530:	24004c24 	.word	0x24004c24

08009534 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	4613      	mov	r3, r2
 8009542:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d108      	bne.n	800955c <dhcp_create_msg+0x28>
 800954a:	4b5f      	ldr	r3, [pc, #380]	@ (80096c8 <dhcp_create_msg+0x194>)
 800954c:	f240 7269 	movw	r2, #1897	@ 0x769
 8009550:	495e      	ldr	r1, [pc, #376]	@ (80096cc <dhcp_create_msg+0x198>)
 8009552:	485f      	ldr	r0, [pc, #380]	@ (80096d0 <dhcp_create_msg+0x19c>)
 8009554:	f00a fb16 	bl	8013b84 <iprintf>
 8009558:	2300      	movs	r3, #0
 800955a:	e0b1      	b.n	80096c0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d108      	bne.n	8009574 <dhcp_create_msg+0x40>
 8009562:	4b59      	ldr	r3, [pc, #356]	@ (80096c8 <dhcp_create_msg+0x194>)
 8009564:	f240 726a 	movw	r2, #1898	@ 0x76a
 8009568:	495a      	ldr	r1, [pc, #360]	@ (80096d4 <dhcp_create_msg+0x1a0>)
 800956a:	4859      	ldr	r0, [pc, #356]	@ (80096d0 <dhcp_create_msg+0x19c>)
 800956c:	f00a fb0a 	bl	8013b84 <iprintf>
 8009570:	2300      	movs	r3, #0
 8009572:	e0a5      	b.n	80096c0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8009574:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009578:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800957c:	2036      	movs	r0, #54	@ 0x36
 800957e:	f003 fd21 	bl	800cfc4 <pbuf_alloc>
 8009582:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800958a:	2300      	movs	r3, #0
 800958c:	e098      	b.n	80096c0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	895b      	ldrh	r3, [r3, #10]
 8009592:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8009596:	d206      	bcs.n	80095a6 <dhcp_create_msg+0x72>
 8009598:	4b4b      	ldr	r3, [pc, #300]	@ (80096c8 <dhcp_create_msg+0x194>)
 800959a:	f240 7271 	movw	r2, #1905	@ 0x771
 800959e:	494e      	ldr	r1, [pc, #312]	@ (80096d8 <dhcp_create_msg+0x1a4>)
 80095a0:	484b      	ldr	r0, [pc, #300]	@ (80096d0 <dhcp_create_msg+0x19c>)
 80095a2:	f00a faef 	bl	8013b84 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d103      	bne.n	80095b4 <dhcp_create_msg+0x80>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	795b      	ldrb	r3, [r3, #5]
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d10d      	bne.n	80095d0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	799b      	ldrb	r3, [r3, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d105      	bne.n	80095c8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80095bc:	f00a f9e2 	bl	8013984 <rand>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	4b45      	ldr	r3, [pc, #276]	@ (80096dc <dhcp_create_msg+0x1a8>)
 80095c6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80095c8:	4b44      	ldr	r3, [pc, #272]	@ (80096dc <dhcp_create_msg+0x1a8>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80095d6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80095da:	2100      	movs	r1, #0
 80095dc:	6978      	ldr	r0, [r7, #20]
 80095de:	f00a fc29 	bl	8013e34 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2201      	movs	r2, #1
 80095e6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2201      	movs	r2, #1
 80095ec:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fa1c 	bl	8007a3a <lwip_htonl>
 8009602:	4602      	mov	r2, r0
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	2b08      	cmp	r3, #8
 800960c:	d010      	beq.n	8009630 <dhcp_create_msg+0xfc>
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	2b04      	cmp	r3, #4
 8009612:	d00d      	beq.n	8009630 <dhcp_create_msg+0xfc>
 8009614:	79fb      	ldrb	r3, [r7, #7]
 8009616:	2b07      	cmp	r3, #7
 8009618:	d00a      	beq.n	8009630 <dhcp_create_msg+0xfc>
 800961a:	79fb      	ldrb	r3, [r7, #7]
 800961c:	2b03      	cmp	r3, #3
 800961e:	d10c      	bne.n	800963a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8009624:	2b05      	cmp	r3, #5
 8009626:	d003      	beq.n	8009630 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	795b      	ldrb	r3, [r3, #5]
 800962c:	2b04      	cmp	r3, #4
 800962e:	d104      	bne.n	800963a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3304      	adds	r3, #4
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800963a:	2300      	movs	r3, #0
 800963c:	83fb      	strh	r3, [r7, #30]
 800963e:	e00c      	b.n	800965a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8009640:	8bfa      	ldrh	r2, [r7, #30]
 8009642:	8bfb      	ldrh	r3, [r7, #30]
 8009644:	68f9      	ldr	r1, [r7, #12]
 8009646:	440a      	add	r2, r1
 8009648:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4413      	add	r3, r2
 8009650:	460a      	mov	r2, r1
 8009652:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009654:	8bfb      	ldrh	r3, [r7, #30]
 8009656:	3301      	adds	r3, #1
 8009658:	83fb      	strh	r3, [r7, #30]
 800965a:	8bfb      	ldrh	r3, [r7, #30]
 800965c:	2b05      	cmp	r3, #5
 800965e:	d9ef      	bls.n	8009640 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	2200      	movs	r2, #0
 8009664:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8009668:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800966c:	2200      	movs	r2, #0
 800966e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8009672:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8009676:	2200      	movs	r2, #0
 8009678:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800967c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8009680:	2200      	movs	r2, #0
 8009682:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8009686:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009690:	2301      	movs	r3, #1
 8009692:	2235      	movs	r2, #53	@ 0x35
 8009694:	2000      	movs	r0, #0
 8009696:	f7ff fadb 	bl	8008c50 <dhcp_option>
 800969a:	4603      	mov	r3, r0
 800969c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80096a4:	79fa      	ldrb	r2, [r7, #7]
 80096a6:	8a7b      	ldrh	r3, [r7, #18]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff fb05 	bl	8008cb8 <dhcp_option_byte>
 80096ae:	4603      	mov	r3, r0
 80096b0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	8a7a      	ldrh	r2, [r7, #18]
 80096bc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80096be:	69bb      	ldr	r3, [r7, #24]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3720      	adds	r7, #32
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	08014b04 	.word	0x08014b04
 80096cc:	08014e5c 	.word	0x08014e5c
 80096d0:	08014b9c 	.word	0x08014b9c
 80096d4:	08014e7c 	.word	0x08014e7c
 80096d8:	08014e9c 	.word	0x08014e9c
 80096dc:	24004c54 	.word	0x24004c54

080096e0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80096ee:	89fb      	ldrh	r3, [r7, #14]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	81fa      	strh	r2, [r7, #14]
 80096f4:	461a      	mov	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	22ff      	movs	r2, #255	@ 0xff
 80096fc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80096fe:	e007      	b.n	8009710 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8009700:	89fb      	ldrh	r3, [r7, #14]
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	81fa      	strh	r2, [r7, #14]
 8009706:	461a      	mov	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4413      	add	r3, r2
 800970c:	2200      	movs	r2, #0
 800970e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8009710:	89fb      	ldrh	r3, [r7, #14]
 8009712:	2b43      	cmp	r3, #67	@ 0x43
 8009714:	d904      	bls.n	8009720 <dhcp_option_trailer+0x40>
 8009716:	89fb      	ldrh	r3, [r7, #14]
 8009718:	f003 0303 	and.w	r3, r3, #3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <dhcp_option_trailer+0x46>
 8009720:	89fb      	ldrh	r3, [r7, #14]
 8009722:	2b43      	cmp	r3, #67	@ 0x43
 8009724:	d9ec      	bls.n	8009700 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8009726:	89fb      	ldrh	r3, [r7, #14]
 8009728:	33f0      	adds	r3, #240	@ 0xf0
 800972a:	b29b      	uxth	r3, r3
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f003 fda6 	bl	800d280 <pbuf_realloc>
}
 8009734:	bf00      	nop
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d017      	beq.n	800977a <dhcp_supplied_address+0x3e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974e:	2b00      	cmp	r3, #0
 8009750:	d013      	beq.n	800977a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009756:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	795b      	ldrb	r3, [r3, #5]
 800975c:	2b0a      	cmp	r3, #10
 800975e:	d007      	beq.n	8009770 <dhcp_supplied_address+0x34>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	795b      	ldrb	r3, [r3, #5]
 8009764:	2b05      	cmp	r3, #5
 8009766:	d003      	beq.n	8009770 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800976c:	2b04      	cmp	r3, #4
 800976e:	d101      	bne.n	8009774 <dhcp_supplied_address+0x38>
 8009770:	2301      	movs	r3, #1
 8009772:	e000      	b.n	8009776 <dhcp_supplied_address+0x3a>
 8009774:	2300      	movs	r3, #0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	e000      	b.n	800977c <dhcp_supplied_address+0x40>
  }
  return 0;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009790:	4915      	ldr	r1, [pc, #84]	@ (80097e8 <etharp_free_entry+0x60>)
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	4413      	add	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	440b      	add	r3, r1
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d013      	beq.n	80097cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80097a4:	4910      	ldr	r1, [pc, #64]	@ (80097e8 <etharp_free_entry+0x60>)
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	4613      	mov	r3, r2
 80097aa:	005b      	lsls	r3, r3, #1
 80097ac:	4413      	add	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	440b      	add	r3, r1
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f003 fee9 	bl	800d58c <pbuf_free>
    arp_table[i].q = NULL;
 80097ba:	490b      	ldr	r1, [pc, #44]	@ (80097e8 <etharp_free_entry+0x60>)
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	4413      	add	r3, r2
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	440b      	add	r3, r1
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80097cc:	4906      	ldr	r1, [pc, #24]	@ (80097e8 <etharp_free_entry+0x60>)
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	4613      	mov	r3, r2
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	4413      	add	r3, r2
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	440b      	add	r3, r1
 80097da:	3314      	adds	r3, #20
 80097dc:	2200      	movs	r2, #0
 80097de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	24004c58 	.word	0x24004c58

080097ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80097f2:	2300      	movs	r3, #0
 80097f4:	607b      	str	r3, [r7, #4]
 80097f6:	e096      	b.n	8009926 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80097f8:	494f      	ldr	r1, [pc, #316]	@ (8009938 <etharp_tmr+0x14c>)
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	4613      	mov	r3, r2
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	4413      	add	r3, r2
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	440b      	add	r3, r1
 8009806:	3314      	adds	r3, #20
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 8086 	beq.w	8009920 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8009814:	4948      	ldr	r1, [pc, #288]	@ (8009938 <etharp_tmr+0x14c>)
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	4413      	add	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	440b      	add	r3, r1
 8009822:	3312      	adds	r3, #18
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	3301      	adds	r3, #1
 8009828:	b298      	uxth	r0, r3
 800982a:	4943      	ldr	r1, [pc, #268]	@ (8009938 <etharp_tmr+0x14c>)
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	4413      	add	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	440b      	add	r3, r1
 8009838:	3312      	adds	r3, #18
 800983a:	4602      	mov	r2, r0
 800983c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800983e:	493e      	ldr	r1, [pc, #248]	@ (8009938 <etharp_tmr+0x14c>)
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	4613      	mov	r3, r2
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	4413      	add	r3, r2
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	440b      	add	r3, r1
 800984c:	3312      	adds	r3, #18
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8009854:	d215      	bcs.n	8009882 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009856:	4938      	ldr	r1, [pc, #224]	@ (8009938 <etharp_tmr+0x14c>)
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	4413      	add	r3, r2
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	440b      	add	r3, r1
 8009864:	3314      	adds	r3, #20
 8009866:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009868:	2b01      	cmp	r3, #1
 800986a:	d10e      	bne.n	800988a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800986c:	4932      	ldr	r1, [pc, #200]	@ (8009938 <etharp_tmr+0x14c>)
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	4413      	add	r3, r2
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	440b      	add	r3, r1
 800987a:	3312      	adds	r3, #18
 800987c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800987e:	2b04      	cmp	r3, #4
 8009880:	d903      	bls.n	800988a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7ff ff80 	bl	8009788 <etharp_free_entry>
 8009888:	e04a      	b.n	8009920 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800988a:	492b      	ldr	r1, [pc, #172]	@ (8009938 <etharp_tmr+0x14c>)
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4613      	mov	r3, r2
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	4413      	add	r3, r2
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	440b      	add	r3, r1
 8009898:	3314      	adds	r3, #20
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b03      	cmp	r3, #3
 800989e:	d10a      	bne.n	80098b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80098a0:	4925      	ldr	r1, [pc, #148]	@ (8009938 <etharp_tmr+0x14c>)
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	4413      	add	r3, r2
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	440b      	add	r3, r1
 80098ae:	3314      	adds	r3, #20
 80098b0:	2204      	movs	r2, #4
 80098b2:	701a      	strb	r2, [r3, #0]
 80098b4:	e034      	b.n	8009920 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80098b6:	4920      	ldr	r1, [pc, #128]	@ (8009938 <etharp_tmr+0x14c>)
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	4413      	add	r3, r2
 80098c0:	00db      	lsls	r3, r3, #3
 80098c2:	440b      	add	r3, r1
 80098c4:	3314      	adds	r3, #20
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	d10a      	bne.n	80098e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80098cc:	491a      	ldr	r1, [pc, #104]	@ (8009938 <etharp_tmr+0x14c>)
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	4413      	add	r3, r2
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	440b      	add	r3, r1
 80098da:	3314      	adds	r3, #20
 80098dc:	2202      	movs	r2, #2
 80098de:	701a      	strb	r2, [r3, #0]
 80098e0:	e01e      	b.n	8009920 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80098e2:	4915      	ldr	r1, [pc, #84]	@ (8009938 <etharp_tmr+0x14c>)
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	4613      	mov	r3, r2
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4413      	add	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	440b      	add	r3, r1
 80098f0:	3314      	adds	r3, #20
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d113      	bne.n	8009920 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80098f8:	490f      	ldr	r1, [pc, #60]	@ (8009938 <etharp_tmr+0x14c>)
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4613      	mov	r3, r2
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	4413      	add	r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	440b      	add	r3, r1
 8009906:	3308      	adds	r3, #8
 8009908:	6818      	ldr	r0, [r3, #0]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	005b      	lsls	r3, r3, #1
 8009910:	4413      	add	r3, r2
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	4a08      	ldr	r2, [pc, #32]	@ (8009938 <etharp_tmr+0x14c>)
 8009916:	4413      	add	r3, r2
 8009918:	3304      	adds	r3, #4
 800991a:	4619      	mov	r1, r3
 800991c:	f000 fe72 	bl	800a604 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	3301      	adds	r3, #1
 8009924:	607b      	str	r3, [r7, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b09      	cmp	r3, #9
 800992a:	f77f af65 	ble.w	80097f8 <etharp_tmr+0xc>
      }
    }
  }
}
 800992e:	bf00      	nop
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	24004c58 	.word	0x24004c58

0800993c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08a      	sub	sp, #40	@ 0x28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	460b      	mov	r3, r1
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800994a:	230a      	movs	r3, #10
 800994c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800994e:	230a      	movs	r3, #10
 8009950:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8009952:	230a      	movs	r3, #10
 8009954:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800995a:	230a      	movs	r3, #10
 800995c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	83bb      	strh	r3, [r7, #28]
 8009962:	2300      	movs	r3, #0
 8009964:	837b      	strh	r3, [r7, #26]
 8009966:	2300      	movs	r3, #0
 8009968:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800996a:	2300      	movs	r3, #0
 800996c:	843b      	strh	r3, [r7, #32]
 800996e:	e0ae      	b.n	8009ace <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8009970:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009974:	49a6      	ldr	r1, [pc, #664]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009976:	4613      	mov	r3, r2
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	4413      	add	r3, r2
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	440b      	add	r3, r1
 8009980:	3314      	adds	r3, #20
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009986:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800998a:	2b0a      	cmp	r3, #10
 800998c:	d105      	bne.n	800999a <etharp_find_entry+0x5e>
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8009994:	8c3b      	ldrh	r3, [r7, #32]
 8009996:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009998:	e095      	b.n	8009ac6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 8092 	beq.w	8009ac6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d009      	beq.n	80099bc <etharp_find_entry+0x80>
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d806      	bhi.n	80099bc <etharp_find_entry+0x80>
 80099ae:	4b99      	ldr	r3, [pc, #612]	@ (8009c14 <etharp_find_entry+0x2d8>)
 80099b0:	f240 1223 	movw	r2, #291	@ 0x123
 80099b4:	4998      	ldr	r1, [pc, #608]	@ (8009c18 <etharp_find_entry+0x2dc>)
 80099b6:	4899      	ldr	r0, [pc, #612]	@ (8009c1c <etharp_find_entry+0x2e0>)
 80099b8:	f00a f8e4 	bl	8013b84 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d020      	beq.n	8009a04 <etharp_find_entry+0xc8>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6819      	ldr	r1, [r3, #0]
 80099c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80099ca:	4891      	ldr	r0, [pc, #580]	@ (8009c10 <etharp_find_entry+0x2d4>)
 80099cc:	4613      	mov	r3, r2
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	4413      	add	r3, r2
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	4403      	add	r3, r0
 80099d6:	3304      	adds	r3, #4
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4299      	cmp	r1, r3
 80099dc:	d112      	bne.n	8009a04 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00c      	beq.n	80099fe <etharp_find_entry+0xc2>
 80099e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80099e8:	4989      	ldr	r1, [pc, #548]	@ (8009c10 <etharp_find_entry+0x2d4>)
 80099ea:	4613      	mov	r3, r2
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	4413      	add	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	440b      	add	r3, r1
 80099f4:	3308      	adds	r3, #8
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d102      	bne.n	8009a04 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80099fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009a02:	e100      	b.n	8009c06 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d140      	bne.n	8009a8c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8009a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a0e:	4980      	ldr	r1, [pc, #512]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009a10:	4613      	mov	r3, r2
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	4413      	add	r3, r2
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	440b      	add	r3, r1
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01a      	beq.n	8009a56 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8009a20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a24:	497a      	ldr	r1, [pc, #488]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009a26:	4613      	mov	r3, r2
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	4413      	add	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	440b      	add	r3, r1
 8009a30:	3312      	adds	r3, #18
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	8bba      	ldrh	r2, [r7, #28]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d845      	bhi.n	8009ac6 <etharp_find_entry+0x18a>
            old_queue = i;
 8009a3a:	8c3b      	ldrh	r3, [r7, #32]
 8009a3c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8009a3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a42:	4973      	ldr	r1, [pc, #460]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009a44:	4613      	mov	r3, r2
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	440b      	add	r3, r1
 8009a4e:	3312      	adds	r3, #18
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	83bb      	strh	r3, [r7, #28]
 8009a54:	e037      	b.n	8009ac6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8009a56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a5a:	496d      	ldr	r1, [pc, #436]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	4413      	add	r3, r2
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	440b      	add	r3, r1
 8009a66:	3312      	adds	r3, #18
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	8b7a      	ldrh	r2, [r7, #26]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d82a      	bhi.n	8009ac6 <etharp_find_entry+0x18a>
            old_pending = i;
 8009a70:	8c3b      	ldrh	r3, [r7, #32]
 8009a72:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8009a74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a78:	4965      	ldr	r1, [pc, #404]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	4413      	add	r3, r2
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	440b      	add	r3, r1
 8009a84:	3312      	adds	r3, #18
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	837b      	strh	r3, [r7, #26]
 8009a8a:	e01c      	b.n	8009ac6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d919      	bls.n	8009ac6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009a92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a96:	495e      	ldr	r1, [pc, #376]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009a98:	4613      	mov	r3, r2
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	4413      	add	r3, r2
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	440b      	add	r3, r1
 8009aa2:	3312      	adds	r3, #18
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	8b3a      	ldrh	r2, [r7, #24]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d80c      	bhi.n	8009ac6 <etharp_find_entry+0x18a>
            old_stable = i;
 8009aac:	8c3b      	ldrh	r3, [r7, #32]
 8009aae:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8009ab0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009ab4:	4956      	ldr	r1, [pc, #344]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	4413      	add	r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	440b      	add	r3, r1
 8009ac0:	3312      	adds	r3, #18
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009ac6:	8c3b      	ldrh	r3, [r7, #32]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	843b      	strh	r3, [r7, #32]
 8009ace:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009ad2:	2b09      	cmp	r3, #9
 8009ad4:	f77f af4c 	ble.w	8009970 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009ad8:	7afb      	ldrb	r3, [r7, #11]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d108      	bne.n	8009af4 <etharp_find_entry+0x1b8>
 8009ae2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009ae6:	2b0a      	cmp	r3, #10
 8009ae8:	d107      	bne.n	8009afa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8009af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009af8:	e085      	b.n	8009c06 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8009afa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009afe:	2b09      	cmp	r3, #9
 8009b00:	dc02      	bgt.n	8009b08 <etharp_find_entry+0x1cc>
    i = empty;
 8009b02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009b04:	843b      	strh	r3, [r7, #32]
 8009b06:	e039      	b.n	8009b7c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8009b08:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009b0c:	2b09      	cmp	r3, #9
 8009b0e:	dc14      	bgt.n	8009b3a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8009b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b12:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009b14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009b18:	493d      	ldr	r1, [pc, #244]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	4413      	add	r3, r2
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	440b      	add	r3, r1
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d018      	beq.n	8009b5c <etharp_find_entry+0x220>
 8009b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8009c14 <etharp_find_entry+0x2d8>)
 8009b2c:	f240 126d 	movw	r2, #365	@ 0x16d
 8009b30:	493b      	ldr	r1, [pc, #236]	@ (8009c20 <etharp_find_entry+0x2e4>)
 8009b32:	483a      	ldr	r0, [pc, #232]	@ (8009c1c <etharp_find_entry+0x2e0>)
 8009b34:	f00a f826 	bl	8013b84 <iprintf>
 8009b38:	e010      	b.n	8009b5c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009b3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009b3e:	2b09      	cmp	r3, #9
 8009b40:	dc02      	bgt.n	8009b48 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8009b42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b44:	843b      	strh	r3, [r7, #32]
 8009b46:	e009      	b.n	8009b5c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009b48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	dc02      	bgt.n	8009b56 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8009b50:	8bfb      	ldrh	r3, [r7, #30]
 8009b52:	843b      	strh	r3, [r7, #32]
 8009b54:	e002      	b.n	8009b5c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8009b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b5a:	e054      	b.n	8009c06 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009b5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009b60:	2b09      	cmp	r3, #9
 8009b62:	dd06      	ble.n	8009b72 <etharp_find_entry+0x236>
 8009b64:	4b2b      	ldr	r3, [pc, #172]	@ (8009c14 <etharp_find_entry+0x2d8>)
 8009b66:	f240 127f 	movw	r2, #383	@ 0x17f
 8009b6a:	492e      	ldr	r1, [pc, #184]	@ (8009c24 <etharp_find_entry+0x2e8>)
 8009b6c:	482b      	ldr	r0, [pc, #172]	@ (8009c1c <etharp_find_entry+0x2e0>)
 8009b6e:	f00a f809 	bl	8013b84 <iprintf>
    etharp_free_entry(i);
 8009b72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff fe06 	bl	8009788 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009b7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009b80:	2b09      	cmp	r3, #9
 8009b82:	dd06      	ble.n	8009b92 <etharp_find_entry+0x256>
 8009b84:	4b23      	ldr	r3, [pc, #140]	@ (8009c14 <etharp_find_entry+0x2d8>)
 8009b86:	f240 1283 	movw	r2, #387	@ 0x183
 8009b8a:	4926      	ldr	r1, [pc, #152]	@ (8009c24 <etharp_find_entry+0x2e8>)
 8009b8c:	4823      	ldr	r0, [pc, #140]	@ (8009c1c <etharp_find_entry+0x2e0>)
 8009b8e:	f009 fff9 	bl	8013b84 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009b92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009b96:	491e      	ldr	r1, [pc, #120]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009b98:	4613      	mov	r3, r2
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	4413      	add	r3, r2
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	440b      	add	r3, r1
 8009ba2:	3314      	adds	r3, #20
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d006      	beq.n	8009bb8 <etharp_find_entry+0x27c>
 8009baa:	4b1a      	ldr	r3, [pc, #104]	@ (8009c14 <etharp_find_entry+0x2d8>)
 8009bac:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8009bb0:	491d      	ldr	r1, [pc, #116]	@ (8009c28 <etharp_find_entry+0x2ec>)
 8009bb2:	481a      	ldr	r0, [pc, #104]	@ (8009c1c <etharp_find_entry+0x2e0>)
 8009bb4:	f009 ffe6 	bl	8013b84 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00b      	beq.n	8009bd6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009bbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6819      	ldr	r1, [r3, #0]
 8009bc6:	4812      	ldr	r0, [pc, #72]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009bc8:	4613      	mov	r3, r2
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	4413      	add	r3, r2
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	4403      	add	r3, r0
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8009bd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009bda:	490d      	ldr	r1, [pc, #52]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009bdc:	4613      	mov	r3, r2
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	4413      	add	r3, r2
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	440b      	add	r3, r1
 8009be6:	3312      	adds	r3, #18
 8009be8:	2200      	movs	r2, #0
 8009bea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8009bec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009bf0:	4907      	ldr	r1, [pc, #28]	@ (8009c10 <etharp_find_entry+0x2d4>)
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	4413      	add	r3, r2
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8009c02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3728      	adds	r7, #40	@ 0x28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	24004c58 	.word	0x24004c58
 8009c14:	08014edc 	.word	0x08014edc
 8009c18:	08014f50 	.word	0x08014f50
 8009c1c:	08014f90 	.word	0x08014f90
 8009c20:	08014fb8 	.word	0x08014fb8
 8009c24:	08014fd0 	.word	0x08014fd0
 8009c28:	08014fe4 	.word	0x08014fe4

08009c2c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c40:	2b06      	cmp	r3, #6
 8009c42:	d006      	beq.n	8009c52 <etharp_update_arp_entry+0x26>
 8009c44:	4b48      	ldr	r3, [pc, #288]	@ (8009d68 <etharp_update_arp_entry+0x13c>)
 8009c46:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8009c4a:	4948      	ldr	r1, [pc, #288]	@ (8009d6c <etharp_update_arp_entry+0x140>)
 8009c4c:	4848      	ldr	r0, [pc, #288]	@ (8009d70 <etharp_update_arp_entry+0x144>)
 8009c4e:	f009 ff99 	bl	8013b84 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d012      	beq.n	8009c7e <etharp_update_arp_entry+0x52>
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00e      	beq.n	8009c7e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68f9      	ldr	r1, [r7, #12]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 faee 	bl	800b248 <ip4_addr_isbroadcast_u32>
 8009c6c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d105      	bne.n	8009c7e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009c7a:	2be0      	cmp	r3, #224	@ 0xe0
 8009c7c:	d102      	bne.n	8009c84 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009c7e:	f06f 030f 	mvn.w	r3, #15
 8009c82:	e06c      	b.n	8009d5e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	68b8      	ldr	r0, [r7, #8]
 8009c8c:	f7ff fe56 	bl	800993c <etharp_find_entry>
 8009c90:	4603      	mov	r3, r0
 8009c92:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009c94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da02      	bge.n	8009ca2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009c9c:	8afb      	ldrh	r3, [r7, #22]
 8009c9e:	b25b      	sxtb	r3, r3
 8009ca0:	e05d      	b.n	8009d5e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009ca2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009ca6:	4933      	ldr	r1, [pc, #204]	@ (8009d74 <etharp_update_arp_entry+0x148>)
 8009ca8:	4613      	mov	r3, r2
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	4413      	add	r3, r2
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	440b      	add	r3, r1
 8009cb2:	3314      	adds	r3, #20
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009cb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009cbc:	492d      	ldr	r1, [pc, #180]	@ (8009d74 <etharp_update_arp_entry+0x148>)
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	4413      	add	r3, r2
 8009cc4:	00db      	lsls	r3, r3, #3
 8009cc6:	440b      	add	r3, r1
 8009cc8:	3308      	adds	r3, #8
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8009cce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	00db      	lsls	r3, r3, #3
 8009cda:	3308      	adds	r3, #8
 8009cdc:	4a25      	ldr	r2, [pc, #148]	@ (8009d74 <etharp_update_arp_entry+0x148>)
 8009cde:	4413      	add	r3, r2
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	2206      	movs	r2, #6
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f00a f919 	bl	8013f1e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8009cec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009cf0:	4920      	ldr	r1, [pc, #128]	@ (8009d74 <etharp_update_arp_entry+0x148>)
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	4413      	add	r3, r2
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	440b      	add	r3, r1
 8009cfc:	3312      	adds	r3, #18
 8009cfe:	2200      	movs	r2, #0
 8009d00:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009d02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009d06:	491b      	ldr	r1, [pc, #108]	@ (8009d74 <etharp_update_arp_entry+0x148>)
 8009d08:	4613      	mov	r3, r2
 8009d0a:	005b      	lsls	r3, r3, #1
 8009d0c:	4413      	add	r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	440b      	add	r3, r1
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d021      	beq.n	8009d5c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009d18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009d1c:	4915      	ldr	r1, [pc, #84]	@ (8009d74 <etharp_update_arp_entry+0x148>)
 8009d1e:	4613      	mov	r3, r2
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	4413      	add	r3, r2
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	440b      	add	r3, r1
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8009d2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009d30:	4910      	ldr	r1, [pc, #64]	@ (8009d74 <etharp_update_arp_entry+0x148>)
 8009d32:	4613      	mov	r3, r2
 8009d34:	005b      	lsls	r3, r3, #1
 8009d36:	4413      	add	r3, r2
 8009d38:	00db      	lsls	r3, r3, #3
 8009d3a:	440b      	add	r3, r1
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8009d46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6939      	ldr	r1, [r7, #16]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 fcf7 	bl	800a744 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8009d56:	6938      	ldr	r0, [r7, #16]
 8009d58:	f003 fc18 	bl	800d58c <pbuf_free>
  }
  return ERR_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	08014edc 	.word	0x08014edc
 8009d6c:	08015010 	.word	0x08015010
 8009d70:	08014f90 	.word	0x08014f90
 8009d74:	24004c58 	.word	0x24004c58

08009d78 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	e01e      	b.n	8009dc4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8009d86:	4913      	ldr	r1, [pc, #76]	@ (8009dd4 <etharp_cleanup_netif+0x5c>)
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	4413      	add	r3, r2
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	440b      	add	r3, r1
 8009d94:	3314      	adds	r3, #20
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00e      	beq.n	8009dbe <etharp_cleanup_netif+0x46>
 8009da0:	490c      	ldr	r1, [pc, #48]	@ (8009dd4 <etharp_cleanup_netif+0x5c>)
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	4613      	mov	r3, r2
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	4413      	add	r3, r2
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	440b      	add	r3, r1
 8009dae:	3308      	adds	r3, #8
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d102      	bne.n	8009dbe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7ff fce5 	bl	8009788 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b09      	cmp	r3, #9
 8009dc8:	dddd      	ble.n	8009d86 <etharp_cleanup_netif+0xe>
    }
  }
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	24004c58 	.word	0x24004c58

08009dd8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8009dd8:	b5b0      	push	{r4, r5, r7, lr}
 8009dda:	b08a      	sub	sp, #40	@ 0x28
 8009ddc:	af04      	add	r7, sp, #16
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d107      	bne.n	8009df8 <etharp_input+0x20>
 8009de8:	4b3f      	ldr	r3, [pc, #252]	@ (8009ee8 <etharp_input+0x110>)
 8009dea:	f240 228a 	movw	r2, #650	@ 0x28a
 8009dee:	493f      	ldr	r1, [pc, #252]	@ (8009eec <etharp_input+0x114>)
 8009df0:	483f      	ldr	r0, [pc, #252]	@ (8009ef0 <etharp_input+0x118>)
 8009df2:	f009 fec7 	bl	8013b84 <iprintf>
 8009df6:	e074      	b.n	8009ee2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e08:	d10c      	bne.n	8009e24 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8009e0e:	2b06      	cmp	r3, #6
 8009e10:	d108      	bne.n	8009e24 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d104      	bne.n	8009e24 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d003      	beq.n	8009e2c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f003 fbb1 	bl	800d58c <pbuf_free>
    return;
 8009e2a:	e05a      	b.n	8009ee2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	330e      	adds	r3, #14
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	3318      	adds	r3, #24
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d102      	bne.n	8009e4c <etharp_input+0x74>
    for_us = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75fb      	strb	r3, [r7, #23]
 8009e4a:	e009      	b.n	8009e60 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	3304      	adds	r3, #4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	bf0c      	ite	eq
 8009e58:	2301      	moveq	r3, #1
 8009e5a:	2300      	movne	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f103 0208 	add.w	r2, r3, #8
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <etharp_input+0x98>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <etharp_input+0x9a>
 8009e70:	2302      	movs	r3, #2
 8009e72:	f107 010c 	add.w	r1, r7, #12
 8009e76:	6838      	ldr	r0, [r7, #0]
 8009e78:	f7ff fed8 	bl	8009c2c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	88db      	ldrh	r3, [r3, #6]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e86:	d003      	beq.n	8009e90 <etharp_input+0xb8>
 8009e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e8c:	d01e      	beq.n	8009ecc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8009e8e:	e025      	b.n	8009edc <etharp_input+0x104>
      if (for_us) {
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d021      	beq.n	8009eda <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	3208      	adds	r2, #8
        etharp_raw(netif,
 8009eb0:	2102      	movs	r1, #2
 8009eb2:	9103      	str	r1, [sp, #12]
 8009eb4:	f107 010c 	add.w	r1, r7, #12
 8009eb8:	9102      	str	r1, [sp, #8]
 8009eba:	9201      	str	r2, [sp, #4]
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	6838      	ldr	r0, [r7, #0]
 8009ec6:	f000 faef 	bl	800a4a8 <etharp_raw>
      break;
 8009eca:	e006      	b.n	8009eda <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8009ecc:	f107 030c 	add.w	r3, r7, #12
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6838      	ldr	r0, [r7, #0]
 8009ed4:	f7fe fa02 	bl	80082dc <dhcp_arp_reply>
      break;
 8009ed8:	e000      	b.n	8009edc <etharp_input+0x104>
      break;
 8009eda:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f003 fb55 	bl	800d58c <pbuf_free>
}
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ee8:	08014edc 	.word	0x08014edc
 8009eec:	08015068 	.word	0x08015068
 8009ef0:	08014f90 	.word	0x08014f90

08009ef4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	4613      	mov	r3, r2
 8009f00:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009f02:	79fa      	ldrb	r2, [r7, #7]
 8009f04:	4944      	ldr	r1, [pc, #272]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009f06:	4613      	mov	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	440b      	add	r3, r1
 8009f10:	3314      	adds	r3, #20
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d806      	bhi.n	8009f26 <etharp_output_to_arp_index+0x32>
 8009f18:	4b40      	ldr	r3, [pc, #256]	@ (800a01c <etharp_output_to_arp_index+0x128>)
 8009f1a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009f1e:	4940      	ldr	r1, [pc, #256]	@ (800a020 <etharp_output_to_arp_index+0x12c>)
 8009f20:	4840      	ldr	r0, [pc, #256]	@ (800a024 <etharp_output_to_arp_index+0x130>)
 8009f22:	f009 fe2f 	bl	8013b84 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009f26:	79fa      	ldrb	r2, [r7, #7]
 8009f28:	493b      	ldr	r1, [pc, #236]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	005b      	lsls	r3, r3, #1
 8009f2e:	4413      	add	r3, r2
 8009f30:	00db      	lsls	r3, r3, #3
 8009f32:	440b      	add	r3, r1
 8009f34:	3314      	adds	r3, #20
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d153      	bne.n	8009fe4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009f3c:	79fa      	ldrb	r2, [r7, #7]
 8009f3e:	4936      	ldr	r1, [pc, #216]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009f40:	4613      	mov	r3, r2
 8009f42:	005b      	lsls	r3, r3, #1
 8009f44:	4413      	add	r3, r2
 8009f46:	00db      	lsls	r3, r3, #3
 8009f48:	440b      	add	r3, r1
 8009f4a:	3312      	adds	r3, #18
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8009f52:	d919      	bls.n	8009f88 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8009f54:	79fa      	ldrb	r2, [r7, #7]
 8009f56:	4613      	mov	r3, r2
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	4413      	add	r3, r2
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	4a2e      	ldr	r2, [pc, #184]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009f60:	4413      	add	r3, r2
 8009f62:	3304      	adds	r3, #4
 8009f64:	4619      	mov	r1, r3
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 fb4c 	bl	800a604 <etharp_request>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d138      	bne.n	8009fe4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009f72:	79fa      	ldrb	r2, [r7, #7]
 8009f74:	4928      	ldr	r1, [pc, #160]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009f76:	4613      	mov	r3, r2
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	440b      	add	r3, r1
 8009f80:	3314      	adds	r3, #20
 8009f82:	2203      	movs	r2, #3
 8009f84:	701a      	strb	r2, [r3, #0]
 8009f86:	e02d      	b.n	8009fe4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009f88:	79fa      	ldrb	r2, [r7, #7]
 8009f8a:	4923      	ldr	r1, [pc, #140]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	4413      	add	r3, r2
 8009f92:	00db      	lsls	r3, r3, #3
 8009f94:	440b      	add	r3, r1
 8009f96:	3312      	adds	r3, #18
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8009f9e:	d321      	bcc.n	8009fe4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009fa0:	79fa      	ldrb	r2, [r7, #7]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	4413      	add	r3, r2
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	4a1b      	ldr	r2, [pc, #108]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009fac:	4413      	add	r3, r2
 8009fae:	1d19      	adds	r1, r3, #4
 8009fb0:	79fa      	ldrb	r2, [r7, #7]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	4413      	add	r3, r2
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	3308      	adds	r3, #8
 8009fbc:	4a16      	ldr	r2, [pc, #88]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009fbe:	4413      	add	r3, r2
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 fafb 	bl	800a5c0 <etharp_request_dst>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d109      	bne.n	8009fe4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009fd0:	79fa      	ldrb	r2, [r7, #7]
 8009fd2:	4911      	ldr	r1, [pc, #68]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	005b      	lsls	r3, r3, #1
 8009fd8:	4413      	add	r3, r2
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	440b      	add	r3, r1
 8009fde:	3314      	adds	r3, #20
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8009fea:	79fa      	ldrb	r2, [r7, #7]
 8009fec:	4613      	mov	r3, r2
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	4413      	add	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	4a08      	ldr	r2, [pc, #32]	@ (800a018 <etharp_output_to_arp_index+0x124>)
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a000:	9200      	str	r2, [sp, #0]
 800a002:	460a      	mov	r2, r1
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fb9c 	bl	800a744 <ethernet_output>
 800a00c:	4603      	mov	r3, r0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	24004c58 	.word	0x24004c58
 800a01c:	08014edc 	.word	0x08014edc
 800a020:	08015088 	.word	0x08015088
 800a024:	08014f90 	.word	0x08014f90

0800a028 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08a      	sub	sp, #40	@ 0x28
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d106      	bne.n	800a04c <etharp_output+0x24>
 800a03e:	4b73      	ldr	r3, [pc, #460]	@ (800a20c <etharp_output+0x1e4>)
 800a040:	f240 321e 	movw	r2, #798	@ 0x31e
 800a044:	4972      	ldr	r1, [pc, #456]	@ (800a210 <etharp_output+0x1e8>)
 800a046:	4873      	ldr	r0, [pc, #460]	@ (800a214 <etharp_output+0x1ec>)
 800a048:	f009 fd9c 	bl	8013b84 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <etharp_output+0x38>
 800a052:	4b6e      	ldr	r3, [pc, #440]	@ (800a20c <etharp_output+0x1e4>)
 800a054:	f240 321f 	movw	r2, #799	@ 0x31f
 800a058:	496f      	ldr	r1, [pc, #444]	@ (800a218 <etharp_output+0x1f0>)
 800a05a:	486e      	ldr	r0, [pc, #440]	@ (800a214 <etharp_output+0x1ec>)
 800a05c:	f009 fd92 	bl	8013b84 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d106      	bne.n	800a074 <etharp_output+0x4c>
 800a066:	4b69      	ldr	r3, [pc, #420]	@ (800a20c <etharp_output+0x1e4>)
 800a068:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800a06c:	496b      	ldr	r1, [pc, #428]	@ (800a21c <etharp_output+0x1f4>)
 800a06e:	4869      	ldr	r0, [pc, #420]	@ (800a214 <etharp_output+0x1ec>)
 800a070:	f009 fd88 	bl	8013b84 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68f9      	ldr	r1, [r7, #12]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f001 f8e4 	bl	800b248 <ip4_addr_isbroadcast_u32>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a086:	4b66      	ldr	r3, [pc, #408]	@ (800a220 <etharp_output+0x1f8>)
 800a088:	61fb      	str	r3, [r7, #28]
 800a08a:	e0af      	b.n	800a1ec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a094:	2be0      	cmp	r3, #224	@ 0xe0
 800a096:	d118      	bne.n	800a0ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a098:	2301      	movs	r3, #1
 800a09a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a09c:	2300      	movs	r3, #0
 800a09e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a0a0:	235e      	movs	r3, #94	@ 0x5e
 800a0a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3303      	adds	r3, #3
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a0c2:	f107 0310 	add.w	r3, r7, #16
 800a0c6:	61fb      	str	r3, [r7, #28]
 800a0c8:	e090      	b.n	800a1ec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	405a      	eors	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3308      	adds	r3, #8
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4013      	ands	r3, r2
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d012      	beq.n	800a108 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a0e8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d00b      	beq.n	800a108 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	330c      	adds	r3, #12
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	330c      	adds	r3, #12
 800a0fe:	61bb      	str	r3, [r7, #24]
 800a100:	e002      	b.n	800a108 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a102:	f06f 0303 	mvn.w	r3, #3
 800a106:	e07d      	b.n	800a204 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a108:	4b46      	ldr	r3, [pc, #280]	@ (800a224 <etharp_output+0x1fc>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	4619      	mov	r1, r3
 800a10e:	4a46      	ldr	r2, [pc, #280]	@ (800a228 <etharp_output+0x200>)
 800a110:	460b      	mov	r3, r1
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	440b      	add	r3, r1
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	4413      	add	r3, r2
 800a11a:	3314      	adds	r3, #20
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d925      	bls.n	800a16e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a122:	4b40      	ldr	r3, [pc, #256]	@ (800a224 <etharp_output+0x1fc>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	4619      	mov	r1, r3
 800a128:	4a3f      	ldr	r2, [pc, #252]	@ (800a228 <etharp_output+0x200>)
 800a12a:	460b      	mov	r3, r1
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	440b      	add	r3, r1
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	4413      	add	r3, r2
 800a134:	3308      	adds	r3, #8
 800a136:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d117      	bne.n	800a16e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	4b38      	ldr	r3, [pc, #224]	@ (800a224 <etharp_output+0x1fc>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	4618      	mov	r0, r3
 800a148:	4937      	ldr	r1, [pc, #220]	@ (800a228 <etharp_output+0x200>)
 800a14a:	4603      	mov	r3, r0
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	4403      	add	r3, r0
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	440b      	add	r3, r1
 800a154:	3304      	adds	r3, #4
 800a156:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a158:	429a      	cmp	r2, r3
 800a15a:	d108      	bne.n	800a16e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a15c:	4b31      	ldr	r3, [pc, #196]	@ (800a224 <etharp_output+0x1fc>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fec5 	bl	8009ef4 <etharp_output_to_arp_index>
 800a16a:	4603      	mov	r3, r0
 800a16c:	e04a      	b.n	800a204 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]
 800a172:	e031      	b.n	800a1d8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a174:	7dfa      	ldrb	r2, [r7, #23]
 800a176:	492c      	ldr	r1, [pc, #176]	@ (800a228 <etharp_output+0x200>)
 800a178:	4613      	mov	r3, r2
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	4413      	add	r3, r2
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	440b      	add	r3, r1
 800a182:	3314      	adds	r3, #20
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d923      	bls.n	800a1d2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800a18a:	7dfa      	ldrb	r2, [r7, #23]
 800a18c:	4926      	ldr	r1, [pc, #152]	@ (800a228 <etharp_output+0x200>)
 800a18e:	4613      	mov	r3, r2
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	4413      	add	r3, r2
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	440b      	add	r3, r1
 800a198:	3308      	adds	r3, #8
 800a19a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d117      	bne.n	800a1d2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	6819      	ldr	r1, [r3, #0]
 800a1a6:	7dfa      	ldrb	r2, [r7, #23]
 800a1a8:	481f      	ldr	r0, [pc, #124]	@ (800a228 <etharp_output+0x200>)
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	4413      	add	r3, r2
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	4403      	add	r3, r0
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800a1b8:	4299      	cmp	r1, r3
 800a1ba:	d10a      	bne.n	800a1d2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800a1bc:	4a19      	ldr	r2, [pc, #100]	@ (800a224 <etharp_output+0x1fc>)
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
 800a1c0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	68b9      	ldr	r1, [r7, #8]
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7ff fe93 	bl	8009ef4 <etharp_output_to_arp_index>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	e018      	b.n	800a204 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	75fb      	strb	r3, [r7, #23]
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	2b09      	cmp	r3, #9
 800a1dc:	d9ca      	bls.n	800a174 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	69b9      	ldr	r1, [r7, #24]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 f822 	bl	800a22c <etharp_query>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	e00b      	b.n	800a204 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800a1f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 faa1 	bl	800a744 <ethernet_output>
 800a202:	4603      	mov	r3, r0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3720      	adds	r7, #32
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	08014edc 	.word	0x08014edc
 800a210:	08015068 	.word	0x08015068
 800a214:	08014f90 	.word	0x08014f90
 800a218:	080150b8 	.word	0x080150b8
 800a21c:	08015058 	.word	0x08015058
 800a220:	08017be4 	.word	0x08017be4
 800a224:	24004d48 	.word	0x24004d48
 800a228:	24004c58 	.word	0x24004c58

0800a22c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08c      	sub	sp, #48	@ 0x30
 800a230:	af02      	add	r7, sp, #8
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	332a      	adds	r3, #42	@ 0x2a
 800a23c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a23e:	23ff      	movs	r3, #255	@ 0xff
 800a240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68f9      	ldr	r1, [r7, #12]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fffa 	bl	800b248 <ip4_addr_isbroadcast_u32>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10c      	bne.n	800a274 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a262:	2be0      	cmp	r3, #224	@ 0xe0
 800a264:	d006      	beq.n	800a274 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a274:	f06f 030f 	mvn.w	r3, #15
 800a278:	e101      	b.n	800a47e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	2101      	movs	r1, #1
 800a27e:	68b8      	ldr	r0, [r7, #8]
 800a280:	f7ff fb5c 	bl	800993c <etharp_find_entry>
 800a284:	4603      	mov	r3, r0
 800a286:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800a288:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da02      	bge.n	800a296 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800a290:	8a7b      	ldrh	r3, [r7, #18]
 800a292:	b25b      	sxtb	r3, r3
 800a294:	e0f3      	b.n	800a47e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800a296:	8a7b      	ldrh	r3, [r7, #18]
 800a298:	2b7e      	cmp	r3, #126	@ 0x7e
 800a29a:	d906      	bls.n	800a2aa <etharp_query+0x7e>
 800a29c:	4b7a      	ldr	r3, [pc, #488]	@ (800a488 <etharp_query+0x25c>)
 800a29e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800a2a2:	497a      	ldr	r1, [pc, #488]	@ (800a48c <etharp_query+0x260>)
 800a2a4:	487a      	ldr	r0, [pc, #488]	@ (800a490 <etharp_query+0x264>)
 800a2a6:	f009 fc6d 	bl	8013b84 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800a2aa:	8a7b      	ldrh	r3, [r7, #18]
 800a2ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a2ae:	7c7a      	ldrb	r2, [r7, #17]
 800a2b0:	4978      	ldr	r1, [pc, #480]	@ (800a494 <etharp_query+0x268>)
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	4413      	add	r3, r2
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	440b      	add	r3, r1
 800a2bc:	3314      	adds	r3, #20
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d115      	bne.n	800a2f0 <etharp_query+0xc4>
    is_new_entry = 1;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a2c8:	7c7a      	ldrb	r2, [r7, #17]
 800a2ca:	4972      	ldr	r1, [pc, #456]	@ (800a494 <etharp_query+0x268>)
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	4413      	add	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	440b      	add	r3, r1
 800a2d6:	3314      	adds	r3, #20
 800a2d8:	2201      	movs	r2, #1
 800a2da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800a2dc:	7c7a      	ldrb	r2, [r7, #17]
 800a2de:	496d      	ldr	r1, [pc, #436]	@ (800a494 <etharp_query+0x268>)
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	4413      	add	r3, r2
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	440b      	add	r3, r1
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a2f0:	7c7a      	ldrb	r2, [r7, #17]
 800a2f2:	4968      	ldr	r1, [pc, #416]	@ (800a494 <etharp_query+0x268>)
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	4413      	add	r3, r2
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	440b      	add	r3, r1
 800a2fe:	3314      	adds	r3, #20
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d011      	beq.n	800a32a <etharp_query+0xfe>
 800a306:	7c7a      	ldrb	r2, [r7, #17]
 800a308:	4962      	ldr	r1, [pc, #392]	@ (800a494 <etharp_query+0x268>)
 800a30a:	4613      	mov	r3, r2
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	4413      	add	r3, r2
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	440b      	add	r3, r1
 800a314:	3314      	adds	r3, #20
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d806      	bhi.n	800a32a <etharp_query+0xfe>
 800a31c:	4b5a      	ldr	r3, [pc, #360]	@ (800a488 <etharp_query+0x25c>)
 800a31e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800a322:	495d      	ldr	r1, [pc, #372]	@ (800a498 <etharp_query+0x26c>)
 800a324:	485a      	ldr	r0, [pc, #360]	@ (800a490 <etharp_query+0x264>)
 800a326:	f009 fc2d 	bl	8013b84 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <etharp_query+0x10a>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800a336:	68b9      	ldr	r1, [r7, #8]
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 f963 	bl	800a604 <etharp_request>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <etharp_query+0x124>
      return result;
 800a34a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a34e:	e096      	b.n	800a47e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d106      	bne.n	800a364 <etharp_query+0x138>
 800a356:	4b4c      	ldr	r3, [pc, #304]	@ (800a488 <etharp_query+0x25c>)
 800a358:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800a35c:	494f      	ldr	r1, [pc, #316]	@ (800a49c <etharp_query+0x270>)
 800a35e:	484c      	ldr	r0, [pc, #304]	@ (800a490 <etharp_query+0x264>)
 800a360:	f009 fc10 	bl	8013b84 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a364:	7c7a      	ldrb	r2, [r7, #17]
 800a366:	494b      	ldr	r1, [pc, #300]	@ (800a494 <etharp_query+0x268>)
 800a368:	4613      	mov	r3, r2
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	4413      	add	r3, r2
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	440b      	add	r3, r1
 800a372:	3314      	adds	r3, #20
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d917      	bls.n	800a3aa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800a37a:	4a49      	ldr	r2, [pc, #292]	@ (800a4a0 <etharp_query+0x274>)
 800a37c:	7c7b      	ldrb	r3, [r7, #17]
 800a37e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a380:	7c7a      	ldrb	r2, [r7, #17]
 800a382:	4613      	mov	r3, r2
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	4413      	add	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	3308      	adds	r3, #8
 800a38c:	4a41      	ldr	r2, [pc, #260]	@ (800a494 <etharp_query+0x268>)
 800a38e:	4413      	add	r3, r2
 800a390:	3304      	adds	r3, #4
 800a392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a396:	9200      	str	r2, [sp, #0]
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	6879      	ldr	r1, [r7, #4]
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 f9d1 	bl	800a744 <ethernet_output>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a3a8:	e067      	b.n	800a47a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a3aa:	7c7a      	ldrb	r2, [r7, #17]
 800a3ac:	4939      	ldr	r1, [pc, #228]	@ (800a494 <etharp_query+0x268>)
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	4413      	add	r3, r2
 800a3b4:	00db      	lsls	r3, r3, #3
 800a3b6:	440b      	add	r3, r1
 800a3b8:	3314      	adds	r3, #20
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d15c      	bne.n	800a47a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a3c8:	e01c      	b.n	800a404 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	895a      	ldrh	r2, [r3, #10]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	891b      	ldrh	r3, [r3, #8]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d10a      	bne.n	800a3ec <etharp_query+0x1c0>
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d006      	beq.n	800a3ec <etharp_query+0x1c0>
 800a3de:	4b2a      	ldr	r3, [pc, #168]	@ (800a488 <etharp_query+0x25c>)
 800a3e0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800a3e4:	492f      	ldr	r1, [pc, #188]	@ (800a4a4 <etharp_query+0x278>)
 800a3e6:	482a      	ldr	r0, [pc, #168]	@ (800a490 <etharp_query+0x264>)
 800a3e8:	f009 fbcc 	bl	8013b84 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	7b1b      	ldrb	r3, [r3, #12]
 800a3f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <etharp_query+0x1d2>
        copy_needed = 1;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	61bb      	str	r3, [r7, #24]
        break;
 800a3fc:	e005      	b.n	800a40a <etharp_query+0x1de>
      }
      p = p->next;
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1df      	bne.n	800a3ca <etharp_query+0x19e>
    }
    if (copy_needed) {
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800a416:	200e      	movs	r0, #14
 800a418:	f003 fb24 	bl	800da64 <pbuf_clone>
 800a41c:	61f8      	str	r0, [r7, #28]
 800a41e:	e004      	b.n	800a42a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800a424:	69f8      	ldr	r0, [r7, #28]
 800a426:	f003 f951 	bl	800d6cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d021      	beq.n	800a474 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800a430:	7c7a      	ldrb	r2, [r7, #17]
 800a432:	4918      	ldr	r1, [pc, #96]	@ (800a494 <etharp_query+0x268>)
 800a434:	4613      	mov	r3, r2
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	4413      	add	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	440b      	add	r3, r1
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800a444:	7c7a      	ldrb	r2, [r7, #17]
 800a446:	4913      	ldr	r1, [pc, #76]	@ (800a494 <etharp_query+0x268>)
 800a448:	4613      	mov	r3, r2
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	4413      	add	r3, r2
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	440b      	add	r3, r1
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f003 f899 	bl	800d58c <pbuf_free>
      }
      arp_table[i].q = p;
 800a45a:	7c7a      	ldrb	r2, [r7, #17]
 800a45c:	490d      	ldr	r1, [pc, #52]	@ (800a494 <etharp_query+0x268>)
 800a45e:	4613      	mov	r3, r2
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	4413      	add	r3, r2
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	440b      	add	r3, r1
 800a468:	69fa      	ldr	r2, [r7, #28]
 800a46a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a472:	e002      	b.n	800a47a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800a474:	23ff      	movs	r3, #255	@ 0xff
 800a476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800a47a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3728      	adds	r7, #40	@ 0x28
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	08014edc 	.word	0x08014edc
 800a48c:	080150c4 	.word	0x080150c4
 800a490:	08014f90 	.word	0x08014f90
 800a494:	24004c58 	.word	0x24004c58
 800a498:	080150d4 	.word	0x080150d4
 800a49c:	080150b8 	.word	0x080150b8
 800a4a0:	24004d48 	.word	0x24004d48
 800a4a4:	080150fc 	.word	0x080150fc

0800a4a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08a      	sub	sp, #40	@ 0x28
 800a4ac:	af02      	add	r7, sp, #8
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d106      	bne.n	800a4ce <etharp_raw+0x26>
 800a4c0:	4b3a      	ldr	r3, [pc, #232]	@ (800a5ac <etharp_raw+0x104>)
 800a4c2:	f240 4257 	movw	r2, #1111	@ 0x457
 800a4c6:	493a      	ldr	r1, [pc, #232]	@ (800a5b0 <etharp_raw+0x108>)
 800a4c8:	483a      	ldr	r0, [pc, #232]	@ (800a5b4 <etharp_raw+0x10c>)
 800a4ca:	f009 fb5b 	bl	8013b84 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a4ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a4d2:	211c      	movs	r1, #28
 800a4d4:	200e      	movs	r0, #14
 800a4d6:	f002 fd75 	bl	800cfc4 <pbuf_alloc>
 800a4da:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d102      	bne.n	800a4e8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800a4e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4e6:	e05d      	b.n	800a5a4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	895b      	ldrh	r3, [r3, #10]
 800a4ec:	2b1b      	cmp	r3, #27
 800a4ee:	d806      	bhi.n	800a4fe <etharp_raw+0x56>
 800a4f0:	4b2e      	ldr	r3, [pc, #184]	@ (800a5ac <etharp_raw+0x104>)
 800a4f2:	f240 4262 	movw	r2, #1122	@ 0x462
 800a4f6:	4930      	ldr	r1, [pc, #192]	@ (800a5b8 <etharp_raw+0x110>)
 800a4f8:	482e      	ldr	r0, [pc, #184]	@ (800a5b4 <etharp_raw+0x10c>)
 800a4fa:	f009 fb43 	bl	8013b84 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a504:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a506:	4618      	mov	r0, r3
 800a508:	f7fd fa82 	bl	8007a10 <lwip_htons>
 800a50c:	4603      	mov	r3, r0
 800a50e:	461a      	mov	r2, r3
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a51a:	2b06      	cmp	r3, #6
 800a51c:	d006      	beq.n	800a52c <etharp_raw+0x84>
 800a51e:	4b23      	ldr	r3, [pc, #140]	@ (800a5ac <etharp_raw+0x104>)
 800a520:	f240 4269 	movw	r2, #1129	@ 0x469
 800a524:	4925      	ldr	r1, [pc, #148]	@ (800a5bc <etharp_raw+0x114>)
 800a526:	4823      	ldr	r0, [pc, #140]	@ (800a5b4 <etharp_raw+0x10c>)
 800a528:	f009 fb2c 	bl	8013b84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	3308      	adds	r3, #8
 800a530:	2206      	movs	r2, #6
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f009 fcf2 	bl	8013f1e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	3312      	adds	r3, #18
 800a53e:	2206      	movs	r2, #6
 800a540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a542:	4618      	mov	r0, r3
 800a544:	f009 fceb 	bl	8013f1e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	330e      	adds	r3, #14
 800a54c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	3318      	adds	r3, #24
 800a556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2200      	movs	r2, #0
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	2200      	movs	r2, #0
 800a564:	f042 0201 	orr.w	r2, r2, #1
 800a568:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f042 0208 	orr.w	r2, r2, #8
 800a572:	709a      	strb	r2, [r3, #2]
 800a574:	2200      	movs	r2, #0
 800a576:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2206      	movs	r2, #6
 800a57c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2204      	movs	r2, #4
 800a582:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a584:	f640 0306 	movw	r3, #2054	@ 0x806
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	69b9      	ldr	r1, [r7, #24]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 f8d7 	bl	800a744 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a596:	69b8      	ldr	r0, [r7, #24]
 800a598:	f002 fff8 	bl	800d58c <pbuf_free>
  p = NULL;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800a5a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3720      	adds	r7, #32
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	08014edc 	.word	0x08014edc
 800a5b0:	08015068 	.word	0x08015068
 800a5b4:	08014f90 	.word	0x08014f90
 800a5b8:	08015118 	.word	0x08015118
 800a5bc:	0801514c 	.word	0x0801514c

0800a5c0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b088      	sub	sp, #32
 800a5c4:	af04      	add	r7, sp, #16
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a5dc:	2201      	movs	r2, #1
 800a5de:	9203      	str	r2, [sp, #12]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	9202      	str	r2, [sp, #8]
 800a5e4:	4a06      	ldr	r2, [pc, #24]	@ (800a600 <etharp_request_dst+0x40>)
 800a5e6:	9201      	str	r2, [sp, #4]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff ff5a 	bl	800a4a8 <etharp_raw>
 800a5f4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	08017bec 	.word	0x08017bec

0800a604 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a60e:	4a05      	ldr	r2, [pc, #20]	@ (800a624 <etharp_request+0x20>)
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff ffd4 	bl	800a5c0 <etharp_request_dst>
 800a618:	4603      	mov	r3, r0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	08017be4 	.word	0x08017be4

0800a628 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800a632:	230e      	movs	r3, #14
 800a634:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	895b      	ldrh	r3, [r3, #10]
 800a63a:	2b0e      	cmp	r3, #14
 800a63c:	d96e      	bls.n	800a71c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	7bdb      	ldrb	r3, [r3, #15]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d106      	bne.n	800a654 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a64c:	3301      	adds	r3, #1
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	7b1a      	ldrb	r2, [r3, #12]
 800a65e:	7b5b      	ldrb	r3, [r3, #13]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	4313      	orrs	r3, r2
 800a664:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d023      	beq.n	800a6ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d10f      	bne.n	800a69a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	785b      	ldrb	r3, [r3, #1]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d11b      	bne.n	800a6ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a686:	2b5e      	cmp	r3, #94	@ 0x5e
 800a688:	d117      	bne.n	800a6ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	7b5b      	ldrb	r3, [r3, #13]
 800a68e:	f043 0310 	orr.w	r3, r3, #16
 800a692:	b2da      	uxtb	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	735a      	strb	r2, [r3, #13]
 800a698:	e00f      	b.n	800a6ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2206      	movs	r2, #6
 800a69e:	4928      	ldr	r1, [pc, #160]	@ (800a740 <ethernet_input+0x118>)
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f009 fbb7 	bl	8013e14 <memcmp>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d106      	bne.n	800a6ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7b5b      	ldrb	r3, [r3, #13]
 800a6b0:	f043 0308 	orr.w	r3, r3, #8
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800a6ba:	89fb      	ldrh	r3, [r7, #14]
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d003      	beq.n	800a6c8 <ethernet_input+0xa0>
 800a6c0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800a6c4:	d014      	beq.n	800a6f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800a6c6:	e032      	b.n	800a72e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a6ce:	f003 0308 	and.w	r3, r3, #8
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d024      	beq.n	800a720 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a6d6:	8afb      	ldrh	r3, [r7, #22]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f002 fed0 	bl	800d480 <pbuf_remove_header>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d11e      	bne.n	800a724 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fb93 	bl	800ae14 <ip4_input>
      break;
 800a6ee:	e013      	b.n	800a718 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a6f6:	f003 0308 	and.w	r3, r3, #8
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d014      	beq.n	800a728 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a6fe:	8afb      	ldrh	r3, [r7, #22]
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f002 febc 	bl	800d480 <pbuf_remove_header>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10e      	bne.n	800a72c <ethernet_input+0x104>
        etharp_input(p, netif);
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff fb61 	bl	8009dd8 <etharp_input>
      break;
 800a716:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	e00c      	b.n	800a736 <ethernet_input+0x10e>
    goto free_and_return;
 800a71c:	bf00      	nop
 800a71e:	e006      	b.n	800a72e <ethernet_input+0x106>
        goto free_and_return;
 800a720:	bf00      	nop
 800a722:	e004      	b.n	800a72e <ethernet_input+0x106>
        goto free_and_return;
 800a724:	bf00      	nop
 800a726:	e002      	b.n	800a72e <ethernet_input+0x106>
        goto free_and_return;
 800a728:	bf00      	nop
 800a72a:	e000      	b.n	800a72e <ethernet_input+0x106>
        goto free_and_return;
 800a72c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f002 ff2c 	bl	800d58c <pbuf_free>
  return ERR_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	08017be4 	.word	0x08017be4

0800a744 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a752:	8c3b      	ldrh	r3, [r7, #32]
 800a754:	4618      	mov	r0, r3
 800a756:	f7fd f95b 	bl	8007a10 <lwip_htons>
 800a75a:	4603      	mov	r3, r0
 800a75c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800a75e:	210e      	movs	r1, #14
 800a760:	68b8      	ldr	r0, [r7, #8]
 800a762:	f002 fe7d 	bl	800d460 <pbuf_add_header>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d125      	bne.n	800a7b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	8afa      	ldrh	r2, [r7, #22]
 800a776:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	2206      	movs	r2, #6
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f009 fbcd 	bl	8013f1e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	3306      	adds	r3, #6
 800a788:	2206      	movs	r2, #6
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f009 fbc6 	bl	8013f1e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a798:	2b06      	cmp	r3, #6
 800a79a:	d006      	beq.n	800a7aa <ethernet_output+0x66>
 800a79c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c8 <ethernet_output+0x84>)
 800a79e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800a7a2:	490a      	ldr	r1, [pc, #40]	@ (800a7cc <ethernet_output+0x88>)
 800a7a4:	480a      	ldr	r0, [pc, #40]	@ (800a7d0 <ethernet_output+0x8c>)
 800a7a6:	f009 f9ed 	bl	8013b84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	68b9      	ldr	r1, [r7, #8]
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	4798      	blx	r3
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	e002      	b.n	800a7be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800a7b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800a7ba:	f06f 0301 	mvn.w	r3, #1
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	08015190 	.word	0x08015190
 800a7cc:	08015200 	.word	0x08015200
 800a7d0:	08015234 	.word	0x08015234

0800a7d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	@ 0x38
 800a7d8:	af04      	add	r7, sp, #16
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800a7de:	4b87      	ldr	r3, [pc, #540]	@ (800a9fc <icmp_input+0x228>)
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	f003 030f 	and.w	r3, r3, #15
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800a7f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a7f6:	2b13      	cmp	r3, #19
 800a7f8:	f240 80e8 	bls.w	800a9cc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	895b      	ldrh	r3, [r3, #10]
 800a800:	2b03      	cmp	r3, #3
 800a802:	f240 80e5 	bls.w	800a9d0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800a810:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80d2 	beq.w	800a9be <icmp_input+0x1ea>
 800a81a:	2b08      	cmp	r3, #8
 800a81c:	f040 80d2 	bne.w	800a9c4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800a820:	4b77      	ldr	r3, [pc, #476]	@ (800aa00 <icmp_input+0x22c>)
 800a822:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a824:	4b75      	ldr	r3, [pc, #468]	@ (800a9fc <icmp_input+0x228>)
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a82c:	2be0      	cmp	r3, #224	@ 0xe0
 800a82e:	f000 80d6 	beq.w	800a9de <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a832:	4b72      	ldr	r3, [pc, #456]	@ (800a9fc <icmp_input+0x228>)
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	4a71      	ldr	r2, [pc, #452]	@ (800a9fc <icmp_input+0x228>)
 800a838:	6812      	ldr	r2, [r2, #0]
 800a83a:	4611      	mov	r1, r2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fd03 	bl	800b248 <ip4_addr_isbroadcast_u32>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	f040 80cc 	bne.w	800a9e2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	891b      	ldrh	r3, [r3, #8]
 800a84e:	2b07      	cmp	r3, #7
 800a850:	f240 80c0 	bls.w	800a9d4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f9e0 	bl	800ac1a <inet_chksum_pbuf>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d003      	beq.n	800a868 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f002 fe93 	bl	800d58c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800a866:	e0c5      	b.n	800a9f4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a868:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a86a:	330e      	adds	r3, #14
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f002 fdf6 	bl	800d460 <pbuf_add_header>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d04b      	beq.n	800a912 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	891a      	ldrh	r2, [r3, #8]
 800a87e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a880:	4413      	add	r3, r2
 800a882:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	891b      	ldrh	r3, [r3, #8]
 800a888:	8b7a      	ldrh	r2, [r7, #26]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	f0c0 80ab 	bcc.w	800a9e6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800a890:	8b7b      	ldrh	r3, [r7, #26]
 800a892:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a896:	4619      	mov	r1, r3
 800a898:	200e      	movs	r0, #14
 800a89a:	f002 fb93 	bl	800cfc4 <pbuf_alloc>
 800a89e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 80a1 	beq.w	800a9ea <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	895b      	ldrh	r3, [r3, #10]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d203      	bcs.n	800a8be <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800a8b6:	6978      	ldr	r0, [r7, #20]
 800a8b8:	f002 fe68 	bl	800d58c <pbuf_free>
          goto icmperr;
 800a8bc:	e096      	b.n	800a9ec <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a8c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f009 fb29 	bl	8013f1e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800a8cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6978      	ldr	r0, [r7, #20]
 800a8d2:	f002 fdd5 	bl	800d480 <pbuf_remove_header>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d009      	beq.n	800a8f0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a8dc:	4b49      	ldr	r3, [pc, #292]	@ (800aa04 <icmp_input+0x230>)
 800a8de:	22b6      	movs	r2, #182	@ 0xb6
 800a8e0:	4949      	ldr	r1, [pc, #292]	@ (800aa08 <icmp_input+0x234>)
 800a8e2:	484a      	ldr	r0, [pc, #296]	@ (800aa0c <icmp_input+0x238>)
 800a8e4:	f009 f94e 	bl	8013b84 <iprintf>
          pbuf_free(r);
 800a8e8:	6978      	ldr	r0, [r7, #20]
 800a8ea:	f002 fe4f 	bl	800d58c <pbuf_free>
          goto icmperr;
 800a8ee:	e07d      	b.n	800a9ec <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800a8f0:	6879      	ldr	r1, [r7, #4]
 800a8f2:	6978      	ldr	r0, [r7, #20]
 800a8f4:	f002 ff72 	bl	800d7dc <pbuf_copy>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800a8fe:	6978      	ldr	r0, [r7, #20]
 800a900:	f002 fe44 	bl	800d58c <pbuf_free>
          goto icmperr;
 800a904:	e072      	b.n	800a9ec <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f002 fe40 	bl	800d58c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	607b      	str	r3, [r7, #4]
 800a910:	e00f      	b.n	800a932 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a912:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a914:	330e      	adds	r3, #14
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f002 fdb1 	bl	800d480 <pbuf_remove_header>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d006      	beq.n	800a932 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a924:	4b37      	ldr	r3, [pc, #220]	@ (800aa04 <icmp_input+0x230>)
 800a926:	22c7      	movs	r2, #199	@ 0xc7
 800a928:	4939      	ldr	r1, [pc, #228]	@ (800aa10 <icmp_input+0x23c>)
 800a92a:	4838      	ldr	r0, [pc, #224]	@ (800aa0c <icmp_input+0x238>)
 800a92c:	f009 f92a 	bl	8013b84 <iprintf>
          goto icmperr;
 800a930:	e05c      	b.n	800a9ec <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800a938:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f002 fd8f 	bl	800d460 <pbuf_add_header>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d13c      	bne.n	800a9c2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a956:	4b29      	ldr	r3, [pc, #164]	@ (800a9fc <icmp_input+0x228>)
 800a958:	691a      	ldr	r2, [r3, #16]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	885b      	ldrh	r3, [r3, #2]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800a96e:	4293      	cmp	r3, r2
 800a970:	d907      	bls.n	800a982 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	885b      	ldrh	r3, [r3, #2]
 800a976:	b29b      	uxth	r3, r3
 800a978:	3309      	adds	r3, #9
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	805a      	strh	r2, [r3, #2]
 800a980:	e006      	b.n	800a990 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	885b      	ldrh	r3, [r3, #2]
 800a986:	b29b      	uxth	r3, r3
 800a988:	3308      	adds	r3, #8
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	22ff      	movs	r2, #255	@ 0xff
 800a994:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	729a      	strb	r2, [r3, #10]
 800a99c:	2200      	movs	r2, #0
 800a99e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	9302      	str	r3, [sp, #8]
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	23ff      	movs	r3, #255	@ 0xff
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	69f9      	ldr	r1, [r7, #28]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fb70 	bl	800b098 <ip4_output_if>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800a9bc:	e001      	b.n	800a9c2 <icmp_input+0x1ee>
      break;
 800a9be:	bf00      	nop
 800a9c0:	e000      	b.n	800a9c4 <icmp_input+0x1f0>
      break;
 800a9c2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f002 fde1 	bl	800d58c <pbuf_free>
  return;
 800a9ca:	e013      	b.n	800a9f4 <icmp_input+0x220>
    goto lenerr;
 800a9cc:	bf00      	nop
 800a9ce:	e002      	b.n	800a9d6 <icmp_input+0x202>
    goto lenerr;
 800a9d0:	bf00      	nop
 800a9d2:	e000      	b.n	800a9d6 <icmp_input+0x202>
        goto lenerr;
 800a9d4:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f002 fdd8 	bl	800d58c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a9dc:	e00a      	b.n	800a9f4 <icmp_input+0x220>
        goto icmperr;
 800a9de:	bf00      	nop
 800a9e0:	e004      	b.n	800a9ec <icmp_input+0x218>
        goto icmperr;
 800a9e2:	bf00      	nop
 800a9e4:	e002      	b.n	800a9ec <icmp_input+0x218>
          goto icmperr;
 800a9e6:	bf00      	nop
 800a9e8:	e000      	b.n	800a9ec <icmp_input+0x218>
          goto icmperr;
 800a9ea:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f002 fdcd 	bl	800d58c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a9f2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a9f4:	3728      	adds	r7, #40	@ 0x28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	24004d4c 	.word	0x24004d4c
 800aa00:	24004d60 	.word	0x24004d60
 800aa04:	0801525c 	.word	0x0801525c
 800aa08:	080152cc 	.word	0x080152cc
 800aa0c:	08015304 	.word	0x08015304
 800aa10:	0801532c 	.word	0x0801532c

0800aa14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	461a      	mov	r2, r3
 800aa24:	2103      	movs	r1, #3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f814 	bl	800aa54 <icmp_send_response>
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	461a      	mov	r2, r3
 800aa44:	210b      	movs	r1, #11
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f804 	bl	800aa54 <icmp_send_response>
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08c      	sub	sp, #48	@ 0x30
 800aa58:	af04      	add	r7, sp, #16
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
 800aa60:	4613      	mov	r3, r2
 800aa62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800aa64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800aa68:	2124      	movs	r1, #36	@ 0x24
 800aa6a:	2022      	movs	r0, #34	@ 0x22
 800aa6c:	f002 faaa 	bl	800cfc4 <pbuf_alloc>
 800aa70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d056      	beq.n	800ab26 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	895b      	ldrh	r3, [r3, #10]
 800aa7c:	2b23      	cmp	r3, #35	@ 0x23
 800aa7e:	d806      	bhi.n	800aa8e <icmp_send_response+0x3a>
 800aa80:	4b2b      	ldr	r3, [pc, #172]	@ (800ab30 <icmp_send_response+0xdc>)
 800aa82:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800aa86:	492b      	ldr	r1, [pc, #172]	@ (800ab34 <icmp_send_response+0xe0>)
 800aa88:	482b      	ldr	r0, [pc, #172]	@ (800ab38 <icmp_send_response+0xe4>)
 800aa8a:	f009 f87b 	bl	8013b84 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	78fa      	ldrb	r2, [r7, #3]
 800aa9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	78ba      	ldrb	r2, [r7, #2]
 800aaa4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	711a      	strb	r2, [r3, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2200      	movs	r2, #0
 800aab4:	719a      	strb	r2, [r3, #6]
 800aab6:	2200      	movs	r2, #0
 800aab8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f103 0008 	add.w	r0, r3, #8
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	221c      	movs	r2, #28
 800aac8:	4619      	mov	r1, r3
 800aaca:	f009 fa28 	bl	8013f1e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800aad4:	f107 030c 	add.w	r3, r7, #12
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 f901 	bl	800ace0 <ip4_route>
 800aade:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d01b      	beq.n	800ab1e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2200      	movs	r2, #0
 800aaea:	709a      	strb	r2, [r3, #2]
 800aaec:	2200      	movs	r2, #0
 800aaee:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	895b      	ldrh	r3, [r3, #10]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6978      	ldr	r0, [r7, #20]
 800aaf8:	f000 f87d 	bl	800abf6 <inet_chksum>
 800aafc:	4603      	mov	r3, r0
 800aafe:	461a      	mov	r2, r3
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ab04:	f107 020c 	add.w	r2, r7, #12
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	9302      	str	r3, [sp, #8]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	2300      	movs	r3, #0
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	23ff      	movs	r3, #255	@ 0xff
 800ab16:	2100      	movs	r1, #0
 800ab18:	69f8      	ldr	r0, [r7, #28]
 800ab1a:	f000 fabd 	bl	800b098 <ip4_output_if>
  }
  pbuf_free(q);
 800ab1e:	69f8      	ldr	r0, [r7, #28]
 800ab20:	f002 fd34 	bl	800d58c <pbuf_free>
 800ab24:	e000      	b.n	800ab28 <icmp_send_response+0xd4>
    return;
 800ab26:	bf00      	nop
}
 800ab28:	3720      	adds	r7, #32
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	0801525c 	.word	0x0801525c
 800ab34:	08015360 	.word	0x08015360
 800ab38:	08015304 	.word	0x08015304

0800ab3c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b089      	sub	sp, #36	@ 0x24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00d      	beq.n	800ab7c <lwip_standard_chksum+0x40>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dd0a      	ble.n	800ab7c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	1c53      	adds	r3, r2, #1
 800ab6a:	61fb      	str	r3, [r7, #28]
 800ab6c:	f107 030e 	add.w	r3, r7, #14
 800ab70:	3301      	adds	r3, #1
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	701a      	strb	r2, [r3, #0]
    len--;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ab80:	e00a      	b.n	800ab98 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	1c9a      	adds	r2, r3, #2
 800ab86:	61ba      	str	r2, [r7, #24]
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	4413      	add	r3, r2
 800ab90:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	3b02      	subs	r3, #2
 800ab96:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	dcf1      	bgt.n	800ab82 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	dd04      	ble.n	800abae <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800aba4:	f107 030e 	add.w	r3, r7, #14
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	7812      	ldrb	r2, [r2, #0]
 800abac:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800abae:	89fb      	ldrh	r3, [r7, #14]
 800abb0:	461a      	mov	r2, r3
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	4413      	add	r3, r2
 800abb6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	0c1a      	lsrs	r2, r3, #16
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	4413      	add	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	0c1a      	lsrs	r2, r3, #16
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	4413      	add	r3, r2
 800abce:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d007      	beq.n	800abe6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	021b      	lsls	r3, r3, #8
 800abda:	b29a      	uxth	r2, r3
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	0a1b      	lsrs	r3, r3, #8
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	4313      	orrs	r3, r2
 800abe4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	b29b      	uxth	r3, r3
}
 800abea:	4618      	mov	r0, r3
 800abec:	3724      	adds	r7, #36	@ 0x24
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ac02:	887b      	ldrh	r3, [r7, #2]
 800ac04:	4619      	mov	r1, r3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff ff98 	bl	800ab3c <lwip_standard_chksum>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	43db      	mvns	r3, r3
 800ac10:	b29b      	uxth	r3, r3
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b086      	sub	sp, #24
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	613b      	str	r3, [r7, #16]
 800ac2e:	e02b      	b.n	800ac88 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	895b      	ldrh	r3, [r3, #10]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7ff ff7e 	bl	800ab3c <lwip_standard_chksum>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461a      	mov	r2, r3
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	4413      	add	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	0c1a      	lsrs	r2, r3, #16
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	4413      	add	r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	895b      	ldrh	r3, [r3, #10]
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00e      	beq.n	800ac82 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	bf0c      	ite	eq
 800ac6a:	2301      	moveq	r3, #1
 800ac6c:	2300      	movne	r3, #0
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	0a1b      	lsrs	r3, r3, #8
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1d0      	bne.n	800ac30 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	021b      	lsls	r3, r3, #8
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	0a1b      	lsrs	r3, r3, #8
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	4313      	orrs	r3, r2
 800aca2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	43db      	mvns	r3, r3
 800acaa:	b29b      	uxth	r3, r3
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800acbe:	f001 fa09 	bl	800c0d4 <mem_init>
  memp_init();
 800acc2:	f001 fd0b 	bl	800c6dc <memp_init>
  pbuf_init();
  netif_init();
 800acc6:	f001 fe09 	bl	800c8dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800acca:	f008 f99f 	bl	801300c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800acce:	f002 fefb 	bl	800dac8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800acd2:	f008 f911 	bl	8012ef8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ace8:	4b33      	ldr	r3, [pc, #204]	@ (800adb8 <ip4_route+0xd8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	e036      	b.n	800ad5e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d02b      	beq.n	800ad58 <ip4_route+0x78>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ad06:	089b      	lsrs	r3, r3, #2
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d022      	beq.n	800ad58 <ip4_route+0x78>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3304      	adds	r3, #4
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01d      	beq.n	800ad58 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3304      	adds	r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	405a      	eors	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	e038      	b.n	800adaa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d108      	bne.n	800ad58 <ip4_route+0x78>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	330c      	adds	r3, #12
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d101      	bne.n	800ad58 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	e028      	b.n	800adaa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	60fb      	str	r3, [r7, #12]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1c5      	bne.n	800acf0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ad64:	4b15      	ldr	r3, [pc, #84]	@ (800adbc <ip4_route+0xdc>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d01a      	beq.n	800ada2 <ip4_route+0xc2>
 800ad6c:	4b13      	ldr	r3, [pc, #76]	@ (800adbc <ip4_route+0xdc>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d012      	beq.n	800ada2 <ip4_route+0xc2>
 800ad7c:	4b0f      	ldr	r3, [pc, #60]	@ (800adbc <ip4_route+0xdc>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ad84:	f003 0304 	and.w	r3, r3, #4
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00a      	beq.n	800ada2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	@ (800adbc <ip4_route+0xdc>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3304      	adds	r3, #4
 800ad92:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d004      	beq.n	800ada2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ada0:	d101      	bne.n	800ada6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e001      	b.n	800adaa <ip4_route+0xca>
  }

  return netif_default;
 800ada6:	4b05      	ldr	r3, [pc, #20]	@ (800adbc <ip4_route+0xdc>)
 800ada8:	681b      	ldr	r3, [r3, #0]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	24007c88 	.word	0x24007c88
 800adbc:	24007c8c 	.word	0x24007c8c

0800adc0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	b2db      	uxtb	r3, r3
 800add4:	2b00      	cmp	r3, #0
 800add6:	d016      	beq.n	800ae06 <ip4_input_accept+0x46>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3304      	adds	r3, #4
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d011      	beq.n	800ae06 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ade2:	4b0b      	ldr	r3, [pc, #44]	@ (800ae10 <ip4_input_accept+0x50>)
 800ade4:	695a      	ldr	r2, [r3, #20]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3304      	adds	r3, #4
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	429a      	cmp	r2, r3
 800adee:	d008      	beq.n	800ae02 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800adf0:	4b07      	ldr	r3, [pc, #28]	@ (800ae10 <ip4_input_accept+0x50>)
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	6879      	ldr	r1, [r7, #4]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 fa26 	bl	800b248 <ip4_addr_isbroadcast_u32>
 800adfc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e000      	b.n	800ae08 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	24004d4c 	.word	0x24004d4c

0800ae14 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	091b      	lsrs	r3, r3, #4
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	2b04      	cmp	r3, #4
 800ae32:	d004      	beq.n	800ae3e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f002 fba9 	bl	800d58c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e123      	b.n	800b086 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	f003 030f 	and.w	r3, r3, #15
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	885b      	ldrh	r3, [r3, #2]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fc fddb 	bl	8007a10 <lwip_htons>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	891b      	ldrh	r3, [r3, #8]
 800ae62:	8a3a      	ldrh	r2, [r7, #16]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d204      	bcs.n	800ae72 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800ae68:	8a3b      	ldrh	r3, [r7, #16]
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f002 fa07 	bl	800d280 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	895b      	ldrh	r3, [r3, #10]
 800ae76:	8a7a      	ldrh	r2, [r7, #18]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d807      	bhi.n	800ae8c <ip4_input+0x78>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	891b      	ldrh	r3, [r3, #8]
 800ae80:	8a3a      	ldrh	r2, [r7, #16]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d802      	bhi.n	800ae8c <ip4_input+0x78>
 800ae86:	8a7b      	ldrh	r3, [r7, #18]
 800ae88:	2b13      	cmp	r3, #19
 800ae8a:	d804      	bhi.n	800ae96 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f002 fb7d 	bl	800d58c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e0f7      	b.n	800b086 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	4a7d      	ldr	r2, [pc, #500]	@ (800b090 <ip4_input+0x27c>)
 800ae9c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	4a7b      	ldr	r2, [pc, #492]	@ (800b090 <ip4_input+0x27c>)
 800aea4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aea6:	4b7a      	ldr	r3, [pc, #488]	@ (800b090 <ip4_input+0x27c>)
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aeae:	2be0      	cmp	r3, #224	@ 0xe0
 800aeb0:	d112      	bne.n	800aed8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d007      	beq.n	800aed2 <ip4_input+0xbe>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	3304      	adds	r3, #4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <ip4_input+0xbe>
      netif = inp;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	61bb      	str	r3, [r7, #24]
 800aed0:	e02a      	b.n	800af28 <ip4_input+0x114>
    } else {
      netif = NULL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	61bb      	str	r3, [r7, #24]
 800aed6:	e027      	b.n	800af28 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800aed8:	6838      	ldr	r0, [r7, #0]
 800aeda:	f7ff ff71 	bl	800adc0 <ip4_input_accept>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <ip4_input+0xd6>
      netif = inp;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	e01e      	b.n	800af28 <ip4_input+0x114>
    } else {
      netif = NULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800aeee:	4b68      	ldr	r3, [pc, #416]	@ (800b090 <ip4_input+0x27c>)
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b7f      	cmp	r3, #127	@ 0x7f
 800aef6:	d017      	beq.n	800af28 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800aef8:	4b66      	ldr	r3, [pc, #408]	@ (800b094 <ip4_input+0x280>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	61bb      	str	r3, [r7, #24]
 800aefe:	e00e      	b.n	800af1e <ip4_input+0x10a>
          if (netif == inp) {
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d006      	beq.n	800af16 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800af08:	69b8      	ldr	r0, [r7, #24]
 800af0a:	f7ff ff59 	bl	800adc0 <ip4_input_accept>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d108      	bne.n	800af26 <ip4_input+0x112>
 800af14:	e000      	b.n	800af18 <ip4_input+0x104>
            continue;
 800af16:	bf00      	nop
        NETIF_FOREACH(netif) {
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	61bb      	str	r3, [r7, #24]
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1ed      	bne.n	800af00 <ip4_input+0xec>
 800af24:	e000      	b.n	800af28 <ip4_input+0x114>
            break;
 800af26:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d111      	bne.n	800af52 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	7a5b      	ldrb	r3, [r3, #9]
 800af32:	2b11      	cmp	r3, #17
 800af34:	d10d      	bne.n	800af52 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800af36:	8a7b      	ldrh	r3, [r7, #18]
 800af38:	69fa      	ldr	r2, [r7, #28]
 800af3a:	4413      	add	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	885b      	ldrh	r3, [r3, #2]
 800af42:	b29b      	uxth	r3, r3
 800af44:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 800af48:	d103      	bne.n	800af52 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d017      	beq.n	800af88 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800af58:	4b4d      	ldr	r3, [pc, #308]	@ (800b090 <ip4_input+0x27c>)
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d013      	beq.n	800af88 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800af60:	4b4b      	ldr	r3, [pc, #300]	@ (800b090 <ip4_input+0x27c>)
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f96e 	bl	800b248 <ip4_addr_isbroadcast_u32>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d105      	bne.n	800af7e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800af72:	4b47      	ldr	r3, [pc, #284]	@ (800b090 <ip4_input+0x27c>)
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800af7a:	2be0      	cmp	r3, #224	@ 0xe0
 800af7c:	d104      	bne.n	800af88 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f002 fb04 	bl	800d58c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	e07e      	b.n	800b086 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d104      	bne.n	800af98 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f002 fafc 	bl	800d58c <pbuf_free>
    return ERR_OK;
 800af94:	2300      	movs	r3, #0
 800af96:	e076      	b.n	800b086 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	88db      	ldrh	r3, [r3, #6]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	461a      	mov	r2, r3
 800afa0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800afa4:	4013      	ands	r3, r2
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00b      	beq.n	800afc2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fc92 	bl	800b8d4 <ip4_reass>
 800afb0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <ip4_input+0x1a8>
      return ERR_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	e064      	b.n	800b086 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800afc2:	4a33      	ldr	r2, [pc, #204]	@ (800b090 <ip4_input+0x27c>)
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800afc8:	4a31      	ldr	r2, [pc, #196]	@ (800b090 <ip4_input+0x27c>)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800afce:	4a30      	ldr	r2, [pc, #192]	@ (800b090 <ip4_input+0x27c>)
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	461a      	mov	r2, r3
 800afe4:	4b2a      	ldr	r3, [pc, #168]	@ (800b090 <ip4_input+0x27c>)
 800afe6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800afe8:	8a7b      	ldrh	r3, [r7, #18]
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f002 fa47 	bl	800d480 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	7a5b      	ldrb	r3, [r3, #9]
 800aff6:	2b11      	cmp	r3, #17
 800aff8:	d006      	beq.n	800b008 <ip4_input+0x1f4>
 800affa:	2b11      	cmp	r3, #17
 800affc:	dc13      	bgt.n	800b026 <ip4_input+0x212>
 800affe:	2b01      	cmp	r3, #1
 800b000:	d00c      	beq.n	800b01c <ip4_input+0x208>
 800b002:	2b06      	cmp	r3, #6
 800b004:	d005      	beq.n	800b012 <ip4_input+0x1fe>
 800b006:	e00e      	b.n	800b026 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f008 f8ac 	bl	8013168 <udp_input>
        break;
 800b010:	e026      	b.n	800b060 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f004 f8f3 	bl	800f200 <tcp_input>
        break;
 800b01a:	e021      	b.n	800b060 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff fbd8 	bl	800a7d4 <icmp_input>
        break;
 800b024:	e01c      	b.n	800b060 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b026:	4b1a      	ldr	r3, [pc, #104]	@ (800b090 <ip4_input+0x27c>)
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	69b9      	ldr	r1, [r7, #24]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 f90b 	bl	800b248 <ip4_addr_isbroadcast_u32>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10f      	bne.n	800b058 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b038:	4b15      	ldr	r3, [pc, #84]	@ (800b090 <ip4_input+0x27c>)
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b040:	2be0      	cmp	r3, #224	@ 0xe0
 800b042:	d009      	beq.n	800b058 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f002 fa8b 	bl	800d566 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b050:	2102      	movs	r1, #2
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff fcde 	bl	800aa14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f002 fa97 	bl	800d58c <pbuf_free>
        break;
 800b05e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b060:	4b0b      	ldr	r3, [pc, #44]	@ (800b090 <ip4_input+0x27c>)
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b066:	4b0a      	ldr	r3, [pc, #40]	@ (800b090 <ip4_input+0x27c>)
 800b068:	2200      	movs	r2, #0
 800b06a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b06c:	4b08      	ldr	r3, [pc, #32]	@ (800b090 <ip4_input+0x27c>)
 800b06e:	2200      	movs	r2, #0
 800b070:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b072:	4b07      	ldr	r3, [pc, #28]	@ (800b090 <ip4_input+0x27c>)
 800b074:	2200      	movs	r2, #0
 800b076:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b078:	4b05      	ldr	r3, [pc, #20]	@ (800b090 <ip4_input+0x27c>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b07e:	4b04      	ldr	r3, [pc, #16]	@ (800b090 <ip4_input+0x27c>)
 800b080:	2200      	movs	r2, #0
 800b082:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	24004d4c 	.word	0x24004d4c
 800b094:	24007c88 	.word	0x24007c88

0800b098 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08a      	sub	sp, #40	@ 0x28
 800b09c:	af04      	add	r7, sp, #16
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
 800b0a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d009      	beq.n	800b0c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d003      	beq.n	800b0be <ip4_output_if+0x26>
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d102      	bne.n	800b0c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b0c4:	78fa      	ldrb	r2, [r7, #3]
 800b0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c8:	9302      	str	r3, [sp, #8]
 800b0ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	6979      	ldr	r1, [r7, #20]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 f805 	bl	800b0ec <ip4_output_if_src>
 800b0e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	7b9b      	ldrb	r3, [r3, #14]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d006      	beq.n	800b110 <ip4_output_if_src+0x24>
 800b102:	4b4b      	ldr	r3, [pc, #300]	@ (800b230 <ip4_output_if_src+0x144>)
 800b104:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800b108:	494a      	ldr	r1, [pc, #296]	@ (800b234 <ip4_output_if_src+0x148>)
 800b10a:	484b      	ldr	r0, [pc, #300]	@ (800b238 <ip4_output_if_src+0x14c>)
 800b10c:	f008 fd3a 	bl	8013b84 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d060      	beq.n	800b1d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b116:	2314      	movs	r3, #20
 800b118:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b11a:	2114      	movs	r1, #20
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f002 f99f 	bl	800d460 <pbuf_add_header>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b128:	f06f 0301 	mvn.w	r3, #1
 800b12c:	e07c      	b.n	800b228 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	895b      	ldrh	r3, [r3, #10]
 800b138:	2b13      	cmp	r3, #19
 800b13a:	d806      	bhi.n	800b14a <ip4_output_if_src+0x5e>
 800b13c:	4b3c      	ldr	r3, [pc, #240]	@ (800b230 <ip4_output_if_src+0x144>)
 800b13e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800b142:	493e      	ldr	r1, [pc, #248]	@ (800b23c <ip4_output_if_src+0x150>)
 800b144:	483c      	ldr	r0, [pc, #240]	@ (800b238 <ip4_output_if_src+0x14c>)
 800b146:	f008 fd1d 	bl	8013b84 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	78fa      	ldrb	r2, [r7, #3]
 800b14e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800b156:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b160:	8b7b      	ldrh	r3, [r7, #26]
 800b162:	089b      	lsrs	r3, r3, #2
 800b164:	b29b      	uxth	r3, r3
 800b166:	b2db      	uxtb	r3, r3
 800b168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800b178:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	891b      	ldrh	r3, [r3, #8]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fc fc46 	bl	8007a10 <lwip_htons>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	2200      	movs	r2, #0
 800b190:	719a      	strb	r2, [r3, #6]
 800b192:	2200      	movs	r2, #0
 800b194:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b196:	4b2a      	ldr	r3, [pc, #168]	@ (800b240 <ip4_output_if_src+0x154>)
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fc fc38 	bl	8007a10 <lwip_htons>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b1a8:	4b25      	ldr	r3, [pc, #148]	@ (800b240 <ip4_output_if_src+0x154>)
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	4b23      	ldr	r3, [pc, #140]	@ (800b240 <ip4_output_if_src+0x154>)
 800b1b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d104      	bne.n	800b1c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b1ba:	4b22      	ldr	r3, [pc, #136]	@ (800b244 <ip4_output_if_src+0x158>)
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	60da      	str	r2, [r3, #12]
 800b1c2:	e003      	b.n	800b1cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	729a      	strb	r2, [r3, #10]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	72da      	strb	r2, [r3, #11]
 800b1d6:	e00f      	b.n	800b1f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	895b      	ldrh	r3, [r3, #10]
 800b1dc:	2b13      	cmp	r3, #19
 800b1de:	d802      	bhi.n	800b1e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b1e0:	f06f 0301 	mvn.w	r3, #1
 800b1e4:	e020      	b.n	800b228 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b1f2:	f107 0314 	add.w	r3, r7, #20
 800b1f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00c      	beq.n	800b21a <ip4_output_if_src+0x12e>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	891a      	ldrh	r2, [r3, #8]
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b208:	429a      	cmp	r2, r3
 800b20a:	d906      	bls.n	800b21a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 fd53 	bl	800bcbc <ip4_frag>
 800b216:	4603      	mov	r3, r0
 800b218:	e006      	b.n	800b228 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	68f9      	ldr	r1, [r7, #12]
 800b222:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b224:	4798      	blx	r3
 800b226:	4603      	mov	r3, r0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	0801538c 	.word	0x0801538c
 800b234:	080153fc 	.word	0x080153fc
 800b238:	08015408 	.word	0x08015408
 800b23c:	08015430 	.word	0x08015430
 800b240:	24004d64 	.word	0x24004d64
 800b244:	08017bf4 	.word	0x08017bf4

0800b248 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b25c:	d002      	beq.n	800b264 <ip4_addr_isbroadcast_u32+0x1c>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d101      	bne.n	800b268 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b264:	2301      	movs	r3, #1
 800b266:	e02a      	b.n	800b2be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b276:	2300      	movs	r3, #0
 800b278:	e021      	b.n	800b2be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	3304      	adds	r3, #4
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	429a      	cmp	r2, r3
 800b284:	d101      	bne.n	800b28a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b286:	2300      	movs	r3, #0
 800b288:	e019      	b.n	800b2be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	3304      	adds	r3, #4
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	405a      	eors	r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	3308      	adds	r3, #8
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4013      	ands	r3, r2
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10d      	bne.n	800b2bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	43da      	mvns	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d101      	bne.n	800b2bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e000      	b.n	800b2be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b2bc:	2300      	movs	r3, #0
  }
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
	...

0800b2cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b2d6:	4b12      	ldr	r3, [pc, #72]	@ (800b320 <ip_reass_tmr+0x54>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b2dc:	e018      	b.n	800b310 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	7fdb      	ldrb	r3, [r3, #31]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00b      	beq.n	800b2fe <ip_reass_tmr+0x32>
      r->timer--;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	7fdb      	ldrb	r3, [r3, #31]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	e008      	b.n	800b310 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b308:	68b9      	ldr	r1, [r7, #8]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f80a 	bl	800b324 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e3      	bne.n	800b2de <ip_reass_tmr+0x12>
    }
  }
}
 800b316:	bf00      	nop
 800b318:	bf00      	nop
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	24004d68 	.word	0x24004d68

0800b324 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	429a      	cmp	r2, r3
 800b338:	d105      	bne.n	800b346 <ip_reass_free_complete_datagram+0x22>
 800b33a:	4b45      	ldr	r3, [pc, #276]	@ (800b450 <ip_reass_free_complete_datagram+0x12c>)
 800b33c:	22ab      	movs	r2, #171	@ 0xab
 800b33e:	4945      	ldr	r1, [pc, #276]	@ (800b454 <ip_reass_free_complete_datagram+0x130>)
 800b340:	4845      	ldr	r0, [pc, #276]	@ (800b458 <ip_reass_free_complete_datagram+0x134>)
 800b342:	f008 fc1f 	bl	8013b84 <iprintf>
  if (prev != NULL) {
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	429a      	cmp	r2, r3
 800b354:	d005      	beq.n	800b362 <ip_reass_free_complete_datagram+0x3e>
 800b356:	4b3e      	ldr	r3, [pc, #248]	@ (800b450 <ip_reass_free_complete_datagram+0x12c>)
 800b358:	22ad      	movs	r2, #173	@ 0xad
 800b35a:	4940      	ldr	r1, [pc, #256]	@ (800b45c <ip_reass_free_complete_datagram+0x138>)
 800b35c:	483e      	ldr	r0, [pc, #248]	@ (800b458 <ip_reass_free_complete_datagram+0x134>)
 800b35e:	f008 fc11 	bl	8013b84 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	889b      	ldrh	r3, [r3, #4]
 800b36e:	b29b      	uxth	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d12a      	bne.n	800b3ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	6858      	ldr	r0, [r3, #4]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3308      	adds	r3, #8
 800b38a:	2214      	movs	r2, #20
 800b38c:	4619      	mov	r1, r3
 800b38e:	f008 fdc6 	bl	8013f1e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b392:	2101      	movs	r1, #1
 800b394:	69b8      	ldr	r0, [r7, #24]
 800b396:	f7ff fb4d 	bl	800aa34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b39a:	69b8      	ldr	r0, [r7, #24]
 800b39c:	f002 f97e 	bl	800d69c <pbuf_clen>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b3a4:	8bfa      	ldrh	r2, [r7, #30]
 800b3a6:	8a7b      	ldrh	r3, [r7, #18]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3ae:	db05      	blt.n	800b3bc <ip_reass_free_complete_datagram+0x98>
 800b3b0:	4b27      	ldr	r3, [pc, #156]	@ (800b450 <ip_reass_free_complete_datagram+0x12c>)
 800b3b2:	22bc      	movs	r2, #188	@ 0xbc
 800b3b4:	492a      	ldr	r1, [pc, #168]	@ (800b460 <ip_reass_free_complete_datagram+0x13c>)
 800b3b6:	4828      	ldr	r0, [pc, #160]	@ (800b458 <ip_reass_free_complete_datagram+0x134>)
 800b3b8:	f008 fbe4 	bl	8013b84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b3bc:	8bfa      	ldrh	r2, [r7, #30]
 800b3be:	8a7b      	ldrh	r3, [r7, #18]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b3c4:	69b8      	ldr	r0, [r7, #24]
 800b3c6:	f002 f8e1 	bl	800d58c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b3d0:	e01f      	b.n	800b412 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f002 f95a 	bl	800d69c <pbuf_clen>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b3ec:	8bfa      	ldrh	r2, [r7, #30]
 800b3ee:	8a7b      	ldrh	r3, [r7, #18]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3f6:	db05      	blt.n	800b404 <ip_reass_free_complete_datagram+0xe0>
 800b3f8:	4b15      	ldr	r3, [pc, #84]	@ (800b450 <ip_reass_free_complete_datagram+0x12c>)
 800b3fa:	22cc      	movs	r2, #204	@ 0xcc
 800b3fc:	4918      	ldr	r1, [pc, #96]	@ (800b460 <ip_reass_free_complete_datagram+0x13c>)
 800b3fe:	4816      	ldr	r0, [pc, #88]	@ (800b458 <ip_reass_free_complete_datagram+0x134>)
 800b400:	f008 fbc0 	bl	8013b84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b404:	8bfa      	ldrh	r2, [r7, #30]
 800b406:	8a7b      	ldrh	r3, [r7, #18]
 800b408:	4413      	add	r3, r2
 800b40a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f002 f8bd 	bl	800d58c <pbuf_free>
  while (p != NULL) {
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1dc      	bne.n	800b3d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f8c2 	bl	800b5a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800b420:	4b10      	ldr	r3, [pc, #64]	@ (800b464 <ip_reass_free_complete_datagram+0x140>)
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	8bfa      	ldrh	r2, [r7, #30]
 800b426:	429a      	cmp	r2, r3
 800b428:	d905      	bls.n	800b436 <ip_reass_free_complete_datagram+0x112>
 800b42a:	4b09      	ldr	r3, [pc, #36]	@ (800b450 <ip_reass_free_complete_datagram+0x12c>)
 800b42c:	22d2      	movs	r2, #210	@ 0xd2
 800b42e:	490e      	ldr	r1, [pc, #56]	@ (800b468 <ip_reass_free_complete_datagram+0x144>)
 800b430:	4809      	ldr	r0, [pc, #36]	@ (800b458 <ip_reass_free_complete_datagram+0x134>)
 800b432:	f008 fba7 	bl	8013b84 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800b436:	4b0b      	ldr	r3, [pc, #44]	@ (800b464 <ip_reass_free_complete_datagram+0x140>)
 800b438:	881a      	ldrh	r2, [r3, #0]
 800b43a:	8bfb      	ldrh	r3, [r7, #30]
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	b29a      	uxth	r2, r3
 800b440:	4b08      	ldr	r3, [pc, #32]	@ (800b464 <ip_reass_free_complete_datagram+0x140>)
 800b442:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b444:	8bfb      	ldrh	r3, [r7, #30]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3720      	adds	r7, #32
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	08015460 	.word	0x08015460
 800b454:	080154d4 	.word	0x080154d4
 800b458:	080154e0 	.word	0x080154e0
 800b45c:	08015508 	.word	0x08015508
 800b460:	0801551c 	.word	0x0801551c
 800b464:	24004d6c 	.word	0x24004d6c
 800b468:	0801553c 	.word	0x0801553c

0800b46c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08a      	sub	sp, #40	@ 0x28
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b47e:	2300      	movs	r3, #0
 800b480:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b482:	2300      	movs	r3, #0
 800b484:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b48a:	4b28      	ldr	r3, [pc, #160]	@ (800b52c <ip_reass_remove_oldest_datagram+0xc0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800b490:	e030      	b.n	800b4f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b494:	695a      	ldr	r2, [r3, #20]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d10c      	bne.n	800b4b8 <ip_reass_remove_oldest_datagram+0x4c>
 800b49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d106      	bne.n	800b4b8 <ip_reass_remove_oldest_datagram+0x4c>
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	899a      	ldrh	r2, [r3, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	889b      	ldrh	r3, [r3, #4]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d014      	beq.n	800b4e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d104      	bne.n	800b4ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	61bb      	str	r3, [r7, #24]
 800b4cc:	e009      	b.n	800b4e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d0:	7fda      	ldrb	r2, [r3, #31]
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	7fdb      	ldrb	r3, [r3, #31]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d803      	bhi.n	800b4e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d001      	beq.n	800b4ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1cb      	bne.n	800b492 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d008      	beq.n	800b512 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b500:	69b9      	ldr	r1, [r7, #24]
 800b502:	6a38      	ldr	r0, [r7, #32]
 800b504:	f7ff ff0e 	bl	800b324 <ip_reass_free_complete_datagram>
 800b508:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4413      	add	r3, r2
 800b510:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	da02      	bge.n	800b520 <ip_reass_remove_oldest_datagram+0xb4>
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	dcac      	bgt.n	800b47a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b520:	697b      	ldr	r3, [r7, #20]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3728      	adds	r7, #40	@ 0x28
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	24004d68 	.word	0x24004d68

0800b530 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b53a:	2004      	movs	r0, #4
 800b53c:	f001 f934 	bl	800c7a8 <memp_malloc>
 800b540:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d110      	bne.n	800b56a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff ff8e 	bl	800b46c <ip_reass_remove_oldest_datagram>
 800b550:	4602      	mov	r2, r0
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	4293      	cmp	r3, r2
 800b556:	dc03      	bgt.n	800b560 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b558:	2004      	movs	r0, #4
 800b55a:	f001 f925 	bl	800c7a8 <memp_malloc>
 800b55e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800b566:	2300      	movs	r3, #0
 800b568:	e016      	b.n	800b598 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b56a:	2220      	movs	r2, #32
 800b56c:	2100      	movs	r1, #0
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f008 fc60 	bl	8013e34 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	220f      	movs	r2, #15
 800b578:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b57a:	4b09      	ldr	r3, [pc, #36]	@ (800b5a0 <ip_reass_enqueue_new_datagram+0x70>)
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800b582:	4a07      	ldr	r2, [pc, #28]	@ (800b5a0 <ip_reass_enqueue_new_datagram+0x70>)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3308      	adds	r3, #8
 800b58c:	2214      	movs	r2, #20
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	4618      	mov	r0, r3
 800b592:	f008 fcc4 	bl	8013f1e <memcpy>
  return ipr;
 800b596:	68fb      	ldr	r3, [r7, #12]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	24004d68 	.word	0x24004d68

0800b5a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b5ae:	4b10      	ldr	r3, [pc, #64]	@ (800b5f0 <ip_reass_dequeue_datagram+0x4c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d104      	bne.n	800b5c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a0c      	ldr	r2, [pc, #48]	@ (800b5f0 <ip_reass_dequeue_datagram+0x4c>)
 800b5be:	6013      	str	r3, [r2, #0]
 800b5c0:	e00d      	b.n	800b5de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d106      	bne.n	800b5d6 <ip_reass_dequeue_datagram+0x32>
 800b5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b5f4 <ip_reass_dequeue_datagram+0x50>)
 800b5ca:	f240 1245 	movw	r2, #325	@ 0x145
 800b5ce:	490a      	ldr	r1, [pc, #40]	@ (800b5f8 <ip_reass_dequeue_datagram+0x54>)
 800b5d0:	480a      	ldr	r0, [pc, #40]	@ (800b5fc <ip_reass_dequeue_datagram+0x58>)
 800b5d2:	f008 fad7 	bl	8013b84 <iprintf>
    prev->next = ipr->next;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	2004      	movs	r0, #4
 800b5e2:	f001 f951 	bl	800c888 <memp_free>
}
 800b5e6:	bf00      	nop
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	24004d68 	.word	0x24004d68
 800b5f4:	08015460 	.word	0x08015460
 800b5f8:	08015560 	.word	0x08015560
 800b5fc:	080154e0 	.word	0x080154e0

0800b600 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08c      	sub	sp, #48	@ 0x30
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800b60c:	2300      	movs	r3, #0
 800b60e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800b610:	2301      	movs	r3, #1
 800b612:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	885b      	ldrh	r3, [r3, #2]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	4618      	mov	r0, r3
 800b622:	f7fc f9f5 	bl	8007a10 <lwip_htons>
 800b626:	4603      	mov	r3, r0
 800b628:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	f003 030f 	and.w	r3, r3, #15
 800b632:	b2db      	uxtb	r3, r3
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800b638:	7e7b      	ldrb	r3, [r7, #25]
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	8b7a      	ldrh	r2, [r7, #26]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d202      	bcs.n	800b648 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b646:	e135      	b.n	800b8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800b648:	7e7b      	ldrb	r3, [r7, #25]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	8b7a      	ldrh	r2, [r7, #26]
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	88db      	ldrh	r3, [r3, #6]
 800b656:	b29b      	uxth	r3, r3
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fc f9d9 	bl	8007a10 <lwip_htons>
 800b65e:	4603      	mov	r3, r0
 800b660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b664:	b29b      	uxth	r3, r3
 800b666:	00db      	lsls	r3, r3, #3
 800b668:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800b670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b672:	2200      	movs	r2, #0
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	2200      	movs	r2, #0
 800b678:	705a      	strb	r2, [r3, #1]
 800b67a:	2200      	movs	r2, #0
 800b67c:	709a      	strb	r2, [r3, #2]
 800b67e:	2200      	movs	r2, #0
 800b680:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800b682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b684:	8afa      	ldrh	r2, [r7, #22]
 800b686:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800b688:	8afa      	ldrh	r2, [r7, #22]
 800b68a:	8b7b      	ldrh	r3, [r7, #26]
 800b68c:	4413      	add	r3, r2
 800b68e:	b29a      	uxth	r2, r3
 800b690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b692:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800b694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b696:	88db      	ldrh	r3, [r3, #6]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	8afa      	ldrh	r2, [r7, #22]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d902      	bls.n	800b6a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b6a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6a4:	e106      	b.n	800b8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6ac:	e068      	b.n	800b780 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800b6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b6:	889b      	ldrh	r3, [r3, #4]
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	889b      	ldrh	r3, [r3, #4]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d235      	bcs.n	800b730 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800b6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800b6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d020      	beq.n	800b712 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d2:	889b      	ldrh	r3, [r3, #4]
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d8:	88db      	ldrh	r3, [r3, #6]
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d307      	bcc.n	800b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800b6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e2:	88db      	ldrh	r3, [r3, #6]
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	889b      	ldrh	r3, [r3, #4]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d902      	bls.n	800b6f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b6f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6f4:	e0de      	b.n	800b8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800b6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800b6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fe:	88db      	ldrh	r3, [r3, #6]
 800b700:	b29a      	uxth	r2, r3
 800b702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b704:	889b      	ldrh	r3, [r3, #4]
 800b706:	b29b      	uxth	r3, r3
 800b708:	429a      	cmp	r2, r3
 800b70a:	d03d      	beq.n	800b788 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800b710:	e03a      	b.n	800b788 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800b712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b714:	88db      	ldrh	r3, [r3, #6]
 800b716:	b29a      	uxth	r2, r3
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	889b      	ldrh	r3, [r3, #4]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	429a      	cmp	r2, r3
 800b720:	d902      	bls.n	800b728 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b726:	e0c5      	b.n	800b8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	605a      	str	r2, [r3, #4]
      break;
 800b72e:	e02b      	b.n	800b788 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800b730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b732:	889b      	ldrh	r3, [r3, #4]
 800b734:	b29a      	uxth	r2, r3
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	889b      	ldrh	r3, [r3, #4]
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d102      	bne.n	800b746 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b744:	e0b6      	b.n	800b8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800b746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b748:	889b      	ldrh	r3, [r3, #4]
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	88db      	ldrh	r3, [r3, #6]
 800b750:	b29b      	uxth	r3, r3
 800b752:	429a      	cmp	r2, r3
 800b754:	d202      	bcs.n	800b75c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b75a:	e0ab      	b.n	800b8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800b75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d009      	beq.n	800b776 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800b762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b764:	88db      	ldrh	r3, [r3, #6]
 800b766:	b29a      	uxth	r2, r3
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	889b      	ldrh	r3, [r3, #4]
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	429a      	cmp	r2, r3
 800b770:	d001      	beq.n	800b776 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800b780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d193      	bne.n	800b6ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800b786:	e000      	b.n	800b78a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800b788:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d12d      	bne.n	800b7ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800b790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b792:	2b00      	cmp	r3, #0
 800b794:	d01c      	beq.n	800b7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b798:	88db      	ldrh	r3, [r3, #6]
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79e:	889b      	ldrh	r3, [r3, #4]
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d906      	bls.n	800b7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800b7a6:	4b45      	ldr	r3, [pc, #276]	@ (800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b7a8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800b7ac:	4944      	ldr	r1, [pc, #272]	@ (800b8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b7ae:	4845      	ldr	r0, [pc, #276]	@ (800b8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b7b0:	f008 f9e8 	bl	8013b84 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800b7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800b7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7bc:	88db      	ldrh	r3, [r3, #6]
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c2:	889b      	ldrh	r3, [r3, #4]
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d010      	beq.n	800b7ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	623b      	str	r3, [r7, #32]
 800b7ce:	e00d      	b.n	800b7ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d006      	beq.n	800b7e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800b7d8:	4b38      	ldr	r3, [pc, #224]	@ (800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b7da:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800b7de:	493a      	ldr	r1, [pc, #232]	@ (800b8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b7e0:	4838      	ldr	r0, [pc, #224]	@ (800b8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b7e2:	f008 f9cf 	bl	8013b84 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d105      	bne.n	800b7fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	7f9b      	ldrb	r3, [r3, #30]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d059      	beq.n	800b8b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d04f      	beq.n	800b8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d006      	beq.n	800b81a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	889b      	ldrh	r3, [r3, #4]
 800b814:	b29b      	uxth	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	623b      	str	r3, [r7, #32]
 800b81e:	e041      	b.n	800b8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800b820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b822:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800b824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800b82a:	e012      	b.n	800b852 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800b82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800b832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b834:	88db      	ldrh	r3, [r3, #6]
 800b836:	b29a      	uxth	r2, r3
 800b838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83a:	889b      	ldrh	r3, [r3, #4]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	429a      	cmp	r2, r3
 800b840:	d002      	beq.n	800b848 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	623b      	str	r3, [r7, #32]
            break;
 800b846:	e007      	b.n	800b858 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800b848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800b84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e9      	bne.n	800b82c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d022      	beq.n	800b8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800b866:	4b15      	ldr	r3, [pc, #84]	@ (800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b868:	f240 12df 	movw	r2, #479	@ 0x1df
 800b86c:	4917      	ldr	r1, [pc, #92]	@ (800b8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b86e:	4815      	ldr	r0, [pc, #84]	@ (800b8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b870:	f008 f988 	bl	8013b84 <iprintf>
          LWIP_ASSERT("sanity check",
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d106      	bne.n	800b88e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800b880:	4b0e      	ldr	r3, [pc, #56]	@ (800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b882:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b886:	4911      	ldr	r1, [pc, #68]	@ (800b8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b888:	480e      	ldr	r0, [pc, #56]	@ (800b8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b88a:	f008 f97b 	bl	8013b84 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d006      	beq.n	800b8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800b896:	4b09      	ldr	r3, [pc, #36]	@ (800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b898:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800b89c:	490c      	ldr	r1, [pc, #48]	@ (800b8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800b89e:	4809      	ldr	r0, [pc, #36]	@ (800b8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b8a0:	f008 f970 	bl	8013b84 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bf14      	ite	ne
 800b8aa:	2301      	movne	r3, #1
 800b8ac:	2300      	moveq	r3, #0
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	e000      	b.n	800b8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3730      	adds	r7, #48	@ 0x30
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	08015460 	.word	0x08015460
 800b8c0:	0801557c 	.word	0x0801557c
 800b8c4:	080154e0 	.word	0x080154e0
 800b8c8:	0801559c 	.word	0x0801559c
 800b8cc:	080155d4 	.word	0x080155d4
 800b8d0:	080155e4 	.word	0x080155e4

0800b8d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08e      	sub	sp, #56	@ 0x38
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800b8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	f003 030f 	and.w	r3, r3, #15
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	2b14      	cmp	r3, #20
 800b8f2:	f040 8171 	bne.w	800bbd8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800b8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f8:	88db      	ldrh	r3, [r3, #6]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fc f887 	bl	8007a10 <lwip_htons>
 800b902:	4603      	mov	r3, r0
 800b904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b908:	b29b      	uxth	r3, r3
 800b90a:	00db      	lsls	r3, r3, #3
 800b90c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800b90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b910:	885b      	ldrh	r3, [r3, #2]
 800b912:	b29b      	uxth	r3, r3
 800b914:	4618      	mov	r0, r3
 800b916:	f7fc f87b 	bl	8007a10 <lwip_htons>
 800b91a:	4603      	mov	r3, r0
 800b91c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800b91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	f003 030f 	and.w	r3, r3, #15
 800b926:	b2db      	uxtb	r3, r3
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800b92e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b932:	b29b      	uxth	r3, r3
 800b934:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b936:	429a      	cmp	r2, r3
 800b938:	f0c0 8150 	bcc.w	800bbdc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800b93c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b940:	b29b      	uxth	r3, r3
 800b942:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 fea7 	bl	800d69c <pbuf_clen>
 800b94e:	4603      	mov	r3, r0
 800b950:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b952:	4b8c      	ldr	r3, [pc, #560]	@ (800bb84 <ip4_reass+0x2b0>)
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	8c3b      	ldrh	r3, [r7, #32]
 800b95a:	4413      	add	r3, r2
 800b95c:	2b0a      	cmp	r3, #10
 800b95e:	dd10      	ble.n	800b982 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b960:	8c3b      	ldrh	r3, [r7, #32]
 800b962:	4619      	mov	r1, r3
 800b964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b966:	f7ff fd81 	bl	800b46c <ip_reass_remove_oldest_datagram>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 8137 	beq.w	800bbe0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b972:	4b84      	ldr	r3, [pc, #528]	@ (800bb84 <ip4_reass+0x2b0>)
 800b974:	881b      	ldrh	r3, [r3, #0]
 800b976:	461a      	mov	r2, r3
 800b978:	8c3b      	ldrh	r3, [r7, #32]
 800b97a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b97c:	2b0a      	cmp	r3, #10
 800b97e:	f300 812f 	bgt.w	800bbe0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b982:	4b81      	ldr	r3, [pc, #516]	@ (800bb88 <ip4_reass+0x2b4>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	633b      	str	r3, [r7, #48]	@ 0x30
 800b988:	e015      	b.n	800b9b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98c:	695a      	ldr	r2, [r3, #20]
 800b98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	429a      	cmp	r2, r3
 800b994:	d10c      	bne.n	800b9b0 <ip4_reass+0xdc>
 800b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b998:	699a      	ldr	r2, [r3, #24]
 800b99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d106      	bne.n	800b9b0 <ip4_reass+0xdc>
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	899a      	ldrh	r2, [r3, #12]
 800b9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a8:	889b      	ldrh	r3, [r3, #4]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d006      	beq.n	800b9be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e6      	bne.n	800b98a <ip4_reass+0xb6>
 800b9bc:	e000      	b.n	800b9c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800b9be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d109      	bne.n	800b9da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800b9c6:	8c3b      	ldrh	r3, [r7, #32]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9cc:	f7ff fdb0 	bl	800b530 <ip_reass_enqueue_new_datagram>
 800b9d0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d11c      	bne.n	800ba12 <ip4_reass+0x13e>
      goto nullreturn;
 800b9d8:	e105      	b.n	800bbe6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9dc:	88db      	ldrh	r3, [r3, #6]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7fc f815 	bl	8007a10 <lwip_htons>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d110      	bne.n	800ba12 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f2:	89db      	ldrh	r3, [r3, #14]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fc f80b 	bl	8007a10 <lwip_htons>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d006      	beq.n	800ba12 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ba04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba06:	3308      	adds	r3, #8
 800ba08:	2214      	movs	r2, #20
 800ba0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f008 fa86 	bl	8013f1e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ba12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba14:	88db      	ldrh	r3, [r3, #6]
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	f003 0320 	and.w	r3, r3, #32
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	bf0c      	ite	eq
 800ba20:	2301      	moveq	r3, #1
 800ba22:	2300      	movne	r3, #0
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00e      	beq.n	800ba4c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ba2e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ba30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba32:	4413      	add	r3, r2
 800ba34:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ba36:	8b7a      	ldrh	r2, [r7, #26]
 800ba38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	f0c0 80a0 	bcc.w	800bb80 <ip4_reass+0x2ac>
 800ba40:	8b7b      	ldrh	r3, [r7, #26]
 800ba42:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ba46:	4293      	cmp	r3, r2
 800ba48:	f200 809a 	bhi.w	800bb80 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ba4c:	69fa      	ldr	r2, [r7, #28]
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba52:	f7ff fdd5 	bl	800b600 <ip_reass_chain_frag_into_datagram_and_validate>
 800ba56:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba5e:	f000 809b 	beq.w	800bb98 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ba62:	4b48      	ldr	r3, [pc, #288]	@ (800bb84 <ip4_reass+0x2b0>)
 800ba64:	881a      	ldrh	r2, [r3, #0]
 800ba66:	8c3b      	ldrh	r3, [r7, #32]
 800ba68:	4413      	add	r3, r2
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	4b45      	ldr	r3, [pc, #276]	@ (800bb84 <ip4_reass+0x2b0>)
 800ba6e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00d      	beq.n	800ba92 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ba76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ba78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba7a:	4413      	add	r3, r2
 800ba7c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba80:	8a7a      	ldrh	r2, [r7, #18]
 800ba82:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ba84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba86:	7f9b      	ldrb	r3, [r3, #30]
 800ba88:	f043 0301 	orr.w	r3, r3, #1
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba90:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d171      	bne.n	800bb7c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ba98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9a:	8b9b      	ldrh	r3, [r3, #28]
 800ba9c:	3314      	adds	r3, #20
 800ba9e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800baa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800baaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800bab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab4:	3308      	adds	r3, #8
 800bab6:	2214      	movs	r2, #20
 800bab8:	4619      	mov	r1, r3
 800baba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800babc:	f008 fa2f 	bl	8013f1e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800bac0:	8a3b      	ldrh	r3, [r7, #16]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fb ffa4 	bl	8007a10 <lwip_htons>
 800bac8:	4603      	mov	r3, r0
 800baca:	461a      	mov	r2, r3
 800bacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bace:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800bad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad2:	2200      	movs	r2, #0
 800bad4:	719a      	strb	r2, [r3, #6]
 800bad6:	2200      	movs	r2, #0
 800bad8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800bada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800badc:	2200      	movs	r2, #0
 800bade:	729a      	strb	r2, [r3, #10]
 800bae0:	2200      	movs	r2, #0
 800bae2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800bae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800baea:	e00d      	b.n	800bb08 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800baec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800baf2:	2114      	movs	r1, #20
 800baf4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800baf6:	f001 fcc3 	bl	800d480 <pbuf_remove_header>
      pbuf_cat(p, r);
 800bafa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 fe07 	bl	800d710 <pbuf_cat>
      r = iprh->next_pbuf;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800bb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1ee      	bne.n	800baec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800bb0e:	4b1e      	ldr	r3, [pc, #120]	@ (800bb88 <ip4_reass+0x2b4>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d102      	bne.n	800bb1e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb1c:	e010      	b.n	800bb40 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bb1e:	4b1a      	ldr	r3, [pc, #104]	@ (800bb88 <ip4_reass+0x2b4>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb24:	e007      	b.n	800bb36 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800bb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d006      	beq.n	800bb3e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1f4      	bne.n	800bb26 <ip4_reass+0x252>
 800bb3c:	e000      	b.n	800bb40 <ip4_reass+0x26c>
          break;
 800bb3e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bb40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb44:	f7ff fd2e 	bl	800b5a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f001 fda7 	bl	800d69c <pbuf_clen>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800bb52:	4b0c      	ldr	r3, [pc, #48]	@ (800bb84 <ip4_reass+0x2b0>)
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	8c3a      	ldrh	r2, [r7, #32]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d906      	bls.n	800bb6a <ip4_reass+0x296>
 800bb5c:	4b0b      	ldr	r3, [pc, #44]	@ (800bb8c <ip4_reass+0x2b8>)
 800bb5e:	f240 229b 	movw	r2, #667	@ 0x29b
 800bb62:	490b      	ldr	r1, [pc, #44]	@ (800bb90 <ip4_reass+0x2bc>)
 800bb64:	480b      	ldr	r0, [pc, #44]	@ (800bb94 <ip4_reass+0x2c0>)
 800bb66:	f008 f80d 	bl	8013b84 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800bb6a:	4b06      	ldr	r3, [pc, #24]	@ (800bb84 <ip4_reass+0x2b0>)
 800bb6c:	881a      	ldrh	r2, [r3, #0]
 800bb6e:	8c3b      	ldrh	r3, [r7, #32]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	4b03      	ldr	r3, [pc, #12]	@ (800bb84 <ip4_reass+0x2b0>)
 800bb76:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	e038      	b.n	800bbee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	e036      	b.n	800bbee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800bb80:	bf00      	nop
 800bb82:	e00a      	b.n	800bb9a <ip4_reass+0x2c6>
 800bb84:	24004d6c 	.word	0x24004d6c
 800bb88:	24004d68 	.word	0x24004d68
 800bb8c:	08015460 	.word	0x08015460
 800bb90:	08015608 	.word	0x08015608
 800bb94:	080154e0 	.word	0x080154e0
    goto nullreturn_ipr;
 800bb98:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d106      	bne.n	800bbae <ip4_reass+0x2da>
 800bba0:	4b15      	ldr	r3, [pc, #84]	@ (800bbf8 <ip4_reass+0x324>)
 800bba2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800bba6:	4915      	ldr	r1, [pc, #84]	@ (800bbfc <ip4_reass+0x328>)
 800bba8:	4815      	ldr	r0, [pc, #84]	@ (800bc00 <ip4_reass+0x32c>)
 800bbaa:	f007 ffeb 	bl	8013b84 <iprintf>
  if (ipr->p == NULL) {
 800bbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d116      	bne.n	800bbe4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800bbb6:	4b13      	ldr	r3, [pc, #76]	@ (800bc04 <ip4_reass+0x330>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d006      	beq.n	800bbce <ip4_reass+0x2fa>
 800bbc0:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf8 <ip4_reass+0x324>)
 800bbc2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800bbc6:	4910      	ldr	r1, [pc, #64]	@ (800bc08 <ip4_reass+0x334>)
 800bbc8:	480d      	ldr	r0, [pc, #52]	@ (800bc00 <ip4_reass+0x32c>)
 800bbca:	f007 ffdb 	bl	8013b84 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800bbce:	2100      	movs	r1, #0
 800bbd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bbd2:	f7ff fce7 	bl	800b5a4 <ip_reass_dequeue_datagram>
 800bbd6:	e006      	b.n	800bbe6 <ip4_reass+0x312>
    goto nullreturn;
 800bbd8:	bf00      	nop
 800bbda:	e004      	b.n	800bbe6 <ip4_reass+0x312>
    goto nullreturn;
 800bbdc:	bf00      	nop
 800bbde:	e002      	b.n	800bbe6 <ip4_reass+0x312>
      goto nullreturn;
 800bbe0:	bf00      	nop
 800bbe2:	e000      	b.n	800bbe6 <ip4_reass+0x312>
  }

nullreturn:
 800bbe4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fcd0 	bl	800d58c <pbuf_free>
  return NULL;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3738      	adds	r7, #56	@ 0x38
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	08015460 	.word	0x08015460
 800bbfc:	08015624 	.word	0x08015624
 800bc00:	080154e0 	.word	0x080154e0
 800bc04:	24004d68 	.word	0x24004d68
 800bc08:	08015630 	.word	0x08015630

0800bc0c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800bc10:	2005      	movs	r0, #5
 800bc12:	f000 fdc9 	bl	800c7a8 <memp_malloc>
 800bc16:	4603      	mov	r3, r0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <ip_frag_free_pbuf_custom_ref+0x1c>
 800bc2a:	4b07      	ldr	r3, [pc, #28]	@ (800bc48 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800bc2c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800bc30:	4906      	ldr	r1, [pc, #24]	@ (800bc4c <ip_frag_free_pbuf_custom_ref+0x30>)
 800bc32:	4807      	ldr	r0, [pc, #28]	@ (800bc50 <ip_frag_free_pbuf_custom_ref+0x34>)
 800bc34:	f007 ffa6 	bl	8013b84 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800bc38:	6879      	ldr	r1, [r7, #4]
 800bc3a:	2005      	movs	r0, #5
 800bc3c:	f000 fe24 	bl	800c888 <memp_free>
}
 800bc40:	bf00      	nop
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	08015460 	.word	0x08015460
 800bc4c:	08015650 	.word	0x08015650
 800bc50:	080154e0 	.word	0x080154e0

0800bc54 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d106      	bne.n	800bc74 <ipfrag_free_pbuf_custom+0x20>
 800bc66:	4b11      	ldr	r3, [pc, #68]	@ (800bcac <ipfrag_free_pbuf_custom+0x58>)
 800bc68:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800bc6c:	4910      	ldr	r1, [pc, #64]	@ (800bcb0 <ipfrag_free_pbuf_custom+0x5c>)
 800bc6e:	4811      	ldr	r0, [pc, #68]	@ (800bcb4 <ipfrag_free_pbuf_custom+0x60>)
 800bc70:	f007 ff88 	bl	8013b84 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d006      	beq.n	800bc8a <ipfrag_free_pbuf_custom+0x36>
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	@ (800bcac <ipfrag_free_pbuf_custom+0x58>)
 800bc7e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800bc82:	490d      	ldr	r1, [pc, #52]	@ (800bcb8 <ipfrag_free_pbuf_custom+0x64>)
 800bc84:	480b      	ldr	r0, [pc, #44]	@ (800bcb4 <ipfrag_free_pbuf_custom+0x60>)
 800bc86:	f007 ff7d 	bl	8013b84 <iprintf>
  if (pcr->original != NULL) {
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d004      	beq.n	800bc9c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 fc78 	bl	800d58c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7ff ffbd 	bl	800bc1c <ip_frag_free_pbuf_custom_ref>
}
 800bca2:	bf00      	nop
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	08015460 	.word	0x08015460
 800bcb0:	0801565c 	.word	0x0801565c
 800bcb4:	080154e0 	.word	0x080154e0
 800bcb8:	08015668 	.word	0x08015668

0800bcbc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b094      	sub	sp, #80	@ 0x50
 800bcc0:	af02      	add	r7, sp, #8
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcd2:	3b14      	subs	r3, #20
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	da00      	bge.n	800bcda <ip4_frag+0x1e>
 800bcd8:	3307      	adds	r3, #7
 800bcda:	10db      	asrs	r3, r3, #3
 800bcdc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800bcde:	2314      	movs	r3, #20
 800bce0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800bce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800bcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	f003 030f 	and.w	r3, r3, #15
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b14      	cmp	r3, #20
 800bcfc:	d002      	beq.n	800bd04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800bcfe:	f06f 0305 	mvn.w	r3, #5
 800bd02:	e110      	b.n	800bf26 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	895b      	ldrh	r3, [r3, #10]
 800bd08:	2b13      	cmp	r3, #19
 800bd0a:	d809      	bhi.n	800bd20 <ip4_frag+0x64>
 800bd0c:	4b88      	ldr	r3, [pc, #544]	@ (800bf30 <ip4_frag+0x274>)
 800bd0e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800bd12:	4988      	ldr	r1, [pc, #544]	@ (800bf34 <ip4_frag+0x278>)
 800bd14:	4888      	ldr	r0, [pc, #544]	@ (800bf38 <ip4_frag+0x27c>)
 800bd16:	f007 ff35 	bl	8013b84 <iprintf>
 800bd1a:	f06f 0305 	mvn.w	r3, #5
 800bd1e:	e102      	b.n	800bf26 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800bd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd22:	88db      	ldrh	r3, [r3, #6]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fb fe72 	bl	8007a10 <lwip_htons>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800bd30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bd32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd36:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800bd3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bd3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd40:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	891b      	ldrh	r3, [r3, #8]
 800bd46:	3b14      	subs	r3, #20
 800bd48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800bd4c:	e0e1      	b.n	800bf12 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800bd4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bd50:	00db      	lsls	r3, r3, #3
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	bf28      	it	cs
 800bd5c:	4613      	movcs	r3, r2
 800bd5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800bd60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bd64:	2114      	movs	r1, #20
 800bd66:	200e      	movs	r0, #14
 800bd68:	f001 f92c 	bl	800cfc4 <pbuf_alloc>
 800bd6c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80d5 	beq.w	800bf20 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd78:	895b      	ldrh	r3, [r3, #10]
 800bd7a:	2b13      	cmp	r3, #19
 800bd7c:	d806      	bhi.n	800bd8c <ip4_frag+0xd0>
 800bd7e:	4b6c      	ldr	r3, [pc, #432]	@ (800bf30 <ip4_frag+0x274>)
 800bd80:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800bd84:	496d      	ldr	r1, [pc, #436]	@ (800bf3c <ip4_frag+0x280>)
 800bd86:	486c      	ldr	r0, [pc, #432]	@ (800bf38 <ip4_frag+0x27c>)
 800bd88:	f007 fefc 	bl	8013b84 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	2214      	movs	r2, #20
 800bd92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bd94:	4618      	mov	r0, r3
 800bd96:	f008 f8c2 	bl	8013f1e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800bda0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bda2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800bda6:	e064      	b.n	800be72 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	895a      	ldrh	r2, [r3, #10]
 800bdac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	895b      	ldrh	r3, [r3, #10]
 800bdb6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d906      	bls.n	800bdca <ip4_frag+0x10e>
 800bdbc:	4b5c      	ldr	r3, [pc, #368]	@ (800bf30 <ip4_frag+0x274>)
 800bdbe:	f240 322d 	movw	r2, #813	@ 0x32d
 800bdc2:	495f      	ldr	r1, [pc, #380]	@ (800bf40 <ip4_frag+0x284>)
 800bdc4:	485c      	ldr	r0, [pc, #368]	@ (800bf38 <ip4_frag+0x27c>)
 800bdc6:	f007 fedd 	bl	8013b84 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800bdca:	8bfa      	ldrh	r2, [r7, #30]
 800bdcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	bf28      	it	cs
 800bdd4:	4613      	movcs	r3, r2
 800bdd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800bdda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d105      	bne.n	800bdee <ip4_frag+0x132>
        poff = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	60fb      	str	r3, [r7, #12]
        continue;
 800bdec:	e041      	b.n	800be72 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800bdee:	f7ff ff0d 	bl	800bc0c <ip_frag_alloc_pbuf_custom_ref>
 800bdf2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d103      	bne.n	800be02 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800bdfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdfc:	f001 fbc6 	bl	800d58c <pbuf_free>
        goto memerr;
 800be00:	e08f      	b.n	800bf22 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800be02:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800be08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800be0a:	4413      	add	r3, r2
 800be0c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800be10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800be14:	9201      	str	r2, [sp, #4]
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	4603      	mov	r3, r0
 800be1a:	2241      	movs	r2, #65	@ 0x41
 800be1c:	2000      	movs	r0, #0
 800be1e:	f001 f9fb 	bl	800d218 <pbuf_alloced_custom>
 800be22:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d106      	bne.n	800be38 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800be2a:	69b8      	ldr	r0, [r7, #24]
 800be2c:	f7ff fef6 	bl	800bc1c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800be30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be32:	f001 fbab 	bl	800d58c <pbuf_free>
        goto memerr;
 800be36:	e074      	b.n	800bf22 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f001 fc47 	bl	800d6cc <pbuf_ref>
      pcr->original = p;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	4a3f      	ldr	r2, [pc, #252]	@ (800bf44 <ip4_frag+0x288>)
 800be48:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800be4a:	6979      	ldr	r1, [r7, #20]
 800be4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be4e:	f001 fc5f 	bl	800d710 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800be52:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800be56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800be60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800be64:	2b00      	cmp	r3, #0
 800be66:	d004      	beq.n	800be72 <ip4_frag+0x1b6>
        poff = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800be72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800be76:	2b00      	cmp	r3, #0
 800be78:	d196      	bne.n	800bda8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800be7a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800be7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be80:	4413      	add	r3, r2
 800be82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be88:	f1a3 0213 	sub.w	r2, r3, #19
 800be8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be90:	429a      	cmp	r2, r3
 800be92:	bfcc      	ite	gt
 800be94:	2301      	movgt	r3, #1
 800be96:	2300      	movle	r3, #0
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800be9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bea4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <ip4_frag+0x1f6>
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d003      	beq.n	800beba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800beb2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800beb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800beb8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800beba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fb fda7 	bl	8007a10 <lwip_htons>
 800bec2:	4603      	mov	r3, r0
 800bec4:	461a      	mov	r2, r3
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800beca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800becc:	3314      	adds	r3, #20
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fb fd9d 	bl	8007a10 <lwip_htons>
 800bed6:	4603      	mov	r3, r0
 800bed8:	461a      	mov	r2, r3
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800bede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee0:	2200      	movs	r2, #0
 800bee2:	729a      	strb	r2, [r3, #10]
 800bee4:	2200      	movs	r2, #0
 800bee6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	695b      	ldr	r3, [r3, #20]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bef0:	68b8      	ldr	r0, [r7, #8]
 800bef2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800bef4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bef6:	f001 fb49 	bl	800d58c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800befa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800befe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800bf06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800bf0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800bf12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f47f af19 	bne.w	800bd4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	e002      	b.n	800bf26 <ip4_frag+0x26a>
      goto memerr;
 800bf20:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800bf22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3748      	adds	r7, #72	@ 0x48
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	08015460 	.word	0x08015460
 800bf34:	08015674 	.word	0x08015674
 800bf38:	080154e0 	.word	0x080154e0
 800bf3c:	08015690 	.word	0x08015690
 800bf40:	080156b0 	.word	0x080156b0
 800bf44:	0800bc55 	.word	0x0800bc55

0800bf48 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	4603      	mov	r3, r0
 800bf50:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bf52:	4b05      	ldr	r3, [pc, #20]	@ (800bf68 <ptr_to_mem+0x20>)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	88fb      	ldrh	r3, [r7, #6]
 800bf58:	4413      	add	r3, r2
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	24004d70 	.word	0x24004d70

0800bf6c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bf74:	4b05      	ldr	r3, [pc, #20]	@ (800bf8c <mem_to_ptr+0x20>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	b29b      	uxth	r3, r3
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	24004d70 	.word	0x24004d70

0800bf90 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bf98:	4b45      	ldr	r3, [pc, #276]	@ (800c0b0 <plug_holes+0x120>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d206      	bcs.n	800bfb0 <plug_holes+0x20>
 800bfa2:	4b44      	ldr	r3, [pc, #272]	@ (800c0b4 <plug_holes+0x124>)
 800bfa4:	f240 12df 	movw	r2, #479	@ 0x1df
 800bfa8:	4943      	ldr	r1, [pc, #268]	@ (800c0b8 <plug_holes+0x128>)
 800bfaa:	4844      	ldr	r0, [pc, #272]	@ (800c0bc <plug_holes+0x12c>)
 800bfac:	f007 fdea 	bl	8013b84 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bfb0:	4b43      	ldr	r3, [pc, #268]	@ (800c0c0 <plug_holes+0x130>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d306      	bcc.n	800bfc8 <plug_holes+0x38>
 800bfba:	4b3e      	ldr	r3, [pc, #248]	@ (800c0b4 <plug_holes+0x124>)
 800bfbc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800bfc0:	4940      	ldr	r1, [pc, #256]	@ (800c0c4 <plug_holes+0x134>)
 800bfc2:	483e      	ldr	r0, [pc, #248]	@ (800c0bc <plug_holes+0x12c>)
 800bfc4:	f007 fdde 	bl	8013b84 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	791b      	ldrb	r3, [r3, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d006      	beq.n	800bfde <plug_holes+0x4e>
 800bfd0:	4b38      	ldr	r3, [pc, #224]	@ (800c0b4 <plug_holes+0x124>)
 800bfd2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bfd6:	493c      	ldr	r1, [pc, #240]	@ (800c0c8 <plug_holes+0x138>)
 800bfd8:	4838      	ldr	r0, [pc, #224]	@ (800c0bc <plug_holes+0x12c>)
 800bfda:	f007 fdd3 	bl	8013b84 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bfe6:	d906      	bls.n	800bff6 <plug_holes+0x66>
 800bfe8:	4b32      	ldr	r3, [pc, #200]	@ (800c0b4 <plug_holes+0x124>)
 800bfea:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800bfee:	4937      	ldr	r1, [pc, #220]	@ (800c0cc <plug_holes+0x13c>)
 800bff0:	4832      	ldr	r0, [pc, #200]	@ (800c0bc <plug_holes+0x12c>)
 800bff2:	f007 fdc7 	bl	8013b84 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7ff ffa4 	bl	800bf48 <ptr_to_mem>
 800c000:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	429a      	cmp	r2, r3
 800c008:	d024      	beq.n	800c054 <plug_holes+0xc4>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	791b      	ldrb	r3, [r3, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d120      	bne.n	800c054 <plug_holes+0xc4>
 800c012:	4b2b      	ldr	r3, [pc, #172]	@ (800c0c0 <plug_holes+0x130>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d01b      	beq.n	800c054 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c01c:	4b2c      	ldr	r3, [pc, #176]	@ (800c0d0 <plug_holes+0x140>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	429a      	cmp	r2, r3
 800c024:	d102      	bne.n	800c02c <plug_holes+0x9c>
      lfree = mem;
 800c026:	4a2a      	ldr	r2, [pc, #168]	@ (800c0d0 <plug_holes+0x140>)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	881a      	ldrh	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c03c:	d00a      	beq.n	800c054 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff ff80 	bl	800bf48 <ptr_to_mem>
 800c048:	4604      	mov	r4, r0
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff ff8e 	bl	800bf6c <mem_to_ptr>
 800c050:	4603      	mov	r3, r0
 800c052:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	885b      	ldrh	r3, [r3, #2]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ff75 	bl	800bf48 <ptr_to_mem>
 800c05e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	429a      	cmp	r2, r3
 800c066:	d01f      	beq.n	800c0a8 <plug_holes+0x118>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	791b      	ldrb	r3, [r3, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d11b      	bne.n	800c0a8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c070:	4b17      	ldr	r3, [pc, #92]	@ (800c0d0 <plug_holes+0x140>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	429a      	cmp	r2, r3
 800c078:	d102      	bne.n	800c080 <plug_holes+0xf0>
      lfree = pmem;
 800c07a:	4a15      	ldr	r2, [pc, #84]	@ (800c0d0 <plug_holes+0x140>)
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	881a      	ldrh	r2, [r3, #0]
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c090:	d00a      	beq.n	800c0a8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff ff56 	bl	800bf48 <ptr_to_mem>
 800c09c:	4604      	mov	r4, r0
 800c09e:	68b8      	ldr	r0, [r7, #8]
 800c0a0:	f7ff ff64 	bl	800bf6c <mem_to_ptr>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c0a8:	bf00      	nop
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd90      	pop	{r4, r7, pc}
 800c0b0:	24004d70 	.word	0x24004d70
 800c0b4:	080156c0 	.word	0x080156c0
 800c0b8:	0801572c 	.word	0x0801572c
 800c0bc:	08015744 	.word	0x08015744
 800c0c0:	24004d74 	.word	0x24004d74
 800c0c4:	0801576c 	.word	0x0801576c
 800c0c8:	08015788 	.word	0x08015788
 800c0cc:	080157a4 	.word	0x080157a4
 800c0d0:	24004d78 	.word	0x24004d78

0800c0d4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c0da:	4b16      	ldr	r3, [pc, #88]	@ (800c134 <mem_init+0x60>)
 800c0dc:	4a16      	ldr	r2, [pc, #88]	@ (800c138 <mem_init+0x64>)
 800c0de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c0e0:	4b14      	ldr	r3, [pc, #80]	@ (800c134 <mem_init+0x60>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c0ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c0fa:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800c0fe:	f7ff ff23 	bl	800bf48 <ptr_to_mem>
 800c102:	4603      	mov	r3, r0
 800c104:	4a0d      	ldr	r2, [pc, #52]	@ (800c13c <mem_init+0x68>)
 800c106:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c108:	4b0c      	ldr	r3, [pc, #48]	@ (800c13c <mem_init+0x68>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2201      	movs	r2, #1
 800c10e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c110:	4b0a      	ldr	r3, [pc, #40]	@ (800c13c <mem_init+0x68>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c118:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c11a:	4b08      	ldr	r3, [pc, #32]	@ (800c13c <mem_init+0x68>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c122:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c124:	4b03      	ldr	r3, [pc, #12]	@ (800c134 <mem_init+0x60>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a05      	ldr	r2, [pc, #20]	@ (800c140 <mem_init+0x6c>)
 800c12a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c12c:	bf00      	nop
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	24004d70 	.word	0x24004d70
 800c138:	30044000 	.word	0x30044000
 800c13c:	24004d74 	.word	0x24004d74
 800c140:	24004d78 	.word	0x24004d78

0800c144 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff ff0d 	bl	800bf6c <mem_to_ptr>
 800c152:	4603      	mov	r3, r0
 800c154:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7ff fef4 	bl	800bf48 <ptr_to_mem>
 800c160:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	885b      	ldrh	r3, [r3, #2]
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff feee 	bl	800bf48 <ptr_to_mem>
 800c16c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c176:	d818      	bhi.n	800c1aa <mem_link_valid+0x66>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	885b      	ldrh	r3, [r3, #2]
 800c17c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c180:	d813      	bhi.n	800c1aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c186:	8afa      	ldrh	r2, [r7, #22]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d004      	beq.n	800c196 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	8afa      	ldrh	r2, [r7, #22]
 800c192:	429a      	cmp	r2, r3
 800c194:	d109      	bne.n	800c1aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c196:	4b08      	ldr	r3, [pc, #32]	@ (800c1b8 <mem_link_valid+0x74>)
 800c198:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d006      	beq.n	800c1ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	885b      	ldrh	r3, [r3, #2]
 800c1a4:	8afa      	ldrh	r2, [r7, #22]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d001      	beq.n	800c1ae <mem_link_valid+0x6a>
    return 0;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e000      	b.n	800c1b0 <mem_link_valid+0x6c>
  }
  return 1;
 800c1ae:	2301      	movs	r3, #1
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	24004d74 	.word	0x24004d74

0800c1bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d04c      	beq.n	800c264 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f003 0303 	and.w	r3, r3, #3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d007      	beq.n	800c1e4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c1d4:	4b25      	ldr	r3, [pc, #148]	@ (800c26c <mem_free+0xb0>)
 800c1d6:	f240 2273 	movw	r2, #627	@ 0x273
 800c1da:	4925      	ldr	r1, [pc, #148]	@ (800c270 <mem_free+0xb4>)
 800c1dc:	4825      	ldr	r0, [pc, #148]	@ (800c274 <mem_free+0xb8>)
 800c1de:	f007 fcd1 	bl	8013b84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c1e2:	e040      	b.n	800c266 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	3b08      	subs	r3, #8
 800c1e8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c1ea:	4b23      	ldr	r3, [pc, #140]	@ (800c278 <mem_free+0xbc>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d306      	bcc.n	800c202 <mem_free+0x46>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f103 020c 	add.w	r2, r3, #12
 800c1fa:	4b20      	ldr	r3, [pc, #128]	@ (800c27c <mem_free+0xc0>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d907      	bls.n	800c212 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c202:	4b1a      	ldr	r3, [pc, #104]	@ (800c26c <mem_free+0xb0>)
 800c204:	f240 227f 	movw	r2, #639	@ 0x27f
 800c208:	491d      	ldr	r1, [pc, #116]	@ (800c280 <mem_free+0xc4>)
 800c20a:	481a      	ldr	r0, [pc, #104]	@ (800c274 <mem_free+0xb8>)
 800c20c:	f007 fcba 	bl	8013b84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c210:	e029      	b.n	800c266 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	791b      	ldrb	r3, [r3, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d107      	bne.n	800c22a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c21a:	4b14      	ldr	r3, [pc, #80]	@ (800c26c <mem_free+0xb0>)
 800c21c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c220:	4918      	ldr	r1, [pc, #96]	@ (800c284 <mem_free+0xc8>)
 800c222:	4814      	ldr	r0, [pc, #80]	@ (800c274 <mem_free+0xb8>)
 800c224:	f007 fcae 	bl	8013b84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c228:	e01d      	b.n	800c266 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f7ff ff8a 	bl	800c144 <mem_link_valid>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d107      	bne.n	800c246 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c236:	4b0d      	ldr	r3, [pc, #52]	@ (800c26c <mem_free+0xb0>)
 800c238:	f240 2295 	movw	r2, #661	@ 0x295
 800c23c:	4912      	ldr	r1, [pc, #72]	@ (800c288 <mem_free+0xcc>)
 800c23e:	480d      	ldr	r0, [pc, #52]	@ (800c274 <mem_free+0xb8>)
 800c240:	f007 fca0 	bl	8013b84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c244:	e00f      	b.n	800c266 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c24c:	4b0f      	ldr	r3, [pc, #60]	@ (800c28c <mem_free+0xd0>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	429a      	cmp	r2, r3
 800c254:	d202      	bcs.n	800c25c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c256:	4a0d      	ldr	r2, [pc, #52]	@ (800c28c <mem_free+0xd0>)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f7ff fe97 	bl	800bf90 <plug_holes>
 800c262:	e000      	b.n	800c266 <mem_free+0xaa>
    return;
 800c264:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	080156c0 	.word	0x080156c0
 800c270:	080157d0 	.word	0x080157d0
 800c274:	08015744 	.word	0x08015744
 800c278:	24004d70 	.word	0x24004d70
 800c27c:	24004d74 	.word	0x24004d74
 800c280:	080157f4 	.word	0x080157f4
 800c284:	08015810 	.word	0x08015810
 800c288:	08015838 	.word	0x08015838
 800c28c:	24004d78 	.word	0x24004d78

0800c290 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c29c:	887b      	ldrh	r3, [r7, #2]
 800c29e:	3303      	adds	r3, #3
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	f023 0303 	bic.w	r3, r3, #3
 800c2a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c2a8:	8bfb      	ldrh	r3, [r7, #30]
 800c2aa:	2b0b      	cmp	r3, #11
 800c2ac:	d801      	bhi.n	800c2b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c2ae:	230c      	movs	r3, #12
 800c2b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c2b2:	8bfb      	ldrh	r3, [r7, #30]
 800c2b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c2b8:	d803      	bhi.n	800c2c2 <mem_trim+0x32>
 800c2ba:	8bfa      	ldrh	r2, [r7, #30]
 800c2bc:	887b      	ldrh	r3, [r7, #2]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d201      	bcs.n	800c2c6 <mem_trim+0x36>
    return NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e0cc      	b.n	800c460 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c2c6:	4b68      	ldr	r3, [pc, #416]	@ (800c468 <mem_trim+0x1d8>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d304      	bcc.n	800c2da <mem_trim+0x4a>
 800c2d0:	4b66      	ldr	r3, [pc, #408]	@ (800c46c <mem_trim+0x1dc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d306      	bcc.n	800c2e8 <mem_trim+0x58>
 800c2da:	4b65      	ldr	r3, [pc, #404]	@ (800c470 <mem_trim+0x1e0>)
 800c2dc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c2e0:	4964      	ldr	r1, [pc, #400]	@ (800c474 <mem_trim+0x1e4>)
 800c2e2:	4865      	ldr	r0, [pc, #404]	@ (800c478 <mem_trim+0x1e8>)
 800c2e4:	f007 fc4e 	bl	8013b84 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c2e8:	4b5f      	ldr	r3, [pc, #380]	@ (800c468 <mem_trim+0x1d8>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d304      	bcc.n	800c2fc <mem_trim+0x6c>
 800c2f2:	4b5e      	ldr	r3, [pc, #376]	@ (800c46c <mem_trim+0x1dc>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d301      	bcc.n	800c300 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	e0af      	b.n	800c460 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3b08      	subs	r3, #8
 800c304:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c306:	69b8      	ldr	r0, [r7, #24]
 800c308:	f7ff fe30 	bl	800bf6c <mem_to_ptr>
 800c30c:	4603      	mov	r3, r0
 800c30e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	881a      	ldrh	r2, [r3, #0]
 800c314:	8afb      	ldrh	r3, [r7, #22]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	b29b      	uxth	r3, r3
 800c31a:	3b08      	subs	r3, #8
 800c31c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c31e:	8bfa      	ldrh	r2, [r7, #30]
 800c320:	8abb      	ldrh	r3, [r7, #20]
 800c322:	429a      	cmp	r2, r3
 800c324:	d906      	bls.n	800c334 <mem_trim+0xa4>
 800c326:	4b52      	ldr	r3, [pc, #328]	@ (800c470 <mem_trim+0x1e0>)
 800c328:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c32c:	4953      	ldr	r1, [pc, #332]	@ (800c47c <mem_trim+0x1ec>)
 800c32e:	4852      	ldr	r0, [pc, #328]	@ (800c478 <mem_trim+0x1e8>)
 800c330:	f007 fc28 	bl	8013b84 <iprintf>
  if (newsize > size) {
 800c334:	8bfa      	ldrh	r2, [r7, #30]
 800c336:	8abb      	ldrh	r3, [r7, #20]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d901      	bls.n	800c340 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c33c:	2300      	movs	r3, #0
 800c33e:	e08f      	b.n	800c460 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c340:	8bfa      	ldrh	r2, [r7, #30]
 800c342:	8abb      	ldrh	r3, [r7, #20]
 800c344:	429a      	cmp	r2, r3
 800c346:	d101      	bne.n	800c34c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	e089      	b.n	800c460 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff fdf9 	bl	800bf48 <ptr_to_mem>
 800c356:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	791b      	ldrb	r3, [r3, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d13f      	bne.n	800c3e0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	881b      	ldrh	r3, [r3, #0]
 800c364:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c368:	d106      	bne.n	800c378 <mem_trim+0xe8>
 800c36a:	4b41      	ldr	r3, [pc, #260]	@ (800c470 <mem_trim+0x1e0>)
 800c36c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c370:	4943      	ldr	r1, [pc, #268]	@ (800c480 <mem_trim+0x1f0>)
 800c372:	4841      	ldr	r0, [pc, #260]	@ (800c478 <mem_trim+0x1e8>)
 800c374:	f007 fc06 	bl	8013b84 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c37e:	8afa      	ldrh	r2, [r7, #22]
 800c380:	8bfb      	ldrh	r3, [r7, #30]
 800c382:	4413      	add	r3, r2
 800c384:	b29b      	uxth	r3, r3
 800c386:	3308      	adds	r3, #8
 800c388:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c38a:	4b3e      	ldr	r3, [pc, #248]	@ (800c484 <mem_trim+0x1f4>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	429a      	cmp	r2, r3
 800c392:	d106      	bne.n	800c3a2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c394:	89fb      	ldrh	r3, [r7, #14]
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff fdd6 	bl	800bf48 <ptr_to_mem>
 800c39c:	4603      	mov	r3, r0
 800c39e:	4a39      	ldr	r2, [pc, #228]	@ (800c484 <mem_trim+0x1f4>)
 800c3a0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c3a2:	89fb      	ldrh	r3, [r7, #14]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7ff fdcf 	bl	800bf48 <ptr_to_mem>
 800c3aa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	89ba      	ldrh	r2, [r7, #12]
 800c3b6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	8afa      	ldrh	r2, [r7, #22]
 800c3bc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	89fa      	ldrh	r2, [r7, #14]
 800c3c2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c3cc:	d047      	beq.n	800c45e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff fdb8 	bl	800bf48 <ptr_to_mem>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	89fb      	ldrh	r3, [r7, #14]
 800c3dc:	8053      	strh	r3, [r2, #2]
 800c3de:	e03e      	b.n	800c45e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c3e0:	8bfb      	ldrh	r3, [r7, #30]
 800c3e2:	f103 0214 	add.w	r2, r3, #20
 800c3e6:	8abb      	ldrh	r3, [r7, #20]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d838      	bhi.n	800c45e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c3ec:	8afa      	ldrh	r2, [r7, #22]
 800c3ee:	8bfb      	ldrh	r3, [r7, #30]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	881b      	ldrh	r3, [r3, #0]
 800c3fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c400:	d106      	bne.n	800c410 <mem_trim+0x180>
 800c402:	4b1b      	ldr	r3, [pc, #108]	@ (800c470 <mem_trim+0x1e0>)
 800c404:	f240 3216 	movw	r2, #790	@ 0x316
 800c408:	491d      	ldr	r1, [pc, #116]	@ (800c480 <mem_trim+0x1f0>)
 800c40a:	481b      	ldr	r0, [pc, #108]	@ (800c478 <mem_trim+0x1e8>)
 800c40c:	f007 fbba 	bl	8013b84 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c410:	89fb      	ldrh	r3, [r7, #14]
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fd98 	bl	800bf48 <ptr_to_mem>
 800c418:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c41a:	4b1a      	ldr	r3, [pc, #104]	@ (800c484 <mem_trim+0x1f4>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	429a      	cmp	r2, r3
 800c422:	d202      	bcs.n	800c42a <mem_trim+0x19a>
      lfree = mem2;
 800c424:	4a17      	ldr	r2, [pc, #92]	@ (800c484 <mem_trim+0x1f4>)
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2200      	movs	r2, #0
 800c42e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	881a      	ldrh	r2, [r3, #0]
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	8afa      	ldrh	r2, [r7, #22]
 800c43c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	89fa      	ldrh	r2, [r7, #14]
 800c442:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c44c:	d007      	beq.n	800c45e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fd78 	bl	800bf48 <ptr_to_mem>
 800c458:	4602      	mov	r2, r0
 800c45a:	89fb      	ldrh	r3, [r7, #14]
 800c45c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c45e:	687b      	ldr	r3, [r7, #4]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	24004d70 	.word	0x24004d70
 800c46c:	24004d74 	.word	0x24004d74
 800c470:	080156c0 	.word	0x080156c0
 800c474:	0801586c 	.word	0x0801586c
 800c478:	08015744 	.word	0x08015744
 800c47c:	08015884 	.word	0x08015884
 800c480:	080158a4 	.word	0x080158a4
 800c484:	24004d78 	.word	0x24004d78

0800c488 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	4603      	mov	r3, r0
 800c490:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c492:	88fb      	ldrh	r3, [r7, #6]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d101      	bne.n	800c49c <mem_malloc+0x14>
    return NULL;
 800c498:	2300      	movs	r3, #0
 800c49a:	e0d9      	b.n	800c650 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c49c:	88fb      	ldrh	r3, [r7, #6]
 800c49e:	3303      	adds	r3, #3
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	f023 0303 	bic.w	r3, r3, #3
 800c4a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c4a8:	8bbb      	ldrh	r3, [r7, #28]
 800c4aa:	2b0b      	cmp	r3, #11
 800c4ac:	d801      	bhi.n	800c4b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c4ae:	230c      	movs	r3, #12
 800c4b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c4b2:	8bbb      	ldrh	r3, [r7, #28]
 800c4b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c4b8:	d803      	bhi.n	800c4c2 <mem_malloc+0x3a>
 800c4ba:	8bba      	ldrh	r2, [r7, #28]
 800c4bc:	88fb      	ldrh	r3, [r7, #6]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d201      	bcs.n	800c4c6 <mem_malloc+0x3e>
    return NULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e0c4      	b.n	800c650 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c4c6:	4b64      	ldr	r3, [pc, #400]	@ (800c658 <mem_malloc+0x1d0>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff fd4e 	bl	800bf6c <mem_to_ptr>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	83fb      	strh	r3, [r7, #30]
 800c4d4:	e0b4      	b.n	800c640 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c4d6:	8bfb      	ldrh	r3, [r7, #30]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7ff fd35 	bl	800bf48 <ptr_to_mem>
 800c4de:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	791b      	ldrb	r3, [r3, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f040 80a4 	bne.w	800c632 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	881b      	ldrh	r3, [r3, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	8bfb      	ldrh	r3, [r7, #30]
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	f1a3 0208 	sub.w	r2, r3, #8
 800c4f8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	f0c0 8099 	bcc.w	800c632 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	461a      	mov	r2, r3
 800c506:	8bfb      	ldrh	r3, [r7, #30]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	f1a3 0208 	sub.w	r2, r3, #8
 800c50e:	8bbb      	ldrh	r3, [r7, #28]
 800c510:	3314      	adds	r3, #20
 800c512:	429a      	cmp	r2, r3
 800c514:	d333      	bcc.n	800c57e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c516:	8bfa      	ldrh	r2, [r7, #30]
 800c518:	8bbb      	ldrh	r3, [r7, #28]
 800c51a:	4413      	add	r3, r2
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	3308      	adds	r3, #8
 800c520:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c522:	8a7b      	ldrh	r3, [r7, #18]
 800c524:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c528:	d106      	bne.n	800c538 <mem_malloc+0xb0>
 800c52a:	4b4c      	ldr	r3, [pc, #304]	@ (800c65c <mem_malloc+0x1d4>)
 800c52c:	f240 3287 	movw	r2, #903	@ 0x387
 800c530:	494b      	ldr	r1, [pc, #300]	@ (800c660 <mem_malloc+0x1d8>)
 800c532:	484c      	ldr	r0, [pc, #304]	@ (800c664 <mem_malloc+0x1dc>)
 800c534:	f007 fb26 	bl	8013b84 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c538:	8a7b      	ldrh	r3, [r7, #18]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff fd04 	bl	800bf48 <ptr_to_mem>
 800c540:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	881a      	ldrh	r2, [r3, #0]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	8bfa      	ldrh	r2, [r7, #30]
 800c554:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	8a7a      	ldrh	r2, [r7, #18]
 800c55a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	2201      	movs	r2, #1
 800c560:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c56a:	d00b      	beq.n	800c584 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff fce9 	bl	800bf48 <ptr_to_mem>
 800c576:	4602      	mov	r2, r0
 800c578:	8a7b      	ldrh	r3, [r7, #18]
 800c57a:	8053      	strh	r3, [r2, #2]
 800c57c:	e002      	b.n	800c584 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2201      	movs	r2, #1
 800c582:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c584:	4b34      	ldr	r3, [pc, #208]	@ (800c658 <mem_malloc+0x1d0>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d127      	bne.n	800c5de <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c58e:	4b32      	ldr	r3, [pc, #200]	@ (800c658 <mem_malloc+0x1d0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c594:	e005      	b.n	800c5a2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7ff fcd4 	bl	800bf48 <ptr_to_mem>
 800c5a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	791b      	ldrb	r3, [r3, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d004      	beq.n	800c5b4 <mem_malloc+0x12c>
 800c5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c668 <mem_malloc+0x1e0>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d1f0      	bne.n	800c596 <mem_malloc+0x10e>
          }
          lfree = cur;
 800c5b4:	4a28      	ldr	r2, [pc, #160]	@ (800c658 <mem_malloc+0x1d0>)
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c5ba:	4b27      	ldr	r3, [pc, #156]	@ (800c658 <mem_malloc+0x1d0>)
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4b2a      	ldr	r3, [pc, #168]	@ (800c668 <mem_malloc+0x1e0>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d00b      	beq.n	800c5de <mem_malloc+0x156>
 800c5c6:	4b24      	ldr	r3, [pc, #144]	@ (800c658 <mem_malloc+0x1d0>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	791b      	ldrb	r3, [r3, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d006      	beq.n	800c5de <mem_malloc+0x156>
 800c5d0:	4b22      	ldr	r3, [pc, #136]	@ (800c65c <mem_malloc+0x1d4>)
 800c5d2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c5d6:	4925      	ldr	r1, [pc, #148]	@ (800c66c <mem_malloc+0x1e4>)
 800c5d8:	4822      	ldr	r0, [pc, #136]	@ (800c664 <mem_malloc+0x1dc>)
 800c5da:	f007 fad3 	bl	8013b84 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c5de:	8bba      	ldrh	r2, [r7, #28]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	4a20      	ldr	r2, [pc, #128]	@ (800c668 <mem_malloc+0x1e0>)
 800c5e8:	6812      	ldr	r2, [r2, #0]
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d906      	bls.n	800c5fc <mem_malloc+0x174>
 800c5ee:	4b1b      	ldr	r3, [pc, #108]	@ (800c65c <mem_malloc+0x1d4>)
 800c5f0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c5f4:	491e      	ldr	r1, [pc, #120]	@ (800c670 <mem_malloc+0x1e8>)
 800c5f6:	481b      	ldr	r0, [pc, #108]	@ (800c664 <mem_malloc+0x1dc>)
 800c5f8:	f007 fac4 	bl	8013b84 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d006      	beq.n	800c614 <mem_malloc+0x18c>
 800c606:	4b15      	ldr	r3, [pc, #84]	@ (800c65c <mem_malloc+0x1d4>)
 800c608:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c60c:	4919      	ldr	r1, [pc, #100]	@ (800c674 <mem_malloc+0x1ec>)
 800c60e:	4815      	ldr	r0, [pc, #84]	@ (800c664 <mem_malloc+0x1dc>)
 800c610:	f007 fab8 	bl	8013b84 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d006      	beq.n	800c62c <mem_malloc+0x1a4>
 800c61e:	4b0f      	ldr	r3, [pc, #60]	@ (800c65c <mem_malloc+0x1d4>)
 800c620:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c624:	4914      	ldr	r1, [pc, #80]	@ (800c678 <mem_malloc+0x1f0>)
 800c626:	480f      	ldr	r0, [pc, #60]	@ (800c664 <mem_malloc+0x1dc>)
 800c628:	f007 faac 	bl	8013b84 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	3308      	adds	r3, #8
 800c630:	e00e      	b.n	800c650 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c632:	8bfb      	ldrh	r3, [r7, #30]
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff fc87 	bl	800bf48 <ptr_to_mem>
 800c63a:	4603      	mov	r3, r0
 800c63c:	881b      	ldrh	r3, [r3, #0]
 800c63e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c640:	8bfa      	ldrh	r2, [r7, #30]
 800c642:	8bbb      	ldrh	r3, [r7, #28]
 800c644:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800c648:	429a      	cmp	r2, r3
 800c64a:	f4ff af44 	bcc.w	800c4d6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	24004d78 	.word	0x24004d78
 800c65c:	080156c0 	.word	0x080156c0
 800c660:	080158a4 	.word	0x080158a4
 800c664:	08015744 	.word	0x08015744
 800c668:	24004d74 	.word	0x24004d74
 800c66c:	080158b8 	.word	0x080158b8
 800c670:	080158d4 	.word	0x080158d4
 800c674:	08015904 	.word	0x08015904
 800c678:	08015934 	.word	0x08015934

0800c67c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	2200      	movs	r2, #0
 800c68a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	3303      	adds	r3, #3
 800c692:	f023 0303 	bic.w	r3, r3, #3
 800c696:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c698:	2300      	movs	r3, #0
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	e011      	b.n	800c6c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	885b      	ldrh	r3, [r3, #2]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	dbe7      	blt.n	800c69e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c6ce:	bf00      	nop
 800c6d0:	bf00      	nop
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	80fb      	strh	r3, [r7, #6]
 800c6e6:	e009      	b.n	800c6fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c6e8:	88fb      	ldrh	r3, [r7, #6]
 800c6ea:	4a08      	ldr	r2, [pc, #32]	@ (800c70c <memp_init+0x30>)
 800c6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7ff ffc3 	bl	800c67c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c6f6:	88fb      	ldrh	r3, [r7, #6]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	80fb      	strh	r3, [r7, #6]
 800c6fc:	88fb      	ldrh	r3, [r7, #6]
 800c6fe:	2b08      	cmp	r3, #8
 800c700:	d9f2      	bls.n	800c6e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c702:	bf00      	nop
 800c704:	bf00      	nop
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	08017c68 	.word	0x08017c68

0800c710 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d012      	beq.n	800c74c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	6812      	ldr	r2, [r2, #0]
 800c72e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f003 0303 	and.w	r3, r3, #3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d006      	beq.n	800c748 <do_memp_malloc_pool+0x38>
 800c73a:	4b07      	ldr	r3, [pc, #28]	@ (800c758 <do_memp_malloc_pool+0x48>)
 800c73c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c740:	4906      	ldr	r1, [pc, #24]	@ (800c75c <do_memp_malloc_pool+0x4c>)
 800c742:	4807      	ldr	r0, [pc, #28]	@ (800c760 <do_memp_malloc_pool+0x50>)
 800c744:	f007 fa1e 	bl	8013b84 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	e000      	b.n	800c74e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	08015958 	.word	0x08015958
 800c75c:	080159c4 	.word	0x080159c4
 800c760:	080159e8 	.word	0x080159e8

0800c764 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d106      	bne.n	800c780 <memp_malloc_pool+0x1c>
 800c772:	4b0a      	ldr	r3, [pc, #40]	@ (800c79c <memp_malloc_pool+0x38>)
 800c774:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c778:	4909      	ldr	r1, [pc, #36]	@ (800c7a0 <memp_malloc_pool+0x3c>)
 800c77a:	480a      	ldr	r0, [pc, #40]	@ (800c7a4 <memp_malloc_pool+0x40>)
 800c77c:	f007 fa02 	bl	8013b84 <iprintf>
  if (desc == NULL) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <memp_malloc_pool+0x26>
    return NULL;
 800c786:	2300      	movs	r3, #0
 800c788:	e003      	b.n	800c792 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7ff ffc0 	bl	800c710 <do_memp_malloc_pool>
 800c790:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	08015958 	.word	0x08015958
 800c7a0:	08015a10 	.word	0x08015a10
 800c7a4:	080159e8 	.word	0x080159e8

0800c7a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	d908      	bls.n	800c7ca <memp_malloc+0x22>
 800c7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c7e4 <memp_malloc+0x3c>)
 800c7ba:	f240 1257 	movw	r2, #343	@ 0x157
 800c7be:	490a      	ldr	r1, [pc, #40]	@ (800c7e8 <memp_malloc+0x40>)
 800c7c0:	480a      	ldr	r0, [pc, #40]	@ (800c7ec <memp_malloc+0x44>)
 800c7c2:	f007 f9df 	bl	8013b84 <iprintf>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e008      	b.n	800c7dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	4a08      	ldr	r2, [pc, #32]	@ (800c7f0 <memp_malloc+0x48>)
 800c7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff ff9c 	bl	800c710 <do_memp_malloc_pool>
 800c7d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c7da:	68fb      	ldr	r3, [r7, #12]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	08015958 	.word	0x08015958
 800c7e8:	08015a24 	.word	0x08015a24
 800c7ec:	080159e8 	.word	0x080159e8
 800c7f0:	08017c68 	.word	0x08017c68

0800c7f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	f003 0303 	and.w	r3, r3, #3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d006      	beq.n	800c816 <do_memp_free_pool+0x22>
 800c808:	4b0a      	ldr	r3, [pc, #40]	@ (800c834 <do_memp_free_pool+0x40>)
 800c80a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c80e:	490a      	ldr	r1, [pc, #40]	@ (800c838 <do_memp_free_pool+0x44>)
 800c810:	480a      	ldr	r0, [pc, #40]	@ (800c83c <do_memp_free_pool+0x48>)
 800c812:	f007 f9b7 	bl	8013b84 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c82c:	bf00      	nop
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	08015958 	.word	0x08015958
 800c838:	08015a44 	.word	0x08015a44
 800c83c:	080159e8 	.word	0x080159e8

0800c840 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d106      	bne.n	800c85e <memp_free_pool+0x1e>
 800c850:	4b0a      	ldr	r3, [pc, #40]	@ (800c87c <memp_free_pool+0x3c>)
 800c852:	f240 1295 	movw	r2, #405	@ 0x195
 800c856:	490a      	ldr	r1, [pc, #40]	@ (800c880 <memp_free_pool+0x40>)
 800c858:	480a      	ldr	r0, [pc, #40]	@ (800c884 <memp_free_pool+0x44>)
 800c85a:	f007 f993 	bl	8013b84 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d007      	beq.n	800c874 <memp_free_pool+0x34>
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d004      	beq.n	800c874 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff ffc1 	bl	800c7f4 <do_memp_free_pool>
 800c872:	e000      	b.n	800c876 <memp_free_pool+0x36>
    return;
 800c874:	bf00      	nop
}
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	08015958 	.word	0x08015958
 800c880:	08015a10 	.word	0x08015a10
 800c884:	080159e8 	.word	0x080159e8

0800c888 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	6039      	str	r1, [r7, #0]
 800c892:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c894:	79fb      	ldrb	r3, [r7, #7]
 800c896:	2b08      	cmp	r3, #8
 800c898:	d907      	bls.n	800c8aa <memp_free+0x22>
 800c89a:	4b0c      	ldr	r3, [pc, #48]	@ (800c8cc <memp_free+0x44>)
 800c89c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c8a0:	490b      	ldr	r1, [pc, #44]	@ (800c8d0 <memp_free+0x48>)
 800c8a2:	480c      	ldr	r0, [pc, #48]	@ (800c8d4 <memp_free+0x4c>)
 800c8a4:	f007 f96e 	bl	8013b84 <iprintf>
 800c8a8:	e00c      	b.n	800c8c4 <memp_free+0x3c>

  if (mem == NULL) {
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d008      	beq.n	800c8c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	4a09      	ldr	r2, [pc, #36]	@ (800c8d8 <memp_free+0x50>)
 800c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7ff ff9a 	bl	800c7f4 <do_memp_free_pool>
 800c8c0:	e000      	b.n	800c8c4 <memp_free+0x3c>
    return;
 800c8c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	08015958 	.word	0x08015958
 800c8d0:	08015a64 	.word	0x08015a64
 800c8d4:	080159e8 	.word	0x080159e8
 800c8d8:	08017c68 	.word	0x08017c68

0800c8dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c8e0:	bf00      	nop
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
	...

0800c8ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d108      	bne.n	800c912 <netif_add+0x26>
 800c900:	4b5b      	ldr	r3, [pc, #364]	@ (800ca70 <netif_add+0x184>)
 800c902:	f240 1227 	movw	r2, #295	@ 0x127
 800c906:	495b      	ldr	r1, [pc, #364]	@ (800ca74 <netif_add+0x188>)
 800c908:	485b      	ldr	r0, [pc, #364]	@ (800ca78 <netif_add+0x18c>)
 800c90a:	f007 f93b 	bl	8013b84 <iprintf>
 800c90e:	2300      	movs	r3, #0
 800c910:	e0a9      	b.n	800ca66 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c914:	2b00      	cmp	r3, #0
 800c916:	d108      	bne.n	800c92a <netif_add+0x3e>
 800c918:	4b55      	ldr	r3, [pc, #340]	@ (800ca70 <netif_add+0x184>)
 800c91a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c91e:	4957      	ldr	r1, [pc, #348]	@ (800ca7c <netif_add+0x190>)
 800c920:	4855      	ldr	r0, [pc, #340]	@ (800ca78 <netif_add+0x18c>)
 800c922:	f007 f92f 	bl	8013b84 <iprintf>
 800c926:	2300      	movs	r3, #0
 800c928:	e09d      	b.n	800ca66 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c930:	4b53      	ldr	r3, [pc, #332]	@ (800ca80 <netif_add+0x194>)
 800c932:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c93a:	4b51      	ldr	r3, [pc, #324]	@ (800ca80 <netif_add+0x194>)
 800c93c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d101      	bne.n	800c948 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c944:	4b4e      	ldr	r3, [pc, #312]	@ (800ca80 <netif_add+0x194>)
 800c946:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2200      	movs	r2, #0
 800c94c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4a49      	ldr	r2, [pc, #292]	@ (800ca84 <netif_add+0x198>)
 800c95e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3324      	adds	r3, #36	@ 0x24
 800c972:	2204      	movs	r2, #4
 800c974:	2100      	movs	r1, #0
 800c976:	4618      	mov	r0, r3
 800c978:	f007 fa5c 	bl	8013e34 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2200      	movs	r2, #0
 800c980:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6a3a      	ldr	r2, [r7, #32]
 800c986:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c988:	4b3f      	ldr	r3, [pc, #252]	@ (800ca88 <netif_add+0x19c>)
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c996:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	68b9      	ldr	r1, [r7, #8]
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f000 f914 	bl	800cbcc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	4798      	blx	r3
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d001      	beq.n	800c9b4 <netif_add+0xc8>
    return NULL;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	e058      	b.n	800ca66 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c9ba:	2bff      	cmp	r3, #255	@ 0xff
 800c9bc:	d103      	bne.n	800c9c6 <netif_add+0xda>
        netif->num = 0;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c9ca:	4b30      	ldr	r3, [pc, #192]	@ (800ca8c <netif_add+0x1a0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	617b      	str	r3, [r7, #20]
 800c9d0:	e02b      	b.n	800ca2a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d106      	bne.n	800c9e8 <netif_add+0xfc>
 800c9da:	4b25      	ldr	r3, [pc, #148]	@ (800ca70 <netif_add+0x184>)
 800c9dc:	f240 128b 	movw	r2, #395	@ 0x18b
 800c9e0:	492b      	ldr	r1, [pc, #172]	@ (800ca90 <netif_add+0x1a4>)
 800c9e2:	4825      	ldr	r0, [pc, #148]	@ (800ca78 <netif_add+0x18c>)
 800c9e4:	f007 f8ce 	bl	8013b84 <iprintf>
        num_netifs++;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	2bff      	cmp	r3, #255	@ 0xff
 800c9f2:	dd06      	ble.n	800ca02 <netif_add+0x116>
 800c9f4:	4b1e      	ldr	r3, [pc, #120]	@ (800ca70 <netif_add+0x184>)
 800c9f6:	f240 128d 	movw	r2, #397	@ 0x18d
 800c9fa:	4926      	ldr	r1, [pc, #152]	@ (800ca94 <netif_add+0x1a8>)
 800c9fc:	481e      	ldr	r0, [pc, #120]	@ (800ca78 <netif_add+0x18c>)
 800c9fe:	f007 f8c1 	bl	8013b84 <iprintf>
        if (netif2->num == netif->num) {
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d108      	bne.n	800ca24 <netif_add+0x138>
          netif->num++;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca18:	3301      	adds	r3, #1
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800ca22:	e005      	b.n	800ca30 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	617b      	str	r3, [r7, #20]
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1d0      	bne.n	800c9d2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1be      	bne.n	800c9b4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca3c:	2bfe      	cmp	r3, #254	@ 0xfe
 800ca3e:	d103      	bne.n	800ca48 <netif_add+0x15c>
    netif_num = 0;
 800ca40:	4b11      	ldr	r3, [pc, #68]	@ (800ca88 <netif_add+0x19c>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	701a      	strb	r2, [r3, #0]
 800ca46:	e006      	b.n	800ca56 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca4e:	3301      	adds	r3, #1
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	4b0d      	ldr	r3, [pc, #52]	@ (800ca88 <netif_add+0x19c>)
 800ca54:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ca56:	4b0d      	ldr	r3, [pc, #52]	@ (800ca8c <netif_add+0x1a0>)
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ca5e:	4a0b      	ldr	r2, [pc, #44]	@ (800ca8c <netif_add+0x1a0>)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ca64:	68fb      	ldr	r3, [r7, #12]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3718      	adds	r7, #24
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	08015a80 	.word	0x08015a80
 800ca74:	08015b4c 	.word	0x08015b4c
 800ca78:	08015b08 	.word	0x08015b08
 800ca7c:	08015b68 	.word	0x08015b68
 800ca80:	08017bf4 	.word	0x08017bf4
 800ca84:	0800ceaf 	.word	0x0800ceaf
 800ca88:	24007c90 	.word	0x24007c90
 800ca8c:	24007c88 	.word	0x24007c88
 800ca90:	08015b8c 	.word	0x08015b8c
 800ca94:	08015ba0 	.word	0x08015ba0

0800ca98 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f002 fb59 	bl	800f15c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f006 ff39 	bl	8013924 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cab2:	bf00      	nop
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d106      	bne.n	800cadc <netif_do_set_ipaddr+0x20>
 800cace:	4b1d      	ldr	r3, [pc, #116]	@ (800cb44 <netif_do_set_ipaddr+0x88>)
 800cad0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800cad4:	491c      	ldr	r1, [pc, #112]	@ (800cb48 <netif_do_set_ipaddr+0x8c>)
 800cad6:	481d      	ldr	r0, [pc, #116]	@ (800cb4c <netif_do_set_ipaddr+0x90>)
 800cad8:	f007 f854 	bl	8013b84 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <netif_do_set_ipaddr+0x34>
 800cae2:	4b18      	ldr	r3, [pc, #96]	@ (800cb44 <netif_do_set_ipaddr+0x88>)
 800cae4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800cae8:	4917      	ldr	r1, [pc, #92]	@ (800cb48 <netif_do_set_ipaddr+0x8c>)
 800caea:	4818      	ldr	r0, [pc, #96]	@ (800cb4c <netif_do_set_ipaddr+0x90>)
 800caec:	f007 f84a 	bl	8013b84 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	3304      	adds	r3, #4
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d01c      	beq.n	800cb38 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3304      	adds	r3, #4
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cb0e:	f107 0314 	add.w	r3, r7, #20
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7ff ffbf 	bl	800ca98 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <netif_do_set_ipaddr+0x6a>
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	e000      	b.n	800cb28 <netif_do_set_ipaddr+0x6c>
 800cb26:	2300      	movs	r3, #0
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cb2c:	2101      	movs	r1, #1
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f000 f8d2 	bl	800ccd8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cb34:	2301      	movs	r3, #1
 800cb36:	e000      	b.n	800cb3a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	08015a80 	.word	0x08015a80
 800cb48:	08015bd0 	.word	0x08015bd0
 800cb4c:	08015b08 	.word	0x08015b08

0800cb50 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3308      	adds	r3, #8
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d00a      	beq.n	800cb80 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <netif_do_set_netmask+0x26>
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	e000      	b.n	800cb78 <netif_do_set_netmask+0x28>
 800cb76:	2300      	movs	r3, #0
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e000      	b.n	800cb82 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b085      	sub	sp, #20
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	330c      	adds	r3, #12
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d00a      	beq.n	800cbbe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <netif_do_set_gw+0x26>
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	e000      	b.n	800cbb6 <netif_do_set_gw+0x28>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b088      	sub	sp, #32
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cbe8:	4b1c      	ldr	r3, [pc, #112]	@ (800cc5c <netif_set_addr+0x90>)
 800cbea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cbf2:	4b1a      	ldr	r3, [pc, #104]	@ (800cc5c <netif_set_addr+0x90>)
 800cbf4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cbfc:	4b17      	ldr	r3, [pc, #92]	@ (800cc5c <netif_set_addr+0x90>)
 800cbfe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d003      	beq.n	800cc0e <netif_set_addr+0x42>
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <netif_set_addr+0x46>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e000      	b.n	800cc14 <netif_set_addr+0x48>
 800cc12:	2300      	movs	r3, #0
 800cc14:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d006      	beq.n	800cc2a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cc1c:	f107 0310 	add.w	r3, r7, #16
 800cc20:	461a      	mov	r2, r3
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff ff49 	bl	800cabc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cc2a:	69fa      	ldr	r2, [r7, #28]
 800cc2c:	6879      	ldr	r1, [r7, #4]
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f7ff ff8e 	bl	800cb50 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cc34:	69ba      	ldr	r2, [r7, #24]
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f7ff ffa8 	bl	800cb8e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d106      	bne.n	800cc52 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cc44:	f107 0310 	add.w	r3, r7, #16
 800cc48:	461a      	mov	r2, r3
 800cc4a:	68b9      	ldr	r1, [r7, #8]
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7ff ff35 	bl	800cabc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cc52:	bf00      	nop
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	08017bf4 	.word	0x08017bf4

0800cc60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cc68:	4a04      	ldr	r2, [pc, #16]	@ (800cc7c <netif_set_default+0x1c>)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cc6e:	bf00      	nop
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	24007c8c 	.word	0x24007c8c

0800cc80 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d107      	bne.n	800cc9e <netif_set_up+0x1e>
 800cc8e:	4b0f      	ldr	r3, [pc, #60]	@ (800cccc <netif_set_up+0x4c>)
 800cc90:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800cc94:	490e      	ldr	r1, [pc, #56]	@ (800ccd0 <netif_set_up+0x50>)
 800cc96:	480f      	ldr	r0, [pc, #60]	@ (800ccd4 <netif_set_up+0x54>)
 800cc98:	f006 ff74 	bl	8013b84 <iprintf>
 800cc9c:	e013      	b.n	800ccc6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cca4:	f003 0301 	and.w	r3, r3, #1
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10c      	bne.n	800ccc6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ccb2:	f043 0301 	orr.w	r3, r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ccbe:	2103      	movs	r1, #3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f809 	bl	800ccd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	08015a80 	.word	0x08015a80
 800ccd0:	08015c40 	.word	0x08015c40
 800ccd4:	08015b08 	.word	0x08015b08

0800ccd8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d106      	bne.n	800ccf8 <netif_issue_reports+0x20>
 800ccea:	4b18      	ldr	r3, [pc, #96]	@ (800cd4c <netif_issue_reports+0x74>)
 800ccec:	f240 326d 	movw	r2, #877	@ 0x36d
 800ccf0:	4917      	ldr	r1, [pc, #92]	@ (800cd50 <netif_issue_reports+0x78>)
 800ccf2:	4818      	ldr	r0, [pc, #96]	@ (800cd54 <netif_issue_reports+0x7c>)
 800ccf4:	f006 ff46 	bl	8013b84 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ccfe:	f003 0304 	and.w	r3, r3, #4
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d01e      	beq.n	800cd44 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cd0c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d017      	beq.n	800cd44 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd14:	78fb      	ldrb	r3, [r7, #3]
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d013      	beq.n	800cd46 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3304      	adds	r3, #4
 800cd22:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00e      	beq.n	800cd46 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cd2e:	f003 0308 	and.w	r3, r3, #8
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d007      	beq.n	800cd46 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	3304      	adds	r3, #4
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7fd fc61 	bl	800a604 <etharp_request>
 800cd42:	e000      	b.n	800cd46 <netif_issue_reports+0x6e>
    return;
 800cd44:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	08015a80 	.word	0x08015a80
 800cd50:	08015c5c 	.word	0x08015c5c
 800cd54:	08015b08 	.word	0x08015b08

0800cd58 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d107      	bne.n	800cd76 <netif_set_down+0x1e>
 800cd66:	4b12      	ldr	r3, [pc, #72]	@ (800cdb0 <netif_set_down+0x58>)
 800cd68:	f240 329b 	movw	r2, #923	@ 0x39b
 800cd6c:	4911      	ldr	r1, [pc, #68]	@ (800cdb4 <netif_set_down+0x5c>)
 800cd6e:	4812      	ldr	r0, [pc, #72]	@ (800cdb8 <netif_set_down+0x60>)
 800cd70:	f006 ff08 	bl	8013b84 <iprintf>
 800cd74:	e019      	b.n	800cdaa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cd7c:	f003 0301 	and.w	r3, r3, #1
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d012      	beq.n	800cdaa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cd8a:	f023 0301 	bic.w	r3, r3, #1
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cd9c:	f003 0308 	and.w	r3, r3, #8
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d002      	beq.n	800cdaa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7fc ffe7 	bl	8009d78 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	08015a80 	.word	0x08015a80
 800cdb4:	08015c80 	.word	0x08015c80
 800cdb8:	08015b08 	.word	0x08015b08

0800cdbc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d107      	bne.n	800cdda <netif_set_link_up+0x1e>
 800cdca:	4b15      	ldr	r3, [pc, #84]	@ (800ce20 <netif_set_link_up+0x64>)
 800cdcc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800cdd0:	4914      	ldr	r1, [pc, #80]	@ (800ce24 <netif_set_link_up+0x68>)
 800cdd2:	4815      	ldr	r0, [pc, #84]	@ (800ce28 <netif_set_link_up+0x6c>)
 800cdd4:	f006 fed6 	bl	8013b84 <iprintf>
 800cdd8:	e01e      	b.n	800ce18 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cde0:	f003 0304 	and.w	r3, r3, #4
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d117      	bne.n	800ce18 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cdee:	f043 0304 	orr.w	r3, r3, #4
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7fb fa32 	bl	8008264 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ce00:	2103      	movs	r1, #3
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff ff68 	bl	800ccd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d003      	beq.n	800ce18 <netif_set_link_up+0x5c>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	69db      	ldr	r3, [r3, #28]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	08015a80 	.word	0x08015a80
 800ce24:	08015ca0 	.word	0x08015ca0
 800ce28:	08015b08 	.word	0x08015b08

0800ce2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d107      	bne.n	800ce4a <netif_set_link_down+0x1e>
 800ce3a:	4b11      	ldr	r3, [pc, #68]	@ (800ce80 <netif_set_link_down+0x54>)
 800ce3c:	f240 4206 	movw	r2, #1030	@ 0x406
 800ce40:	4910      	ldr	r1, [pc, #64]	@ (800ce84 <netif_set_link_down+0x58>)
 800ce42:	4811      	ldr	r0, [pc, #68]	@ (800ce88 <netif_set_link_down+0x5c>)
 800ce44:	f006 fe9e 	bl	8013b84 <iprintf>
 800ce48:	e017      	b.n	800ce7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ce50:	f003 0304 	and.w	r3, r3, #4
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d010      	beq.n	800ce7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ce5e:	f023 0304 	bic.w	r3, r3, #4
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	69db      	ldr	r3, [r3, #28]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d003      	beq.n	800ce7a <netif_set_link_down+0x4e>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	69db      	ldr	r3, [r3, #28]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	08015a80 	.word	0x08015a80
 800ce84:	08015cc4 	.word	0x08015cc4
 800ce88:	08015b08 	.word	0x08015b08

0800ce8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	61da      	str	r2, [r3, #28]
  }
}
 800cea2:	bf00      	nop
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ceae:	b480      	push	{r7}
 800ceb0:	b085      	sub	sp, #20
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	60f8      	str	r0, [r7, #12]
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ceba:	f06f 030b 	mvn.w	r3, #11
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
	...

0800cecc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ced6:	79fb      	ldrb	r3, [r7, #7]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d013      	beq.n	800cf04 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cedc:	4b0d      	ldr	r3, [pc, #52]	@ (800cf14 <netif_get_by_index+0x48>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	e00c      	b.n	800cefe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ceea:	3301      	adds	r3, #1
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	79fa      	ldrb	r2, [r7, #7]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d101      	bne.n	800cef8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	e006      	b.n	800cf06 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	60fb      	str	r3, [r7, #12]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1ef      	bne.n	800cee4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	24007c88 	.word	0x24007c88

0800cf18 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cf1e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf50 <pbuf_free_ooseq+0x38>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cf24:	4b0b      	ldr	r3, [pc, #44]	@ (800cf54 <pbuf_free_ooseq+0x3c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	607b      	str	r3, [r7, #4]
 800cf2a:	e00a      	b.n	800cf42 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d003      	beq.n	800cf3c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f002 f94f 	bl	800f1d8 <tcp_free_ooseq>
      return;
 800cf3a:	e005      	b.n	800cf48 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	607b      	str	r3, [r7, #4]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1f1      	bne.n	800cf2c <pbuf_free_ooseq+0x14>
    }
  }
}
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	24007c91 	.word	0x24007c91
 800cf54:	24007ca0 	.word	0x24007ca0

0800cf58 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800cf5c:	4b03      	ldr	r3, [pc, #12]	@ (800cf6c <pbuf_pool_is_empty+0x14>)
 800cf5e:	2201      	movs	r2, #1
 800cf60:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cf62:	bf00      	nop
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	24007c91 	.word	0x24007c91

0800cf70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	460b      	mov	r3, r1
 800cf80:	80fb      	strh	r3, [r7, #6]
 800cf82:	4613      	mov	r3, r2
 800cf84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	88fa      	ldrh	r2, [r7, #6]
 800cf96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	88ba      	ldrh	r2, [r7, #4]
 800cf9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cf9e:	8b3b      	ldrh	r3, [r7, #24]
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	7f3a      	ldrb	r2, [r7, #28]
 800cfaa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	73da      	strb	r2, [r3, #15]
}
 800cfb8:	bf00      	nop
 800cfba:	3714      	adds	r7, #20
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08c      	sub	sp, #48	@ 0x30
 800cfc8:	af02      	add	r7, sp, #8
 800cfca:	4603      	mov	r3, r0
 800cfcc:	71fb      	strb	r3, [r7, #7]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	80bb      	strh	r3, [r7, #4]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cfda:	887b      	ldrh	r3, [r7, #2]
 800cfdc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cfe0:	d07f      	beq.n	800d0e2 <pbuf_alloc+0x11e>
 800cfe2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cfe6:	f300 80c8 	bgt.w	800d17a <pbuf_alloc+0x1b6>
 800cfea:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cfee:	d010      	beq.n	800d012 <pbuf_alloc+0x4e>
 800cff0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cff4:	f300 80c1 	bgt.w	800d17a <pbuf_alloc+0x1b6>
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d002      	beq.n	800d002 <pbuf_alloc+0x3e>
 800cffc:	2b41      	cmp	r3, #65	@ 0x41
 800cffe:	f040 80bc 	bne.w	800d17a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d002:	887a      	ldrh	r2, [r7, #2]
 800d004:	88bb      	ldrh	r3, [r7, #4]
 800d006:	4619      	mov	r1, r3
 800d008:	2000      	movs	r0, #0
 800d00a:	f000 f8d1 	bl	800d1b0 <pbuf_alloc_reference>
 800d00e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d010:	e0bd      	b.n	800d18e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d012:	2300      	movs	r3, #0
 800d014:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d016:	2300      	movs	r3, #0
 800d018:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d01a:	88bb      	ldrh	r3, [r7, #4]
 800d01c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d01e:	2008      	movs	r0, #8
 800d020:	f7ff fbc2 	bl	800c7a8 <memp_malloc>
 800d024:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d109      	bne.n	800d040 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d02c:	f7ff ff94 	bl	800cf58 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <pbuf_alloc+0x78>
            pbuf_free(p);
 800d036:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d038:	f000 faa8 	bl	800d58c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d03c:	2300      	movs	r3, #0
 800d03e:	e0a7      	b.n	800d190 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d040:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d042:	3303      	adds	r3, #3
 800d044:	b29b      	uxth	r3, r3
 800d046:	f023 0303 	bic.w	r3, r3, #3
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d050:	b29b      	uxth	r3, r3
 800d052:	8b7a      	ldrh	r2, [r7, #26]
 800d054:	4293      	cmp	r3, r2
 800d056:	bf28      	it	cs
 800d058:	4613      	movcs	r3, r2
 800d05a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d05c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d05e:	3310      	adds	r3, #16
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	4413      	add	r3, r2
 800d064:	3303      	adds	r3, #3
 800d066:	f023 0303 	bic.w	r3, r3, #3
 800d06a:	4618      	mov	r0, r3
 800d06c:	89f9      	ldrh	r1, [r7, #14]
 800d06e:	8b7a      	ldrh	r2, [r7, #26]
 800d070:	2300      	movs	r3, #0
 800d072:	9301      	str	r3, [sp, #4]
 800d074:	887b      	ldrh	r3, [r7, #2]
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	460b      	mov	r3, r1
 800d07a:	4601      	mov	r1, r0
 800d07c:	6938      	ldr	r0, [r7, #16]
 800d07e:	f7ff ff77 	bl	800cf70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	f003 0303 	and.w	r3, r3, #3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d006      	beq.n	800d09c <pbuf_alloc+0xd8>
 800d08e:	4b42      	ldr	r3, [pc, #264]	@ (800d198 <pbuf_alloc+0x1d4>)
 800d090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d094:	4941      	ldr	r1, [pc, #260]	@ (800d19c <pbuf_alloc+0x1d8>)
 800d096:	4842      	ldr	r0, [pc, #264]	@ (800d1a0 <pbuf_alloc+0x1dc>)
 800d098:	f006 fd74 	bl	8013b84 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d09c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d09e:	3303      	adds	r3, #3
 800d0a0:	f023 0303 	bic.w	r3, r3, #3
 800d0a4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d0a8:	d106      	bne.n	800d0b8 <pbuf_alloc+0xf4>
 800d0aa:	4b3b      	ldr	r3, [pc, #236]	@ (800d198 <pbuf_alloc+0x1d4>)
 800d0ac:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d0b0:	493c      	ldr	r1, [pc, #240]	@ (800d1a4 <pbuf_alloc+0x1e0>)
 800d0b2:	483b      	ldr	r0, [pc, #236]	@ (800d1a0 <pbuf_alloc+0x1dc>)
 800d0b4:	f006 fd66 	bl	8013b84 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d102      	bne.n	800d0c4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0c2:	e002      	b.n	800d0ca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d0ce:	8b7a      	ldrh	r2, [r7, #26]
 800d0d0:	89fb      	ldrh	r3, [r7, #14]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d0da:	8b7b      	ldrh	r3, [r7, #26]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d19e      	bne.n	800d01e <pbuf_alloc+0x5a>
      break;
 800d0e0:	e055      	b.n	800d18e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d0e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d0e4:	3303      	adds	r3, #3
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	f023 0303 	bic.w	r3, r3, #3
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	88bb      	ldrh	r3, [r7, #4]
 800d0f0:	3303      	adds	r3, #3
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	f023 0303 	bic.w	r3, r3, #3
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	4413      	add	r3, r2
 800d0fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d0fe:	8b3b      	ldrh	r3, [r7, #24]
 800d100:	3310      	adds	r3, #16
 800d102:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d104:	8b3a      	ldrh	r2, [r7, #24]
 800d106:	88bb      	ldrh	r3, [r7, #4]
 800d108:	3303      	adds	r3, #3
 800d10a:	f023 0303 	bic.w	r3, r3, #3
 800d10e:	429a      	cmp	r2, r3
 800d110:	d306      	bcc.n	800d120 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d112:	8afa      	ldrh	r2, [r7, #22]
 800d114:	88bb      	ldrh	r3, [r7, #4]
 800d116:	3303      	adds	r3, #3
 800d118:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d201      	bcs.n	800d124 <pbuf_alloc+0x160>
        return NULL;
 800d120:	2300      	movs	r3, #0
 800d122:	e035      	b.n	800d190 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d124:	8afb      	ldrh	r3, [r7, #22]
 800d126:	4618      	mov	r0, r3
 800d128:	f7ff f9ae 	bl	800c488 <mem_malloc>
 800d12c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <pbuf_alloc+0x174>
        return NULL;
 800d134:	2300      	movs	r3, #0
 800d136:	e02b      	b.n	800d190 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d138:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d13a:	3310      	adds	r3, #16
 800d13c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d13e:	4413      	add	r3, r2
 800d140:	3303      	adds	r3, #3
 800d142:	f023 0303 	bic.w	r3, r3, #3
 800d146:	4618      	mov	r0, r3
 800d148:	88b9      	ldrh	r1, [r7, #4]
 800d14a:	88ba      	ldrh	r2, [r7, #4]
 800d14c:	2300      	movs	r3, #0
 800d14e:	9301      	str	r3, [sp, #4]
 800d150:	887b      	ldrh	r3, [r7, #2]
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	460b      	mov	r3, r1
 800d156:	4601      	mov	r1, r0
 800d158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d15a:	f7ff ff09 	bl	800cf70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	f003 0303 	and.w	r3, r3, #3
 800d166:	2b00      	cmp	r3, #0
 800d168:	d010      	beq.n	800d18c <pbuf_alloc+0x1c8>
 800d16a:	4b0b      	ldr	r3, [pc, #44]	@ (800d198 <pbuf_alloc+0x1d4>)
 800d16c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d170:	490d      	ldr	r1, [pc, #52]	@ (800d1a8 <pbuf_alloc+0x1e4>)
 800d172:	480b      	ldr	r0, [pc, #44]	@ (800d1a0 <pbuf_alloc+0x1dc>)
 800d174:	f006 fd06 	bl	8013b84 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d178:	e008      	b.n	800d18c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d17a:	4b07      	ldr	r3, [pc, #28]	@ (800d198 <pbuf_alloc+0x1d4>)
 800d17c:	f240 1227 	movw	r2, #295	@ 0x127
 800d180:	490a      	ldr	r1, [pc, #40]	@ (800d1ac <pbuf_alloc+0x1e8>)
 800d182:	4807      	ldr	r0, [pc, #28]	@ (800d1a0 <pbuf_alloc+0x1dc>)
 800d184:	f006 fcfe 	bl	8013b84 <iprintf>
      return NULL;
 800d188:	2300      	movs	r3, #0
 800d18a:	e001      	b.n	800d190 <pbuf_alloc+0x1cc>
      break;
 800d18c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d190:	4618      	mov	r0, r3
 800d192:	3728      	adds	r7, #40	@ 0x28
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	08015ce8 	.word	0x08015ce8
 800d19c:	08015d54 	.word	0x08015d54
 800d1a0:	08015d84 	.word	0x08015d84
 800d1a4:	08015dac 	.word	0x08015dac
 800d1a8:	08015de0 	.word	0x08015de0
 800d1ac:	08015e0c 	.word	0x08015e0c

0800d1b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	807b      	strh	r3, [r7, #2]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d1c0:	883b      	ldrh	r3, [r7, #0]
 800d1c2:	2b41      	cmp	r3, #65	@ 0x41
 800d1c4:	d009      	beq.n	800d1da <pbuf_alloc_reference+0x2a>
 800d1c6:	883b      	ldrh	r3, [r7, #0]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d006      	beq.n	800d1da <pbuf_alloc_reference+0x2a>
 800d1cc:	4b0f      	ldr	r3, [pc, #60]	@ (800d20c <pbuf_alloc_reference+0x5c>)
 800d1ce:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d1d2:	490f      	ldr	r1, [pc, #60]	@ (800d210 <pbuf_alloc_reference+0x60>)
 800d1d4:	480f      	ldr	r0, [pc, #60]	@ (800d214 <pbuf_alloc_reference+0x64>)
 800d1d6:	f006 fcd5 	bl	8013b84 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d1da:	2007      	movs	r0, #7
 800d1dc:	f7ff fae4 	bl	800c7a8 <memp_malloc>
 800d1e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e00b      	b.n	800d204 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d1ec:	8879      	ldrh	r1, [r7, #2]
 800d1ee:	887a      	ldrh	r2, [r7, #2]
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	9301      	str	r3, [sp, #4]
 800d1f4:	883b      	ldrh	r3, [r7, #0]
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	6879      	ldr	r1, [r7, #4]
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f7ff feb7 	bl	800cf70 <pbuf_init_alloced_pbuf>
  return p;
 800d202:	68fb      	ldr	r3, [r7, #12]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3710      	adds	r7, #16
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	08015ce8 	.word	0x08015ce8
 800d210:	08015e28 	.word	0x08015e28
 800d214:	08015d84 	.word	0x08015d84

0800d218 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b088      	sub	sp, #32
 800d21c:	af02      	add	r7, sp, #8
 800d21e:	607b      	str	r3, [r7, #4]
 800d220:	4603      	mov	r3, r0
 800d222:	73fb      	strb	r3, [r7, #15]
 800d224:	460b      	mov	r3, r1
 800d226:	81bb      	strh	r3, [r7, #12]
 800d228:	4613      	mov	r3, r2
 800d22a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d230:	8a7b      	ldrh	r3, [r7, #18]
 800d232:	3303      	adds	r3, #3
 800d234:	f023 0203 	bic.w	r2, r3, #3
 800d238:	89bb      	ldrh	r3, [r7, #12]
 800d23a:	441a      	add	r2, r3
 800d23c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d23e:	429a      	cmp	r2, r3
 800d240:	d901      	bls.n	800d246 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d242:	2300      	movs	r3, #0
 800d244:	e018      	b.n	800d278 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d246:	6a3b      	ldr	r3, [r7, #32]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d007      	beq.n	800d25c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d24c:	8a7b      	ldrh	r3, [r7, #18]
 800d24e:	3303      	adds	r3, #3
 800d250:	f023 0303 	bic.w	r3, r3, #3
 800d254:	6a3a      	ldr	r2, [r7, #32]
 800d256:	4413      	add	r3, r2
 800d258:	617b      	str	r3, [r7, #20]
 800d25a:	e001      	b.n	800d260 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d25c:	2300      	movs	r3, #0
 800d25e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	89b9      	ldrh	r1, [r7, #12]
 800d264:	89ba      	ldrh	r2, [r7, #12]
 800d266:	2302      	movs	r3, #2
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	897b      	ldrh	r3, [r7, #10]
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	460b      	mov	r3, r1
 800d270:	6979      	ldr	r1, [r7, #20]
 800d272:	f7ff fe7d 	bl	800cf70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d276:	687b      	ldr	r3, [r7, #4]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	460b      	mov	r3, r1
 800d28a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d106      	bne.n	800d2a0 <pbuf_realloc+0x20>
 800d292:	4b3a      	ldr	r3, [pc, #232]	@ (800d37c <pbuf_realloc+0xfc>)
 800d294:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d298:	4939      	ldr	r1, [pc, #228]	@ (800d380 <pbuf_realloc+0x100>)
 800d29a:	483a      	ldr	r0, [pc, #232]	@ (800d384 <pbuf_realloc+0x104>)
 800d29c:	f006 fc72 	bl	8013b84 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	891b      	ldrh	r3, [r3, #8]
 800d2a4:	887a      	ldrh	r2, [r7, #2]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d263      	bcs.n	800d372 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	891a      	ldrh	r2, [r3, #8]
 800d2ae:	887b      	ldrh	r3, [r7, #2]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d2b4:	887b      	ldrh	r3, [r7, #2]
 800d2b6:	817b      	strh	r3, [r7, #10]
  q = p;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d2bc:	e018      	b.n	800d2f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	895b      	ldrh	r3, [r3, #10]
 800d2c2:	897a      	ldrh	r2, [r7, #10]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	891a      	ldrh	r2, [r3, #8]
 800d2cc:	893b      	ldrh	r3, [r7, #8]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d106      	bne.n	800d2f0 <pbuf_realloc+0x70>
 800d2e2:	4b26      	ldr	r3, [pc, #152]	@ (800d37c <pbuf_realloc+0xfc>)
 800d2e4:	f240 12af 	movw	r2, #431	@ 0x1af
 800d2e8:	4927      	ldr	r1, [pc, #156]	@ (800d388 <pbuf_realloc+0x108>)
 800d2ea:	4826      	ldr	r0, [pc, #152]	@ (800d384 <pbuf_realloc+0x104>)
 800d2ec:	f006 fc4a 	bl	8013b84 <iprintf>
  while (rem_len > q->len) {
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	895b      	ldrh	r3, [r3, #10]
 800d2f4:	897a      	ldrh	r2, [r7, #10]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d8e1      	bhi.n	800d2be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	7b1b      	ldrb	r3, [r3, #12]
 800d2fe:	f003 030f 	and.w	r3, r3, #15
 800d302:	2b00      	cmp	r3, #0
 800d304:	d121      	bne.n	800d34a <pbuf_realloc+0xca>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	895b      	ldrh	r3, [r3, #10]
 800d30a:	897a      	ldrh	r2, [r7, #10]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d01c      	beq.n	800d34a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	7b5b      	ldrb	r3, [r3, #13]
 800d314:	f003 0302 	and.w	r3, r3, #2
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d116      	bne.n	800d34a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	b29a      	uxth	r2, r3
 800d326:	897b      	ldrh	r3, [r7, #10]
 800d328:	4413      	add	r3, r2
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	4619      	mov	r1, r3
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f7fe ffae 	bl	800c290 <mem_trim>
 800d334:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <pbuf_realloc+0xca>
 800d33c:	4b0f      	ldr	r3, [pc, #60]	@ (800d37c <pbuf_realloc+0xfc>)
 800d33e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d342:	4912      	ldr	r1, [pc, #72]	@ (800d38c <pbuf_realloc+0x10c>)
 800d344:	480f      	ldr	r0, [pc, #60]	@ (800d384 <pbuf_realloc+0x104>)
 800d346:	f006 fc1d 	bl	8013b84 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	897a      	ldrh	r2, [r7, #10]
 800d34e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	895a      	ldrh	r2, [r3, #10]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d004      	beq.n	800d36a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4618      	mov	r0, r3
 800d366:	f000 f911 	bl	800d58c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2200      	movs	r2, #0
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	e000      	b.n	800d374 <pbuf_realloc+0xf4>
    return;
 800d372:	bf00      	nop

}
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	08015ce8 	.word	0x08015ce8
 800d380:	08015e3c 	.word	0x08015e3c
 800d384:	08015d84 	.word	0x08015d84
 800d388:	08015e54 	.word	0x08015e54
 800d38c:	08015e6c 	.word	0x08015e6c

0800d390 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	4613      	mov	r3, r2
 800d39c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d106      	bne.n	800d3b2 <pbuf_add_header_impl+0x22>
 800d3a4:	4b2b      	ldr	r3, [pc, #172]	@ (800d454 <pbuf_add_header_impl+0xc4>)
 800d3a6:	f240 12df 	movw	r2, #479	@ 0x1df
 800d3aa:	492b      	ldr	r1, [pc, #172]	@ (800d458 <pbuf_add_header_impl+0xc8>)
 800d3ac:	482b      	ldr	r0, [pc, #172]	@ (800d45c <pbuf_add_header_impl+0xcc>)
 800d3ae:	f006 fbe9 	bl	8013b84 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d003      	beq.n	800d3c0 <pbuf_add_header_impl+0x30>
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3be:	d301      	bcc.n	800d3c4 <pbuf_add_header_impl+0x34>
    return 1;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e043      	b.n	800d44c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d101      	bne.n	800d3ce <pbuf_add_header_impl+0x3e>
    return 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	e03e      	b.n	800d44c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	891a      	ldrh	r2, [r3, #8]
 800d3d6:	8a7b      	ldrh	r3, [r7, #18]
 800d3d8:	4413      	add	r3, r2
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	8a7a      	ldrh	r2, [r7, #18]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d901      	bls.n	800d3e6 <pbuf_add_header_impl+0x56>
    return 1;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e032      	b.n	800d44c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	7b1b      	ldrb	r3, [r3, #12]
 800d3ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d3ec:	8a3b      	ldrh	r3, [r7, #16]
 800d3ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00c      	beq.n	800d410 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	425b      	negs	r3, r3
 800d3fe:	4413      	add	r3, r2
 800d400:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	3310      	adds	r3, #16
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d20d      	bcs.n	800d428 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d40c:	2301      	movs	r3, #1
 800d40e:	e01d      	b.n	800d44c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d410:	79fb      	ldrb	r3, [r7, #7]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d006      	beq.n	800d424 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	425b      	negs	r3, r3
 800d41e:	4413      	add	r3, r2
 800d420:	617b      	str	r3, [r7, #20]
 800d422:	e001      	b.n	800d428 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d424:	2301      	movs	r3, #1
 800d426:	e011      	b.n	800d44c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	697a      	ldr	r2, [r7, #20]
 800d42c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	895a      	ldrh	r2, [r3, #10]
 800d432:	8a7b      	ldrh	r3, [r7, #18]
 800d434:	4413      	add	r3, r2
 800d436:	b29a      	uxth	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	891a      	ldrh	r2, [r3, #8]
 800d440:	8a7b      	ldrh	r3, [r7, #18]
 800d442:	4413      	add	r3, r2
 800d444:	b29a      	uxth	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	811a      	strh	r2, [r3, #8]


  return 0;
 800d44a:	2300      	movs	r3, #0
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3718      	adds	r7, #24
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	08015ce8 	.word	0x08015ce8
 800d458:	08015e88 	.word	0x08015e88
 800d45c:	08015d84 	.word	0x08015d84

0800d460 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d46a:	2200      	movs	r2, #0
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7ff ff8e 	bl	800d390 <pbuf_add_header_impl>
 800d474:	4603      	mov	r3, r0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d106      	bne.n	800d49e <pbuf_remove_header+0x1e>
 800d490:	4b20      	ldr	r3, [pc, #128]	@ (800d514 <pbuf_remove_header+0x94>)
 800d492:	f240 224b 	movw	r2, #587	@ 0x24b
 800d496:	4920      	ldr	r1, [pc, #128]	@ (800d518 <pbuf_remove_header+0x98>)
 800d498:	4820      	ldr	r0, [pc, #128]	@ (800d51c <pbuf_remove_header+0x9c>)
 800d49a:	f006 fb73 	bl	8013b84 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d003      	beq.n	800d4ac <pbuf_remove_header+0x2c>
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4aa:	d301      	bcc.n	800d4b0 <pbuf_remove_header+0x30>
    return 1;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e02c      	b.n	800d50a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <pbuf_remove_header+0x3a>
    return 0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	e027      	b.n	800d50a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	895b      	ldrh	r3, [r3, #10]
 800d4c2:	89fa      	ldrh	r2, [r7, #14]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d908      	bls.n	800d4da <pbuf_remove_header+0x5a>
 800d4c8:	4b12      	ldr	r3, [pc, #72]	@ (800d514 <pbuf_remove_header+0x94>)
 800d4ca:	f240 2255 	movw	r2, #597	@ 0x255
 800d4ce:	4914      	ldr	r1, [pc, #80]	@ (800d520 <pbuf_remove_header+0xa0>)
 800d4d0:	4812      	ldr	r0, [pc, #72]	@ (800d51c <pbuf_remove_header+0x9c>)
 800d4d2:	f006 fb57 	bl	8013b84 <iprintf>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e017      	b.n	800d50a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	441a      	add	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	895a      	ldrh	r2, [r3, #10]
 800d4f0:	89fb      	ldrh	r3, [r7, #14]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	891a      	ldrh	r2, [r3, #8]
 800d4fe:	89fb      	ldrh	r3, [r7, #14]
 800d500:	1ad3      	subs	r3, r2, r3
 800d502:	b29a      	uxth	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	08015ce8 	.word	0x08015ce8
 800d518:	08015e88 	.word	0x08015e88
 800d51c:	08015d84 	.word	0x08015d84
 800d520:	08015e94 	.word	0x08015e94

0800d524 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	807b      	strh	r3, [r7, #2]
 800d530:	4613      	mov	r3, r2
 800d532:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	da08      	bge.n	800d54e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d53c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d540:	425b      	negs	r3, r3
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff ff9b 	bl	800d480 <pbuf_remove_header>
 800d54a:	4603      	mov	r3, r0
 800d54c:	e007      	b.n	800d55e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d54e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d552:	787a      	ldrb	r2, [r7, #1]
 800d554:	4619      	mov	r1, r3
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7ff ff1a 	bl	800d390 <pbuf_add_header_impl>
 800d55c:	4603      	mov	r3, r0
  }
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3708      	adds	r7, #8
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b082      	sub	sp, #8
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	460b      	mov	r3, r1
 800d570:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d572:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d576:	2201      	movs	r2, #1
 800d578:	4619      	mov	r1, r3
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7ff ffd2 	bl	800d524 <pbuf_header_impl>
 800d580:	4603      	mov	r3, r0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3708      	adds	r7, #8
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
	...

0800d58c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10b      	bne.n	800d5b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d106      	bne.n	800d5ae <pbuf_free+0x22>
 800d5a0:	4b38      	ldr	r3, [pc, #224]	@ (800d684 <pbuf_free+0xf8>)
 800d5a2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d5a6:	4938      	ldr	r1, [pc, #224]	@ (800d688 <pbuf_free+0xfc>)
 800d5a8:	4838      	ldr	r0, [pc, #224]	@ (800d68c <pbuf_free+0x100>)
 800d5aa:	f006 faeb 	bl	8013b84 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e063      	b.n	800d67a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d5b6:	e05c      	b.n	800d672 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7b9b      	ldrb	r3, [r3, #14]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <pbuf_free+0x42>
 800d5c0:	4b30      	ldr	r3, [pc, #192]	@ (800d684 <pbuf_free+0xf8>)
 800d5c2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d5c6:	4932      	ldr	r1, [pc, #200]	@ (800d690 <pbuf_free+0x104>)
 800d5c8:	4830      	ldr	r0, [pc, #192]	@ (800d68c <pbuf_free+0x100>)
 800d5ca:	f006 fadb 	bl	8013b84 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	7b9b      	ldrb	r3, [r3, #14]
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	739a      	strb	r2, [r3, #14]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	7b9b      	ldrb	r3, [r3, #14]
 800d5de:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d5e0:	7dbb      	ldrb	r3, [r7, #22]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d143      	bne.n	800d66e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	7b1b      	ldrb	r3, [r3, #12]
 800d5f0:	f003 030f 	and.w	r3, r3, #15
 800d5f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	7b5b      	ldrb	r3, [r3, #13]
 800d5fa:	f003 0302 	and.w	r3, r3, #2
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d011      	beq.n	800d626 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d106      	bne.n	800d61c <pbuf_free+0x90>
 800d60e:	4b1d      	ldr	r3, [pc, #116]	@ (800d684 <pbuf_free+0xf8>)
 800d610:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d614:	491f      	ldr	r1, [pc, #124]	@ (800d694 <pbuf_free+0x108>)
 800d616:	481d      	ldr	r0, [pc, #116]	@ (800d68c <pbuf_free+0x100>)
 800d618:	f006 fab4 	bl	8013b84 <iprintf>
        pc->custom_free_function(p);
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	4798      	blx	r3
 800d624:	e01d      	b.n	800d662 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d104      	bne.n	800d636 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	2008      	movs	r0, #8
 800d630:	f7ff f92a 	bl	800c888 <memp_free>
 800d634:	e015      	b.n	800d662 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d104      	bne.n	800d646 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d63c:	6879      	ldr	r1, [r7, #4]
 800d63e:	2007      	movs	r0, #7
 800d640:	f7ff f922 	bl	800c888 <memp_free>
 800d644:	e00d      	b.n	800d662 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d103      	bne.n	800d654 <pbuf_free+0xc8>
          mem_free(p);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7fe fdb5 	bl	800c1bc <mem_free>
 800d652:	e006      	b.n	800d662 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d654:	4b0b      	ldr	r3, [pc, #44]	@ (800d684 <pbuf_free+0xf8>)
 800d656:	f240 320f 	movw	r2, #783	@ 0x30f
 800d65a:	490f      	ldr	r1, [pc, #60]	@ (800d698 <pbuf_free+0x10c>)
 800d65c:	480b      	ldr	r0, [pc, #44]	@ (800d68c <pbuf_free+0x100>)
 800d65e:	f006 fa91 	bl	8013b84 <iprintf>
        }
      }
      count++;
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	3301      	adds	r3, #1
 800d666:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	607b      	str	r3, [r7, #4]
 800d66c:	e001      	b.n	800d672 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d66e:	2300      	movs	r3, #0
 800d670:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d19f      	bne.n	800d5b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d678:	7dfb      	ldrb	r3, [r7, #23]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	08015ce8 	.word	0x08015ce8
 800d688:	08015e88 	.word	0x08015e88
 800d68c:	08015d84 	.word	0x08015d84
 800d690:	08015eb4 	.word	0x08015eb4
 800d694:	08015ecc 	.word	0x08015ecc
 800d698:	08015ef0 	.word	0x08015ef0

0800d69c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b085      	sub	sp, #20
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d6a8:	e005      	b.n	800d6b6 <pbuf_clen+0x1a>
    ++len;
 800d6aa:	89fb      	ldrh	r3, [r7, #14]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1f6      	bne.n	800d6aa <pbuf_clen+0xe>
  }
  return len;
 800d6bc:	89fb      	ldrh	r3, [r7, #14]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3714      	adds	r7, #20
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
	...

0800d6cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d010      	beq.n	800d6fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7b9b      	ldrb	r3, [r3, #14]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	7b9b      	ldrb	r3, [r3, #14]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d106      	bne.n	800d6fc <pbuf_ref+0x30>
 800d6ee:	4b05      	ldr	r3, [pc, #20]	@ (800d704 <pbuf_ref+0x38>)
 800d6f0:	f240 3242 	movw	r2, #834	@ 0x342
 800d6f4:	4904      	ldr	r1, [pc, #16]	@ (800d708 <pbuf_ref+0x3c>)
 800d6f6:	4805      	ldr	r0, [pc, #20]	@ (800d70c <pbuf_ref+0x40>)
 800d6f8:	f006 fa44 	bl	8013b84 <iprintf>
  }
}
 800d6fc:	bf00      	nop
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	08015ce8 	.word	0x08015ce8
 800d708:	08015f04 	.word	0x08015f04
 800d70c:	08015d84 	.word	0x08015d84

0800d710 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <pbuf_cat+0x16>
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d107      	bne.n	800d736 <pbuf_cat+0x26>
 800d726:	4b20      	ldr	r3, [pc, #128]	@ (800d7a8 <pbuf_cat+0x98>)
 800d728:	f240 3259 	movw	r2, #857	@ 0x359
 800d72c:	491f      	ldr	r1, [pc, #124]	@ (800d7ac <pbuf_cat+0x9c>)
 800d72e:	4820      	ldr	r0, [pc, #128]	@ (800d7b0 <pbuf_cat+0xa0>)
 800d730:	f006 fa28 	bl	8013b84 <iprintf>
 800d734:	e034      	b.n	800d7a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	60fb      	str	r3, [r7, #12]
 800d73a:	e00a      	b.n	800d752 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	891a      	ldrh	r2, [r3, #8]
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	891b      	ldrh	r3, [r3, #8]
 800d744:	4413      	add	r3, r2
 800d746:	b29a      	uxth	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1f0      	bne.n	800d73c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	891a      	ldrh	r2, [r3, #8]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	895b      	ldrh	r3, [r3, #10]
 800d762:	429a      	cmp	r2, r3
 800d764:	d006      	beq.n	800d774 <pbuf_cat+0x64>
 800d766:	4b10      	ldr	r3, [pc, #64]	@ (800d7a8 <pbuf_cat+0x98>)
 800d768:	f240 3262 	movw	r2, #866	@ 0x362
 800d76c:	4911      	ldr	r1, [pc, #68]	@ (800d7b4 <pbuf_cat+0xa4>)
 800d76e:	4810      	ldr	r0, [pc, #64]	@ (800d7b0 <pbuf_cat+0xa0>)
 800d770:	f006 fa08 	bl	8013b84 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d006      	beq.n	800d78a <pbuf_cat+0x7a>
 800d77c:	4b0a      	ldr	r3, [pc, #40]	@ (800d7a8 <pbuf_cat+0x98>)
 800d77e:	f240 3263 	movw	r2, #867	@ 0x363
 800d782:	490d      	ldr	r1, [pc, #52]	@ (800d7b8 <pbuf_cat+0xa8>)
 800d784:	480a      	ldr	r0, [pc, #40]	@ (800d7b0 <pbuf_cat+0xa0>)
 800d786:	f006 f9fd 	bl	8013b84 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	891a      	ldrh	r2, [r3, #8]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	891b      	ldrh	r3, [r3, #8]
 800d792:	4413      	add	r3, r2
 800d794:	b29a      	uxth	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	08015ce8 	.word	0x08015ce8
 800d7ac:	08015f18 	.word	0x08015f18
 800d7b0:	08015d84 	.word	0x08015d84
 800d7b4:	08015f50 	.word	0x08015f50
 800d7b8:	08015f80 	.word	0x08015f80

0800d7bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff ffa1 	bl	800d710 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d7ce:	6838      	ldr	r0, [r7, #0]
 800d7d0:	f7ff ff7c 	bl	800d6cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	617b      	str	r3, [r7, #20]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d008      	beq.n	800d806 <pbuf_copy+0x2a>
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d005      	beq.n	800d806 <pbuf_copy+0x2a>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	891a      	ldrh	r2, [r3, #8]
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	891b      	ldrh	r3, [r3, #8]
 800d802:	429a      	cmp	r2, r3
 800d804:	d209      	bcs.n	800d81a <pbuf_copy+0x3e>
 800d806:	4b57      	ldr	r3, [pc, #348]	@ (800d964 <pbuf_copy+0x188>)
 800d808:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d80c:	4956      	ldr	r1, [pc, #344]	@ (800d968 <pbuf_copy+0x18c>)
 800d80e:	4857      	ldr	r0, [pc, #348]	@ (800d96c <pbuf_copy+0x190>)
 800d810:	f006 f9b8 	bl	8013b84 <iprintf>
 800d814:	f06f 030f 	mvn.w	r3, #15
 800d818:	e09f      	b.n	800d95a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	895b      	ldrh	r3, [r3, #10]
 800d81e:	461a      	mov	r2, r3
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	1ad2      	subs	r2, r2, r3
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	895b      	ldrh	r3, [r3, #10]
 800d828:	4619      	mov	r1, r3
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	1acb      	subs	r3, r1, r3
 800d82e:	429a      	cmp	r2, r3
 800d830:	d306      	bcc.n	800d840 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	895b      	ldrh	r3, [r3, #10]
 800d836:	461a      	mov	r2, r3
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	60fb      	str	r3, [r7, #12]
 800d83e:	e005      	b.n	800d84c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	895b      	ldrh	r3, [r3, #10]
 800d844:	461a      	mov	r2, r3
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685a      	ldr	r2, [r3, #4]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	18d0      	adds	r0, r2, r3
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	685a      	ldr	r2, [r3, #4]
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	4413      	add	r3, r2
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	4619      	mov	r1, r3
 800d860:	f006 fb5d 	bl	8013f1e <memcpy>
    offset_to += len;
 800d864:	697a      	ldr	r2, [r7, #20]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	4413      	add	r3, r2
 800d86a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	4413      	add	r3, r2
 800d872:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	895b      	ldrh	r3, [r3, #10]
 800d878:	461a      	mov	r2, r3
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d906      	bls.n	800d88e <pbuf_copy+0xb2>
 800d880:	4b38      	ldr	r3, [pc, #224]	@ (800d964 <pbuf_copy+0x188>)
 800d882:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d886:	493a      	ldr	r1, [pc, #232]	@ (800d970 <pbuf_copy+0x194>)
 800d888:	4838      	ldr	r0, [pc, #224]	@ (800d96c <pbuf_copy+0x190>)
 800d88a:	f006 f97b 	bl	8013b84 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	895b      	ldrh	r3, [r3, #10]
 800d892:	461a      	mov	r2, r3
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	4293      	cmp	r3, r2
 800d898:	d906      	bls.n	800d8a8 <pbuf_copy+0xcc>
 800d89a:	4b32      	ldr	r3, [pc, #200]	@ (800d964 <pbuf_copy+0x188>)
 800d89c:	f240 32da 	movw	r2, #986	@ 0x3da
 800d8a0:	4934      	ldr	r1, [pc, #208]	@ (800d974 <pbuf_copy+0x198>)
 800d8a2:	4832      	ldr	r0, [pc, #200]	@ (800d96c <pbuf_copy+0x190>)
 800d8a4:	f006 f96e 	bl	8013b84 <iprintf>
    if (offset_from >= p_from->len) {
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	895b      	ldrh	r3, [r3, #10]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d304      	bcc.n	800d8be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	895b      	ldrh	r3, [r3, #10]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d114      	bne.n	800d8f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10c      	bne.n	800d8f4 <pbuf_copy+0x118>
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d009      	beq.n	800d8f4 <pbuf_copy+0x118>
 800d8e0:	4b20      	ldr	r3, [pc, #128]	@ (800d964 <pbuf_copy+0x188>)
 800d8e2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d8e6:	4924      	ldr	r1, [pc, #144]	@ (800d978 <pbuf_copy+0x19c>)
 800d8e8:	4820      	ldr	r0, [pc, #128]	@ (800d96c <pbuf_copy+0x190>)
 800d8ea:	f006 f94b 	bl	8013b84 <iprintf>
 800d8ee:	f06f 030f 	mvn.w	r3, #15
 800d8f2:	e032      	b.n	800d95a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d013      	beq.n	800d922 <pbuf_copy+0x146>
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	895a      	ldrh	r2, [r3, #10]
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	891b      	ldrh	r3, [r3, #8]
 800d902:	429a      	cmp	r2, r3
 800d904:	d10d      	bne.n	800d922 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d009      	beq.n	800d922 <pbuf_copy+0x146>
 800d90e:	4b15      	ldr	r3, [pc, #84]	@ (800d964 <pbuf_copy+0x188>)
 800d910:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d914:	4919      	ldr	r1, [pc, #100]	@ (800d97c <pbuf_copy+0x1a0>)
 800d916:	4815      	ldr	r0, [pc, #84]	@ (800d96c <pbuf_copy+0x190>)
 800d918:	f006 f934 	bl	8013b84 <iprintf>
 800d91c:	f06f 0305 	mvn.w	r3, #5
 800d920:	e01b      	b.n	800d95a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d013      	beq.n	800d950 <pbuf_copy+0x174>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	895a      	ldrh	r2, [r3, #10]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	891b      	ldrh	r3, [r3, #8]
 800d930:	429a      	cmp	r2, r3
 800d932:	d10d      	bne.n	800d950 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d009      	beq.n	800d950 <pbuf_copy+0x174>
 800d93c:	4b09      	ldr	r3, [pc, #36]	@ (800d964 <pbuf_copy+0x188>)
 800d93e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d942:	490e      	ldr	r1, [pc, #56]	@ (800d97c <pbuf_copy+0x1a0>)
 800d944:	4809      	ldr	r0, [pc, #36]	@ (800d96c <pbuf_copy+0x190>)
 800d946:	f006 f91d 	bl	8013b84 <iprintf>
 800d94a:	f06f 0305 	mvn.w	r3, #5
 800d94e:	e004      	b.n	800d95a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	f47f af61 	bne.w	800d81a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3718      	adds	r7, #24
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	08015ce8 	.word	0x08015ce8
 800d968:	08015fcc 	.word	0x08015fcc
 800d96c:	08015d84 	.word	0x08015d84
 800d970:	08015ffc 	.word	0x08015ffc
 800d974:	08016014 	.word	0x08016014
 800d978:	08016030 	.word	0x08016030
 800d97c:	08016040 	.word	0x08016040

0800d980 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b088      	sub	sp, #32
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	4611      	mov	r1, r2
 800d98c:	461a      	mov	r2, r3
 800d98e:	460b      	mov	r3, r1
 800d990:	80fb      	strh	r3, [r7, #6]
 800d992:	4613      	mov	r3, r2
 800d994:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d108      	bne.n	800d9b6 <pbuf_copy_partial+0x36>
 800d9a4:	4b2b      	ldr	r3, [pc, #172]	@ (800da54 <pbuf_copy_partial+0xd4>)
 800d9a6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d9aa:	492b      	ldr	r1, [pc, #172]	@ (800da58 <pbuf_copy_partial+0xd8>)
 800d9ac:	482b      	ldr	r0, [pc, #172]	@ (800da5c <pbuf_copy_partial+0xdc>)
 800d9ae:	f006 f8e9 	bl	8013b84 <iprintf>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	e04a      	b.n	800da4c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d108      	bne.n	800d9ce <pbuf_copy_partial+0x4e>
 800d9bc:	4b25      	ldr	r3, [pc, #148]	@ (800da54 <pbuf_copy_partial+0xd4>)
 800d9be:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d9c2:	4927      	ldr	r1, [pc, #156]	@ (800da60 <pbuf_copy_partial+0xe0>)
 800d9c4:	4825      	ldr	r0, [pc, #148]	@ (800da5c <pbuf_copy_partial+0xdc>)
 800d9c6:	f006 f8dd 	bl	8013b84 <iprintf>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	e03e      	b.n	800da4c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	61fb      	str	r3, [r7, #28]
 800d9d2:	e034      	b.n	800da3e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d9d4:	88bb      	ldrh	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <pbuf_copy_partial+0x70>
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	895b      	ldrh	r3, [r3, #10]
 800d9de:	88ba      	ldrh	r2, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d305      	bcc.n	800d9f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	895b      	ldrh	r3, [r3, #10]
 800d9e8:	88ba      	ldrh	r2, [r7, #4]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	80bb      	strh	r3, [r7, #4]
 800d9ee:	e023      	b.n	800da38 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	895a      	ldrh	r2, [r3, #10]
 800d9f4:	88bb      	ldrh	r3, [r7, #4]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d9fa:	8b3a      	ldrh	r2, [r7, #24]
 800d9fc:	88fb      	ldrh	r3, [r7, #6]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d901      	bls.n	800da06 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800da02:	88fb      	ldrh	r3, [r7, #6]
 800da04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800da06:	8b7b      	ldrh	r3, [r7, #26]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	18d0      	adds	r0, r2, r3
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	88bb      	ldrh	r3, [r7, #4]
 800da12:	4413      	add	r3, r2
 800da14:	8b3a      	ldrh	r2, [r7, #24]
 800da16:	4619      	mov	r1, r3
 800da18:	f006 fa81 	bl	8013f1e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800da1c:	8afa      	ldrh	r2, [r7, #22]
 800da1e:	8b3b      	ldrh	r3, [r7, #24]
 800da20:	4413      	add	r3, r2
 800da22:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800da24:	8b7a      	ldrh	r2, [r7, #26]
 800da26:	8b3b      	ldrh	r3, [r7, #24]
 800da28:	4413      	add	r3, r2
 800da2a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800da2c:	88fa      	ldrh	r2, [r7, #6]
 800da2e:	8b3b      	ldrh	r3, [r7, #24]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800da34:	2300      	movs	r3, #0
 800da36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	61fb      	str	r3, [r7, #28]
 800da3e:	88fb      	ldrh	r3, [r7, #6]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <pbuf_copy_partial+0xca>
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1c4      	bne.n	800d9d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800da4a:	8afb      	ldrh	r3, [r7, #22]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3720      	adds	r7, #32
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	08015ce8 	.word	0x08015ce8
 800da58:	0801606c 	.word	0x0801606c
 800da5c:	08015d84 	.word	0x08015d84
 800da60:	0801608c 	.word	0x0801608c

0800da64 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	603a      	str	r2, [r7, #0]
 800da6e:	71fb      	strb	r3, [r7, #7]
 800da70:	460b      	mov	r3, r1
 800da72:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	8919      	ldrh	r1, [r3, #8]
 800da78:	88ba      	ldrh	r2, [r7, #4]
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff faa1 	bl	800cfc4 <pbuf_alloc>
 800da82:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <pbuf_clone+0x2a>
    return NULL;
 800da8a:	2300      	movs	r3, #0
 800da8c:	e011      	b.n	800dab2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800da8e:	6839      	ldr	r1, [r7, #0]
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f7ff fea3 	bl	800d7dc <pbuf_copy>
 800da96:	4603      	mov	r3, r0
 800da98:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800da9a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d006      	beq.n	800dab0 <pbuf_clone+0x4c>
 800daa2:	4b06      	ldr	r3, [pc, #24]	@ (800dabc <pbuf_clone+0x58>)
 800daa4:	f240 5224 	movw	r2, #1316	@ 0x524
 800daa8:	4905      	ldr	r1, [pc, #20]	@ (800dac0 <pbuf_clone+0x5c>)
 800daaa:	4806      	ldr	r0, [pc, #24]	@ (800dac4 <pbuf_clone+0x60>)
 800daac:	f006 f86a 	bl	8013b84 <iprintf>
  return q;
 800dab0:	68fb      	ldr	r3, [r7, #12]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	08015ce8 	.word	0x08015ce8
 800dac0:	08016198 	.word	0x08016198
 800dac4:	08015d84 	.word	0x08015d84

0800dac8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dacc:	f005 ff5a 	bl	8013984 <rand>
 800dad0:	4603      	mov	r3, r0
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dad8:	b29b      	uxth	r3, r3
 800dada:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800dade:	b29a      	uxth	r2, r3
 800dae0:	4b01      	ldr	r3, [pc, #4]	@ (800dae8 <tcp_init+0x20>)
 800dae2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dae4:	bf00      	nop
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	24000028 	.word	0x24000028

0800daec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	7d1b      	ldrb	r3, [r3, #20]
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d105      	bne.n	800db08 <tcp_free+0x1c>
 800dafc:	4b06      	ldr	r3, [pc, #24]	@ (800db18 <tcp_free+0x2c>)
 800dafe:	22d4      	movs	r2, #212	@ 0xd4
 800db00:	4906      	ldr	r1, [pc, #24]	@ (800db1c <tcp_free+0x30>)
 800db02:	4807      	ldr	r0, [pc, #28]	@ (800db20 <tcp_free+0x34>)
 800db04:	f006 f83e 	bl	8013b84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	2001      	movs	r0, #1
 800db0c:	f7fe febc 	bl	800c888 <memp_free>
}
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	08016224 	.word	0x08016224
 800db1c:	08016290 	.word	0x08016290
 800db20:	080162a4 	.word	0x080162a4

0800db24 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d105      	bne.n	800db40 <tcp_free_listen+0x1c>
 800db34:	4b06      	ldr	r3, [pc, #24]	@ (800db50 <tcp_free_listen+0x2c>)
 800db36:	22df      	movs	r2, #223	@ 0xdf
 800db38:	4906      	ldr	r1, [pc, #24]	@ (800db54 <tcp_free_listen+0x30>)
 800db3a:	4807      	ldr	r0, [pc, #28]	@ (800db58 <tcp_free_listen+0x34>)
 800db3c:	f006 f822 	bl	8013b84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800db40:	6879      	ldr	r1, [r7, #4]
 800db42:	2002      	movs	r0, #2
 800db44:	f7fe fea0 	bl	800c888 <memp_free>
}
 800db48:	bf00      	nop
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	08016224 	.word	0x08016224
 800db54:	080162cc 	.word	0x080162cc
 800db58:	080162a4 	.word	0x080162a4

0800db5c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800db60:	f000 fea4 	bl	800e8ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800db64:	4b07      	ldr	r3, [pc, #28]	@ (800db84 <tcp_tmr+0x28>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	3301      	adds	r3, #1
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	4b05      	ldr	r3, [pc, #20]	@ (800db84 <tcp_tmr+0x28>)
 800db6e:	701a      	strb	r2, [r3, #0]
 800db70:	4b04      	ldr	r3, [pc, #16]	@ (800db84 <tcp_tmr+0x28>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	f003 0301 	and.w	r3, r3, #1
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d001      	beq.n	800db80 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800db7c:	f000 fb54 	bl	800e228 <tcp_slowtmr>
  }
}
 800db80:	bf00      	nop
 800db82:	bd80      	pop	{r7, pc}
 800db84:	24007ca9 	.word	0x24007ca9

0800db88 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d105      	bne.n	800dba4 <tcp_remove_listener+0x1c>
 800db98:	4b0d      	ldr	r3, [pc, #52]	@ (800dbd0 <tcp_remove_listener+0x48>)
 800db9a:	22ff      	movs	r2, #255	@ 0xff
 800db9c:	490d      	ldr	r1, [pc, #52]	@ (800dbd4 <tcp_remove_listener+0x4c>)
 800db9e:	480e      	ldr	r0, [pc, #56]	@ (800dbd8 <tcp_remove_listener+0x50>)
 800dba0:	f005 fff0 	bl	8013b84 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	e00a      	b.n	800dbc0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d102      	bne.n	800dbba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	60fb      	str	r3, [r7, #12]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1f1      	bne.n	800dbaa <tcp_remove_listener+0x22>
    }
  }
}
 800dbc6:	bf00      	nop
 800dbc8:	bf00      	nop
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	08016224 	.word	0x08016224
 800dbd4:	080162e8 	.word	0x080162e8
 800dbd8:	080162a4 	.word	0x080162a4

0800dbdc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d106      	bne.n	800dbf8 <tcp_listen_closed+0x1c>
 800dbea:	4b14      	ldr	r3, [pc, #80]	@ (800dc3c <tcp_listen_closed+0x60>)
 800dbec:	f240 1211 	movw	r2, #273	@ 0x111
 800dbf0:	4913      	ldr	r1, [pc, #76]	@ (800dc40 <tcp_listen_closed+0x64>)
 800dbf2:	4814      	ldr	r0, [pc, #80]	@ (800dc44 <tcp_listen_closed+0x68>)
 800dbf4:	f005 ffc6 	bl	8013b84 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	7d1b      	ldrb	r3, [r3, #20]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d006      	beq.n	800dc0e <tcp_listen_closed+0x32>
 800dc00:	4b0e      	ldr	r3, [pc, #56]	@ (800dc3c <tcp_listen_closed+0x60>)
 800dc02:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800dc06:	4910      	ldr	r1, [pc, #64]	@ (800dc48 <tcp_listen_closed+0x6c>)
 800dc08:	480e      	ldr	r0, [pc, #56]	@ (800dc44 <tcp_listen_closed+0x68>)
 800dc0a:	f005 ffbb 	bl	8013b84 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc0e:	2301      	movs	r3, #1
 800dc10:	60fb      	str	r3, [r7, #12]
 800dc12:	e00b      	b.n	800dc2c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dc14:	4a0d      	ldr	r2, [pc, #52]	@ (800dc4c <tcp_listen_closed+0x70>)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	6879      	ldr	r1, [r7, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff ffb1 	bl	800db88 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	60fb      	str	r3, [r7, #12]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	d9f0      	bls.n	800dc14 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dc32:	bf00      	nop
 800dc34:	bf00      	nop
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	08016224 	.word	0x08016224
 800dc40:	08016310 	.word	0x08016310
 800dc44:	080162a4 	.word	0x080162a4
 800dc48:	0801631c 	.word	0x0801631c
 800dc4c:	08017ca4 	.word	0x08017ca4

0800dc50 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dc50:	b5b0      	push	{r4, r5, r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af04      	add	r7, sp, #16
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d106      	bne.n	800dc70 <tcp_close_shutdown+0x20>
 800dc62:	4b63      	ldr	r3, [pc, #396]	@ (800ddf0 <tcp_close_shutdown+0x1a0>)
 800dc64:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800dc68:	4962      	ldr	r1, [pc, #392]	@ (800ddf4 <tcp_close_shutdown+0x1a4>)
 800dc6a:	4863      	ldr	r0, [pc, #396]	@ (800ddf8 <tcp_close_shutdown+0x1a8>)
 800dc6c:	f005 ff8a 	bl	8013b84 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dc70:	78fb      	ldrb	r3, [r7, #3]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d066      	beq.n	800dd44 <tcp_close_shutdown+0xf4>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	7d1b      	ldrb	r3, [r3, #20]
 800dc7a:	2b04      	cmp	r3, #4
 800dc7c:	d003      	beq.n	800dc86 <tcp_close_shutdown+0x36>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	7d1b      	ldrb	r3, [r3, #20]
 800dc82:	2b07      	cmp	r3, #7
 800dc84:	d15e      	bne.n	800dd44 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d104      	bne.n	800dc98 <tcp_close_shutdown+0x48>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc92:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dc96:	d055      	beq.n	800dd44 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	8b5b      	ldrh	r3, [r3, #26]
 800dc9c:	f003 0310 	and.w	r3, r3, #16
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <tcp_close_shutdown+0x62>
 800dca4:	4b52      	ldr	r3, [pc, #328]	@ (800ddf0 <tcp_close_shutdown+0x1a0>)
 800dca6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800dcaa:	4954      	ldr	r1, [pc, #336]	@ (800ddfc <tcp_close_shutdown+0x1ac>)
 800dcac:	4852      	ldr	r0, [pc, #328]	@ (800ddf8 <tcp_close_shutdown+0x1a8>)
 800dcae:	f005 ff69 	bl	8013b84 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800dcba:	687d      	ldr	r5, [r7, #4]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	8ad2      	ldrh	r2, [r2, #22]
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	8b09      	ldrh	r1, [r1, #24]
 800dcc8:	9102      	str	r1, [sp, #8]
 800dcca:	9201      	str	r2, [sp, #4]
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	462b      	mov	r3, r5
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	4601      	mov	r1, r0
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f004 fe8d 	bl	80129f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f001 f8c8 	bl	800ee70 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dce0:	4b47      	ldr	r3, [pc, #284]	@ (800de00 <tcp_close_shutdown+0x1b0>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d105      	bne.n	800dcf6 <tcp_close_shutdown+0xa6>
 800dcea:	4b45      	ldr	r3, [pc, #276]	@ (800de00 <tcp_close_shutdown+0x1b0>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	4a43      	ldr	r2, [pc, #268]	@ (800de00 <tcp_close_shutdown+0x1b0>)
 800dcf2:	6013      	str	r3, [r2, #0]
 800dcf4:	e013      	b.n	800dd1e <tcp_close_shutdown+0xce>
 800dcf6:	4b42      	ldr	r3, [pc, #264]	@ (800de00 <tcp_close_shutdown+0x1b0>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	e00c      	b.n	800dd18 <tcp_close_shutdown+0xc8>
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d104      	bne.n	800dd12 <tcp_close_shutdown+0xc2>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68da      	ldr	r2, [r3, #12]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	60da      	str	r2, [r3, #12]
 800dd10:	e005      	b.n	800dd1e <tcp_close_shutdown+0xce>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1ef      	bne.n	800dcfe <tcp_close_shutdown+0xae>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	60da      	str	r2, [r3, #12]
 800dd24:	4b37      	ldr	r3, [pc, #220]	@ (800de04 <tcp_close_shutdown+0x1b4>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dd2a:	4b37      	ldr	r3, [pc, #220]	@ (800de08 <tcp_close_shutdown+0x1b8>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d102      	bne.n	800dd3a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dd34:	f003 fd5c 	bl	80117f0 <tcp_trigger_input_pcb_close>
 800dd38:	e002      	b.n	800dd40 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f7ff fed6 	bl	800daec <tcp_free>
      }
      return ERR_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	e050      	b.n	800dde6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	7d1b      	ldrb	r3, [r3, #20]
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d03b      	beq.n	800ddc4 <tcp_close_shutdown+0x174>
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	dc44      	bgt.n	800ddda <tcp_close_shutdown+0x18a>
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d002      	beq.n	800dd5a <tcp_close_shutdown+0x10a>
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d02a      	beq.n	800ddae <tcp_close_shutdown+0x15e>
 800dd58:	e03f      	b.n	800ddda <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	8adb      	ldrh	r3, [r3, #22]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d021      	beq.n	800dda6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd62:	4b2a      	ldr	r3, [pc, #168]	@ (800de0c <tcp_close_shutdown+0x1bc>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d105      	bne.n	800dd78 <tcp_close_shutdown+0x128>
 800dd6c:	4b27      	ldr	r3, [pc, #156]	@ (800de0c <tcp_close_shutdown+0x1bc>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	4a26      	ldr	r2, [pc, #152]	@ (800de0c <tcp_close_shutdown+0x1bc>)
 800dd74:	6013      	str	r3, [r2, #0]
 800dd76:	e013      	b.n	800dda0 <tcp_close_shutdown+0x150>
 800dd78:	4b24      	ldr	r3, [pc, #144]	@ (800de0c <tcp_close_shutdown+0x1bc>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	60bb      	str	r3, [r7, #8]
 800dd7e:	e00c      	b.n	800dd9a <tcp_close_shutdown+0x14a>
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d104      	bne.n	800dd94 <tcp_close_shutdown+0x144>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	68da      	ldr	r2, [r3, #12]
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	60da      	str	r2, [r3, #12]
 800dd92:	e005      	b.n	800dda0 <tcp_close_shutdown+0x150>
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	60bb      	str	r3, [r7, #8]
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d1ef      	bne.n	800dd80 <tcp_close_shutdown+0x130>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff fea0 	bl	800daec <tcp_free>
      break;
 800ddac:	e01a      	b.n	800dde4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7ff ff14 	bl	800dbdc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ddb4:	6879      	ldr	r1, [r7, #4]
 800ddb6:	4816      	ldr	r0, [pc, #88]	@ (800de10 <tcp_close_shutdown+0x1c0>)
 800ddb8:	f001 f8aa 	bl	800ef10 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff feb1 	bl	800db24 <tcp_free_listen>
      break;
 800ddc2:	e00f      	b.n	800dde4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	480e      	ldr	r0, [pc, #56]	@ (800de00 <tcp_close_shutdown+0x1b0>)
 800ddc8:	f001 f8a2 	bl	800ef10 <tcp_pcb_remove>
 800ddcc:	4b0d      	ldr	r3, [pc, #52]	@ (800de04 <tcp_close_shutdown+0x1b4>)
 800ddce:	2201      	movs	r2, #1
 800ddd0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7ff fe8a 	bl	800daec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ddd8:	e004      	b.n	800dde4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f81a 	bl	800de14 <tcp_close_shutdown_fin>
 800dde0:	4603      	mov	r3, r0
 800dde2:	e000      	b.n	800dde6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bdb0      	pop	{r4, r5, r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	08016224 	.word	0x08016224
 800ddf4:	08016334 	.word	0x08016334
 800ddf8:	080162a4 	.word	0x080162a4
 800ddfc:	08016354 	.word	0x08016354
 800de00:	24007ca0 	.word	0x24007ca0
 800de04:	24007ca8 	.word	0x24007ca8
 800de08:	24007ce0 	.word	0x24007ce0
 800de0c:	24007c98 	.word	0x24007c98
 800de10:	24007c9c 	.word	0x24007c9c

0800de14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d106      	bne.n	800de30 <tcp_close_shutdown_fin+0x1c>
 800de22:	4b2e      	ldr	r3, [pc, #184]	@ (800dedc <tcp_close_shutdown_fin+0xc8>)
 800de24:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800de28:	492d      	ldr	r1, [pc, #180]	@ (800dee0 <tcp_close_shutdown_fin+0xcc>)
 800de2a:	482e      	ldr	r0, [pc, #184]	@ (800dee4 <tcp_close_shutdown_fin+0xd0>)
 800de2c:	f005 feaa 	bl	8013b84 <iprintf>

  switch (pcb->state) {
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7d1b      	ldrb	r3, [r3, #20]
 800de34:	2b07      	cmp	r3, #7
 800de36:	d020      	beq.n	800de7a <tcp_close_shutdown_fin+0x66>
 800de38:	2b07      	cmp	r3, #7
 800de3a:	dc2b      	bgt.n	800de94 <tcp_close_shutdown_fin+0x80>
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d002      	beq.n	800de46 <tcp_close_shutdown_fin+0x32>
 800de40:	2b04      	cmp	r3, #4
 800de42:	d00d      	beq.n	800de60 <tcp_close_shutdown_fin+0x4c>
 800de44:	e026      	b.n	800de94 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f003 fee2 	bl	8011c10 <tcp_send_fin>
 800de4c:	4603      	mov	r3, r0
 800de4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d11f      	bne.n	800de98 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2205      	movs	r2, #5
 800de5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de5e:	e01b      	b.n	800de98 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f003 fed5 	bl	8011c10 <tcp_send_fin>
 800de66:	4603      	mov	r3, r0
 800de68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d114      	bne.n	800de9c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2205      	movs	r2, #5
 800de76:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de78:	e010      	b.n	800de9c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f003 fec8 	bl	8011c10 <tcp_send_fin>
 800de80:	4603      	mov	r3, r0
 800de82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d109      	bne.n	800dea0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2209      	movs	r2, #9
 800de90:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de92:	e005      	b.n	800dea0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	e01c      	b.n	800ded2 <tcp_close_shutdown_fin+0xbe>
      break;
 800de98:	bf00      	nop
 800de9a:	e002      	b.n	800dea2 <tcp_close_shutdown_fin+0x8e>
      break;
 800de9c:	bf00      	nop
 800de9e:	e000      	b.n	800dea2 <tcp_close_shutdown_fin+0x8e>
      break;
 800dea0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d103      	bne.n	800deb2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f003 ffee 	bl	8011e8c <tcp_output>
 800deb0:	e00d      	b.n	800dece <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800deb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800deba:	d108      	bne.n	800dece <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	8b5b      	ldrh	r3, [r3, #26]
 800dec0:	f043 0308 	orr.w	r3, r3, #8
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800deca:	2300      	movs	r3, #0
 800decc:	e001      	b.n	800ded2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	08016224 	.word	0x08016224
 800dee0:	08016310 	.word	0x08016310
 800dee4:	080162a4 	.word	0x080162a4

0800dee8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d109      	bne.n	800df0a <tcp_close+0x22>
 800def6:	4b0f      	ldr	r3, [pc, #60]	@ (800df34 <tcp_close+0x4c>)
 800def8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800defc:	490e      	ldr	r1, [pc, #56]	@ (800df38 <tcp_close+0x50>)
 800defe:	480f      	ldr	r0, [pc, #60]	@ (800df3c <tcp_close+0x54>)
 800df00:	f005 fe40 	bl	8013b84 <iprintf>
 800df04:	f06f 030f 	mvn.w	r3, #15
 800df08:	e00f      	b.n	800df2a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7d1b      	ldrb	r3, [r3, #20]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d006      	beq.n	800df20 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	8b5b      	ldrh	r3, [r3, #26]
 800df16:	f043 0310 	orr.w	r3, r3, #16
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800df20:	2101      	movs	r1, #1
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7ff fe94 	bl	800dc50 <tcp_close_shutdown>
 800df28:	4603      	mov	r3, r0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	08016224 	.word	0x08016224
 800df38:	08016370 	.word	0x08016370
 800df3c:	080162a4 	.word	0x080162a4

0800df40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08e      	sub	sp, #56	@ 0x38
 800df44:	af04      	add	r7, sp, #16
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d107      	bne.n	800df60 <tcp_abandon+0x20>
 800df50:	4b52      	ldr	r3, [pc, #328]	@ (800e09c <tcp_abandon+0x15c>)
 800df52:	f240 223d 	movw	r2, #573	@ 0x23d
 800df56:	4952      	ldr	r1, [pc, #328]	@ (800e0a0 <tcp_abandon+0x160>)
 800df58:	4852      	ldr	r0, [pc, #328]	@ (800e0a4 <tcp_abandon+0x164>)
 800df5a:	f005 fe13 	bl	8013b84 <iprintf>
 800df5e:	e099      	b.n	800e094 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7d1b      	ldrb	r3, [r3, #20]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d106      	bne.n	800df76 <tcp_abandon+0x36>
 800df68:	4b4c      	ldr	r3, [pc, #304]	@ (800e09c <tcp_abandon+0x15c>)
 800df6a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800df6e:	494e      	ldr	r1, [pc, #312]	@ (800e0a8 <tcp_abandon+0x168>)
 800df70:	484c      	ldr	r0, [pc, #304]	@ (800e0a4 <tcp_abandon+0x164>)
 800df72:	f005 fe07 	bl	8013b84 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	7d1b      	ldrb	r3, [r3, #20]
 800df7a:	2b0a      	cmp	r3, #10
 800df7c:	d107      	bne.n	800df8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800df7e:	6879      	ldr	r1, [r7, #4]
 800df80:	484a      	ldr	r0, [pc, #296]	@ (800e0ac <tcp_abandon+0x16c>)
 800df82:	f000 ffc5 	bl	800ef10 <tcp_pcb_remove>
    tcp_free(pcb);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7ff fdb0 	bl	800daec <tcp_free>
 800df8c:	e082      	b.n	800e094 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800df92:	2300      	movs	r3, #0
 800df94:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfa8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	7d1b      	ldrb	r3, [r3, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d126      	bne.n	800e006 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	8adb      	ldrh	r3, [r3, #22]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d02e      	beq.n	800e01e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfc0:	4b3b      	ldr	r3, [pc, #236]	@ (800e0b0 <tcp_abandon+0x170>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d105      	bne.n	800dfd6 <tcp_abandon+0x96>
 800dfca:	4b39      	ldr	r3, [pc, #228]	@ (800e0b0 <tcp_abandon+0x170>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	4a37      	ldr	r2, [pc, #220]	@ (800e0b0 <tcp_abandon+0x170>)
 800dfd2:	6013      	str	r3, [r2, #0]
 800dfd4:	e013      	b.n	800dffe <tcp_abandon+0xbe>
 800dfd6:	4b36      	ldr	r3, [pc, #216]	@ (800e0b0 <tcp_abandon+0x170>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	61fb      	str	r3, [r7, #28]
 800dfdc:	e00c      	b.n	800dff8 <tcp_abandon+0xb8>
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d104      	bne.n	800dff2 <tcp_abandon+0xb2>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	68da      	ldr	r2, [r3, #12]
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	60da      	str	r2, [r3, #12]
 800dff0:	e005      	b.n	800dffe <tcp_abandon+0xbe>
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	61fb      	str	r3, [r7, #28]
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1ef      	bne.n	800dfde <tcp_abandon+0x9e>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	60da      	str	r2, [r3, #12]
 800e004:	e00b      	b.n	800e01e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	8adb      	ldrh	r3, [r3, #22]
 800e00e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e010:	6879      	ldr	r1, [r7, #4]
 800e012:	4828      	ldr	r0, [pc, #160]	@ (800e0b4 <tcp_abandon+0x174>)
 800e014:	f000 ff7c 	bl	800ef10 <tcp_pcb_remove>
 800e018:	4b27      	ldr	r3, [pc, #156]	@ (800e0b8 <tcp_abandon+0x178>)
 800e01a:	2201      	movs	r2, #1
 800e01c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e022:	2b00      	cmp	r3, #0
 800e024:	d004      	beq.n	800e030 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 fd1e 	bl	800ea6c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e034:	2b00      	cmp	r3, #0
 800e036:	d004      	beq.n	800e042 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e03c:	4618      	mov	r0, r3
 800e03e:	f000 fd15 	bl	800ea6c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e046:	2b00      	cmp	r3, #0
 800e048:	d004      	beq.n	800e054 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e04e:	4618      	mov	r0, r3
 800e050:	f000 fd0c 	bl	800ea6c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00e      	beq.n	800e078 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	3304      	adds	r3, #4
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	8b12      	ldrh	r2, [r2, #24]
 800e064:	9202      	str	r2, [sp, #8]
 800e066:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e068:	9201      	str	r2, [sp, #4]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	460b      	mov	r3, r1
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	69b9      	ldr	r1, [r7, #24]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f004 fcbe 	bl	80129f4 <tcp_rst>
    }
    last_state = pcb->state;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	7d1b      	ldrb	r3, [r3, #20]
 800e07c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7ff fd34 	bl	800daec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d004      	beq.n	800e094 <tcp_abandon+0x154>
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	f06f 010c 	mvn.w	r1, #12
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	4798      	blx	r3
  }
}
 800e094:	3728      	adds	r7, #40	@ 0x28
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	08016224 	.word	0x08016224
 800e0a0:	080163a4 	.word	0x080163a4
 800e0a4:	080162a4 	.word	0x080162a4
 800e0a8:	080163c0 	.word	0x080163c0
 800e0ac:	24007ca4 	.word	0x24007ca4
 800e0b0:	24007c98 	.word	0x24007c98
 800e0b4:	24007ca0 	.word	0x24007ca0
 800e0b8:	24007ca8 	.word	0x24007ca8

0800e0bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e0c4:	2101      	movs	r1, #1
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f7ff ff3a 	bl	800df40 <tcp_abandon>
}
 800e0cc:	bf00      	nop
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d106      	bne.n	800e0f0 <tcp_update_rcv_ann_wnd+0x1c>
 800e0e2:	4b25      	ldr	r3, [pc, #148]	@ (800e178 <tcp_update_rcv_ann_wnd+0xa4>)
 800e0e4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e0e8:	4924      	ldr	r1, [pc, #144]	@ (800e17c <tcp_update_rcv_ann_wnd+0xa8>)
 800e0ea:	4825      	ldr	r0, [pc, #148]	@ (800e180 <tcp_update_rcv_ann_wnd+0xac>)
 800e0ec:	f005 fd4a 	bl	8013b84 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e0f8:	4413      	add	r3, r2
 800e0fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e104:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e108:	bf28      	it	cs
 800e10a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e10e:	b292      	uxth	r2, r2
 800e110:	4413      	add	r3, r2
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	1ad3      	subs	r3, r2, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	db08      	blt.n	800e12c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	1ad3      	subs	r3, r2, r3
 800e12a:	e020      	b.n	800e16e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	2b00      	cmp	r3, #0
 800e138:	dd03      	ble.n	800e142 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e140:	e014      	b.n	800e16c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e154:	d306      	bcc.n	800e164 <tcp_update_rcv_ann_wnd+0x90>
 800e156:	4b08      	ldr	r3, [pc, #32]	@ (800e178 <tcp_update_rcv_ann_wnd+0xa4>)
 800e158:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e15c:	4909      	ldr	r1, [pc, #36]	@ (800e184 <tcp_update_rcv_ann_wnd+0xb0>)
 800e15e:	4808      	ldr	r0, [pc, #32]	@ (800e180 <tcp_update_rcv_ann_wnd+0xac>)
 800e160:	f005 fd10 	bl	8013b84 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	b29a      	uxth	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e16c:	2300      	movs	r3, #0
  }
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	08016224 	.word	0x08016224
 800e17c:	080164bc 	.word	0x080164bc
 800e180:	080162a4 	.word	0x080162a4
 800e184:	080164e0 	.word	0x080164e0

0800e188 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d107      	bne.n	800e1aa <tcp_recved+0x22>
 800e19a:	4b1f      	ldr	r3, [pc, #124]	@ (800e218 <tcp_recved+0x90>)
 800e19c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e1a0:	491e      	ldr	r1, [pc, #120]	@ (800e21c <tcp_recved+0x94>)
 800e1a2:	481f      	ldr	r0, [pc, #124]	@ (800e220 <tcp_recved+0x98>)
 800e1a4:	f005 fcee 	bl	8013b84 <iprintf>
 800e1a8:	e032      	b.n	800e210 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7d1b      	ldrb	r3, [r3, #20]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d106      	bne.n	800e1c0 <tcp_recved+0x38>
 800e1b2:	4b19      	ldr	r3, [pc, #100]	@ (800e218 <tcp_recved+0x90>)
 800e1b4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e1b8:	491a      	ldr	r1, [pc, #104]	@ (800e224 <tcp_recved+0x9c>)
 800e1ba:	4819      	ldr	r0, [pc, #100]	@ (800e220 <tcp_recved+0x98>)
 800e1bc:	f005 fce2 	bl	8013b84 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e1c4:	887b      	ldrh	r3, [r7, #2]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e1ca:	89fb      	ldrh	r3, [r7, #14]
 800e1cc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e1d0:	d804      	bhi.n	800e1dc <tcp_recved+0x54>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1d6:	89fa      	ldrh	r2, [r7, #14]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d204      	bcs.n	800e1e6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e1e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e1e4:	e002      	b.n	800e1ec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	89fa      	ldrh	r2, [r7, #14]
 800e1ea:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7ff ff71 	bl	800e0d4 <tcp_update_rcv_ann_wnd>
 800e1f2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e1fa:	d309      	bcc.n	800e210 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	8b5b      	ldrh	r3, [r3, #26]
 800e200:	f043 0302 	orr.w	r3, r3, #2
 800e204:	b29a      	uxth	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f003 fe3e 	bl	8011e8c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	08016224 	.word	0x08016224
 800e21c:	080164fc 	.word	0x080164fc
 800e220:	080162a4 	.word	0x080162a4
 800e224:	08016514 	.word	0x08016514

0800e228 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e228:	b5b0      	push	{r4, r5, r7, lr}
 800e22a:	b090      	sub	sp, #64	@ 0x40
 800e22c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e234:	4b95      	ldr	r3, [pc, #596]	@ (800e48c <tcp_slowtmr+0x264>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3301      	adds	r3, #1
 800e23a:	4a94      	ldr	r2, [pc, #592]	@ (800e48c <tcp_slowtmr+0x264>)
 800e23c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e23e:	4b94      	ldr	r3, [pc, #592]	@ (800e490 <tcp_slowtmr+0x268>)
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	3301      	adds	r3, #1
 800e244:	b2da      	uxtb	r2, r3
 800e246:	4b92      	ldr	r3, [pc, #584]	@ (800e490 <tcp_slowtmr+0x268>)
 800e248:	701a      	strb	r2, [r3, #0]
 800e24a:	e000      	b.n	800e24e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e24c:	bf00      	nop
  prev = NULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e252:	4b90      	ldr	r3, [pc, #576]	@ (800e494 <tcp_slowtmr+0x26c>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e258:	e29d      	b.n	800e796 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25c:	7d1b      	ldrb	r3, [r3, #20]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <tcp_slowtmr+0x48>
 800e262:	4b8d      	ldr	r3, [pc, #564]	@ (800e498 <tcp_slowtmr+0x270>)
 800e264:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e268:	498c      	ldr	r1, [pc, #560]	@ (800e49c <tcp_slowtmr+0x274>)
 800e26a:	488d      	ldr	r0, [pc, #564]	@ (800e4a0 <tcp_slowtmr+0x278>)
 800e26c:	f005 fc8a 	bl	8013b84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e272:	7d1b      	ldrb	r3, [r3, #20]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d106      	bne.n	800e286 <tcp_slowtmr+0x5e>
 800e278:	4b87      	ldr	r3, [pc, #540]	@ (800e498 <tcp_slowtmr+0x270>)
 800e27a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e27e:	4989      	ldr	r1, [pc, #548]	@ (800e4a4 <tcp_slowtmr+0x27c>)
 800e280:	4887      	ldr	r0, [pc, #540]	@ (800e4a0 <tcp_slowtmr+0x278>)
 800e282:	f005 fc7f 	bl	8013b84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e288:	7d1b      	ldrb	r3, [r3, #20]
 800e28a:	2b0a      	cmp	r3, #10
 800e28c:	d106      	bne.n	800e29c <tcp_slowtmr+0x74>
 800e28e:	4b82      	ldr	r3, [pc, #520]	@ (800e498 <tcp_slowtmr+0x270>)
 800e290:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e294:	4984      	ldr	r1, [pc, #528]	@ (800e4a8 <tcp_slowtmr+0x280>)
 800e296:	4882      	ldr	r0, [pc, #520]	@ (800e4a0 <tcp_slowtmr+0x278>)
 800e298:	f005 fc74 	bl	8013b84 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e29e:	7f9a      	ldrb	r2, [r3, #30]
 800e2a0:	4b7b      	ldr	r3, [pc, #492]	@ (800e490 <tcp_slowtmr+0x268>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d105      	bne.n	800e2b4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e2b2:	e270      	b.n	800e796 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800e2b4:	4b76      	ldr	r3, [pc, #472]	@ (800e490 <tcp_slowtmr+0x268>)
 800e2b6:	781a      	ldrb	r2, [r3, #0]
 800e2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ba:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ca:	7d1b      	ldrb	r3, [r3, #20]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d10a      	bne.n	800e2e6 <tcp_slowtmr+0xbe>
 800e2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2d6:	2b05      	cmp	r3, #5
 800e2d8:	d905      	bls.n	800e2e6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e2da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2de:	3301      	adds	r3, #1
 800e2e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e2e4:	e11e      	b.n	800e524 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2ec:	2b0b      	cmp	r3, #11
 800e2ee:	d905      	bls.n	800e2fc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e2fa:	e113      	b.n	800e524 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e302:	2b00      	cmp	r3, #0
 800e304:	d075      	beq.n	800e3f2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d006      	beq.n	800e31c <tcp_slowtmr+0xf4>
 800e30e:	4b62      	ldr	r3, [pc, #392]	@ (800e498 <tcp_slowtmr+0x270>)
 800e310:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e314:	4965      	ldr	r1, [pc, #404]	@ (800e4ac <tcp_slowtmr+0x284>)
 800e316:	4862      	ldr	r0, [pc, #392]	@ (800e4a0 <tcp_slowtmr+0x278>)
 800e318:	f005 fc34 	bl	8013b84 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e320:	2b00      	cmp	r3, #0
 800e322:	d106      	bne.n	800e332 <tcp_slowtmr+0x10a>
 800e324:	4b5c      	ldr	r3, [pc, #368]	@ (800e498 <tcp_slowtmr+0x270>)
 800e326:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e32a:	4961      	ldr	r1, [pc, #388]	@ (800e4b0 <tcp_slowtmr+0x288>)
 800e32c:	485c      	ldr	r0, [pc, #368]	@ (800e4a0 <tcp_slowtmr+0x278>)
 800e32e:	f005 fc29 	bl	8013b84 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e334:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e338:	2b0b      	cmp	r3, #11
 800e33a:	d905      	bls.n	800e348 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e33c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e340:	3301      	adds	r3, #1
 800e342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e346:	e0ed      	b.n	800e524 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e34e:	3b01      	subs	r3, #1
 800e350:	4a58      	ldr	r2, [pc, #352]	@ (800e4b4 <tcp_slowtmr+0x28c>)
 800e352:	5cd3      	ldrb	r3, [r2, r3]
 800e354:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e358:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e35c:	7c7a      	ldrb	r2, [r7, #17]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d907      	bls.n	800e372 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e364:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e368:	3301      	adds	r3, #1
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e36e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e374:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e378:	7c7a      	ldrb	r2, [r7, #17]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	f200 80d2 	bhi.w	800e524 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e380:	2301      	movs	r3, #1
 800e382:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d108      	bne.n	800e3a0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e38e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e390:	f004 fc24 	bl	8012bdc <tcp_zero_window_probe>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d014      	beq.n	800e3c4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e39a:	2300      	movs	r3, #0
 800e39c:	623b      	str	r3, [r7, #32]
 800e39e:	e011      	b.n	800e3c4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3aa:	f003 fae9 	bl	8011980 <tcp_split_unsent_seg>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d107      	bne.n	800e3c4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e3b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3b6:	f003 fd69 	bl	8011e8c <tcp_output>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d101      	bne.n	800e3c4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e3c4:	6a3b      	ldr	r3, [r7, #32]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f000 80ac 	beq.w	800e524 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e3da:	2b06      	cmp	r3, #6
 800e3dc:	f200 80a2 	bhi.w	800e524 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ec:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e3f0:	e098      	b.n	800e524 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	db0f      	blt.n	800e41c <tcp_slowtmr+0x1f4>
 800e3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e402:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e406:	4293      	cmp	r3, r2
 800e408:	d008      	beq.n	800e41c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e40c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e410:	b29b      	uxth	r3, r3
 800e412:	3301      	adds	r3, #1
 800e414:	b29b      	uxth	r3, r3
 800e416:	b21a      	sxth	r2, r3
 800e418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e41a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e41e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e424:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e428:	429a      	cmp	r2, r3
 800e42a:	db7b      	blt.n	800e524 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e42c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e42e:	f004 f821 	bl	8012474 <tcp_rexmit_rto_prepare>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d007      	beq.n	800e448 <tcp_slowtmr+0x220>
 800e438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d171      	bne.n	800e524 <tcp_slowtmr+0x2fc>
 800e440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e444:	2b00      	cmp	r3, #0
 800e446:	d06d      	beq.n	800e524 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44a:	7d1b      	ldrb	r3, [r3, #20]
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	d03a      	beq.n	800e4c6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e452:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e456:	2b0c      	cmp	r3, #12
 800e458:	bf28      	it	cs
 800e45a:	230c      	movcs	r3, #12
 800e45c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e460:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e464:	10db      	asrs	r3, r3, #3
 800e466:	b21b      	sxth	r3, r3
 800e468:	461a      	mov	r2, r3
 800e46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e470:	4413      	add	r3, r2
 800e472:	7efa      	ldrb	r2, [r7, #27]
 800e474:	4910      	ldr	r1, [pc, #64]	@ (800e4b8 <tcp_slowtmr+0x290>)
 800e476:	5c8a      	ldrb	r2, [r1, r2]
 800e478:	4093      	lsls	r3, r2
 800e47a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e482:	4293      	cmp	r3, r2
 800e484:	dc1a      	bgt.n	800e4bc <tcp_slowtmr+0x294>
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	b21a      	sxth	r2, r3
 800e48a:	e019      	b.n	800e4c0 <tcp_slowtmr+0x298>
 800e48c:	24007c94 	.word	0x24007c94
 800e490:	24007caa 	.word	0x24007caa
 800e494:	24007ca0 	.word	0x24007ca0
 800e498:	08016224 	.word	0x08016224
 800e49c:	080165a4 	.word	0x080165a4
 800e4a0:	080162a4 	.word	0x080162a4
 800e4a4:	080165d0 	.word	0x080165d0
 800e4a8:	080165fc 	.word	0x080165fc
 800e4ac:	0801662c 	.word	0x0801662c
 800e4b0:	08016660 	.word	0x08016660
 800e4b4:	08017c9c 	.word	0x08017c9c
 800e4b8:	08017c8c 	.word	0x08017c8c
 800e4bc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	bf28      	it	cs
 800e4dc:	4613      	movcs	r3, r2
 800e4de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e4e0:	8a7b      	ldrh	r3, [r7, #18]
 800e4e2:	085b      	lsrs	r3, r3, #1
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4f6:	005b      	lsls	r3, r3, #1
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d206      	bcs.n	800e50c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	b29a      	uxth	r2, r3
 800e506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e508:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e512:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e518:	2200      	movs	r2, #0
 800e51a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e51e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e520:	f004 f818 	bl	8012554 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e526:	7d1b      	ldrb	r3, [r3, #20]
 800e528:	2b06      	cmp	r3, #6
 800e52a:	d111      	bne.n	800e550 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52e:	8b5b      	ldrh	r3, [r3, #26]
 800e530:	f003 0310 	and.w	r3, r3, #16
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00b      	beq.n	800e550 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e538:	4b9c      	ldr	r3, [pc, #624]	@ (800e7ac <tcp_slowtmr+0x584>)
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53e:	6a1b      	ldr	r3, [r3, #32]
 800e540:	1ad3      	subs	r3, r2, r3
 800e542:	2b28      	cmp	r3, #40	@ 0x28
 800e544:	d904      	bls.n	800e550 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e54a:	3301      	adds	r3, #1
 800e54c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e552:	7a5b      	ldrb	r3, [r3, #9]
 800e554:	f003 0308 	and.w	r3, r3, #8
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d04a      	beq.n	800e5f2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e560:	2b04      	cmp	r3, #4
 800e562:	d003      	beq.n	800e56c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e566:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e568:	2b07      	cmp	r3, #7
 800e56a:	d142      	bne.n	800e5f2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e56c:	4b8f      	ldr	r3, [pc, #572]	@ (800e7ac <tcp_slowtmr+0x584>)
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e572:	6a1b      	ldr	r3, [r3, #32]
 800e574:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e578:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e57c:	4b8c      	ldr	r3, [pc, #560]	@ (800e7b0 <tcp_slowtmr+0x588>)
 800e57e:	440b      	add	r3, r1
 800e580:	498c      	ldr	r1, [pc, #560]	@ (800e7b4 <tcp_slowtmr+0x58c>)
 800e582:	fba1 1303 	umull	r1, r3, r1, r3
 800e586:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e588:	429a      	cmp	r2, r3
 800e58a:	d90a      	bls.n	800e5a2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e58c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e590:	3301      	adds	r3, #1
 800e592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e596:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e59a:	3301      	adds	r3, #1
 800e59c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e5a0:	e027      	b.n	800e5f2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5a2:	4b82      	ldr	r3, [pc, #520]	@ (800e7ac <tcp_slowtmr+0x584>)
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a8:	6a1b      	ldr	r3, [r3, #32]
 800e5aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ae:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	4b7f      	ldr	r3, [pc, #508]	@ (800e7b8 <tcp_slowtmr+0x590>)
 800e5bc:	fb00 f303 	mul.w	r3, r0, r3
 800e5c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e5c2:	497c      	ldr	r1, [pc, #496]	@ (800e7b4 <tcp_slowtmr+0x58c>)
 800e5c4:	fba1 1303 	umull	r1, r3, r1, r3
 800e5c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d911      	bls.n	800e5f2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e5ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5d0:	f004 fac4 	bl	8012b5c <tcp_keepalive>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e5da:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d107      	bne.n	800e5f2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ee:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d011      	beq.n	800e61e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e5fa:	4b6c      	ldr	r3, [pc, #432]	@ (800e7ac <tcp_slowtmr+0x584>)
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	1ad2      	subs	r2, r2, r3
 800e604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e606:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e60a:	4619      	mov	r1, r3
 800e60c:	460b      	mov	r3, r1
 800e60e:	005b      	lsls	r3, r3, #1
 800e610:	440b      	add	r3, r1
 800e612:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e614:	429a      	cmp	r2, r3
 800e616:	d302      	bcc.n	800e61e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e618:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e61a:	f000 fddd 	bl	800f1d8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e620:	7d1b      	ldrb	r3, [r3, #20]
 800e622:	2b03      	cmp	r3, #3
 800e624:	d10b      	bne.n	800e63e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e626:	4b61      	ldr	r3, [pc, #388]	@ (800e7ac <tcp_slowtmr+0x584>)
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62c:	6a1b      	ldr	r3, [r3, #32]
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	2b28      	cmp	r3, #40	@ 0x28
 800e632:	d904      	bls.n	800e63e <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e638:	3301      	adds	r3, #1
 800e63a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e640:	7d1b      	ldrb	r3, [r3, #20]
 800e642:	2b09      	cmp	r3, #9
 800e644:	d10b      	bne.n	800e65e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e646:	4b59      	ldr	r3, [pc, #356]	@ (800e7ac <tcp_slowtmr+0x584>)
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	2bf0      	cmp	r3, #240	@ 0xf0
 800e652:	d904      	bls.n	800e65e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e658:	3301      	adds	r3, #1
 800e65a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e65e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e662:	2b00      	cmp	r3, #0
 800e664:	d060      	beq.n	800e728 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e66c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e66e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e670:	f000 fbfe 	bl	800ee70 <tcp_pcb_purge>
      if (prev != NULL) {
 800e674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e676:	2b00      	cmp	r3, #0
 800e678:	d010      	beq.n	800e69c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e67a:	4b50      	ldr	r3, [pc, #320]	@ (800e7bc <tcp_slowtmr+0x594>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e680:	429a      	cmp	r2, r3
 800e682:	d106      	bne.n	800e692 <tcp_slowtmr+0x46a>
 800e684:	4b4e      	ldr	r3, [pc, #312]	@ (800e7c0 <tcp_slowtmr+0x598>)
 800e686:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e68a:	494e      	ldr	r1, [pc, #312]	@ (800e7c4 <tcp_slowtmr+0x59c>)
 800e68c:	484e      	ldr	r0, [pc, #312]	@ (800e7c8 <tcp_slowtmr+0x5a0>)
 800e68e:	f005 fa79 	bl	8013b84 <iprintf>
        prev->next = pcb->next;
 800e692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e694:	68da      	ldr	r2, [r3, #12]
 800e696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e698:	60da      	str	r2, [r3, #12]
 800e69a:	e00f      	b.n	800e6bc <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e69c:	4b47      	ldr	r3, [pc, #284]	@ (800e7bc <tcp_slowtmr+0x594>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d006      	beq.n	800e6b4 <tcp_slowtmr+0x48c>
 800e6a6:	4b46      	ldr	r3, [pc, #280]	@ (800e7c0 <tcp_slowtmr+0x598>)
 800e6a8:	f240 5271 	movw	r2, #1393	@ 0x571
 800e6ac:	4947      	ldr	r1, [pc, #284]	@ (800e7cc <tcp_slowtmr+0x5a4>)
 800e6ae:	4846      	ldr	r0, [pc, #280]	@ (800e7c8 <tcp_slowtmr+0x5a0>)
 800e6b0:	f005 fa68 	bl	8013b84 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	4a40      	ldr	r2, [pc, #256]	@ (800e7bc <tcp_slowtmr+0x594>)
 800e6ba:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e6bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d013      	beq.n	800e6ec <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e6cc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6d4:	8ad2      	ldrh	r2, [r2, #22]
 800e6d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6d8:	8b09      	ldrh	r1, [r1, #24]
 800e6da:	9102      	str	r1, [sp, #8]
 800e6dc:	9201      	str	r2, [sp, #4]
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	462b      	mov	r3, r5
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	4601      	mov	r1, r0
 800e6e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6e8:	f004 f984 	bl	80129f4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6f4:	7d1b      	ldrb	r3, [r3, #20]
 800e6f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e702:	6838      	ldr	r0, [r7, #0]
 800e704:	f7ff f9f2 	bl	800daec <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e708:	4b31      	ldr	r3, [pc, #196]	@ (800e7d0 <tcp_slowtmr+0x5a8>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d004      	beq.n	800e71e <tcp_slowtmr+0x4f6>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f06f 010c 	mvn.w	r1, #12
 800e71a:	68b8      	ldr	r0, [r7, #8]
 800e71c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e71e:	4b2c      	ldr	r3, [pc, #176]	@ (800e7d0 <tcp_slowtmr+0x5a8>)
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d037      	beq.n	800e796 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e726:	e592      	b.n	800e24e <tcp_slowtmr+0x26>
      prev = pcb;
 800e728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e734:	7f1b      	ldrb	r3, [r3, #28]
 800e736:	3301      	adds	r3, #1
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e740:	7f1a      	ldrb	r2, [r3, #28]
 800e742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e744:	7f5b      	ldrb	r3, [r3, #29]
 800e746:	429a      	cmp	r2, r3
 800e748:	d325      	bcc.n	800e796 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74c:	2200      	movs	r2, #0
 800e74e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e750:	4b1f      	ldr	r3, [pc, #124]	@ (800e7d0 <tcp_slowtmr+0x5a8>)
 800e752:	2200      	movs	r2, #0
 800e754:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00b      	beq.n	800e778 <tcp_slowtmr+0x550>
 800e760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e768:	6912      	ldr	r2, [r2, #16]
 800e76a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e76c:	4610      	mov	r0, r2
 800e76e:	4798      	blx	r3
 800e770:	4603      	mov	r3, r0
 800e772:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e776:	e002      	b.n	800e77e <tcp_slowtmr+0x556>
 800e778:	2300      	movs	r3, #0
 800e77a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e77e:	4b14      	ldr	r3, [pc, #80]	@ (800e7d0 <tcp_slowtmr+0x5a8>)
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	f47f ad62 	bne.w	800e24c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e788:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d102      	bne.n	800e796 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e792:	f003 fb7b 	bl	8011e8c <tcp_output>
  while (pcb != NULL) {
 800e796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f47f ad5e 	bne.w	800e25a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e7a2:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d4 <tcp_slowtmr+0x5ac>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e7a8:	e069      	b.n	800e87e <tcp_slowtmr+0x656>
 800e7aa:	bf00      	nop
 800e7ac:	24007c94 	.word	0x24007c94
 800e7b0:	000a4cb8 	.word	0x000a4cb8
 800e7b4:	10624dd3 	.word	0x10624dd3
 800e7b8:	000124f8 	.word	0x000124f8
 800e7bc:	24007ca0 	.word	0x24007ca0
 800e7c0:	08016224 	.word	0x08016224
 800e7c4:	08016698 	.word	0x08016698
 800e7c8:	080162a4 	.word	0x080162a4
 800e7cc:	080166c4 	.word	0x080166c4
 800e7d0:	24007ca8 	.word	0x24007ca8
 800e7d4:	24007ca4 	.word	0x24007ca4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7da:	7d1b      	ldrb	r3, [r3, #20]
 800e7dc:	2b0a      	cmp	r3, #10
 800e7de:	d006      	beq.n	800e7ee <tcp_slowtmr+0x5c6>
 800e7e0:	4b2b      	ldr	r3, [pc, #172]	@ (800e890 <tcp_slowtmr+0x668>)
 800e7e2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e7e6:	492b      	ldr	r1, [pc, #172]	@ (800e894 <tcp_slowtmr+0x66c>)
 800e7e8:	482b      	ldr	r0, [pc, #172]	@ (800e898 <tcp_slowtmr+0x670>)
 800e7ea:	f005 f9cb 	bl	8013b84 <iprintf>
    pcb_remove = 0;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7f4:	4b29      	ldr	r3, [pc, #164]	@ (800e89c <tcp_slowtmr+0x674>)
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fa:	6a1b      	ldr	r3, [r3, #32]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	2bf0      	cmp	r3, #240	@ 0xf0
 800e800:	d904      	bls.n	800e80c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e806:	3301      	adds	r3, #1
 800e808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e80c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e810:	2b00      	cmp	r3, #0
 800e812:	d02f      	beq.n	800e874 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e814:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e816:	f000 fb2b 	bl	800ee70 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d010      	beq.n	800e842 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e820:	4b1f      	ldr	r3, [pc, #124]	@ (800e8a0 <tcp_slowtmr+0x678>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e826:	429a      	cmp	r2, r3
 800e828:	d106      	bne.n	800e838 <tcp_slowtmr+0x610>
 800e82a:	4b19      	ldr	r3, [pc, #100]	@ (800e890 <tcp_slowtmr+0x668>)
 800e82c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e830:	491c      	ldr	r1, [pc, #112]	@ (800e8a4 <tcp_slowtmr+0x67c>)
 800e832:	4819      	ldr	r0, [pc, #100]	@ (800e898 <tcp_slowtmr+0x670>)
 800e834:	f005 f9a6 	bl	8013b84 <iprintf>
        prev->next = pcb->next;
 800e838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83a:	68da      	ldr	r2, [r3, #12]
 800e83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e83e:	60da      	str	r2, [r3, #12]
 800e840:	e00f      	b.n	800e862 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e842:	4b17      	ldr	r3, [pc, #92]	@ (800e8a0 <tcp_slowtmr+0x678>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e848:	429a      	cmp	r2, r3
 800e84a:	d006      	beq.n	800e85a <tcp_slowtmr+0x632>
 800e84c:	4b10      	ldr	r3, [pc, #64]	@ (800e890 <tcp_slowtmr+0x668>)
 800e84e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e852:	4915      	ldr	r1, [pc, #84]	@ (800e8a8 <tcp_slowtmr+0x680>)
 800e854:	4810      	ldr	r0, [pc, #64]	@ (800e898 <tcp_slowtmr+0x670>)
 800e856:	f005 f995 	bl	8013b84 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	4a10      	ldr	r2, [pc, #64]	@ (800e8a0 <tcp_slowtmr+0x678>)
 800e860:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e864:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e86c:	69f8      	ldr	r0, [r7, #28]
 800e86e:	f7ff f93d 	bl	800daec <tcp_free>
 800e872:	e004      	b.n	800e87e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e876:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1a9      	bne.n	800e7d8 <tcp_slowtmr+0x5b0>
    }
  }
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop
 800e888:	3730      	adds	r7, #48	@ 0x30
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bdb0      	pop	{r4, r5, r7, pc}
 800e88e:	bf00      	nop
 800e890:	08016224 	.word	0x08016224
 800e894:	080166f0 	.word	0x080166f0
 800e898:	080162a4 	.word	0x080162a4
 800e89c:	24007c94 	.word	0x24007c94
 800e8a0:	24007ca4 	.word	0x24007ca4
 800e8a4:	08016720 	.word	0x08016720
 800e8a8:	08016748 	.word	0x08016748

0800e8ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e8b2:	4b2d      	ldr	r3, [pc, #180]	@ (800e968 <tcp_fasttmr+0xbc>)
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	4b2b      	ldr	r3, [pc, #172]	@ (800e968 <tcp_fasttmr+0xbc>)
 800e8bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e8be:	4b2b      	ldr	r3, [pc, #172]	@ (800e96c <tcp_fasttmr+0xc0>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8c4:	e048      	b.n	800e958 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	7f9a      	ldrb	r2, [r3, #30]
 800e8ca:	4b27      	ldr	r3, [pc, #156]	@ (800e968 <tcp_fasttmr+0xbc>)
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d03f      	beq.n	800e952 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e8d2:	4b25      	ldr	r3, [pc, #148]	@ (800e968 <tcp_fasttmr+0xbc>)
 800e8d4:	781a      	ldrb	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	8b5b      	ldrh	r3, [r3, #26]
 800e8de:	f003 0301 	and.w	r3, r3, #1
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d010      	beq.n	800e908 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	8b5b      	ldrh	r3, [r3, #26]
 800e8ea:	f043 0302 	orr.w	r3, r3, #2
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f003 fac9 	bl	8011e8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	8b5b      	ldrh	r3, [r3, #26]
 800e8fe:	f023 0303 	bic.w	r3, r3, #3
 800e902:	b29a      	uxth	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	8b5b      	ldrh	r3, [r3, #26]
 800e90c:	f003 0308 	and.w	r3, r3, #8
 800e910:	2b00      	cmp	r3, #0
 800e912:	d009      	beq.n	800e928 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	8b5b      	ldrh	r3, [r3, #26]
 800e918:	f023 0308 	bic.w	r3, r3, #8
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7ff fa76 	bl	800de14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00a      	beq.n	800e94c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e936:	4b0e      	ldr	r3, [pc, #56]	@ (800e970 <tcp_fasttmr+0xc4>)
 800e938:	2200      	movs	r2, #0
 800e93a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f819 	bl	800e974 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e942:	4b0b      	ldr	r3, [pc, #44]	@ (800e970 <tcp_fasttmr+0xc4>)
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d000      	beq.n	800e94c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e94a:	e7b8      	b.n	800e8be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	607b      	str	r3, [r7, #4]
 800e950:	e002      	b.n	800e958 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1b3      	bne.n	800e8c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800e95e:	bf00      	nop
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	24007caa 	.word	0x24007caa
 800e96c:	24007ca0 	.word	0x24007ca0
 800e970:	24007ca8 	.word	0x24007ca8

0800e974 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d109      	bne.n	800e996 <tcp_process_refused_data+0x22>
 800e982:	4b37      	ldr	r3, [pc, #220]	@ (800ea60 <tcp_process_refused_data+0xec>)
 800e984:	f240 6209 	movw	r2, #1545	@ 0x609
 800e988:	4936      	ldr	r1, [pc, #216]	@ (800ea64 <tcp_process_refused_data+0xf0>)
 800e98a:	4837      	ldr	r0, [pc, #220]	@ (800ea68 <tcp_process_refused_data+0xf4>)
 800e98c:	f005 f8fa 	bl	8013b84 <iprintf>
 800e990:	f06f 030f 	mvn.w	r3, #15
 800e994:	e060      	b.n	800ea58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e99a:	7b5b      	ldrb	r3, [r3, #13]
 800e99c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00b      	beq.n	800e9cc <tcp_process_refused_data+0x58>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6918      	ldr	r0, [r3, #16]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	6879      	ldr	r1, [r7, #4]
 800e9c4:	47a0      	blx	r4
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	73fb      	strb	r3, [r7, #15]
 800e9ca:	e007      	b.n	800e9dc <tcp_process_refused_data+0x68>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	6879      	ldr	r1, [r7, #4]
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	f000 f8a4 	bl	800eb20 <tcp_recv_null>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d12a      	bne.n	800ea3a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e9e4:	7bbb      	ldrb	r3, [r7, #14]
 800e9e6:	f003 0320 	and.w	r3, r3, #32
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d033      	beq.n	800ea56 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e9f6:	d005      	beq.n	800ea04 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00b      	beq.n	800ea26 <tcp_process_refused_data+0xb2>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6918      	ldr	r0, [r3, #16]
 800ea18:	2300      	movs	r3, #0
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	6879      	ldr	r1, [r7, #4]
 800ea1e:	47a0      	blx	r4
 800ea20:	4603      	mov	r3, r0
 800ea22:	73fb      	strb	r3, [r7, #15]
 800ea24:	e001      	b.n	800ea2a <tcp_process_refused_data+0xb6>
 800ea26:	2300      	movs	r3, #0
 800ea28:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea2e:	f113 0f0d 	cmn.w	r3, #13
 800ea32:	d110      	bne.n	800ea56 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea34:	f06f 030c 	mvn.w	r3, #12
 800ea38:	e00e      	b.n	800ea58 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ea3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea3e:	f113 0f0d 	cmn.w	r3, #13
 800ea42:	d102      	bne.n	800ea4a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ea44:	f06f 030c 	mvn.w	r3, #12
 800ea48:	e006      	b.n	800ea58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ea50:	f06f 0304 	mvn.w	r3, #4
 800ea54:	e000      	b.n	800ea58 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3714      	adds	r7, #20
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd90      	pop	{r4, r7, pc}
 800ea60:	08016224 	.word	0x08016224
 800ea64:	08016770 	.word	0x08016770
 800ea68:	080162a4 	.word	0x080162a4

0800ea6c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ea74:	e007      	b.n	800ea86 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f80a 	bl	800ea96 <tcp_seg_free>
    seg = next;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1f4      	bne.n	800ea76 <tcp_segs_free+0xa>
  }
}
 800ea8c:	bf00      	nop
 800ea8e:	bf00      	nop
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b082      	sub	sp, #8
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00c      	beq.n	800eabe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d004      	beq.n	800eab6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fe fd6b 	bl	800d58c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eab6:	6879      	ldr	r1, [r7, #4]
 800eab8:	2003      	movs	r0, #3
 800eaba:	f7fd fee5 	bl	800c888 <memp_free>
  }
}
 800eabe:	bf00      	nop
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
	...

0800eac8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d106      	bne.n	800eae4 <tcp_seg_copy+0x1c>
 800ead6:	4b0f      	ldr	r3, [pc, #60]	@ (800eb14 <tcp_seg_copy+0x4c>)
 800ead8:	f240 6282 	movw	r2, #1666	@ 0x682
 800eadc:	490e      	ldr	r1, [pc, #56]	@ (800eb18 <tcp_seg_copy+0x50>)
 800eade:	480f      	ldr	r0, [pc, #60]	@ (800eb1c <tcp_seg_copy+0x54>)
 800eae0:	f005 f850 	bl	8013b84 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eae4:	2003      	movs	r0, #3
 800eae6:	f7fd fe5f 	bl	800c7a8 <memp_malloc>
 800eaea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d101      	bne.n	800eaf6 <tcp_seg_copy+0x2e>
    return NULL;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	e00a      	b.n	800eb0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eaf6:	2210      	movs	r2, #16
 800eaf8:	6879      	ldr	r1, [r7, #4]
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f005 fa0f 	bl	8013f1e <memcpy>
  pbuf_ref(cseg->p);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7fe fde1 	bl	800d6cc <pbuf_ref>
  return cseg;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	08016224 	.word	0x08016224
 800eb18:	080167b4 	.word	0x080167b4
 800eb1c:	080162a4 	.word	0x080162a4

0800eb20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
 800eb2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d109      	bne.n	800eb48 <tcp_recv_null+0x28>
 800eb34:	4b12      	ldr	r3, [pc, #72]	@ (800eb80 <tcp_recv_null+0x60>)
 800eb36:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800eb3a:	4912      	ldr	r1, [pc, #72]	@ (800eb84 <tcp_recv_null+0x64>)
 800eb3c:	4812      	ldr	r0, [pc, #72]	@ (800eb88 <tcp_recv_null+0x68>)
 800eb3e:	f005 f821 	bl	8013b84 <iprintf>
 800eb42:	f06f 030f 	mvn.w	r3, #15
 800eb46:	e016      	b.n	800eb76 <tcp_recv_null+0x56>

  if (p != NULL) {
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d009      	beq.n	800eb62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	891b      	ldrh	r3, [r3, #8]
 800eb52:	4619      	mov	r1, r3
 800eb54:	68b8      	ldr	r0, [r7, #8]
 800eb56:	f7ff fb17 	bl	800e188 <tcp_recved>
    pbuf_free(p);
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f7fe fd16 	bl	800d58c <pbuf_free>
 800eb60:	e008      	b.n	800eb74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eb62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d104      	bne.n	800eb74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eb6a:	68b8      	ldr	r0, [r7, #8]
 800eb6c:	f7ff f9bc 	bl	800dee8 <tcp_close>
 800eb70:	4603      	mov	r3, r0
 800eb72:	e000      	b.n	800eb76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	08016224 	.word	0x08016224
 800eb84:	080167d0 	.word	0x080167d0
 800eb88:	080162a4 	.word	0x080162a4

0800eb8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eb96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	db01      	blt.n	800eba2 <tcp_kill_prio+0x16>
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	e000      	b.n	800eba4 <tcp_kill_prio+0x18>
 800eba2:	237f      	movs	r3, #127	@ 0x7f
 800eba4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800eba6:	7afb      	ldrb	r3, [r7, #11]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d034      	beq.n	800ec16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ebac:	7afb      	ldrb	r3, [r7, #11]
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebba:	4b19      	ldr	r3, [pc, #100]	@ (800ec20 <tcp_kill_prio+0x94>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	617b      	str	r3, [r7, #20]
 800ebc0:	e01f      	b.n	800ec02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	7d5b      	ldrb	r3, [r3, #21]
 800ebc6:	7afa      	ldrb	r2, [r7, #11]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d80c      	bhi.n	800ebe6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ebd0:	7afa      	ldrb	r2, [r7, #11]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d112      	bne.n	800ebfc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebd6:	4b13      	ldr	r3, [pc, #76]	@ (800ec24 <tcp_kill_prio+0x98>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	68fa      	ldr	r2, [r7, #12]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d80a      	bhi.n	800ebfc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ebe6:	4b0f      	ldr	r3, [pc, #60]	@ (800ec24 <tcp_kill_prio+0x98>)
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	7d5b      	ldrb	r3, [r3, #21]
 800ebfa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	617b      	str	r3, [r7, #20]
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d1dc      	bne.n	800ebc2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d004      	beq.n	800ec18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec0e:	6938      	ldr	r0, [r7, #16]
 800ec10:	f7ff fa54 	bl	800e0bc <tcp_abort>
 800ec14:	e000      	b.n	800ec18 <tcp_kill_prio+0x8c>
    return;
 800ec16:	bf00      	nop
  }
}
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	24007ca0 	.word	0x24007ca0
 800ec24:	24007c94 	.word	0x24007c94

0800ec28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	4603      	mov	r3, r0
 800ec30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec32:	79fb      	ldrb	r3, [r7, #7]
 800ec34:	2b08      	cmp	r3, #8
 800ec36:	d009      	beq.n	800ec4c <tcp_kill_state+0x24>
 800ec38:	79fb      	ldrb	r3, [r7, #7]
 800ec3a:	2b09      	cmp	r3, #9
 800ec3c:	d006      	beq.n	800ec4c <tcp_kill_state+0x24>
 800ec3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eca8 <tcp_kill_state+0x80>)
 800ec40:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800ec44:	4919      	ldr	r1, [pc, #100]	@ (800ecac <tcp_kill_state+0x84>)
 800ec46:	481a      	ldr	r0, [pc, #104]	@ (800ecb0 <tcp_kill_state+0x88>)
 800ec48:	f004 ff9c 	bl	8013b84 <iprintf>

  inactivity = 0;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec50:	2300      	movs	r3, #0
 800ec52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec54:	4b17      	ldr	r3, [pc, #92]	@ (800ecb4 <tcp_kill_state+0x8c>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	617b      	str	r3, [r7, #20]
 800ec5a:	e017      	b.n	800ec8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	7d1b      	ldrb	r3, [r3, #20]
 800ec60:	79fa      	ldrb	r2, [r7, #7]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d10f      	bne.n	800ec86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec66:	4b14      	ldr	r3, [pc, #80]	@ (800ecb8 <tcp_kill_state+0x90>)
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	6a1b      	ldr	r3, [r3, #32]
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d807      	bhi.n	800ec86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ec76:	4b10      	ldr	r3, [pc, #64]	@ (800ecb8 <tcp_kill_state+0x90>)
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	6a1b      	ldr	r3, [r3, #32]
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	617b      	str	r3, [r7, #20]
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1e4      	bne.n	800ec5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d003      	beq.n	800eca0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ec98:	2100      	movs	r1, #0
 800ec9a:	6938      	ldr	r0, [r7, #16]
 800ec9c:	f7ff f950 	bl	800df40 <tcp_abandon>
  }
}
 800eca0:	bf00      	nop
 800eca2:	3718      	adds	r7, #24
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	08016224 	.word	0x08016224
 800ecac:	080167ec 	.word	0x080167ec
 800ecb0:	080162a4 	.word	0x080162a4
 800ecb4:	24007ca0 	.word	0x24007ca0
 800ecb8:	24007c94 	.word	0x24007c94

0800ecbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecca:	4b12      	ldr	r3, [pc, #72]	@ (800ed14 <tcp_kill_timewait+0x58>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	60fb      	str	r3, [r7, #12]
 800ecd0:	e012      	b.n	800ecf8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecd2:	4b11      	ldr	r3, [pc, #68]	@ (800ed18 <tcp_kill_timewait+0x5c>)
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	6a1b      	ldr	r3, [r3, #32]
 800ecda:	1ad3      	subs	r3, r2, r3
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d807      	bhi.n	800ecf2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ece2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed18 <tcp_kill_timewait+0x5c>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	60fb      	str	r3, [r7, #12]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1e9      	bne.n	800ecd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d002      	beq.n	800ed0a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed04:	68b8      	ldr	r0, [r7, #8]
 800ed06:	f7ff f9d9 	bl	800e0bc <tcp_abort>
  }
}
 800ed0a:	bf00      	nop
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	24007ca4 	.word	0x24007ca4
 800ed18:	24007c94 	.word	0x24007c94

0800ed1c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed22:	4b10      	ldr	r3, [pc, #64]	@ (800ed64 <tcp_handle_closepend+0x48>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed28:	e014      	b.n	800ed54 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	8b5b      	ldrh	r3, [r3, #26]
 800ed34:	f003 0308 	and.w	r3, r3, #8
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d009      	beq.n	800ed50 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	8b5b      	ldrh	r3, [r3, #26]
 800ed40:	f023 0308 	bic.w	r3, r3, #8
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f7ff f862 	bl	800de14 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1e7      	bne.n	800ed2a <tcp_handle_closepend+0xe>
  }
}
 800ed5a:	bf00      	nop
 800ed5c:	bf00      	nop
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	24007ca0 	.word	0x24007ca0

0800ed68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed72:	2001      	movs	r0, #1
 800ed74:	f7fd fd18 	bl	800c7a8 <memp_malloc>
 800ed78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d126      	bne.n	800edce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ed80:	f7ff ffcc 	bl	800ed1c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ed84:	f7ff ff9a 	bl	800ecbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed88:	2001      	movs	r0, #1
 800ed8a:	f7fd fd0d 	bl	800c7a8 <memp_malloc>
 800ed8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d11b      	bne.n	800edce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ed96:	2009      	movs	r0, #9
 800ed98:	f7ff ff46 	bl	800ec28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed9c:	2001      	movs	r0, #1
 800ed9e:	f7fd fd03 	bl	800c7a8 <memp_malloc>
 800eda2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d111      	bne.n	800edce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800edaa:	2008      	movs	r0, #8
 800edac:	f7ff ff3c 	bl	800ec28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edb0:	2001      	movs	r0, #1
 800edb2:	f7fd fcf9 	bl	800c7a8 <memp_malloc>
 800edb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d107      	bne.n	800edce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800edbe:	79fb      	ldrb	r3, [r7, #7]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7ff fee3 	bl	800eb8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edc6:	2001      	movs	r0, #1
 800edc8:	f7fd fcee 	bl	800c7a8 <memp_malloc>
 800edcc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d03f      	beq.n	800ee54 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800edd4:	229c      	movs	r2, #156	@ 0x9c
 800edd6:	2100      	movs	r1, #0
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f005 f82b 	bl	8013e34 <memset>
    pcb->prio = prio;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	79fa      	ldrb	r2, [r7, #7]
 800ede2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800edea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800edf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	22ff      	movs	r2, #255	@ 0xff
 800ee02:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ee0a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2206      	movs	r2, #6
 800ee10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2206      	movs	r2, #6
 800ee18:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee20:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2201      	movs	r2, #1
 800ee26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ee2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee60 <tcp_alloc+0xf8>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee32:	4b0c      	ldr	r3, [pc, #48]	@ (800ee64 <tcp_alloc+0xfc>)
 800ee34:	781a      	ldrb	r2, [r3, #0]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ee40:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	4a08      	ldr	r2, [pc, #32]	@ (800ee68 <tcp_alloc+0x100>)
 800ee48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	4a07      	ldr	r2, [pc, #28]	@ (800ee6c <tcp_alloc+0x104>)
 800ee50:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ee54:	68fb      	ldr	r3, [r7, #12]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	24007c94 	.word	0x24007c94
 800ee64:	24007caa 	.word	0x24007caa
 800ee68:	0800eb21 	.word	0x0800eb21
 800ee6c:	006ddd00 	.word	0x006ddd00

0800ee70 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d107      	bne.n	800ee8e <tcp_pcb_purge+0x1e>
 800ee7e:	4b21      	ldr	r3, [pc, #132]	@ (800ef04 <tcp_pcb_purge+0x94>)
 800ee80:	f640 0251 	movw	r2, #2129	@ 0x851
 800ee84:	4920      	ldr	r1, [pc, #128]	@ (800ef08 <tcp_pcb_purge+0x98>)
 800ee86:	4821      	ldr	r0, [pc, #132]	@ (800ef0c <tcp_pcb_purge+0x9c>)
 800ee88:	f004 fe7c 	bl	8013b84 <iprintf>
 800ee8c:	e037      	b.n	800eefe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	7d1b      	ldrb	r3, [r3, #20]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d033      	beq.n	800eefe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ee9a:	2b0a      	cmp	r3, #10
 800ee9c:	d02f      	beq.n	800eefe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d02b      	beq.n	800eefe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d007      	beq.n	800eebe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe fb6a 	bl	800d58c <pbuf_free>
      pcb->refused_data = NULL;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d002      	beq.n	800eecc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f986 	bl	800f1d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eed2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7ff fdc7 	bl	800ea6c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7ff fdc2 	bl	800ea6c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	66da      	str	r2, [r3, #108]	@ 0x6c
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	08016224 	.word	0x08016224
 800ef08:	080168ac 	.word	0x080168ac
 800ef0c:	080162a4 	.word	0x080162a4

0800ef10 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d106      	bne.n	800ef2e <tcp_pcb_remove+0x1e>
 800ef20:	4b3e      	ldr	r3, [pc, #248]	@ (800f01c <tcp_pcb_remove+0x10c>)
 800ef22:	f640 0283 	movw	r2, #2179	@ 0x883
 800ef26:	493e      	ldr	r1, [pc, #248]	@ (800f020 <tcp_pcb_remove+0x110>)
 800ef28:	483e      	ldr	r0, [pc, #248]	@ (800f024 <tcp_pcb_remove+0x114>)
 800ef2a:	f004 fe2b 	bl	8013b84 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d106      	bne.n	800ef42 <tcp_pcb_remove+0x32>
 800ef34:	4b39      	ldr	r3, [pc, #228]	@ (800f01c <tcp_pcb_remove+0x10c>)
 800ef36:	f640 0284 	movw	r2, #2180	@ 0x884
 800ef3a:	493b      	ldr	r1, [pc, #236]	@ (800f028 <tcp_pcb_remove+0x118>)
 800ef3c:	4839      	ldr	r0, [pc, #228]	@ (800f024 <tcp_pcb_remove+0x114>)
 800ef3e:	f004 fe21 	bl	8013b84 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d105      	bne.n	800ef58 <tcp_pcb_remove+0x48>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	68da      	ldr	r2, [r3, #12]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	e013      	b.n	800ef80 <tcp_pcb_remove+0x70>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	60fb      	str	r3, [r7, #12]
 800ef5e:	e00c      	b.n	800ef7a <tcp_pcb_remove+0x6a>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	683a      	ldr	r2, [r7, #0]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d104      	bne.n	800ef74 <tcp_pcb_remove+0x64>
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	68da      	ldr	r2, [r3, #12]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	60da      	str	r2, [r3, #12]
 800ef72:	e005      	b.n	800ef80 <tcp_pcb_remove+0x70>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1ef      	bne.n	800ef60 <tcp_pcb_remove+0x50>
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	2200      	movs	r2, #0
 800ef84:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ef86:	6838      	ldr	r0, [r7, #0]
 800ef88:	f7ff ff72 	bl	800ee70 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	7d1b      	ldrb	r3, [r3, #20]
 800ef90:	2b0a      	cmp	r3, #10
 800ef92:	d013      	beq.n	800efbc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d00f      	beq.n	800efbc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	8b5b      	ldrh	r3, [r3, #26]
 800efa0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d009      	beq.n	800efbc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	8b5b      	ldrh	r3, [r3, #26]
 800efac:	f043 0302 	orr.w	r3, r3, #2
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800efb6:	6838      	ldr	r0, [r7, #0]
 800efb8:	f002 ff68 	bl	8011e8c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	7d1b      	ldrb	r3, [r3, #20]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d020      	beq.n	800f006 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d006      	beq.n	800efda <tcp_pcb_remove+0xca>
 800efcc:	4b13      	ldr	r3, [pc, #76]	@ (800f01c <tcp_pcb_remove+0x10c>)
 800efce:	f640 0293 	movw	r2, #2195	@ 0x893
 800efd2:	4916      	ldr	r1, [pc, #88]	@ (800f02c <tcp_pcb_remove+0x11c>)
 800efd4:	4813      	ldr	r0, [pc, #76]	@ (800f024 <tcp_pcb_remove+0x114>)
 800efd6:	f004 fdd5 	bl	8013b84 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d006      	beq.n	800eff0 <tcp_pcb_remove+0xe0>
 800efe2:	4b0e      	ldr	r3, [pc, #56]	@ (800f01c <tcp_pcb_remove+0x10c>)
 800efe4:	f640 0294 	movw	r2, #2196	@ 0x894
 800efe8:	4911      	ldr	r1, [pc, #68]	@ (800f030 <tcp_pcb_remove+0x120>)
 800efea:	480e      	ldr	r0, [pc, #56]	@ (800f024 <tcp_pcb_remove+0x114>)
 800efec:	f004 fdca 	bl	8013b84 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d006      	beq.n	800f006 <tcp_pcb_remove+0xf6>
 800eff8:	4b08      	ldr	r3, [pc, #32]	@ (800f01c <tcp_pcb_remove+0x10c>)
 800effa:	f640 0296 	movw	r2, #2198	@ 0x896
 800effe:	490d      	ldr	r1, [pc, #52]	@ (800f034 <tcp_pcb_remove+0x124>)
 800f000:	4808      	ldr	r0, [pc, #32]	@ (800f024 <tcp_pcb_remove+0x114>)
 800f002:	f004 fdbf 	bl	8013b84 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	2200      	movs	r2, #0
 800f00a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2200      	movs	r2, #0
 800f010:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f012:	bf00      	nop
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	08016224 	.word	0x08016224
 800f020:	080168c8 	.word	0x080168c8
 800f024:	080162a4 	.word	0x080162a4
 800f028:	080168e4 	.word	0x080168e4
 800f02c:	08016904 	.word	0x08016904
 800f030:	0801691c 	.word	0x0801691c
 800f034:	08016938 	.word	0x08016938

0800f038 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d106      	bne.n	800f054 <tcp_next_iss+0x1c>
 800f046:	4b0a      	ldr	r3, [pc, #40]	@ (800f070 <tcp_next_iss+0x38>)
 800f048:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f04c:	4909      	ldr	r1, [pc, #36]	@ (800f074 <tcp_next_iss+0x3c>)
 800f04e:	480a      	ldr	r0, [pc, #40]	@ (800f078 <tcp_next_iss+0x40>)
 800f050:	f004 fd98 	bl	8013b84 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f054:	4b09      	ldr	r3, [pc, #36]	@ (800f07c <tcp_next_iss+0x44>)
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	4b09      	ldr	r3, [pc, #36]	@ (800f080 <tcp_next_iss+0x48>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4413      	add	r3, r2
 800f05e:	4a07      	ldr	r2, [pc, #28]	@ (800f07c <tcp_next_iss+0x44>)
 800f060:	6013      	str	r3, [r2, #0]
  return iss;
 800f062:	4b06      	ldr	r3, [pc, #24]	@ (800f07c <tcp_next_iss+0x44>)
 800f064:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f066:	4618      	mov	r0, r3
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	08016224 	.word	0x08016224
 800f074:	08016950 	.word	0x08016950
 800f078:	080162a4 	.word	0x080162a4
 800f07c:	2400002c 	.word	0x2400002c
 800f080:	24007c94 	.word	0x24007c94

0800f084 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b086      	sub	sp, #24
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
 800f090:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d106      	bne.n	800f0a6 <tcp_eff_send_mss_netif+0x22>
 800f098:	4b14      	ldr	r3, [pc, #80]	@ (800f0ec <tcp_eff_send_mss_netif+0x68>)
 800f09a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f09e:	4914      	ldr	r1, [pc, #80]	@ (800f0f0 <tcp_eff_send_mss_netif+0x6c>)
 800f0a0:	4814      	ldr	r0, [pc, #80]	@ (800f0f4 <tcp_eff_send_mss_netif+0x70>)
 800f0a2:	f004 fd6f 	bl	8013b84 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f0ac:	89fb      	ldrh	r3, [r7, #14]
 800f0ae:	e019      	b.n	800f0e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f0b6:	8afb      	ldrh	r3, [r7, #22]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d012      	beq.n	800f0e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f0bc:	2328      	movs	r3, #40	@ 0x28
 800f0be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f0c0:	8afa      	ldrh	r2, [r7, #22]
 800f0c2:	8abb      	ldrh	r3, [r7, #20]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d904      	bls.n	800f0d2 <tcp_eff_send_mss_netif+0x4e>
 800f0c8:	8afa      	ldrh	r2, [r7, #22]
 800f0ca:	8abb      	ldrh	r3, [r7, #20]
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	e000      	b.n	800f0d4 <tcp_eff_send_mss_netif+0x50>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f0d6:	8a7a      	ldrh	r2, [r7, #18]
 800f0d8:	89fb      	ldrh	r3, [r7, #14]
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	bf28      	it	cs
 800f0de:	4613      	movcs	r3, r2
 800f0e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f0e2:	89fb      	ldrh	r3, [r7, #14]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	08016224 	.word	0x08016224
 800f0f0:	0801696c 	.word	0x0801696c
 800f0f4:	080162a4 	.word	0x080162a4

0800f0f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d119      	bne.n	800f140 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f10c:	4b10      	ldr	r3, [pc, #64]	@ (800f150 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f10e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f112:	4910      	ldr	r1, [pc, #64]	@ (800f154 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f114:	4810      	ldr	r0, [pc, #64]	@ (800f158 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f116:	f004 fd35 	bl	8013b84 <iprintf>

  while (pcb != NULL) {
 800f11a:	e011      	b.n	800f140 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	429a      	cmp	r2, r3
 800f126:	d108      	bne.n	800f13a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f7fe ffc4 	bl	800e0bc <tcp_abort>
      pcb = next;
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	60fb      	str	r3, [r7, #12]
 800f138:	e002      	b.n	800f140 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d1ea      	bne.n	800f11c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f146:	bf00      	nop
 800f148:	bf00      	nop
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	08016224 	.word	0x08016224
 800f154:	08016994 	.word	0x08016994
 800f158:	080162a4 	.word	0x080162a4

0800f15c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d02a      	beq.n	800f1c2 <tcp_netif_ip_addr_changed+0x66>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d026      	beq.n	800f1c2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f174:	4b15      	ldr	r3, [pc, #84]	@ (800f1cc <tcp_netif_ip_addr_changed+0x70>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4619      	mov	r1, r3
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f7ff ffbc 	bl	800f0f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f180:	4b13      	ldr	r3, [pc, #76]	@ (800f1d0 <tcp_netif_ip_addr_changed+0x74>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4619      	mov	r1, r3
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f7ff ffb6 	bl	800f0f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d017      	beq.n	800f1c2 <tcp_netif_ip_addr_changed+0x66>
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d013      	beq.n	800f1c2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f19a:	4b0e      	ldr	r3, [pc, #56]	@ (800f1d4 <tcp_netif_ip_addr_changed+0x78>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	60fb      	str	r3, [r7, #12]
 800f1a0:	e00c      	b.n	800f1bc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d103      	bne.n	800f1b6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	60fb      	str	r3, [r7, #12]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d1ef      	bne.n	800f1a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f1c2:	bf00      	nop
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	24007ca0 	.word	0x24007ca0
 800f1d0:	24007c98 	.word	0x24007c98
 800f1d4:	24007c9c 	.word	0x24007c9c

0800f1d8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d007      	beq.n	800f1f8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7ff fc3d 	bl	800ea6c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f1f8:	bf00      	nop
 800f1fa:	3708      	adds	r7, #8
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f200:	b590      	push	{r4, r7, lr}
 800f202:	b08d      	sub	sp, #52	@ 0x34
 800f204:	af04      	add	r7, sp, #16
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d105      	bne.n	800f21c <tcp_input+0x1c>
 800f210:	4b9b      	ldr	r3, [pc, #620]	@ (800f480 <tcp_input+0x280>)
 800f212:	2283      	movs	r2, #131	@ 0x83
 800f214:	499b      	ldr	r1, [pc, #620]	@ (800f484 <tcp_input+0x284>)
 800f216:	489c      	ldr	r0, [pc, #624]	@ (800f488 <tcp_input+0x288>)
 800f218:	f004 fcb4 	bl	8013b84 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	4a9a      	ldr	r2, [pc, #616]	@ (800f48c <tcp_input+0x28c>)
 800f222:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	895b      	ldrh	r3, [r3, #10]
 800f228:	2b13      	cmp	r3, #19
 800f22a:	f240 83d1 	bls.w	800f9d0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f22e:	4b98      	ldr	r3, [pc, #608]	@ (800f490 <tcp_input+0x290>)
 800f230:	695b      	ldr	r3, [r3, #20]
 800f232:	4a97      	ldr	r2, [pc, #604]	@ (800f490 <tcp_input+0x290>)
 800f234:	6812      	ldr	r2, [r2, #0]
 800f236:	4611      	mov	r1, r2
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fc f805 	bl	800b248 <ip4_addr_isbroadcast_u32>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	f040 83c7 	bne.w	800f9d4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f246:	4b92      	ldr	r3, [pc, #584]	@ (800f490 <tcp_input+0x290>)
 800f248:	695b      	ldr	r3, [r3, #20]
 800f24a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f24e:	2be0      	cmp	r3, #224	@ 0xe0
 800f250:	f000 83c0 	beq.w	800f9d4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f254:	4b8d      	ldr	r3, [pc, #564]	@ (800f48c <tcp_input+0x28c>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	899b      	ldrh	r3, [r3, #12]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f8 fbd7 	bl	8007a10 <lwip_htons>
 800f262:	4603      	mov	r3, r0
 800f264:	0b1b      	lsrs	r3, r3, #12
 800f266:	b29b      	uxth	r3, r3
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f26e:	7cbb      	ldrb	r3, [r7, #18]
 800f270:	2b13      	cmp	r3, #19
 800f272:	f240 83b1 	bls.w	800f9d8 <tcp_input+0x7d8>
 800f276:	7cbb      	ldrb	r3, [r7, #18]
 800f278:	b29a      	uxth	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	891b      	ldrh	r3, [r3, #8]
 800f27e:	429a      	cmp	r2, r3
 800f280:	f200 83aa 	bhi.w	800f9d8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f284:	7cbb      	ldrb	r3, [r7, #18]
 800f286:	b29b      	uxth	r3, r3
 800f288:	3b14      	subs	r3, #20
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	4b81      	ldr	r3, [pc, #516]	@ (800f494 <tcp_input+0x294>)
 800f28e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f290:	4b81      	ldr	r3, [pc, #516]	@ (800f498 <tcp_input+0x298>)
 800f292:	2200      	movs	r2, #0
 800f294:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	895a      	ldrh	r2, [r3, #10]
 800f29a:	7cbb      	ldrb	r3, [r7, #18]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d309      	bcc.n	800f2b6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f2a2:	4b7c      	ldr	r3, [pc, #496]	@ (800f494 <tcp_input+0x294>)
 800f2a4:	881a      	ldrh	r2, [r3, #0]
 800f2a6:	4b7d      	ldr	r3, [pc, #500]	@ (800f49c <tcp_input+0x29c>)
 800f2a8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f2aa:	7cbb      	ldrb	r3, [r7, #18]
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7fe f8e6 	bl	800d480 <pbuf_remove_header>
 800f2b4:	e04e      	b.n	800f354 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d105      	bne.n	800f2ca <tcp_input+0xca>
 800f2be:	4b70      	ldr	r3, [pc, #448]	@ (800f480 <tcp_input+0x280>)
 800f2c0:	22c2      	movs	r2, #194	@ 0xc2
 800f2c2:	4977      	ldr	r1, [pc, #476]	@ (800f4a0 <tcp_input+0x2a0>)
 800f2c4:	4870      	ldr	r0, [pc, #448]	@ (800f488 <tcp_input+0x288>)
 800f2c6:	f004 fc5d 	bl	8013b84 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f2ca:	2114      	movs	r1, #20
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7fe f8d7 	bl	800d480 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	895a      	ldrh	r2, [r3, #10]
 800f2d6:	4b71      	ldr	r3, [pc, #452]	@ (800f49c <tcp_input+0x29c>)
 800f2d8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f2da:	4b6e      	ldr	r3, [pc, #440]	@ (800f494 <tcp_input+0x294>)
 800f2dc:	881a      	ldrh	r2, [r3, #0]
 800f2de:	4b6f      	ldr	r3, [pc, #444]	@ (800f49c <tcp_input+0x29c>)
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	1ad3      	subs	r3, r2, r3
 800f2e4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f2e6:	4b6d      	ldr	r3, [pc, #436]	@ (800f49c <tcp_input+0x29c>)
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7fe f8c7 	bl	800d480 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	895b      	ldrh	r3, [r3, #10]
 800f2f8:	8a3a      	ldrh	r2, [r7, #16]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	f200 836e 	bhi.w	800f9dc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	4a64      	ldr	r2, [pc, #400]	@ (800f498 <tcp_input+0x298>)
 800f308:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	8a3a      	ldrh	r2, [r7, #16]
 800f310:	4611      	mov	r1, r2
 800f312:	4618      	mov	r0, r3
 800f314:	f7fe f8b4 	bl	800d480 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	891a      	ldrh	r2, [r3, #8]
 800f31c:	8a3b      	ldrh	r3, [r7, #16]
 800f31e:	1ad3      	subs	r3, r2, r3
 800f320:	b29a      	uxth	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	895b      	ldrh	r3, [r3, #10]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d005      	beq.n	800f33a <tcp_input+0x13a>
 800f32e:	4b54      	ldr	r3, [pc, #336]	@ (800f480 <tcp_input+0x280>)
 800f330:	22df      	movs	r2, #223	@ 0xdf
 800f332:	495c      	ldr	r1, [pc, #368]	@ (800f4a4 <tcp_input+0x2a4>)
 800f334:	4854      	ldr	r0, [pc, #336]	@ (800f488 <tcp_input+0x288>)
 800f336:	f004 fc25 	bl	8013b84 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	891a      	ldrh	r2, [r3, #8]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	891b      	ldrh	r3, [r3, #8]
 800f344:	429a      	cmp	r2, r3
 800f346:	d005      	beq.n	800f354 <tcp_input+0x154>
 800f348:	4b4d      	ldr	r3, [pc, #308]	@ (800f480 <tcp_input+0x280>)
 800f34a:	22e0      	movs	r2, #224	@ 0xe0
 800f34c:	4956      	ldr	r1, [pc, #344]	@ (800f4a8 <tcp_input+0x2a8>)
 800f34e:	484e      	ldr	r0, [pc, #312]	@ (800f488 <tcp_input+0x288>)
 800f350:	f004 fc18 	bl	8013b84 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f354:	4b4d      	ldr	r3, [pc, #308]	@ (800f48c <tcp_input+0x28c>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	4a4b      	ldr	r2, [pc, #300]	@ (800f48c <tcp_input+0x28c>)
 800f35e:	6814      	ldr	r4, [r2, #0]
 800f360:	4618      	mov	r0, r3
 800f362:	f7f8 fb55 	bl	8007a10 <lwip_htons>
 800f366:	4603      	mov	r3, r0
 800f368:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f36a:	4b48      	ldr	r3, [pc, #288]	@ (800f48c <tcp_input+0x28c>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	885b      	ldrh	r3, [r3, #2]
 800f370:	b29b      	uxth	r3, r3
 800f372:	4a46      	ldr	r2, [pc, #280]	@ (800f48c <tcp_input+0x28c>)
 800f374:	6814      	ldr	r4, [r2, #0]
 800f376:	4618      	mov	r0, r3
 800f378:	f7f8 fb4a 	bl	8007a10 <lwip_htons>
 800f37c:	4603      	mov	r3, r0
 800f37e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f380:	4b42      	ldr	r3, [pc, #264]	@ (800f48c <tcp_input+0x28c>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	4a41      	ldr	r2, [pc, #260]	@ (800f48c <tcp_input+0x28c>)
 800f388:	6814      	ldr	r4, [r2, #0]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7f8 fb55 	bl	8007a3a <lwip_htonl>
 800f390:	4603      	mov	r3, r0
 800f392:	6063      	str	r3, [r4, #4]
 800f394:	6863      	ldr	r3, [r4, #4]
 800f396:	4a45      	ldr	r2, [pc, #276]	@ (800f4ac <tcp_input+0x2ac>)
 800f398:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f39a:	4b3c      	ldr	r3, [pc, #240]	@ (800f48c <tcp_input+0x28c>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	4a3a      	ldr	r2, [pc, #232]	@ (800f48c <tcp_input+0x28c>)
 800f3a2:	6814      	ldr	r4, [r2, #0]
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7f8 fb48 	bl	8007a3a <lwip_htonl>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	60a3      	str	r3, [r4, #8]
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	4a3f      	ldr	r2, [pc, #252]	@ (800f4b0 <tcp_input+0x2b0>)
 800f3b2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f3b4:	4b35      	ldr	r3, [pc, #212]	@ (800f48c <tcp_input+0x28c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	89db      	ldrh	r3, [r3, #14]
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	4a33      	ldr	r2, [pc, #204]	@ (800f48c <tcp_input+0x28c>)
 800f3be:	6814      	ldr	r4, [r2, #0]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7f8 fb25 	bl	8007a10 <lwip_htons>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f3ca:	4b30      	ldr	r3, [pc, #192]	@ (800f48c <tcp_input+0x28c>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	899b      	ldrh	r3, [r3, #12]
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7f8 fb1c 	bl	8007a10 <lwip_htons>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f3e0:	b2da      	uxtb	r2, r3
 800f3e2:	4b34      	ldr	r3, [pc, #208]	@ (800f4b4 <tcp_input+0x2b4>)
 800f3e4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	891a      	ldrh	r2, [r3, #8]
 800f3ea:	4b33      	ldr	r3, [pc, #204]	@ (800f4b8 <tcp_input+0x2b8>)
 800f3ec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f3ee:	4b31      	ldr	r3, [pc, #196]	@ (800f4b4 <tcp_input+0x2b4>)
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	f003 0303 	and.w	r3, r3, #3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00c      	beq.n	800f414 <tcp_input+0x214>
    tcplen++;
 800f3fa:	4b2f      	ldr	r3, [pc, #188]	@ (800f4b8 <tcp_input+0x2b8>)
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	3301      	adds	r3, #1
 800f400:	b29a      	uxth	r2, r3
 800f402:	4b2d      	ldr	r3, [pc, #180]	@ (800f4b8 <tcp_input+0x2b8>)
 800f404:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	891a      	ldrh	r2, [r3, #8]
 800f40a:	4b2b      	ldr	r3, [pc, #172]	@ (800f4b8 <tcp_input+0x2b8>)
 800f40c:	881b      	ldrh	r3, [r3, #0]
 800f40e:	429a      	cmp	r2, r3
 800f410:	f200 82e6 	bhi.w	800f9e0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f414:	2300      	movs	r3, #0
 800f416:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f418:	4b28      	ldr	r3, [pc, #160]	@ (800f4bc <tcp_input+0x2bc>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	61fb      	str	r3, [r7, #28]
 800f41e:	e09d      	b.n	800f55c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	7d1b      	ldrb	r3, [r3, #20]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d105      	bne.n	800f434 <tcp_input+0x234>
 800f428:	4b15      	ldr	r3, [pc, #84]	@ (800f480 <tcp_input+0x280>)
 800f42a:	22fb      	movs	r2, #251	@ 0xfb
 800f42c:	4924      	ldr	r1, [pc, #144]	@ (800f4c0 <tcp_input+0x2c0>)
 800f42e:	4816      	ldr	r0, [pc, #88]	@ (800f488 <tcp_input+0x288>)
 800f430:	f004 fba8 	bl	8013b84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	7d1b      	ldrb	r3, [r3, #20]
 800f438:	2b0a      	cmp	r3, #10
 800f43a:	d105      	bne.n	800f448 <tcp_input+0x248>
 800f43c:	4b10      	ldr	r3, [pc, #64]	@ (800f480 <tcp_input+0x280>)
 800f43e:	22fc      	movs	r2, #252	@ 0xfc
 800f440:	4920      	ldr	r1, [pc, #128]	@ (800f4c4 <tcp_input+0x2c4>)
 800f442:	4811      	ldr	r0, [pc, #68]	@ (800f488 <tcp_input+0x288>)
 800f444:	f004 fb9e 	bl	8013b84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	7d1b      	ldrb	r3, [r3, #20]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d105      	bne.n	800f45c <tcp_input+0x25c>
 800f450:	4b0b      	ldr	r3, [pc, #44]	@ (800f480 <tcp_input+0x280>)
 800f452:	22fd      	movs	r2, #253	@ 0xfd
 800f454:	491c      	ldr	r1, [pc, #112]	@ (800f4c8 <tcp_input+0x2c8>)
 800f456:	480c      	ldr	r0, [pc, #48]	@ (800f488 <tcp_input+0x288>)
 800f458:	f004 fb94 	bl	8013b84 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	7a1b      	ldrb	r3, [r3, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d033      	beq.n	800f4cc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	7a1a      	ldrb	r2, [r3, #8]
 800f468:	4b09      	ldr	r3, [pc, #36]	@ (800f490 <tcp_input+0x290>)
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f470:	3301      	adds	r3, #1
 800f472:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f474:	429a      	cmp	r2, r3
 800f476:	d029      	beq.n	800f4cc <tcp_input+0x2cc>
      prev = pcb;
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	61bb      	str	r3, [r7, #24]
      continue;
 800f47c:	e06b      	b.n	800f556 <tcp_input+0x356>
 800f47e:	bf00      	nop
 800f480:	080169c8 	.word	0x080169c8
 800f484:	08016a38 	.word	0x08016a38
 800f488:	08016a50 	.word	0x08016a50
 800f48c:	24007cbc 	.word	0x24007cbc
 800f490:	24004d4c 	.word	0x24004d4c
 800f494:	24007cc0 	.word	0x24007cc0
 800f498:	24007cc4 	.word	0x24007cc4
 800f49c:	24007cc2 	.word	0x24007cc2
 800f4a0:	08016a78 	.word	0x08016a78
 800f4a4:	08016a88 	.word	0x08016a88
 800f4a8:	08016a94 	.word	0x08016a94
 800f4ac:	24007ccc 	.word	0x24007ccc
 800f4b0:	24007cd0 	.word	0x24007cd0
 800f4b4:	24007cd8 	.word	0x24007cd8
 800f4b8:	24007cd6 	.word	0x24007cd6
 800f4bc:	24007ca0 	.word	0x24007ca0
 800f4c0:	08016ab4 	.word	0x08016ab4
 800f4c4:	08016adc 	.word	0x08016adc
 800f4c8:	08016b08 	.word	0x08016b08
    }

    if (pcb->remote_port == tcphdr->src &&
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	8b1a      	ldrh	r2, [r3, #24]
 800f4d0:	4b72      	ldr	r3, [pc, #456]	@ (800f69c <tcp_input+0x49c>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	881b      	ldrh	r3, [r3, #0]
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d13a      	bne.n	800f552 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	8ada      	ldrh	r2, [r3, #22]
 800f4e0:	4b6e      	ldr	r3, [pc, #440]	@ (800f69c <tcp_input+0x49c>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	885b      	ldrh	r3, [r3, #2]
 800f4e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d132      	bne.n	800f552 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	685a      	ldr	r2, [r3, #4]
 800f4f0:	4b6b      	ldr	r3, [pc, #428]	@ (800f6a0 <tcp_input+0x4a0>)
 800f4f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d12c      	bne.n	800f552 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	4b68      	ldr	r3, [pc, #416]	@ (800f6a0 <tcp_input+0x4a0>)
 800f4fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f500:	429a      	cmp	r2, r3
 800f502:	d126      	bne.n	800f552 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	69fa      	ldr	r2, [r7, #28]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d106      	bne.n	800f51c <tcp_input+0x31c>
 800f50e:	4b65      	ldr	r3, [pc, #404]	@ (800f6a4 <tcp_input+0x4a4>)
 800f510:	f240 120d 	movw	r2, #269	@ 0x10d
 800f514:	4964      	ldr	r1, [pc, #400]	@ (800f6a8 <tcp_input+0x4a8>)
 800f516:	4865      	ldr	r0, [pc, #404]	@ (800f6ac <tcp_input+0x4ac>)
 800f518:	f004 fb34 	bl	8013b84 <iprintf>
      if (prev != NULL) {
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00a      	beq.n	800f538 <tcp_input+0x338>
        prev->next = pcb->next;
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	68da      	ldr	r2, [r3, #12]
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f52a:	4b61      	ldr	r3, [pc, #388]	@ (800f6b0 <tcp_input+0x4b0>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f532:	4a5f      	ldr	r2, [pc, #380]	@ (800f6b0 <tcp_input+0x4b0>)
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	69fa      	ldr	r2, [r7, #28]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d111      	bne.n	800f566 <tcp_input+0x366>
 800f542:	4b58      	ldr	r3, [pc, #352]	@ (800f6a4 <tcp_input+0x4a4>)
 800f544:	f240 1215 	movw	r2, #277	@ 0x115
 800f548:	495a      	ldr	r1, [pc, #360]	@ (800f6b4 <tcp_input+0x4b4>)
 800f54a:	4858      	ldr	r0, [pc, #352]	@ (800f6ac <tcp_input+0x4ac>)
 800f54c:	f004 fb1a 	bl	8013b84 <iprintf>
      break;
 800f550:	e009      	b.n	800f566 <tcp_input+0x366>
    }
    prev = pcb;
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	61fb      	str	r3, [r7, #28]
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f47f af5e 	bne.w	800f420 <tcp_input+0x220>
 800f564:	e000      	b.n	800f568 <tcp_input+0x368>
      break;
 800f566:	bf00      	nop
  }

  if (pcb == NULL) {
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f040 80aa 	bne.w	800f6c4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f570:	4b51      	ldr	r3, [pc, #324]	@ (800f6b8 <tcp_input+0x4b8>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	61fb      	str	r3, [r7, #28]
 800f576:	e03f      	b.n	800f5f8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	7d1b      	ldrb	r3, [r3, #20]
 800f57c:	2b0a      	cmp	r3, #10
 800f57e:	d006      	beq.n	800f58e <tcp_input+0x38e>
 800f580:	4b48      	ldr	r3, [pc, #288]	@ (800f6a4 <tcp_input+0x4a4>)
 800f582:	f240 121f 	movw	r2, #287	@ 0x11f
 800f586:	494d      	ldr	r1, [pc, #308]	@ (800f6bc <tcp_input+0x4bc>)
 800f588:	4848      	ldr	r0, [pc, #288]	@ (800f6ac <tcp_input+0x4ac>)
 800f58a:	f004 fafb 	bl	8013b84 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	7a1b      	ldrb	r3, [r3, #8]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d009      	beq.n	800f5aa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	7a1a      	ldrb	r2, [r3, #8]
 800f59a:	4b41      	ldr	r3, [pc, #260]	@ (800f6a0 <tcp_input+0x4a0>)
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d122      	bne.n	800f5f0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	8b1a      	ldrh	r2, [r3, #24]
 800f5ae:	4b3b      	ldr	r3, [pc, #236]	@ (800f69c <tcp_input+0x49c>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d11b      	bne.n	800f5f2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	8ada      	ldrh	r2, [r3, #22]
 800f5be:	4b37      	ldr	r3, [pc, #220]	@ (800f69c <tcp_input+0x49c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	885b      	ldrh	r3, [r3, #2]
 800f5c4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d113      	bne.n	800f5f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	685a      	ldr	r2, [r3, #4]
 800f5ce:	4b34      	ldr	r3, [pc, #208]	@ (800f6a0 <tcp_input+0x4a0>)
 800f5d0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d10d      	bne.n	800f5f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	681a      	ldr	r2, [r3, #0]
 800f5da:	4b31      	ldr	r3, [pc, #196]	@ (800f6a0 <tcp_input+0x4a0>)
 800f5dc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d107      	bne.n	800f5f2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f5e2:	69f8      	ldr	r0, [r7, #28]
 800f5e4:	f000 fb56 	bl	800fc94 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7fd ffcf 	bl	800d58c <pbuf_free>
        return;
 800f5ee:	e1fd      	b.n	800f9ec <tcp_input+0x7ec>
        continue;
 800f5f0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	61fb      	str	r3, [r7, #28]
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1bc      	bne.n	800f578 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f5fe:	2300      	movs	r3, #0
 800f600:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f602:	4b2f      	ldr	r3, [pc, #188]	@ (800f6c0 <tcp_input+0x4c0>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	617b      	str	r3, [r7, #20]
 800f608:	e02a      	b.n	800f660 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	7a1b      	ldrb	r3, [r3, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00c      	beq.n	800f62c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	7a1a      	ldrb	r2, [r3, #8]
 800f616:	4b22      	ldr	r3, [pc, #136]	@ (800f6a0 <tcp_input+0x4a0>)
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f61e:	3301      	adds	r3, #1
 800f620:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f622:	429a      	cmp	r2, r3
 800f624:	d002      	beq.n	800f62c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	61bb      	str	r3, [r7, #24]
        continue;
 800f62a:	e016      	b.n	800f65a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	8ada      	ldrh	r2, [r3, #22]
 800f630:	4b1a      	ldr	r3, [pc, #104]	@ (800f69c <tcp_input+0x49c>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	885b      	ldrh	r3, [r3, #2]
 800f636:	b29b      	uxth	r3, r3
 800f638:	429a      	cmp	r2, r3
 800f63a:	d10c      	bne.n	800f656 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	4b17      	ldr	r3, [pc, #92]	@ (800f6a0 <tcp_input+0x4a0>)
 800f642:	695b      	ldr	r3, [r3, #20]
 800f644:	429a      	cmp	r2, r3
 800f646:	d00f      	beq.n	800f668 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00d      	beq.n	800f66a <tcp_input+0x46a>
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d009      	beq.n	800f66a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	617b      	str	r3, [r7, #20]
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1d1      	bne.n	800f60a <tcp_input+0x40a>
 800f666:	e000      	b.n	800f66a <tcp_input+0x46a>
            break;
 800f668:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d029      	beq.n	800f6c4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00a      	beq.n	800f68c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	68da      	ldr	r2, [r3, #12]
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f67e:	4b10      	ldr	r3, [pc, #64]	@ (800f6c0 <tcp_input+0x4c0>)
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f686:	4a0e      	ldr	r2, [pc, #56]	@ (800f6c0 <tcp_input+0x4c0>)
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f68c:	6978      	ldr	r0, [r7, #20]
 800f68e:	f000 fa03 	bl	800fa98 <tcp_listen_input>
      }
      pbuf_free(p);
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f7fd ff7a 	bl	800d58c <pbuf_free>
      return;
 800f698:	e1a8      	b.n	800f9ec <tcp_input+0x7ec>
 800f69a:	bf00      	nop
 800f69c:	24007cbc 	.word	0x24007cbc
 800f6a0:	24004d4c 	.word	0x24004d4c
 800f6a4:	080169c8 	.word	0x080169c8
 800f6a8:	08016b30 	.word	0x08016b30
 800f6ac:	08016a50 	.word	0x08016a50
 800f6b0:	24007ca0 	.word	0x24007ca0
 800f6b4:	08016b5c 	.word	0x08016b5c
 800f6b8:	24007ca4 	.word	0x24007ca4
 800f6bc:	08016b88 	.word	0x08016b88
 800f6c0:	24007c9c 	.word	0x24007c9c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f000 8158 	beq.w	800f97c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f6cc:	4b95      	ldr	r3, [pc, #596]	@ (800f924 <tcp_input+0x724>)
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	891a      	ldrh	r2, [r3, #8]
 800f6d6:	4b93      	ldr	r3, [pc, #588]	@ (800f924 <tcp_input+0x724>)
 800f6d8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f6da:	4a92      	ldr	r2, [pc, #584]	@ (800f924 <tcp_input+0x724>)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f6e0:	4b91      	ldr	r3, [pc, #580]	@ (800f928 <tcp_input+0x728>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a8f      	ldr	r2, [pc, #572]	@ (800f924 <tcp_input+0x724>)
 800f6e6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f6e8:	4b90      	ldr	r3, [pc, #576]	@ (800f92c <tcp_input+0x72c>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f6ee:	4b90      	ldr	r3, [pc, #576]	@ (800f930 <tcp_input+0x730>)
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f6f4:	4b8f      	ldr	r3, [pc, #572]	@ (800f934 <tcp_input+0x734>)
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f6fa:	4b8f      	ldr	r3, [pc, #572]	@ (800f938 <tcp_input+0x738>)
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	f003 0308 	and.w	r3, r3, #8
 800f702:	2b00      	cmp	r3, #0
 800f704:	d006      	beq.n	800f714 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	7b5b      	ldrb	r3, [r3, #13]
 800f70a:	f043 0301 	orr.w	r3, r3, #1
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d017      	beq.n	800f74c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f71c:	69f8      	ldr	r0, [r7, #28]
 800f71e:	f7ff f929 	bl	800e974 <tcp_process_refused_data>
 800f722:	4603      	mov	r3, r0
 800f724:	f113 0f0d 	cmn.w	r3, #13
 800f728:	d007      	beq.n	800f73a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00c      	beq.n	800f74c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f732:	4b82      	ldr	r3, [pc, #520]	@ (800f93c <tcp_input+0x73c>)
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d008      	beq.n	800f74c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f040 80e3 	bne.w	800f90a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f744:	69f8      	ldr	r0, [r7, #28]
 800f746:	f003 f9a7 	bl	8012a98 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f74a:	e0de      	b.n	800f90a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f74c:	4a7c      	ldr	r2, [pc, #496]	@ (800f940 <tcp_input+0x740>)
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f752:	69f8      	ldr	r0, [r7, #28]
 800f754:	f000 fb18 	bl	800fd88 <tcp_process>
 800f758:	4603      	mov	r3, r0
 800f75a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f75c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f760:	f113 0f0d 	cmn.w	r3, #13
 800f764:	f000 80d3 	beq.w	800f90e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f768:	4b71      	ldr	r3, [pc, #452]	@ (800f930 <tcp_input+0x730>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f003 0308 	and.w	r3, r3, #8
 800f770:	2b00      	cmp	r3, #0
 800f772:	d015      	beq.n	800f7a0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d008      	beq.n	800f790 <tcp_input+0x590>
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f784:	69fa      	ldr	r2, [r7, #28]
 800f786:	6912      	ldr	r2, [r2, #16]
 800f788:	f06f 010d 	mvn.w	r1, #13
 800f78c:	4610      	mov	r0, r2
 800f78e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f790:	69f9      	ldr	r1, [r7, #28]
 800f792:	486c      	ldr	r0, [pc, #432]	@ (800f944 <tcp_input+0x744>)
 800f794:	f7ff fbbc 	bl	800ef10 <tcp_pcb_remove>
        tcp_free(pcb);
 800f798:	69f8      	ldr	r0, [r7, #28]
 800f79a:	f7fe f9a7 	bl	800daec <tcp_free>
 800f79e:	e0da      	b.n	800f956 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f7a4:	4b63      	ldr	r3, [pc, #396]	@ (800f934 <tcp_input+0x734>)
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d01d      	beq.n	800f7e8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f7ac:	4b61      	ldr	r3, [pc, #388]	@ (800f934 <tcp_input+0x734>)
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00a      	beq.n	800f7d2 <tcp_input+0x5d2>
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7c2:	69fa      	ldr	r2, [r7, #28]
 800f7c4:	6910      	ldr	r0, [r2, #16]
 800f7c6:	89fa      	ldrh	r2, [r7, #14]
 800f7c8:	69f9      	ldr	r1, [r7, #28]
 800f7ca:	4798      	blx	r3
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	74fb      	strb	r3, [r7, #19]
 800f7d0:	e001      	b.n	800f7d6 <tcp_input+0x5d6>
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f7d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7da:	f113 0f0d 	cmn.w	r3, #13
 800f7de:	f000 8098 	beq.w	800f912 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f7e2:	4b54      	ldr	r3, [pc, #336]	@ (800f934 <tcp_input+0x734>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f7e8:	69f8      	ldr	r0, [r7, #28]
 800f7ea:	f000 f915 	bl	800fa18 <tcp_input_delayed_close>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f040 8090 	bne.w	800f916 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f7f6:	4b4d      	ldr	r3, [pc, #308]	@ (800f92c <tcp_input+0x72c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d041      	beq.n	800f882 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f802:	2b00      	cmp	r3, #0
 800f804:	d006      	beq.n	800f814 <tcp_input+0x614>
 800f806:	4b50      	ldr	r3, [pc, #320]	@ (800f948 <tcp_input+0x748>)
 800f808:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f80c:	494f      	ldr	r1, [pc, #316]	@ (800f94c <tcp_input+0x74c>)
 800f80e:	4850      	ldr	r0, [pc, #320]	@ (800f950 <tcp_input+0x750>)
 800f810:	f004 f9b8 	bl	8013b84 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	8b5b      	ldrh	r3, [r3, #26]
 800f818:	f003 0310 	and.w	r3, r3, #16
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d008      	beq.n	800f832 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f820:	4b42      	ldr	r3, [pc, #264]	@ (800f92c <tcp_input+0x72c>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4618      	mov	r0, r3
 800f826:	f7fd feb1 	bl	800d58c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f82a:	69f8      	ldr	r0, [r7, #28]
 800f82c:	f7fe fc46 	bl	800e0bc <tcp_abort>
            goto aborted;
 800f830:	e091      	b.n	800f956 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00c      	beq.n	800f856 <tcp_input+0x656>
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	6918      	ldr	r0, [r3, #16]
 800f846:	4b39      	ldr	r3, [pc, #228]	@ (800f92c <tcp_input+0x72c>)
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	2300      	movs	r3, #0
 800f84c:	69f9      	ldr	r1, [r7, #28]
 800f84e:	47a0      	blx	r4
 800f850:	4603      	mov	r3, r0
 800f852:	74fb      	strb	r3, [r7, #19]
 800f854:	e008      	b.n	800f868 <tcp_input+0x668>
 800f856:	4b35      	ldr	r3, [pc, #212]	@ (800f92c <tcp_input+0x72c>)
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	2300      	movs	r3, #0
 800f85c:	69f9      	ldr	r1, [r7, #28]
 800f85e:	2000      	movs	r0, #0
 800f860:	f7ff f95e 	bl	800eb20 <tcp_recv_null>
 800f864:	4603      	mov	r3, r0
 800f866:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f868:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f86c:	f113 0f0d 	cmn.w	r3, #13
 800f870:	d053      	beq.n	800f91a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f872:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d003      	beq.n	800f882 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f87a:	4b2c      	ldr	r3, [pc, #176]	@ (800f92c <tcp_input+0x72c>)
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f882:	4b2b      	ldr	r3, [pc, #172]	@ (800f930 <tcp_input+0x730>)
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	f003 0320 	and.w	r3, r3, #32
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d030      	beq.n	800f8f0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f892:	2b00      	cmp	r3, #0
 800f894:	d009      	beq.n	800f8aa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f89a:	7b5a      	ldrb	r2, [r3, #13]
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8a0:	f042 0220 	orr.w	r2, r2, #32
 800f8a4:	b2d2      	uxtb	r2, r2
 800f8a6:	735a      	strb	r2, [r3, #13]
 800f8a8:	e022      	b.n	800f8f0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8ae:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f8b2:	d005      	beq.n	800f8c0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00b      	beq.n	800f8e2 <tcp_input+0x6e2>
 800f8ca:	69fb      	ldr	r3, [r7, #28]
 800f8cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	6918      	ldr	r0, [r3, #16]
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	69f9      	ldr	r1, [r7, #28]
 800f8da:	47a0      	blx	r4
 800f8dc:	4603      	mov	r3, r0
 800f8de:	74fb      	strb	r3, [r7, #19]
 800f8e0:	e001      	b.n	800f8e6 <tcp_input+0x6e6>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f8e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8ea:	f113 0f0d 	cmn.w	r3, #13
 800f8ee:	d016      	beq.n	800f91e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f8f0:	4b13      	ldr	r3, [pc, #76]	@ (800f940 <tcp_input+0x740>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f8f6:	69f8      	ldr	r0, [r7, #28]
 800f8f8:	f000 f88e 	bl	800fa18 <tcp_input_delayed_close>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d128      	bne.n	800f954 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f902:	69f8      	ldr	r0, [r7, #28]
 800f904:	f002 fac2 	bl	8011e8c <tcp_output>
 800f908:	e025      	b.n	800f956 <tcp_input+0x756>
        goto aborted;
 800f90a:	bf00      	nop
 800f90c:	e023      	b.n	800f956 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f90e:	bf00      	nop
 800f910:	e021      	b.n	800f956 <tcp_input+0x756>
              goto aborted;
 800f912:	bf00      	nop
 800f914:	e01f      	b.n	800f956 <tcp_input+0x756>
          goto aborted;
 800f916:	bf00      	nop
 800f918:	e01d      	b.n	800f956 <tcp_input+0x756>
            goto aborted;
 800f91a:	bf00      	nop
 800f91c:	e01b      	b.n	800f956 <tcp_input+0x756>
              goto aborted;
 800f91e:	bf00      	nop
 800f920:	e019      	b.n	800f956 <tcp_input+0x756>
 800f922:	bf00      	nop
 800f924:	24007cac 	.word	0x24007cac
 800f928:	24007cbc 	.word	0x24007cbc
 800f92c:	24007cdc 	.word	0x24007cdc
 800f930:	24007cd9 	.word	0x24007cd9
 800f934:	24007cd4 	.word	0x24007cd4
 800f938:	24007cd8 	.word	0x24007cd8
 800f93c:	24007cd6 	.word	0x24007cd6
 800f940:	24007ce0 	.word	0x24007ce0
 800f944:	24007ca0 	.word	0x24007ca0
 800f948:	080169c8 	.word	0x080169c8
 800f94c:	08016bb8 	.word	0x08016bb8
 800f950:	08016a50 	.word	0x08016a50
          goto aborted;
 800f954:	bf00      	nop
    tcp_input_pcb = NULL;
 800f956:	4b27      	ldr	r3, [pc, #156]	@ (800f9f4 <tcp_input+0x7f4>)
 800f958:	2200      	movs	r2, #0
 800f95a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f95c:	4b26      	ldr	r3, [pc, #152]	@ (800f9f8 <tcp_input+0x7f8>)
 800f95e:	2200      	movs	r2, #0
 800f960:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f962:	4b26      	ldr	r3, [pc, #152]	@ (800f9fc <tcp_input+0x7fc>)
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d03f      	beq.n	800f9ea <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f96a:	4b24      	ldr	r3, [pc, #144]	@ (800f9fc <tcp_input+0x7fc>)
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	4618      	mov	r0, r3
 800f970:	f7fd fe0c 	bl	800d58c <pbuf_free>
      inseg.p = NULL;
 800f974:	4b21      	ldr	r3, [pc, #132]	@ (800f9fc <tcp_input+0x7fc>)
 800f976:	2200      	movs	r2, #0
 800f978:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f97a:	e036      	b.n	800f9ea <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f97c:	4b20      	ldr	r3, [pc, #128]	@ (800fa00 <tcp_input+0x800>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	899b      	ldrh	r3, [r3, #12]
 800f982:	b29b      	uxth	r3, r3
 800f984:	4618      	mov	r0, r3
 800f986:	f7f8 f843 	bl	8007a10 <lwip_htons>
 800f98a:	4603      	mov	r3, r0
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	f003 0304 	and.w	r3, r3, #4
 800f992:	2b00      	cmp	r3, #0
 800f994:	d118      	bne.n	800f9c8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f996:	4b1b      	ldr	r3, [pc, #108]	@ (800fa04 <tcp_input+0x804>)
 800f998:	6819      	ldr	r1, [r3, #0]
 800f99a:	4b1b      	ldr	r3, [pc, #108]	@ (800fa08 <tcp_input+0x808>)
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	4b1a      	ldr	r3, [pc, #104]	@ (800fa0c <tcp_input+0x80c>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9a6:	4b16      	ldr	r3, [pc, #88]	@ (800fa00 <tcp_input+0x800>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9aa:	885b      	ldrh	r3, [r3, #2]
 800f9ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9ae:	4a14      	ldr	r2, [pc, #80]	@ (800fa00 <tcp_input+0x800>)
 800f9b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9b2:	8812      	ldrh	r2, [r2, #0]
 800f9b4:	b292      	uxth	r2, r2
 800f9b6:	9202      	str	r2, [sp, #8]
 800f9b8:	9301      	str	r3, [sp, #4]
 800f9ba:	4b15      	ldr	r3, [pc, #84]	@ (800fa10 <tcp_input+0x810>)
 800f9bc:	9300      	str	r3, [sp, #0]
 800f9be:	4b15      	ldr	r3, [pc, #84]	@ (800fa14 <tcp_input+0x814>)
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	2000      	movs	r0, #0
 800f9c4:	f003 f816 	bl	80129f4 <tcp_rst>
    pbuf_free(p);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f7fd fddf 	bl	800d58c <pbuf_free>
  return;
 800f9ce:	e00c      	b.n	800f9ea <tcp_input+0x7ea>
    goto dropped;
 800f9d0:	bf00      	nop
 800f9d2:	e006      	b.n	800f9e2 <tcp_input+0x7e2>
    goto dropped;
 800f9d4:	bf00      	nop
 800f9d6:	e004      	b.n	800f9e2 <tcp_input+0x7e2>
    goto dropped;
 800f9d8:	bf00      	nop
 800f9da:	e002      	b.n	800f9e2 <tcp_input+0x7e2>
      goto dropped;
 800f9dc:	bf00      	nop
 800f9de:	e000      	b.n	800f9e2 <tcp_input+0x7e2>
      goto dropped;
 800f9e0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7fd fdd2 	bl	800d58c <pbuf_free>
 800f9e8:	e000      	b.n	800f9ec <tcp_input+0x7ec>
  return;
 800f9ea:	bf00      	nop
}
 800f9ec:	3724      	adds	r7, #36	@ 0x24
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd90      	pop	{r4, r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	24007ce0 	.word	0x24007ce0
 800f9f8:	24007cdc 	.word	0x24007cdc
 800f9fc:	24007cac 	.word	0x24007cac
 800fa00:	24007cbc 	.word	0x24007cbc
 800fa04:	24007cd0 	.word	0x24007cd0
 800fa08:	24007cd6 	.word	0x24007cd6
 800fa0c:	24007ccc 	.word	0x24007ccc
 800fa10:	24004d5c 	.word	0x24004d5c
 800fa14:	24004d60 	.word	0x24004d60

0800fa18 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d106      	bne.n	800fa34 <tcp_input_delayed_close+0x1c>
 800fa26:	4b17      	ldr	r3, [pc, #92]	@ (800fa84 <tcp_input_delayed_close+0x6c>)
 800fa28:	f240 225a 	movw	r2, #602	@ 0x25a
 800fa2c:	4916      	ldr	r1, [pc, #88]	@ (800fa88 <tcp_input_delayed_close+0x70>)
 800fa2e:	4817      	ldr	r0, [pc, #92]	@ (800fa8c <tcp_input_delayed_close+0x74>)
 800fa30:	f004 f8a8 	bl	8013b84 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fa34:	4b16      	ldr	r3, [pc, #88]	@ (800fa90 <tcp_input_delayed_close+0x78>)
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	f003 0310 	and.w	r3, r3, #16
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d01c      	beq.n	800fa7a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	8b5b      	ldrh	r3, [r3, #26]
 800fa44:	f003 0310 	and.w	r3, r3, #16
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d10d      	bne.n	800fa68 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d008      	beq.n	800fa68 <tcp_input_delayed_close+0x50>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	6912      	ldr	r2, [r2, #16]
 800fa60:	f06f 010e 	mvn.w	r1, #14
 800fa64:	4610      	mov	r0, r2
 800fa66:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa68:	6879      	ldr	r1, [r7, #4]
 800fa6a:	480a      	ldr	r0, [pc, #40]	@ (800fa94 <tcp_input_delayed_close+0x7c>)
 800fa6c:	f7ff fa50 	bl	800ef10 <tcp_pcb_remove>
    tcp_free(pcb);
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f7fe f83b 	bl	800daec <tcp_free>
    return 1;
 800fa76:	2301      	movs	r3, #1
 800fa78:	e000      	b.n	800fa7c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	080169c8 	.word	0x080169c8
 800fa88:	08016bd4 	.word	0x08016bd4
 800fa8c:	08016a50 	.word	0x08016a50
 800fa90:	24007cd9 	.word	0x24007cd9
 800fa94:	24007ca0 	.word	0x24007ca0

0800fa98 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fa98:	b590      	push	{r4, r7, lr}
 800fa9a:	b08b      	sub	sp, #44	@ 0x2c
 800fa9c:	af04      	add	r7, sp, #16
 800fa9e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800faa0:	4b6f      	ldr	r3, [pc, #444]	@ (800fc60 <tcp_listen_input+0x1c8>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	f003 0304 	and.w	r3, r3, #4
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f040 80d2 	bne.w	800fc52 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d106      	bne.n	800fac2 <tcp_listen_input+0x2a>
 800fab4:	4b6b      	ldr	r3, [pc, #428]	@ (800fc64 <tcp_listen_input+0x1cc>)
 800fab6:	f240 2281 	movw	r2, #641	@ 0x281
 800faba:	496b      	ldr	r1, [pc, #428]	@ (800fc68 <tcp_listen_input+0x1d0>)
 800fabc:	486b      	ldr	r0, [pc, #428]	@ (800fc6c <tcp_listen_input+0x1d4>)
 800fabe:	f004 f861 	bl	8013b84 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fac2:	4b67      	ldr	r3, [pc, #412]	@ (800fc60 <tcp_listen_input+0x1c8>)
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	f003 0310 	and.w	r3, r3, #16
 800faca:	2b00      	cmp	r3, #0
 800facc:	d019      	beq.n	800fb02 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800face:	4b68      	ldr	r3, [pc, #416]	@ (800fc70 <tcp_listen_input+0x1d8>)
 800fad0:	6819      	ldr	r1, [r3, #0]
 800fad2:	4b68      	ldr	r3, [pc, #416]	@ (800fc74 <tcp_listen_input+0x1dc>)
 800fad4:	881b      	ldrh	r3, [r3, #0]
 800fad6:	461a      	mov	r2, r3
 800fad8:	4b67      	ldr	r3, [pc, #412]	@ (800fc78 <tcp_listen_input+0x1e0>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fade:	4b67      	ldr	r3, [pc, #412]	@ (800fc7c <tcp_listen_input+0x1e4>)
 800fae0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fae2:	885b      	ldrh	r3, [r3, #2]
 800fae4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fae6:	4a65      	ldr	r2, [pc, #404]	@ (800fc7c <tcp_listen_input+0x1e4>)
 800fae8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faea:	8812      	ldrh	r2, [r2, #0]
 800faec:	b292      	uxth	r2, r2
 800faee:	9202      	str	r2, [sp, #8]
 800faf0:	9301      	str	r3, [sp, #4]
 800faf2:	4b63      	ldr	r3, [pc, #396]	@ (800fc80 <tcp_listen_input+0x1e8>)
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	4b63      	ldr	r3, [pc, #396]	@ (800fc84 <tcp_listen_input+0x1ec>)
 800faf8:	4602      	mov	r2, r0
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f002 ff7a 	bl	80129f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fb00:	e0a9      	b.n	800fc56 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fb02:	4b57      	ldr	r3, [pc, #348]	@ (800fc60 <tcp_listen_input+0x1c8>)
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	f003 0302 	and.w	r3, r3, #2
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f000 80a3 	beq.w	800fc56 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	7d5b      	ldrb	r3, [r3, #21]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7ff f927 	bl	800ed68 <tcp_alloc>
 800fb1a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d111      	bne.n	800fb46 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	699b      	ldr	r3, [r3, #24]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00a      	beq.n	800fb40 <tcp_listen_input+0xa8>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	6910      	ldr	r0, [r2, #16]
 800fb32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb36:	2100      	movs	r1, #0
 800fb38:	4798      	blx	r3
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	73bb      	strb	r3, [r7, #14]
      return;
 800fb3e:	e08b      	b.n	800fc58 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb40:	23f0      	movs	r3, #240	@ 0xf0
 800fb42:	73bb      	strb	r3, [r7, #14]
      return;
 800fb44:	e088      	b.n	800fc58 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fb46:	4b50      	ldr	r3, [pc, #320]	@ (800fc88 <tcp_listen_input+0x1f0>)
 800fb48:	695a      	ldr	r2, [r3, #20]
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fb4e:	4b4e      	ldr	r3, [pc, #312]	@ (800fc88 <tcp_listen_input+0x1f0>)
 800fb50:	691a      	ldr	r2, [r3, #16]
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	8ada      	ldrh	r2, [r3, #22]
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fb5e:	4b47      	ldr	r3, [pc, #284]	@ (800fc7c <tcp_listen_input+0x1e4>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	881b      	ldrh	r3, [r3, #0]
 800fb64:	b29a      	uxth	r2, r3
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	2203      	movs	r2, #3
 800fb6e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fb70:	4b41      	ldr	r3, [pc, #260]	@ (800fc78 <tcp_listen_input+0x1e0>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	1c5a      	adds	r2, r3, #1
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fb82:	6978      	ldr	r0, [r7, #20]
 800fb84:	f7ff fa58 	bl	800f038 <tcp_next_iss>
 800fb88:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	693a      	ldr	r2, [r7, #16]
 800fb8e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	693a      	ldr	r2, [r7, #16]
 800fb94:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	693a      	ldr	r2, [r7, #16]
 800fb9a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fba2:	4b35      	ldr	r3, [pc, #212]	@ (800fc78 <tcp_listen_input+0x1e0>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	1e5a      	subs	r2, r3, #1
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	691a      	ldr	r2, [r3, #16]
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	7a5b      	ldrb	r3, [r3, #9]
 800fbbe:	f003 030c 	and.w	r3, r3, #12
 800fbc2:	b2da      	uxtb	r2, r3
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	7a1a      	ldrb	r2, [r3, #8]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fbd0:	4b2e      	ldr	r3, [pc, #184]	@ (800fc8c <tcp_listen_input+0x1f4>)
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	60da      	str	r2, [r3, #12]
 800fbd8:	4a2c      	ldr	r2, [pc, #176]	@ (800fc8c <tcp_listen_input+0x1f4>)
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	6013      	str	r3, [r2, #0]
 800fbde:	f003 f8cb 	bl	8012d78 <tcp_timer_needed>
 800fbe2:	4b2b      	ldr	r3, [pc, #172]	@ (800fc90 <tcp_listen_input+0x1f8>)
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fbe8:	6978      	ldr	r0, [r7, #20]
 800fbea:	f001 fd8b 	bl	8011704 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fbee:	4b23      	ldr	r3, [pc, #140]	@ (800fc7c <tcp_listen_input+0x1e4>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	89db      	ldrh	r3, [r3, #14]
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	3304      	adds	r3, #4
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7fb f865 	bl	800ace0 <ip4_route>
 800fc16:	4601      	mov	r1, r0
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	3304      	adds	r3, #4
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f7ff fa30 	bl	800f084 <tcp_eff_send_mss_netif>
 800fc24:	4603      	mov	r3, r0
 800fc26:	461a      	mov	r2, r3
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fc2c:	2112      	movs	r1, #18
 800fc2e:	6978      	ldr	r0, [r7, #20]
 800fc30:	f002 f83e 	bl	8011cb0 <tcp_enqueue_flags>
 800fc34:	4603      	mov	r3, r0
 800fc36:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fc38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d004      	beq.n	800fc4a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fc40:	2100      	movs	r1, #0
 800fc42:	6978      	ldr	r0, [r7, #20]
 800fc44:	f7fe f97c 	bl	800df40 <tcp_abandon>
      return;
 800fc48:	e006      	b.n	800fc58 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fc4a:	6978      	ldr	r0, [r7, #20]
 800fc4c:	f002 f91e 	bl	8011e8c <tcp_output>
  return;
 800fc50:	e001      	b.n	800fc56 <tcp_listen_input+0x1be>
    return;
 800fc52:	bf00      	nop
 800fc54:	e000      	b.n	800fc58 <tcp_listen_input+0x1c0>
  return;
 800fc56:	bf00      	nop
}
 800fc58:	371c      	adds	r7, #28
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd90      	pop	{r4, r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	24007cd8 	.word	0x24007cd8
 800fc64:	080169c8 	.word	0x080169c8
 800fc68:	08016bfc 	.word	0x08016bfc
 800fc6c:	08016a50 	.word	0x08016a50
 800fc70:	24007cd0 	.word	0x24007cd0
 800fc74:	24007cd6 	.word	0x24007cd6
 800fc78:	24007ccc 	.word	0x24007ccc
 800fc7c:	24007cbc 	.word	0x24007cbc
 800fc80:	24004d5c 	.word	0x24004d5c
 800fc84:	24004d60 	.word	0x24004d60
 800fc88:	24004d4c 	.word	0x24004d4c
 800fc8c:	24007ca0 	.word	0x24007ca0
 800fc90:	24007ca8 	.word	0x24007ca8

0800fc94 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af04      	add	r7, sp, #16
 800fc9a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fc9c:	4b2f      	ldr	r3, [pc, #188]	@ (800fd5c <tcp_timewait_input+0xc8>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f003 0304 	and.w	r3, r3, #4
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d153      	bne.n	800fd50 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d106      	bne.n	800fcbc <tcp_timewait_input+0x28>
 800fcae:	4b2c      	ldr	r3, [pc, #176]	@ (800fd60 <tcp_timewait_input+0xcc>)
 800fcb0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fcb4:	492b      	ldr	r1, [pc, #172]	@ (800fd64 <tcp_timewait_input+0xd0>)
 800fcb6:	482c      	ldr	r0, [pc, #176]	@ (800fd68 <tcp_timewait_input+0xd4>)
 800fcb8:	f003 ff64 	bl	8013b84 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fcbc:	4b27      	ldr	r3, [pc, #156]	@ (800fd5c <tcp_timewait_input+0xc8>)
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	f003 0302 	and.w	r3, r3, #2
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d02a      	beq.n	800fd1e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fcc8:	4b28      	ldr	r3, [pc, #160]	@ (800fd6c <tcp_timewait_input+0xd8>)
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcd0:	1ad3      	subs	r3, r2, r3
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	db2d      	blt.n	800fd32 <tcp_timewait_input+0x9e>
 800fcd6:	4b25      	ldr	r3, [pc, #148]	@ (800fd6c <tcp_timewait_input+0xd8>)
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcde:	6879      	ldr	r1, [r7, #4]
 800fce0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fce2:	440b      	add	r3, r1
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	dc23      	bgt.n	800fd32 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcea:	4b21      	ldr	r3, [pc, #132]	@ (800fd70 <tcp_timewait_input+0xdc>)
 800fcec:	6819      	ldr	r1, [r3, #0]
 800fcee:	4b21      	ldr	r3, [pc, #132]	@ (800fd74 <tcp_timewait_input+0xe0>)
 800fcf0:	881b      	ldrh	r3, [r3, #0]
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	4b1d      	ldr	r3, [pc, #116]	@ (800fd6c <tcp_timewait_input+0xd8>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcfa:	4b1f      	ldr	r3, [pc, #124]	@ (800fd78 <tcp_timewait_input+0xe4>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcfe:	885b      	ldrh	r3, [r3, #2]
 800fd00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd02:	4a1d      	ldr	r2, [pc, #116]	@ (800fd78 <tcp_timewait_input+0xe4>)
 800fd04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd06:	8812      	ldrh	r2, [r2, #0]
 800fd08:	b292      	uxth	r2, r2
 800fd0a:	9202      	str	r2, [sp, #8]
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	4b1b      	ldr	r3, [pc, #108]	@ (800fd7c <tcp_timewait_input+0xe8>)
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	4b1b      	ldr	r3, [pc, #108]	@ (800fd80 <tcp_timewait_input+0xec>)
 800fd14:	4602      	mov	r2, r0
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f002 fe6c 	bl	80129f4 <tcp_rst>
      return;
 800fd1c:	e01b      	b.n	800fd56 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd5c <tcp_timewait_input+0xc8>)
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	f003 0301 	and.w	r3, r3, #1
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d003      	beq.n	800fd32 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fd2a:	4b16      	ldr	r3, [pc, #88]	@ (800fd84 <tcp_timewait_input+0xf0>)
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fd32:	4b10      	ldr	r3, [pc, #64]	@ (800fd74 <tcp_timewait_input+0xe0>)
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00c      	beq.n	800fd54 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	8b5b      	ldrh	r3, [r3, #26]
 800fd3e:	f043 0302 	orr.w	r3, r3, #2
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f002 f89f 	bl	8011e8c <tcp_output>
  }
  return;
 800fd4e:	e001      	b.n	800fd54 <tcp_timewait_input+0xc0>
    return;
 800fd50:	bf00      	nop
 800fd52:	e000      	b.n	800fd56 <tcp_timewait_input+0xc2>
  return;
 800fd54:	bf00      	nop
}
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	24007cd8 	.word	0x24007cd8
 800fd60:	080169c8 	.word	0x080169c8
 800fd64:	08016c1c 	.word	0x08016c1c
 800fd68:	08016a50 	.word	0x08016a50
 800fd6c:	24007ccc 	.word	0x24007ccc
 800fd70:	24007cd0 	.word	0x24007cd0
 800fd74:	24007cd6 	.word	0x24007cd6
 800fd78:	24007cbc 	.word	0x24007cbc
 800fd7c:	24004d5c 	.word	0x24004d5c
 800fd80:	24004d60 	.word	0x24004d60
 800fd84:	24007c94 	.word	0x24007c94

0800fd88 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fd88:	b590      	push	{r4, r7, lr}
 800fd8a:	b08d      	sub	sp, #52	@ 0x34
 800fd8c:	af04      	add	r7, sp, #16
 800fd8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fd94:	2300      	movs	r3, #0
 800fd96:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d106      	bne.n	800fdac <tcp_process+0x24>
 800fd9e:	4b9d      	ldr	r3, [pc, #628]	@ (8010014 <tcp_process+0x28c>)
 800fda0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800fda4:	499c      	ldr	r1, [pc, #624]	@ (8010018 <tcp_process+0x290>)
 800fda6:	489d      	ldr	r0, [pc, #628]	@ (801001c <tcp_process+0x294>)
 800fda8:	f003 feec 	bl	8013b84 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fdac:	4b9c      	ldr	r3, [pc, #624]	@ (8010020 <tcp_process+0x298>)
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	f003 0304 	and.w	r3, r3, #4
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d04e      	beq.n	800fe56 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	7d1b      	ldrb	r3, [r3, #20]
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d108      	bne.n	800fdd2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdc4:	4b97      	ldr	r3, [pc, #604]	@ (8010024 <tcp_process+0x29c>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d123      	bne.n	800fe14 <tcp_process+0x8c>
        acceptable = 1;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	76fb      	strb	r3, [r7, #27]
 800fdd0:	e020      	b.n	800fe14 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fdd6:	4b94      	ldr	r3, [pc, #592]	@ (8010028 <tcp_process+0x2a0>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d102      	bne.n	800fde4 <tcp_process+0x5c>
        acceptable = 1;
 800fdde:	2301      	movs	r3, #1
 800fde0:	76fb      	strb	r3, [r7, #27]
 800fde2:	e017      	b.n	800fe14 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fde4:	4b90      	ldr	r3, [pc, #576]	@ (8010028 <tcp_process+0x2a0>)
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	db10      	blt.n	800fe14 <tcp_process+0x8c>
 800fdf2:	4b8d      	ldr	r3, [pc, #564]	@ (8010028 <tcp_process+0x2a0>)
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfa:	6879      	ldr	r1, [r7, #4]
 800fdfc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fdfe:	440b      	add	r3, r1
 800fe00:	1ad3      	subs	r3, r2, r3
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	dc06      	bgt.n	800fe14 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	8b5b      	ldrh	r3, [r3, #26]
 800fe0a:	f043 0302 	orr.w	r3, r3, #2
 800fe0e:	b29a      	uxth	r2, r3
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fe14:	7efb      	ldrb	r3, [r7, #27]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d01b      	beq.n	800fe52 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	7d1b      	ldrb	r3, [r3, #20]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d106      	bne.n	800fe30 <tcp_process+0xa8>
 800fe22:	4b7c      	ldr	r3, [pc, #496]	@ (8010014 <tcp_process+0x28c>)
 800fe24:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fe28:	4980      	ldr	r1, [pc, #512]	@ (801002c <tcp_process+0x2a4>)
 800fe2a:	487c      	ldr	r0, [pc, #496]	@ (801001c <tcp_process+0x294>)
 800fe2c:	f003 feaa 	bl	8013b84 <iprintf>
      recv_flags |= TF_RESET;
 800fe30:	4b7f      	ldr	r3, [pc, #508]	@ (8010030 <tcp_process+0x2a8>)
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	f043 0308 	orr.w	r3, r3, #8
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	4b7d      	ldr	r3, [pc, #500]	@ (8010030 <tcp_process+0x2a8>)
 800fe3c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	8b5b      	ldrh	r3, [r3, #26]
 800fe42:	f023 0301 	bic.w	r3, r3, #1
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fe4c:	f06f 030d 	mvn.w	r3, #13
 800fe50:	e37a      	b.n	8010548 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	e378      	b.n	8010548 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fe56:	4b72      	ldr	r3, [pc, #456]	@ (8010020 <tcp_process+0x298>)
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	f003 0302 	and.w	r3, r3, #2
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d010      	beq.n	800fe84 <tcp_process+0xfc>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	7d1b      	ldrb	r3, [r3, #20]
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	d00c      	beq.n	800fe84 <tcp_process+0xfc>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	7d1b      	ldrb	r3, [r3, #20]
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d008      	beq.n	800fe84 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	8b5b      	ldrh	r3, [r3, #26]
 800fe76:	f043 0302 	orr.w	r3, r3, #2
 800fe7a:	b29a      	uxth	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fe80:	2300      	movs	r3, #0
 800fe82:	e361      	b.n	8010548 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	8b5b      	ldrh	r3, [r3, #26]
 800fe88:	f003 0310 	and.w	r3, r3, #16
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d103      	bne.n	800fe98 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fe90:	4b68      	ldr	r3, [pc, #416]	@ (8010034 <tcp_process+0x2ac>)
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f001 fc2b 	bl	8011704 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	7d1b      	ldrb	r3, [r3, #20]
 800feb2:	3b02      	subs	r3, #2
 800feb4:	2b07      	cmp	r3, #7
 800feb6:	f200 8337 	bhi.w	8010528 <tcp_process+0x7a0>
 800feba:	a201      	add	r2, pc, #4	@ (adr r2, 800fec0 <tcp_process+0x138>)
 800febc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec0:	0800fee1 	.word	0x0800fee1
 800fec4:	08010111 	.word	0x08010111
 800fec8:	08010289 	.word	0x08010289
 800fecc:	080102b3 	.word	0x080102b3
 800fed0:	080103d7 	.word	0x080103d7
 800fed4:	08010289 	.word	0x08010289
 800fed8:	08010463 	.word	0x08010463
 800fedc:	080104f3 	.word	0x080104f3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fee0:	4b4f      	ldr	r3, [pc, #316]	@ (8010020 <tcp_process+0x298>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	f003 0310 	and.w	r3, r3, #16
 800fee8:	2b00      	cmp	r3, #0
 800feea:	f000 80e4 	beq.w	80100b6 <tcp_process+0x32e>
 800feee:	4b4c      	ldr	r3, [pc, #304]	@ (8010020 <tcp_process+0x298>)
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	f003 0302 	and.w	r3, r3, #2
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	f000 80dd 	beq.w	80100b6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	4b48      	ldr	r3, [pc, #288]	@ (8010024 <tcp_process+0x29c>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	f040 80d5 	bne.w	80100b6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ff0c:	4b46      	ldr	r3, [pc, #280]	@ (8010028 <tcp_process+0x2a0>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	1c5a      	adds	r2, r3, #1
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ff1e:	4b41      	ldr	r3, [pc, #260]	@ (8010024 <tcp_process+0x29c>)
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ff26:	4b44      	ldr	r3, [pc, #272]	@ (8010038 <tcp_process+0x2b0>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	89db      	ldrh	r3, [r3, #14]
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff40:	4b39      	ldr	r3, [pc, #228]	@ (8010028 <tcp_process+0x2a0>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	1e5a      	subs	r2, r3, #1
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2204      	movs	r2, #4
 800ff4e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	3304      	adds	r3, #4
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7fa fec1 	bl	800ace0 <ip4_route>
 800ff5e:	4601      	mov	r1, r0
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	3304      	adds	r3, #4
 800ff64:	461a      	mov	r2, r3
 800ff66:	4620      	mov	r0, r4
 800ff68:	f7ff f88c 	bl	800f084 <tcp_eff_send_mss_netif>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	461a      	mov	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff78:	009a      	lsls	r2, r3, #2
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff7e:	005b      	lsls	r3, r3, #1
 800ff80:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ff84:	428b      	cmp	r3, r1
 800ff86:	bf38      	it	cc
 800ff88:	460b      	movcc	r3, r1
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d204      	bcs.n	800ff98 <tcp_process+0x210>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	e00d      	b.n	800ffb4 <tcp_process+0x22c>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff9c:	005b      	lsls	r3, r3, #1
 800ff9e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d904      	bls.n	800ffb0 <tcp_process+0x228>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	e001      	b.n	800ffb4 <tcp_process+0x22c>
 800ffb0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d106      	bne.n	800ffd2 <tcp_process+0x24a>
 800ffc4:	4b13      	ldr	r3, [pc, #76]	@ (8010014 <tcp_process+0x28c>)
 800ffc6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ffca:	491c      	ldr	r1, [pc, #112]	@ (801003c <tcp_process+0x2b4>)
 800ffcc:	4813      	ldr	r0, [pc, #76]	@ (801001c <tcp_process+0x294>)
 800ffce:	f003 fdd9 	bl	8013b84 <iprintf>
        --pcb->snd_queuelen;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffe6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d12a      	bne.n	8010044 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fff2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d106      	bne.n	8010008 <tcp_process+0x280>
 800fffa:	4b06      	ldr	r3, [pc, #24]	@ (8010014 <tcp_process+0x28c>)
 800fffc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010000:	490f      	ldr	r1, [pc, #60]	@ (8010040 <tcp_process+0x2b8>)
 8010002:	4806      	ldr	r0, [pc, #24]	@ (801001c <tcp_process+0x294>)
 8010004:	f003 fdbe 	bl	8013b84 <iprintf>
          pcb->unsent = rseg->next;
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010010:	e01c      	b.n	801004c <tcp_process+0x2c4>
 8010012:	bf00      	nop
 8010014:	080169c8 	.word	0x080169c8
 8010018:	08016c3c 	.word	0x08016c3c
 801001c:	08016a50 	.word	0x08016a50
 8010020:	24007cd8 	.word	0x24007cd8
 8010024:	24007cd0 	.word	0x24007cd0
 8010028:	24007ccc 	.word	0x24007ccc
 801002c:	08016c58 	.word	0x08016c58
 8010030:	24007cd9 	.word	0x24007cd9
 8010034:	24007c94 	.word	0x24007c94
 8010038:	24007cbc 	.word	0x24007cbc
 801003c:	08016c78 	.word	0x08016c78
 8010040:	08016c90 	.word	0x08016c90
        } else {
          pcb->unacked = rseg->next;
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801004c:	69f8      	ldr	r0, [r7, #28]
 801004e:	f7fe fd22 	bl	800ea96 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010056:	2b00      	cmp	r3, #0
 8010058:	d104      	bne.n	8010064 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010060:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010062:	e006      	b.n	8010072 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00a      	beq.n	8010092 <tcp_process+0x30a>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	6910      	ldr	r0, [r2, #16]
 8010086:	2200      	movs	r2, #0
 8010088:	6879      	ldr	r1, [r7, #4]
 801008a:	4798      	blx	r3
 801008c:	4603      	mov	r3, r0
 801008e:	76bb      	strb	r3, [r7, #26]
 8010090:	e001      	b.n	8010096 <tcp_process+0x30e>
 8010092:	2300      	movs	r3, #0
 8010094:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010096:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801009a:	f113 0f0d 	cmn.w	r3, #13
 801009e:	d102      	bne.n	80100a6 <tcp_process+0x31e>
          return ERR_ABRT;
 80100a0:	f06f 030c 	mvn.w	r3, #12
 80100a4:	e250      	b.n	8010548 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	8b5b      	ldrh	r3, [r3, #26]
 80100aa:	f043 0302 	orr.w	r3, r3, #2
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80100b4:	e23a      	b.n	801052c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80100b6:	4b98      	ldr	r3, [pc, #608]	@ (8010318 <tcp_process+0x590>)
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	f003 0310 	and.w	r3, r3, #16
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f000 8234 	beq.w	801052c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100c4:	4b95      	ldr	r3, [pc, #596]	@ (801031c <tcp_process+0x594>)
 80100c6:	6819      	ldr	r1, [r3, #0]
 80100c8:	4b95      	ldr	r3, [pc, #596]	@ (8010320 <tcp_process+0x598>)
 80100ca:	881b      	ldrh	r3, [r3, #0]
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b95      	ldr	r3, [pc, #596]	@ (8010324 <tcp_process+0x59c>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100d4:	4b94      	ldr	r3, [pc, #592]	@ (8010328 <tcp_process+0x5a0>)
 80100d6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100d8:	885b      	ldrh	r3, [r3, #2]
 80100da:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100dc:	4a92      	ldr	r2, [pc, #584]	@ (8010328 <tcp_process+0x5a0>)
 80100de:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100e0:	8812      	ldrh	r2, [r2, #0]
 80100e2:	b292      	uxth	r2, r2
 80100e4:	9202      	str	r2, [sp, #8]
 80100e6:	9301      	str	r3, [sp, #4]
 80100e8:	4b90      	ldr	r3, [pc, #576]	@ (801032c <tcp_process+0x5a4>)
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	4b90      	ldr	r3, [pc, #576]	@ (8010330 <tcp_process+0x5a8>)
 80100ee:	4602      	mov	r2, r0
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f002 fc7f 	bl	80129f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80100fc:	2b05      	cmp	r3, #5
 80100fe:	f200 8215 	bhi.w	801052c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f002 fa4b 	bl	80125a4 <tcp_rexmit_rto>
      break;
 801010e:	e20d      	b.n	801052c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010110:	4b81      	ldr	r3, [pc, #516]	@ (8010318 <tcp_process+0x590>)
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	f003 0310 	and.w	r3, r3, #16
 8010118:	2b00      	cmp	r3, #0
 801011a:	f000 80a1 	beq.w	8010260 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801011e:	4b7f      	ldr	r3, [pc, #508]	@ (801031c <tcp_process+0x594>)
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	3b01      	subs	r3, #1
 801012a:	2b00      	cmp	r3, #0
 801012c:	db7e      	blt.n	801022c <tcp_process+0x4a4>
 801012e:	4b7b      	ldr	r3, [pc, #492]	@ (801031c <tcp_process+0x594>)
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	2b00      	cmp	r3, #0
 801013a:	dc77      	bgt.n	801022c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2204      	movs	r2, #4
 8010140:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010146:	2b00      	cmp	r3, #0
 8010148:	d102      	bne.n	8010150 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801014a:	23fa      	movs	r3, #250	@ 0xfa
 801014c:	76bb      	strb	r3, [r7, #26]
 801014e:	e01d      	b.n	801018c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010154:	699b      	ldr	r3, [r3, #24]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d106      	bne.n	8010168 <tcp_process+0x3e0>
 801015a:	4b76      	ldr	r3, [pc, #472]	@ (8010334 <tcp_process+0x5ac>)
 801015c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010160:	4975      	ldr	r1, [pc, #468]	@ (8010338 <tcp_process+0x5b0>)
 8010162:	4876      	ldr	r0, [pc, #472]	@ (801033c <tcp_process+0x5b4>)
 8010164:	f003 fd0e 	bl	8013b84 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801016c:	699b      	ldr	r3, [r3, #24]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00a      	beq.n	8010188 <tcp_process+0x400>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010176:	699b      	ldr	r3, [r3, #24]
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	6910      	ldr	r0, [r2, #16]
 801017c:	2200      	movs	r2, #0
 801017e:	6879      	ldr	r1, [r7, #4]
 8010180:	4798      	blx	r3
 8010182:	4603      	mov	r3, r0
 8010184:	76bb      	strb	r3, [r7, #26]
 8010186:	e001      	b.n	801018c <tcp_process+0x404>
 8010188:	23f0      	movs	r3, #240	@ 0xf0
 801018a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801018c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d00a      	beq.n	80101aa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010194:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010198:	f113 0f0d 	cmn.w	r3, #13
 801019c:	d002      	beq.n	80101a4 <tcp_process+0x41c>
              tcp_abort(pcb);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7fd ff8c 	bl	800e0bc <tcp_abort>
            }
            return ERR_ABRT;
 80101a4:	f06f 030c 	mvn.w	r3, #12
 80101a8:	e1ce      	b.n	8010548 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fae0 	bl	8010770 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80101b0:	4b63      	ldr	r3, [pc, #396]	@ (8010340 <tcp_process+0x5b8>)
 80101b2:	881b      	ldrh	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d005      	beq.n	80101c4 <tcp_process+0x43c>
            recv_acked--;
 80101b8:	4b61      	ldr	r3, [pc, #388]	@ (8010340 <tcp_process+0x5b8>)
 80101ba:	881b      	ldrh	r3, [r3, #0]
 80101bc:	3b01      	subs	r3, #1
 80101be:	b29a      	uxth	r2, r3
 80101c0:	4b5f      	ldr	r3, [pc, #380]	@ (8010340 <tcp_process+0x5b8>)
 80101c2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101c8:	009a      	lsls	r2, r3, #2
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80101d4:	428b      	cmp	r3, r1
 80101d6:	bf38      	it	cc
 80101d8:	460b      	movcc	r3, r1
 80101da:	429a      	cmp	r2, r3
 80101dc:	d204      	bcs.n	80101e8 <tcp_process+0x460>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	e00d      	b.n	8010204 <tcp_process+0x47c>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101ec:	005b      	lsls	r3, r3, #1
 80101ee:	f241 121c 	movw	r2, #4380	@ 0x111c
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d904      	bls.n	8010200 <tcp_process+0x478>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	e001      	b.n	8010204 <tcp_process+0x47c>
 8010200:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801020a:	4b4e      	ldr	r3, [pc, #312]	@ (8010344 <tcp_process+0x5bc>)
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	f003 0320 	and.w	r3, r3, #32
 8010212:	2b00      	cmp	r3, #0
 8010214:	d037      	beq.n	8010286 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	8b5b      	ldrh	r3, [r3, #26]
 801021a:	f043 0302 	orr.w	r3, r3, #2
 801021e:	b29a      	uxth	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2207      	movs	r2, #7
 8010228:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801022a:	e02c      	b.n	8010286 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801022c:	4b3b      	ldr	r3, [pc, #236]	@ (801031c <tcp_process+0x594>)
 801022e:	6819      	ldr	r1, [r3, #0]
 8010230:	4b3b      	ldr	r3, [pc, #236]	@ (8010320 <tcp_process+0x598>)
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	461a      	mov	r2, r3
 8010236:	4b3b      	ldr	r3, [pc, #236]	@ (8010324 <tcp_process+0x59c>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801023c:	4b3a      	ldr	r3, [pc, #232]	@ (8010328 <tcp_process+0x5a0>)
 801023e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010240:	885b      	ldrh	r3, [r3, #2]
 8010242:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010244:	4a38      	ldr	r2, [pc, #224]	@ (8010328 <tcp_process+0x5a0>)
 8010246:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010248:	8812      	ldrh	r2, [r2, #0]
 801024a:	b292      	uxth	r2, r2
 801024c:	9202      	str	r2, [sp, #8]
 801024e:	9301      	str	r3, [sp, #4]
 8010250:	4b36      	ldr	r3, [pc, #216]	@ (801032c <tcp_process+0x5a4>)
 8010252:	9300      	str	r3, [sp, #0]
 8010254:	4b36      	ldr	r3, [pc, #216]	@ (8010330 <tcp_process+0x5a8>)
 8010256:	4602      	mov	r2, r0
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f002 fbcb 	bl	80129f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801025e:	e167      	b.n	8010530 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010260:	4b2d      	ldr	r3, [pc, #180]	@ (8010318 <tcp_process+0x590>)
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	f003 0302 	and.w	r3, r3, #2
 8010268:	2b00      	cmp	r3, #0
 801026a:	f000 8161 	beq.w	8010530 <tcp_process+0x7a8>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010272:	1e5a      	subs	r2, r3, #1
 8010274:	4b2b      	ldr	r3, [pc, #172]	@ (8010324 <tcp_process+0x59c>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	429a      	cmp	r2, r3
 801027a:	f040 8159 	bne.w	8010530 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f002 f9b2 	bl	80125e8 <tcp_rexmit>
      break;
 8010284:	e154      	b.n	8010530 <tcp_process+0x7a8>
 8010286:	e153      	b.n	8010530 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f000 fa71 	bl	8010770 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801028e:	4b2d      	ldr	r3, [pc, #180]	@ (8010344 <tcp_process+0x5bc>)
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	f003 0320 	and.w	r3, r3, #32
 8010296:	2b00      	cmp	r3, #0
 8010298:	f000 814c 	beq.w	8010534 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	8b5b      	ldrh	r3, [r3, #26]
 80102a0:	f043 0302 	orr.w	r3, r3, #2
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2207      	movs	r2, #7
 80102ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 80102b0:	e140      	b.n	8010534 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 fa5c 	bl	8010770 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80102b8:	4b22      	ldr	r3, [pc, #136]	@ (8010344 <tcp_process+0x5bc>)
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	f003 0320 	and.w	r3, r3, #32
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d071      	beq.n	80103a8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102c4:	4b14      	ldr	r3, [pc, #80]	@ (8010318 <tcp_process+0x590>)
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	f003 0310 	and.w	r3, r3, #16
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d060      	beq.n	8010392 <tcp_process+0x60a>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102d4:	4b11      	ldr	r3, [pc, #68]	@ (801031c <tcp_process+0x594>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d15a      	bne.n	8010392 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d156      	bne.n	8010392 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	8b5b      	ldrh	r3, [r3, #26]
 80102e8:	f043 0302 	orr.w	r3, r3, #2
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f7fe fdbc 	bl	800ee70 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80102f8:	4b13      	ldr	r3, [pc, #76]	@ (8010348 <tcp_process+0x5c0>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d105      	bne.n	801030e <tcp_process+0x586>
 8010302:	4b11      	ldr	r3, [pc, #68]	@ (8010348 <tcp_process+0x5c0>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	4a0f      	ldr	r2, [pc, #60]	@ (8010348 <tcp_process+0x5c0>)
 801030a:	6013      	str	r3, [r2, #0]
 801030c:	e02e      	b.n	801036c <tcp_process+0x5e4>
 801030e:	4b0e      	ldr	r3, [pc, #56]	@ (8010348 <tcp_process+0x5c0>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	617b      	str	r3, [r7, #20]
 8010314:	e027      	b.n	8010366 <tcp_process+0x5de>
 8010316:	bf00      	nop
 8010318:	24007cd8 	.word	0x24007cd8
 801031c:	24007cd0 	.word	0x24007cd0
 8010320:	24007cd6 	.word	0x24007cd6
 8010324:	24007ccc 	.word	0x24007ccc
 8010328:	24007cbc 	.word	0x24007cbc
 801032c:	24004d5c 	.word	0x24004d5c
 8010330:	24004d60 	.word	0x24004d60
 8010334:	080169c8 	.word	0x080169c8
 8010338:	08016ca4 	.word	0x08016ca4
 801033c:	08016a50 	.word	0x08016a50
 8010340:	24007cd4 	.word	0x24007cd4
 8010344:	24007cd9 	.word	0x24007cd9
 8010348:	24007ca0 	.word	0x24007ca0
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	429a      	cmp	r2, r3
 8010354:	d104      	bne.n	8010360 <tcp_process+0x5d8>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	68da      	ldr	r2, [r3, #12]
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	60da      	str	r2, [r3, #12]
 801035e:	e005      	b.n	801036c <tcp_process+0x5e4>
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	617b      	str	r3, [r7, #20]
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1ef      	bne.n	801034c <tcp_process+0x5c4>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	60da      	str	r2, [r3, #12]
 8010372:	4b77      	ldr	r3, [pc, #476]	@ (8010550 <tcp_process+0x7c8>)
 8010374:	2201      	movs	r2, #1
 8010376:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	220a      	movs	r2, #10
 801037c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801037e:	4b75      	ldr	r3, [pc, #468]	@ (8010554 <tcp_process+0x7cc>)
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	60da      	str	r2, [r3, #12]
 8010386:	4a73      	ldr	r2, [pc, #460]	@ (8010554 <tcp_process+0x7cc>)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6013      	str	r3, [r2, #0]
 801038c:	f002 fcf4 	bl	8012d78 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010390:	e0d2      	b.n	8010538 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	8b5b      	ldrh	r3, [r3, #26]
 8010396:	f043 0302 	orr.w	r3, r3, #2
 801039a:	b29a      	uxth	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2208      	movs	r2, #8
 80103a4:	751a      	strb	r2, [r3, #20]
      break;
 80103a6:	e0c7      	b.n	8010538 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103a8:	4b6b      	ldr	r3, [pc, #428]	@ (8010558 <tcp_process+0x7d0>)
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	f003 0310 	and.w	r3, r3, #16
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	f000 80c1 	beq.w	8010538 <tcp_process+0x7b0>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80103ba:	4b68      	ldr	r3, [pc, #416]	@ (801055c <tcp_process+0x7d4>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	429a      	cmp	r2, r3
 80103c0:	f040 80ba 	bne.w	8010538 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f040 80b5 	bne.w	8010538 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2206      	movs	r2, #6
 80103d2:	751a      	strb	r2, [r3, #20]
      break;
 80103d4:	e0b0      	b.n	8010538 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f9ca 	bl	8010770 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80103dc:	4b60      	ldr	r3, [pc, #384]	@ (8010560 <tcp_process+0x7d8>)
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	f003 0320 	and.w	r3, r3, #32
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	f000 80a9 	beq.w	801053c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	8b5b      	ldrh	r3, [r3, #26]
 80103ee:	f043 0302 	orr.w	r3, r3, #2
 80103f2:	b29a      	uxth	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7fe fd39 	bl	800ee70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80103fe:	4b59      	ldr	r3, [pc, #356]	@ (8010564 <tcp_process+0x7dc>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	429a      	cmp	r2, r3
 8010406:	d105      	bne.n	8010414 <tcp_process+0x68c>
 8010408:	4b56      	ldr	r3, [pc, #344]	@ (8010564 <tcp_process+0x7dc>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	4a55      	ldr	r2, [pc, #340]	@ (8010564 <tcp_process+0x7dc>)
 8010410:	6013      	str	r3, [r2, #0]
 8010412:	e013      	b.n	801043c <tcp_process+0x6b4>
 8010414:	4b53      	ldr	r3, [pc, #332]	@ (8010564 <tcp_process+0x7dc>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	613b      	str	r3, [r7, #16]
 801041a:	e00c      	b.n	8010436 <tcp_process+0x6ae>
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	429a      	cmp	r2, r3
 8010424:	d104      	bne.n	8010430 <tcp_process+0x6a8>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	68da      	ldr	r2, [r3, #12]
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	60da      	str	r2, [r3, #12]
 801042e:	e005      	b.n	801043c <tcp_process+0x6b4>
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	613b      	str	r3, [r7, #16]
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d1ef      	bne.n	801041c <tcp_process+0x694>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	60da      	str	r2, [r3, #12]
 8010442:	4b43      	ldr	r3, [pc, #268]	@ (8010550 <tcp_process+0x7c8>)
 8010444:	2201      	movs	r2, #1
 8010446:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	220a      	movs	r2, #10
 801044c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801044e:	4b41      	ldr	r3, [pc, #260]	@ (8010554 <tcp_process+0x7cc>)
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	60da      	str	r2, [r3, #12]
 8010456:	4a3f      	ldr	r2, [pc, #252]	@ (8010554 <tcp_process+0x7cc>)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6013      	str	r3, [r2, #0]
 801045c:	f002 fc8c 	bl	8012d78 <tcp_timer_needed>
      }
      break;
 8010460:	e06c      	b.n	801053c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 f984 	bl	8010770 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010468:	4b3b      	ldr	r3, [pc, #236]	@ (8010558 <tcp_process+0x7d0>)
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	f003 0310 	and.w	r3, r3, #16
 8010470:	2b00      	cmp	r3, #0
 8010472:	d065      	beq.n	8010540 <tcp_process+0x7b8>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010478:	4b38      	ldr	r3, [pc, #224]	@ (801055c <tcp_process+0x7d4>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	429a      	cmp	r2, r3
 801047e:	d15f      	bne.n	8010540 <tcp_process+0x7b8>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010484:	2b00      	cmp	r3, #0
 8010486:	d15b      	bne.n	8010540 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7fe fcf1 	bl	800ee70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801048e:	4b35      	ldr	r3, [pc, #212]	@ (8010564 <tcp_process+0x7dc>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	429a      	cmp	r2, r3
 8010496:	d105      	bne.n	80104a4 <tcp_process+0x71c>
 8010498:	4b32      	ldr	r3, [pc, #200]	@ (8010564 <tcp_process+0x7dc>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	4a31      	ldr	r2, [pc, #196]	@ (8010564 <tcp_process+0x7dc>)
 80104a0:	6013      	str	r3, [r2, #0]
 80104a2:	e013      	b.n	80104cc <tcp_process+0x744>
 80104a4:	4b2f      	ldr	r3, [pc, #188]	@ (8010564 <tcp_process+0x7dc>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	60fb      	str	r3, [r7, #12]
 80104aa:	e00c      	b.n	80104c6 <tcp_process+0x73e>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d104      	bne.n	80104c0 <tcp_process+0x738>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	68da      	ldr	r2, [r3, #12]
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	60da      	str	r2, [r3, #12]
 80104be:	e005      	b.n	80104cc <tcp_process+0x744>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	60fb      	str	r3, [r7, #12]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d1ef      	bne.n	80104ac <tcp_process+0x724>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	60da      	str	r2, [r3, #12]
 80104d2:	4b1f      	ldr	r3, [pc, #124]	@ (8010550 <tcp_process+0x7c8>)
 80104d4:	2201      	movs	r2, #1
 80104d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	220a      	movs	r2, #10
 80104dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104de:	4b1d      	ldr	r3, [pc, #116]	@ (8010554 <tcp_process+0x7cc>)
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	60da      	str	r2, [r3, #12]
 80104e6:	4a1b      	ldr	r2, [pc, #108]	@ (8010554 <tcp_process+0x7cc>)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6013      	str	r3, [r2, #0]
 80104ec:	f002 fc44 	bl	8012d78 <tcp_timer_needed>
      }
      break;
 80104f0:	e026      	b.n	8010540 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 f93c 	bl	8010770 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80104f8:	4b17      	ldr	r3, [pc, #92]	@ (8010558 <tcp_process+0x7d0>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f003 0310 	and.w	r3, r3, #16
 8010500:	2b00      	cmp	r3, #0
 8010502:	d01f      	beq.n	8010544 <tcp_process+0x7bc>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010508:	4b14      	ldr	r3, [pc, #80]	@ (801055c <tcp_process+0x7d4>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	429a      	cmp	r2, r3
 801050e:	d119      	bne.n	8010544 <tcp_process+0x7bc>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010514:	2b00      	cmp	r3, #0
 8010516:	d115      	bne.n	8010544 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010518:	4b11      	ldr	r3, [pc, #68]	@ (8010560 <tcp_process+0x7d8>)
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	f043 0310 	orr.w	r3, r3, #16
 8010520:	b2da      	uxtb	r2, r3
 8010522:	4b0f      	ldr	r3, [pc, #60]	@ (8010560 <tcp_process+0x7d8>)
 8010524:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010526:	e00d      	b.n	8010544 <tcp_process+0x7bc>
    default:
      break;
 8010528:	bf00      	nop
 801052a:	e00c      	b.n	8010546 <tcp_process+0x7be>
      break;
 801052c:	bf00      	nop
 801052e:	e00a      	b.n	8010546 <tcp_process+0x7be>
      break;
 8010530:	bf00      	nop
 8010532:	e008      	b.n	8010546 <tcp_process+0x7be>
      break;
 8010534:	bf00      	nop
 8010536:	e006      	b.n	8010546 <tcp_process+0x7be>
      break;
 8010538:	bf00      	nop
 801053a:	e004      	b.n	8010546 <tcp_process+0x7be>
      break;
 801053c:	bf00      	nop
 801053e:	e002      	b.n	8010546 <tcp_process+0x7be>
      break;
 8010540:	bf00      	nop
 8010542:	e000      	b.n	8010546 <tcp_process+0x7be>
      break;
 8010544:	bf00      	nop
  }
  return ERR_OK;
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	3724      	adds	r7, #36	@ 0x24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd90      	pop	{r4, r7, pc}
 8010550:	24007ca8 	.word	0x24007ca8
 8010554:	24007ca4 	.word	0x24007ca4
 8010558:	24007cd8 	.word	0x24007cd8
 801055c:	24007cd0 	.word	0x24007cd0
 8010560:	24007cd9 	.word	0x24007cd9
 8010564:	24007ca0 	.word	0x24007ca0

08010568 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010568:	b590      	push	{r4, r7, lr}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d106      	bne.n	8010586 <tcp_oos_insert_segment+0x1e>
 8010578:	4b3b      	ldr	r3, [pc, #236]	@ (8010668 <tcp_oos_insert_segment+0x100>)
 801057a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801057e:	493b      	ldr	r1, [pc, #236]	@ (801066c <tcp_oos_insert_segment+0x104>)
 8010580:	483b      	ldr	r0, [pc, #236]	@ (8010670 <tcp_oos_insert_segment+0x108>)
 8010582:	f003 faff 	bl	8013b84 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	68db      	ldr	r3, [r3, #12]
 801058a:	899b      	ldrh	r3, [r3, #12]
 801058c:	b29b      	uxth	r3, r3
 801058e:	4618      	mov	r0, r3
 8010590:	f7f7 fa3e 	bl	8007a10 <lwip_htons>
 8010594:	4603      	mov	r3, r0
 8010596:	b2db      	uxtb	r3, r3
 8010598:	f003 0301 	and.w	r3, r3, #1
 801059c:	2b00      	cmp	r3, #0
 801059e:	d028      	beq.n	80105f2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80105a0:	6838      	ldr	r0, [r7, #0]
 80105a2:	f7fe fa63 	bl	800ea6c <tcp_segs_free>
    next = NULL;
 80105a6:	2300      	movs	r3, #0
 80105a8:	603b      	str	r3, [r7, #0]
 80105aa:	e056      	b.n	801065a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	899b      	ldrh	r3, [r3, #12]
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7f7 fa2b 	bl	8007a10 <lwip_htons>
 80105ba:	4603      	mov	r3, r0
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	f003 0301 	and.w	r3, r3, #1
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00d      	beq.n	80105e2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	899b      	ldrh	r3, [r3, #12]
 80105cc:	b29c      	uxth	r4, r3
 80105ce:	2001      	movs	r0, #1
 80105d0:	f7f7 fa1e 	bl	8007a10 <lwip_htons>
 80105d4:	4603      	mov	r3, r0
 80105d6:	461a      	mov	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	4322      	orrs	r2, r4
 80105de:	b292      	uxth	r2, r2
 80105e0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80105ec:	68f8      	ldr	r0, [r7, #12]
 80105ee:	f7fe fa52 	bl	800ea96 <tcp_seg_free>
    while (next &&
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d00e      	beq.n	8010616 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	891b      	ldrh	r3, [r3, #8]
 80105fc:	461a      	mov	r2, r3
 80105fe:	4b1d      	ldr	r3, [pc, #116]	@ (8010674 <tcp_oos_insert_segment+0x10c>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	441a      	add	r2, r3
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	68db      	ldr	r3, [r3, #12]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	6839      	ldr	r1, [r7, #0]
 801060c:	8909      	ldrh	r1, [r1, #8]
 801060e:	440b      	add	r3, r1
 8010610:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010612:	2b00      	cmp	r3, #0
 8010614:	daca      	bge.n	80105ac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d01e      	beq.n	801065a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	891b      	ldrh	r3, [r3, #8]
 8010620:	461a      	mov	r2, r3
 8010622:	4b14      	ldr	r3, [pc, #80]	@ (8010674 <tcp_oos_insert_segment+0x10c>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	441a      	add	r2, r3
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	68db      	ldr	r3, [r3, #12]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010630:	2b00      	cmp	r3, #0
 8010632:	dd12      	ble.n	801065a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	b29a      	uxth	r2, r3
 801063c:	4b0d      	ldr	r3, [pc, #52]	@ (8010674 <tcp_oos_insert_segment+0x10c>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	b29b      	uxth	r3, r3
 8010642:	1ad3      	subs	r3, r2, r3
 8010644:	b29a      	uxth	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	685a      	ldr	r2, [r3, #4]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	891b      	ldrh	r3, [r3, #8]
 8010652:	4619      	mov	r1, r3
 8010654:	4610      	mov	r0, r2
 8010656:	f7fc fe13 	bl	800d280 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	683a      	ldr	r2, [r7, #0]
 801065e:	601a      	str	r2, [r3, #0]
}
 8010660:	bf00      	nop
 8010662:	3714      	adds	r7, #20
 8010664:	46bd      	mov	sp, r7
 8010666:	bd90      	pop	{r4, r7, pc}
 8010668:	080169c8 	.word	0x080169c8
 801066c:	08016cc4 	.word	0x08016cc4
 8010670:	08016a50 	.word	0x08016a50
 8010674:	24007ccc 	.word	0x24007ccc

08010678 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010678:	b5b0      	push	{r4, r5, r7, lr}
 801067a:	b086      	sub	sp, #24
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	607a      	str	r2, [r7, #4]
 8010684:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010686:	e03e      	b.n	8010706 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	4618      	mov	r0, r3
 8010698:	f7fd f800 	bl	800d69c <pbuf_clen>
 801069c:	4603      	mov	r3, r0
 801069e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80106a6:	8a7a      	ldrh	r2, [r7, #18]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d906      	bls.n	80106ba <tcp_free_acked_segments+0x42>
 80106ac:	4b2a      	ldr	r3, [pc, #168]	@ (8010758 <tcp_free_acked_segments+0xe0>)
 80106ae:	f240 4257 	movw	r2, #1111	@ 0x457
 80106b2:	492a      	ldr	r1, [pc, #168]	@ (801075c <tcp_free_acked_segments+0xe4>)
 80106b4:	482a      	ldr	r0, [pc, #168]	@ (8010760 <tcp_free_acked_segments+0xe8>)
 80106b6:	f003 fa65 	bl	8013b84 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80106c0:	8a7b      	ldrh	r3, [r7, #18]
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	891a      	ldrh	r2, [r3, #8]
 80106d0:	4b24      	ldr	r3, [pc, #144]	@ (8010764 <tcp_free_acked_segments+0xec>)
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	4413      	add	r3, r2
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	4b22      	ldr	r3, [pc, #136]	@ (8010764 <tcp_free_acked_segments+0xec>)
 80106da:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80106dc:	6978      	ldr	r0, [r7, #20]
 80106de:	f7fe f9da 	bl	800ea96 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00c      	beq.n	8010706 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d109      	bne.n	8010706 <tcp_free_acked_segments+0x8e>
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d106      	bne.n	8010706 <tcp_free_acked_segments+0x8e>
 80106f8:	4b17      	ldr	r3, [pc, #92]	@ (8010758 <tcp_free_acked_segments+0xe0>)
 80106fa:	f240 4261 	movw	r2, #1121	@ 0x461
 80106fe:	491a      	ldr	r1, [pc, #104]	@ (8010768 <tcp_free_acked_segments+0xf0>)
 8010700:	4817      	ldr	r0, [pc, #92]	@ (8010760 <tcp_free_acked_segments+0xe8>)
 8010702:	f003 fa3f 	bl	8013b84 <iprintf>
  while (seg_list != NULL &&
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d020      	beq.n	801074e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	4618      	mov	r0, r3
 8010714:	f7f7 f991 	bl	8007a3a <lwip_htonl>
 8010718:	4604      	mov	r4, r0
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	891b      	ldrh	r3, [r3, #8]
 801071e:	461d      	mov	r5, r3
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	899b      	ldrh	r3, [r3, #12]
 8010726:	b29b      	uxth	r3, r3
 8010728:	4618      	mov	r0, r3
 801072a:	f7f7 f971 	bl	8007a10 <lwip_htons>
 801072e:	4603      	mov	r3, r0
 8010730:	b2db      	uxtb	r3, r3
 8010732:	f003 0303 	and.w	r3, r3, #3
 8010736:	2b00      	cmp	r3, #0
 8010738:	d001      	beq.n	801073e <tcp_free_acked_segments+0xc6>
 801073a:	2301      	movs	r3, #1
 801073c:	e000      	b.n	8010740 <tcp_free_acked_segments+0xc8>
 801073e:	2300      	movs	r3, #0
 8010740:	442b      	add	r3, r5
 8010742:	18e2      	adds	r2, r4, r3
 8010744:	4b09      	ldr	r3, [pc, #36]	@ (801076c <tcp_free_acked_segments+0xf4>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801074a:	2b00      	cmp	r3, #0
 801074c:	dd9c      	ble.n	8010688 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801074e:	68bb      	ldr	r3, [r7, #8]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3718      	adds	r7, #24
 8010754:	46bd      	mov	sp, r7
 8010756:	bdb0      	pop	{r4, r5, r7, pc}
 8010758:	080169c8 	.word	0x080169c8
 801075c:	08016cec 	.word	0x08016cec
 8010760:	08016a50 	.word	0x08016a50
 8010764:	24007cd4 	.word	0x24007cd4
 8010768:	08016d14 	.word	0x08016d14
 801076c:	24007cd0 	.word	0x24007cd0

08010770 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010770:	b5b0      	push	{r4, r5, r7, lr}
 8010772:	b094      	sub	sp, #80	@ 0x50
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010778:	2300      	movs	r3, #0
 801077a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_receive+0x20>
 8010782:	4b91      	ldr	r3, [pc, #580]	@ (80109c8 <tcp_receive+0x258>)
 8010784:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010788:	4990      	ldr	r1, [pc, #576]	@ (80109cc <tcp_receive+0x25c>)
 801078a:	4891      	ldr	r0, [pc, #580]	@ (80109d0 <tcp_receive+0x260>)
 801078c:	f003 f9fa 	bl	8013b84 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	7d1b      	ldrb	r3, [r3, #20]
 8010794:	2b03      	cmp	r3, #3
 8010796:	d806      	bhi.n	80107a6 <tcp_receive+0x36>
 8010798:	4b8b      	ldr	r3, [pc, #556]	@ (80109c8 <tcp_receive+0x258>)
 801079a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801079e:	498d      	ldr	r1, [pc, #564]	@ (80109d4 <tcp_receive+0x264>)
 80107a0:	488b      	ldr	r0, [pc, #556]	@ (80109d0 <tcp_receive+0x260>)
 80107a2:	f003 f9ef 	bl	8013b84 <iprintf>

  if (flags & TCP_ACK) {
 80107a6:	4b8c      	ldr	r3, [pc, #560]	@ (80109d8 <tcp_receive+0x268>)
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	f003 0310 	and.w	r3, r3, #16
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 8264 	beq.w	8010c7c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80107ba:	461a      	mov	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107c0:	4413      	add	r3, r2
 80107c2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107c8:	4b84      	ldr	r3, [pc, #528]	@ (80109dc <tcp_receive+0x26c>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	db1b      	blt.n	801080a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107d6:	4b81      	ldr	r3, [pc, #516]	@ (80109dc <tcp_receive+0x26c>)
 80107d8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107da:	429a      	cmp	r2, r3
 80107dc:	d106      	bne.n	80107ec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80107e2:	4b7f      	ldr	r3, [pc, #508]	@ (80109e0 <tcp_receive+0x270>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	1ad3      	subs	r3, r2, r3
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	db0e      	blt.n	801080a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80107f0:	4b7b      	ldr	r3, [pc, #492]	@ (80109e0 <tcp_receive+0x270>)
 80107f2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d125      	bne.n	8010844 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107f8:	4b7a      	ldr	r3, [pc, #488]	@ (80109e4 <tcp_receive+0x274>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	89db      	ldrh	r3, [r3, #14]
 80107fe:	b29a      	uxth	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010806:	429a      	cmp	r2, r3
 8010808:	d91c      	bls.n	8010844 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801080a:	4b76      	ldr	r3, [pc, #472]	@ (80109e4 <tcp_receive+0x274>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	89db      	ldrh	r3, [r3, #14]
 8010810:	b29a      	uxth	r2, r3
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010824:	429a      	cmp	r2, r3
 8010826:	d205      	bcs.n	8010834 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010834:	4b69      	ldr	r3, [pc, #420]	@ (80109dc <tcp_receive+0x26c>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801083c:	4b68      	ldr	r3, [pc, #416]	@ (80109e0 <tcp_receive+0x270>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010844:	4b66      	ldr	r3, [pc, #408]	@ (80109e0 <tcp_receive+0x270>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801084c:	1ad3      	subs	r3, r2, r3
 801084e:	2b00      	cmp	r3, #0
 8010850:	dc58      	bgt.n	8010904 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010852:	4b65      	ldr	r3, [pc, #404]	@ (80109e8 <tcp_receive+0x278>)
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d14b      	bne.n	80108f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010864:	4413      	add	r3, r2
 8010866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010868:	429a      	cmp	r2, r3
 801086a:	d142      	bne.n	80108f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010872:	2b00      	cmp	r3, #0
 8010874:	db3d      	blt.n	80108f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801087a:	4b59      	ldr	r3, [pc, #356]	@ (80109e0 <tcp_receive+0x270>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	429a      	cmp	r2, r3
 8010880:	d137      	bne.n	80108f2 <tcp_receive+0x182>
              found_dupack = 1;
 8010882:	2301      	movs	r3, #1
 8010884:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801088c:	2bff      	cmp	r3, #255	@ 0xff
 801088e:	d007      	beq.n	80108a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010896:	3301      	adds	r3, #1
 8010898:	b2da      	uxtb	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80108a6:	2b03      	cmp	r3, #3
 80108a8:	d91b      	bls.n	80108e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80108b4:	4413      	add	r3, r2
 80108b6:	b29a      	uxth	r2, r3
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80108be:	429a      	cmp	r2, r3
 80108c0:	d30a      	bcc.n	80108d8 <tcp_receive+0x168>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80108cc:	4413      	add	r3, r2
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80108d6:	e004      	b.n	80108e2 <tcp_receive+0x172>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80108e8:	2b02      	cmp	r3, #2
 80108ea:	d902      	bls.n	80108f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f001 fee7 	bl	80126c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80108f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f040 8161 	bne.w	8010bbc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2200      	movs	r2, #0
 80108fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010902:	e15b      	b.n	8010bbc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010904:	4b36      	ldr	r3, [pc, #216]	@ (80109e0 <tcp_receive+0x270>)
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801090c:	1ad3      	subs	r3, r2, r3
 801090e:	3b01      	subs	r3, #1
 8010910:	2b00      	cmp	r3, #0
 8010912:	f2c0 814e 	blt.w	8010bb2 <tcp_receive+0x442>
 8010916:	4b32      	ldr	r3, [pc, #200]	@ (80109e0 <tcp_receive+0x270>)
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	2b00      	cmp	r3, #0
 8010922:	f300 8146 	bgt.w	8010bb2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	8b5b      	ldrh	r3, [r3, #26]
 801092a:	f003 0304 	and.w	r3, r3, #4
 801092e:	2b00      	cmp	r3, #0
 8010930:	d010      	beq.n	8010954 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	8b5b      	ldrh	r3, [r3, #26]
 8010936:	f023 0304 	bic.w	r3, r3, #4
 801093a:	b29a      	uxth	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2200      	movs	r2, #0
 8010958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010962:	10db      	asrs	r3, r3, #3
 8010964:	b21b      	sxth	r3, r3
 8010966:	b29a      	uxth	r2, r3
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801096e:	b29b      	uxth	r3, r3
 8010970:	4413      	add	r3, r2
 8010972:	b29b      	uxth	r3, r3
 8010974:	b21a      	sxth	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801097c:	4b18      	ldr	r3, [pc, #96]	@ (80109e0 <tcp_receive+0x270>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	b29a      	uxth	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010986:	b29b      	uxth	r3, r3
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010994:	4b12      	ldr	r3, [pc, #72]	@ (80109e0 <tcp_receive+0x270>)
 8010996:	681a      	ldr	r2, [r3, #0]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	7d1b      	ldrb	r3, [r3, #20]
 80109a0:	2b03      	cmp	r3, #3
 80109a2:	f240 8097 	bls.w	8010ad4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d245      	bcs.n	8010a42 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	8b5b      	ldrh	r3, [r3, #26]
 80109ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d014      	beq.n	80109ec <tcp_receive+0x27c>
 80109c2:	2301      	movs	r3, #1
 80109c4:	e013      	b.n	80109ee <tcp_receive+0x27e>
 80109c6:	bf00      	nop
 80109c8:	080169c8 	.word	0x080169c8
 80109cc:	08016d34 	.word	0x08016d34
 80109d0:	08016a50 	.word	0x08016a50
 80109d4:	08016d50 	.word	0x08016d50
 80109d8:	24007cd8 	.word	0x24007cd8
 80109dc:	24007ccc 	.word	0x24007ccc
 80109e0:	24007cd0 	.word	0x24007cd0
 80109e4:	24007cbc 	.word	0x24007cbc
 80109e8:	24007cd6 	.word	0x24007cd6
 80109ec:	2302      	movs	r3, #2
 80109ee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80109f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109fc:	fb12 f303 	smulbb	r3, r2, r3
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010a04:	4293      	cmp	r3, r2
 8010a06:	bf28      	it	cs
 8010a08:	4613      	movcs	r3, r2
 8010a0a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a14:	4413      	add	r3, r2
 8010a16:	b29a      	uxth	r2, r3
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d309      	bcc.n	8010a36 <tcp_receive+0x2c6>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a28:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a2a:	4413      	add	r3, r2
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010a34:	e04e      	b.n	8010ad4 <tcp_receive+0x364>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a3c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010a40:	e048      	b.n	8010ad4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010a48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010a4a:	4413      	add	r3, r2
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d309      	bcc.n	8010a6c <tcp_receive+0x2fc>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010a5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010a60:	4413      	add	r3, r2
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010a6a:	e004      	b.n	8010a76 <tcp_receive+0x306>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d326      	bcc.n	8010ad4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a92:	1ad3      	subs	r3, r2, r3
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010aa6:	4413      	add	r3, r2
 8010aa8:	b29a      	uxth	r2, r3
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d30a      	bcc.n	8010aca <tcp_receive+0x35a>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010abe:	4413      	add	r3, r2
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010ac8:	e004      	b.n	8010ad4 <tcp_receive+0x364>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ad0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010adc:	4a98      	ldr	r2, [pc, #608]	@ (8010d40 <tcp_receive+0x5d0>)
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7ff fdca 	bl	8010678 <tcp_free_acked_segments>
 8010ae4:	4602      	mov	r2, r0
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010af2:	4a94      	ldr	r2, [pc, #592]	@ (8010d44 <tcp_receive+0x5d4>)
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff fdbf 	bl	8010678 <tcp_free_acked_segments>
 8010afa:	4602      	mov	r2, r0
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d104      	bne.n	8010b12 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010b0e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010b10:	e002      	b.n	8010b18 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2200      	movs	r2, #0
 8010b16:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d103      	bne.n	8010b2e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010b34:	4b84      	ldr	r3, [pc, #528]	@ (8010d48 <tcp_receive+0x5d8>)
 8010b36:	881b      	ldrh	r3, [r3, #0]
 8010b38:	4413      	add	r3, r2
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	8b5b      	ldrh	r3, [r3, #26]
 8010b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d035      	beq.n	8010bba <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d118      	bne.n	8010b88 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d00c      	beq.n	8010b78 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7f6 ff65 	bl	8007a3a <lwip_htonl>
 8010b70:	4603      	mov	r3, r0
 8010b72:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	dc20      	bgt.n	8010bba <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	8b5b      	ldrh	r3, [r3, #26]
 8010b7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010b80:	b29a      	uxth	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b86:	e018      	b.n	8010bba <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b90:	68db      	ldr	r3, [r3, #12]
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7f6 ff50 	bl	8007a3a <lwip_htonl>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	1ae3      	subs	r3, r4, r3
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	dc0b      	bgt.n	8010bba <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	8b5b      	ldrh	r3, [r3, #26]
 8010ba6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bb0:	e003      	b.n	8010bba <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f001 ff70 	bl	8012a98 <tcp_send_empty_ack>
 8010bb8:	e000      	b.n	8010bbc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bba:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d05b      	beq.n	8010c7c <tcp_receive+0x50c>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010bc8:	4b60      	ldr	r3, [pc, #384]	@ (8010d4c <tcp_receive+0x5dc>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	1ad3      	subs	r3, r2, r3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	da54      	bge.n	8010c7c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8010d50 <tcp_receive+0x5e0>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	1ad3      	subs	r3, r2, r3
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010be6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010bf0:	10db      	asrs	r3, r3, #3
 8010bf2:	b21b      	sxth	r3, r3
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010c0a:	4413      	add	r3, r2
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	b21a      	sxth	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010c14:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	da05      	bge.n	8010c28 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010c1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010c20:	425b      	negs	r3, r3
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010c28:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010c32:	109b      	asrs	r3, r3, #2
 8010c34:	b21b      	sxth	r3, r3
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	1ad3      	subs	r3, r2, r3
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010c46:	b29a      	uxth	r2, r3
 8010c48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010c4c:	4413      	add	r3, r2
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	b21a      	sxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010c5c:	10db      	asrs	r3, r3, #3
 8010c5e:	b21b      	sxth	r3, r3
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	4413      	add	r3, r2
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	b21a      	sxth	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010c7c:	4b35      	ldr	r3, [pc, #212]	@ (8010d54 <tcp_receive+0x5e4>)
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f000 84df 	beq.w	8011644 <tcp_receive+0xed4>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	7d1b      	ldrb	r3, [r3, #20]
 8010c8a:	2b06      	cmp	r3, #6
 8010c8c:	f200 84da 	bhi.w	8011644 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c94:	4b30      	ldr	r3, [pc, #192]	@ (8010d58 <tcp_receive+0x5e8>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f2c0 808f 	blt.w	8010dc0 <tcp_receive+0x650>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8010d54 <tcp_receive+0x5e4>)
 8010ca8:	881b      	ldrh	r3, [r3, #0]
 8010caa:	4619      	mov	r1, r3
 8010cac:	4b2a      	ldr	r3, [pc, #168]	@ (8010d58 <tcp_receive+0x5e8>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	440b      	add	r3, r1
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f300 8082 	bgt.w	8010dc0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010cbc:	4b27      	ldr	r3, [pc, #156]	@ (8010d5c <tcp_receive+0x5ec>)
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010cc6:	4b24      	ldr	r3, [pc, #144]	@ (8010d58 <tcp_receive+0x5e8>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	1ad3      	subs	r3, r2, r3
 8010ccc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010cce:	4b23      	ldr	r3, [pc, #140]	@ (8010d5c <tcp_receive+0x5ec>)
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d106      	bne.n	8010ce4 <tcp_receive+0x574>
 8010cd6:	4b22      	ldr	r3, [pc, #136]	@ (8010d60 <tcp_receive+0x5f0>)
 8010cd8:	f240 5294 	movw	r2, #1428	@ 0x594
 8010cdc:	4921      	ldr	r1, [pc, #132]	@ (8010d64 <tcp_receive+0x5f4>)
 8010cde:	4822      	ldr	r0, [pc, #136]	@ (8010d68 <tcp_receive+0x5f8>)
 8010ce0:	f002 ff50 	bl	8013b84 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d906      	bls.n	8010cfc <tcp_receive+0x58c>
 8010cee:	4b1c      	ldr	r3, [pc, #112]	@ (8010d60 <tcp_receive+0x5f0>)
 8010cf0:	f240 5295 	movw	r2, #1429	@ 0x595
 8010cf4:	491d      	ldr	r1, [pc, #116]	@ (8010d6c <tcp_receive+0x5fc>)
 8010cf6:	481c      	ldr	r0, [pc, #112]	@ (8010d68 <tcp_receive+0x5f8>)
 8010cf8:	f002 ff44 	bl	8013b84 <iprintf>
      off = (u16_t)off32;
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010d02:	4b16      	ldr	r3, [pc, #88]	@ (8010d5c <tcp_receive+0x5ec>)
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	891b      	ldrh	r3, [r3, #8]
 8010d08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d906      	bls.n	8010d1e <tcp_receive+0x5ae>
 8010d10:	4b13      	ldr	r3, [pc, #76]	@ (8010d60 <tcp_receive+0x5f0>)
 8010d12:	f240 5297 	movw	r2, #1431	@ 0x597
 8010d16:	4916      	ldr	r1, [pc, #88]	@ (8010d70 <tcp_receive+0x600>)
 8010d18:	4813      	ldr	r0, [pc, #76]	@ (8010d68 <tcp_receive+0x5f8>)
 8010d1a:	f002 ff33 	bl	8013b84 <iprintf>
      inseg.len -= off;
 8010d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010d5c <tcp_receive+0x5ec>)
 8010d20:	891a      	ldrh	r2, [r3, #8]
 8010d22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010d26:	1ad3      	subs	r3, r2, r3
 8010d28:	b29a      	uxth	r2, r3
 8010d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8010d5c <tcp_receive+0x5ec>)
 8010d2c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8010d5c <tcp_receive+0x5ec>)
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	891a      	ldrh	r2, [r3, #8]
 8010d34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010d3c:	e02a      	b.n	8010d94 <tcp_receive+0x624>
 8010d3e:	bf00      	nop
 8010d40:	08016d6c 	.word	0x08016d6c
 8010d44:	08016d74 	.word	0x08016d74
 8010d48:	24007cd4 	.word	0x24007cd4
 8010d4c:	24007cd0 	.word	0x24007cd0
 8010d50:	24007c94 	.word	0x24007c94
 8010d54:	24007cd6 	.word	0x24007cd6
 8010d58:	24007ccc 	.word	0x24007ccc
 8010d5c:	24007cac 	.word	0x24007cac
 8010d60:	080169c8 	.word	0x080169c8
 8010d64:	08016d7c 	.word	0x08016d7c
 8010d68:	08016a50 	.word	0x08016a50
 8010d6c:	08016d8c 	.word	0x08016d8c
 8010d70:	08016d9c 	.word	0x08016d9c
        off -= p->len;
 8010d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d76:	895b      	ldrh	r3, [r3, #10]
 8010d78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d84:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010d86:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d96:	895b      	ldrh	r3, [r3, #10]
 8010d98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d8e9      	bhi.n	8010d74 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010da0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010da4:	4619      	mov	r1, r3
 8010da6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010da8:	f7fc fb6a 	bl	800d480 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010db0:	4a90      	ldr	r2, [pc, #576]	@ (8010ff4 <tcp_receive+0x884>)
 8010db2:	6013      	str	r3, [r2, #0]
 8010db4:	4b90      	ldr	r3, [pc, #576]	@ (8010ff8 <tcp_receive+0x888>)
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	4a8e      	ldr	r2, [pc, #568]	@ (8010ff4 <tcp_receive+0x884>)
 8010dba:	6812      	ldr	r2, [r2, #0]
 8010dbc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010dbe:	e00d      	b.n	8010ddc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8010ff4 <tcp_receive+0x884>)
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	da06      	bge.n	8010ddc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8b5b      	ldrh	r3, [r3, #26]
 8010dd2:	f043 0302 	orr.w	r3, r3, #2
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010ddc:	4b85      	ldr	r3, [pc, #532]	@ (8010ff4 <tcp_receive+0x884>)
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010de4:	1ad3      	subs	r3, r2, r3
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f2c0 8427 	blt.w	801163a <tcp_receive+0xeca>
 8010dec:	4b81      	ldr	r3, [pc, #516]	@ (8010ff4 <tcp_receive+0x884>)
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010df4:	6879      	ldr	r1, [r7, #4]
 8010df6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010df8:	440b      	add	r3, r1
 8010dfa:	1ad3      	subs	r3, r2, r3
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f300 841b 	bgt.w	801163a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e08:	4b7a      	ldr	r3, [pc, #488]	@ (8010ff4 <tcp_receive+0x884>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	f040 8298 	bne.w	8011342 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010e12:	4b79      	ldr	r3, [pc, #484]	@ (8010ff8 <tcp_receive+0x888>)
 8010e14:	891c      	ldrh	r4, [r3, #8]
 8010e16:	4b78      	ldr	r3, [pc, #480]	@ (8010ff8 <tcp_receive+0x888>)
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	899b      	ldrh	r3, [r3, #12]
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7f6 fdf6 	bl	8007a10 <lwip_htons>
 8010e24:	4603      	mov	r3, r0
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	f003 0303 	and.w	r3, r3, #3
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d001      	beq.n	8010e34 <tcp_receive+0x6c4>
 8010e30:	2301      	movs	r3, #1
 8010e32:	e000      	b.n	8010e36 <tcp_receive+0x6c6>
 8010e34:	2300      	movs	r3, #0
 8010e36:	4423      	add	r3, r4
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	4b70      	ldr	r3, [pc, #448]	@ (8010ffc <tcp_receive+0x88c>)
 8010e3c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010e42:	4b6e      	ldr	r3, [pc, #440]	@ (8010ffc <tcp_receive+0x88c>)
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d274      	bcs.n	8010f34 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8010ff8 <tcp_receive+0x888>)
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	899b      	ldrh	r3, [r3, #12]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7f6 fddc 	bl	8007a10 <lwip_htons>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	f003 0301 	and.w	r3, r3, #1
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d01e      	beq.n	8010ea2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010e64:	4b64      	ldr	r3, [pc, #400]	@ (8010ff8 <tcp_receive+0x888>)
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	899b      	ldrh	r3, [r3, #12]
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	b21b      	sxth	r3, r3
 8010e6e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010e72:	b21c      	sxth	r4, r3
 8010e74:	4b60      	ldr	r3, [pc, #384]	@ (8010ff8 <tcp_receive+0x888>)
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	899b      	ldrh	r3, [r3, #12]
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7f6 fdc7 	bl	8007a10 <lwip_htons>
 8010e82:	4603      	mov	r3, r0
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7f6 fdbf 	bl	8007a10 <lwip_htons>
 8010e92:	4603      	mov	r3, r0
 8010e94:	b21b      	sxth	r3, r3
 8010e96:	4323      	orrs	r3, r4
 8010e98:	b21a      	sxth	r2, r3
 8010e9a:	4b57      	ldr	r3, [pc, #348]	@ (8010ff8 <tcp_receive+0x888>)
 8010e9c:	68db      	ldr	r3, [r3, #12]
 8010e9e:	b292      	uxth	r2, r2
 8010ea0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010ea6:	4b54      	ldr	r3, [pc, #336]	@ (8010ff8 <tcp_receive+0x888>)
 8010ea8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010eaa:	4b53      	ldr	r3, [pc, #332]	@ (8010ff8 <tcp_receive+0x888>)
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	899b      	ldrh	r3, [r3, #12]
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7f6 fdac 	bl	8007a10 <lwip_htons>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	f003 0302 	and.w	r3, r3, #2
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d005      	beq.n	8010ed0 <tcp_receive+0x760>
            inseg.len -= 1;
 8010ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8010ff8 <tcp_receive+0x888>)
 8010ec6:	891b      	ldrh	r3, [r3, #8]
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8010ff8 <tcp_receive+0x888>)
 8010ece:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010ed0:	4b49      	ldr	r3, [pc, #292]	@ (8010ff8 <tcp_receive+0x888>)
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	4a48      	ldr	r2, [pc, #288]	@ (8010ff8 <tcp_receive+0x888>)
 8010ed6:	8912      	ldrh	r2, [r2, #8]
 8010ed8:	4611      	mov	r1, r2
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fc f9d0 	bl	800d280 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010ee0:	4b45      	ldr	r3, [pc, #276]	@ (8010ff8 <tcp_receive+0x888>)
 8010ee2:	891c      	ldrh	r4, [r3, #8]
 8010ee4:	4b44      	ldr	r3, [pc, #272]	@ (8010ff8 <tcp_receive+0x888>)
 8010ee6:	68db      	ldr	r3, [r3, #12]
 8010ee8:	899b      	ldrh	r3, [r3, #12]
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7f6 fd8f 	bl	8007a10 <lwip_htons>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	f003 0303 	and.w	r3, r3, #3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <tcp_receive+0x792>
 8010efe:	2301      	movs	r3, #1
 8010f00:	e000      	b.n	8010f04 <tcp_receive+0x794>
 8010f02:	2300      	movs	r3, #0
 8010f04:	4423      	add	r3, r4
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	4b3c      	ldr	r3, [pc, #240]	@ (8010ffc <tcp_receive+0x88c>)
 8010f0a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8010ffc <tcp_receive+0x88c>)
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	461a      	mov	r2, r3
 8010f12:	4b38      	ldr	r3, [pc, #224]	@ (8010ff4 <tcp_receive+0x884>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	441a      	add	r2, r3
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f1c:	6879      	ldr	r1, [r7, #4]
 8010f1e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010f20:	440b      	add	r3, r1
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d006      	beq.n	8010f34 <tcp_receive+0x7c4>
 8010f26:	4b36      	ldr	r3, [pc, #216]	@ (8011000 <tcp_receive+0x890>)
 8010f28:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010f2c:	4935      	ldr	r1, [pc, #212]	@ (8011004 <tcp_receive+0x894>)
 8010f2e:	4836      	ldr	r0, [pc, #216]	@ (8011008 <tcp_receive+0x898>)
 8010f30:	f002 fe28 	bl	8013b84 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f000 80e6 	beq.w	801110a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8010ff8 <tcp_receive+0x888>)
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	899b      	ldrh	r3, [r3, #12]
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7f6 fd62 	bl	8007a10 <lwip_htons>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	f003 0301 	and.w	r3, r3, #1
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d010      	beq.n	8010f7a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010f58:	e00a      	b.n	8010f70 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f5e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010f6a:	68f8      	ldr	r0, [r7, #12]
 8010f6c:	f7fd fd93 	bl	800ea96 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1f0      	bne.n	8010f5a <tcp_receive+0x7ea>
 8010f78:	e0c7      	b.n	801110a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010f80:	e051      	b.n	8011026 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	899b      	ldrh	r3, [r3, #12]
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7f6 fd40 	bl	8007a10 <lwip_htons>
 8010f90:	4603      	mov	r3, r0
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	f003 0301 	and.w	r3, r3, #1
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d03c      	beq.n	8011016 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010f9c:	4b16      	ldr	r3, [pc, #88]	@ (8010ff8 <tcp_receive+0x888>)
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	899b      	ldrh	r3, [r3, #12]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7f6 fd33 	bl	8007a10 <lwip_htons>
 8010faa:	4603      	mov	r3, r0
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d12f      	bne.n	8011016 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010fb6:	4b10      	ldr	r3, [pc, #64]	@ (8010ff8 <tcp_receive+0x888>)
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	899b      	ldrh	r3, [r3, #12]
 8010fbc:	b29c      	uxth	r4, r3
 8010fbe:	2001      	movs	r0, #1
 8010fc0:	f7f6 fd26 	bl	8007a10 <lwip_htons>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8010ff8 <tcp_receive+0x888>)
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	4322      	orrs	r2, r4
 8010fce:	b292      	uxth	r2, r2
 8010fd0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010fd2:	4b09      	ldr	r3, [pc, #36]	@ (8010ff8 <tcp_receive+0x888>)
 8010fd4:	891c      	ldrh	r4, [r3, #8]
 8010fd6:	4b08      	ldr	r3, [pc, #32]	@ (8010ff8 <tcp_receive+0x888>)
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	899b      	ldrh	r3, [r3, #12]
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7f6 fd16 	bl	8007a10 <lwip_htons>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	f003 0303 	and.w	r3, r3, #3
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00d      	beq.n	801100c <tcp_receive+0x89c>
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	e00c      	b.n	801100e <tcp_receive+0x89e>
 8010ff4:	24007ccc 	.word	0x24007ccc
 8010ff8:	24007cac 	.word	0x24007cac
 8010ffc:	24007cd6 	.word	0x24007cd6
 8011000:	080169c8 	.word	0x080169c8
 8011004:	08016dac 	.word	0x08016dac
 8011008:	08016a50 	.word	0x08016a50
 801100c:	2300      	movs	r3, #0
 801100e:	4423      	add	r3, r4
 8011010:	b29a      	uxth	r2, r3
 8011012:	4b98      	ldr	r3, [pc, #608]	@ (8011274 <tcp_receive+0xb04>)
 8011014:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011018:	613b      	str	r3, [r7, #16]
              next = next->next;
 801101a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011020:	6938      	ldr	r0, [r7, #16]
 8011022:	f7fd fd38 	bl	800ea96 <tcp_seg_free>
            while (next &&
 8011026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011028:	2b00      	cmp	r3, #0
 801102a:	d00e      	beq.n	801104a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801102c:	4b91      	ldr	r3, [pc, #580]	@ (8011274 <tcp_receive+0xb04>)
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	461a      	mov	r2, r3
 8011032:	4b91      	ldr	r3, [pc, #580]	@ (8011278 <tcp_receive+0xb08>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	441a      	add	r2, r3
 8011038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011040:	8909      	ldrh	r1, [r1, #8]
 8011042:	440b      	add	r3, r1
 8011044:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011046:	2b00      	cmp	r3, #0
 8011048:	da9b      	bge.n	8010f82 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801104a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801104c:	2b00      	cmp	r3, #0
 801104e:	d059      	beq.n	8011104 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011050:	4b88      	ldr	r3, [pc, #544]	@ (8011274 <tcp_receive+0xb04>)
 8011052:	881b      	ldrh	r3, [r3, #0]
 8011054:	461a      	mov	r2, r3
 8011056:	4b88      	ldr	r3, [pc, #544]	@ (8011278 <tcp_receive+0xb08>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	441a      	add	r2, r3
 801105c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011064:	2b00      	cmp	r3, #0
 8011066:	dd4d      	ble.n	8011104 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	b29a      	uxth	r2, r3
 8011070:	4b81      	ldr	r3, [pc, #516]	@ (8011278 <tcp_receive+0xb08>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	b29b      	uxth	r3, r3
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	b29a      	uxth	r2, r3
 801107a:	4b80      	ldr	r3, [pc, #512]	@ (801127c <tcp_receive+0xb0c>)
 801107c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801107e:	4b7f      	ldr	r3, [pc, #508]	@ (801127c <tcp_receive+0xb0c>)
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	899b      	ldrh	r3, [r3, #12]
 8011084:	b29b      	uxth	r3, r3
 8011086:	4618      	mov	r0, r3
 8011088:	f7f6 fcc2 	bl	8007a10 <lwip_htons>
 801108c:	4603      	mov	r3, r0
 801108e:	b2db      	uxtb	r3, r3
 8011090:	f003 0302 	and.w	r3, r3, #2
 8011094:	2b00      	cmp	r3, #0
 8011096:	d005      	beq.n	80110a4 <tcp_receive+0x934>
                inseg.len -= 1;
 8011098:	4b78      	ldr	r3, [pc, #480]	@ (801127c <tcp_receive+0xb0c>)
 801109a:	891b      	ldrh	r3, [r3, #8]
 801109c:	3b01      	subs	r3, #1
 801109e:	b29a      	uxth	r2, r3
 80110a0:	4b76      	ldr	r3, [pc, #472]	@ (801127c <tcp_receive+0xb0c>)
 80110a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80110a4:	4b75      	ldr	r3, [pc, #468]	@ (801127c <tcp_receive+0xb0c>)
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	4a74      	ldr	r2, [pc, #464]	@ (801127c <tcp_receive+0xb0c>)
 80110aa:	8912      	ldrh	r2, [r2, #8]
 80110ac:	4611      	mov	r1, r2
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fc f8e6 	bl	800d280 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80110b4:	4b71      	ldr	r3, [pc, #452]	@ (801127c <tcp_receive+0xb0c>)
 80110b6:	891c      	ldrh	r4, [r3, #8]
 80110b8:	4b70      	ldr	r3, [pc, #448]	@ (801127c <tcp_receive+0xb0c>)
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	899b      	ldrh	r3, [r3, #12]
 80110be:	b29b      	uxth	r3, r3
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7f6 fca5 	bl	8007a10 <lwip_htons>
 80110c6:	4603      	mov	r3, r0
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	f003 0303 	and.w	r3, r3, #3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <tcp_receive+0x966>
 80110d2:	2301      	movs	r3, #1
 80110d4:	e000      	b.n	80110d8 <tcp_receive+0x968>
 80110d6:	2300      	movs	r3, #0
 80110d8:	4423      	add	r3, r4
 80110da:	b29a      	uxth	r2, r3
 80110dc:	4b65      	ldr	r3, [pc, #404]	@ (8011274 <tcp_receive+0xb04>)
 80110de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80110e0:	4b64      	ldr	r3, [pc, #400]	@ (8011274 <tcp_receive+0xb04>)
 80110e2:	881b      	ldrh	r3, [r3, #0]
 80110e4:	461a      	mov	r2, r3
 80110e6:	4b64      	ldr	r3, [pc, #400]	@ (8011278 <tcp_receive+0xb08>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	441a      	add	r2, r3
 80110ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d006      	beq.n	8011104 <tcp_receive+0x994>
 80110f6:	4b62      	ldr	r3, [pc, #392]	@ (8011280 <tcp_receive+0xb10>)
 80110f8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80110fc:	4961      	ldr	r1, [pc, #388]	@ (8011284 <tcp_receive+0xb14>)
 80110fe:	4862      	ldr	r0, [pc, #392]	@ (8011288 <tcp_receive+0xb18>)
 8011100:	f002 fd40 	bl	8013b84 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011108:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801110a:	4b5a      	ldr	r3, [pc, #360]	@ (8011274 <tcp_receive+0xb04>)
 801110c:	881b      	ldrh	r3, [r3, #0]
 801110e:	461a      	mov	r2, r3
 8011110:	4b59      	ldr	r3, [pc, #356]	@ (8011278 <tcp_receive+0xb08>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	441a      	add	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801111e:	4b55      	ldr	r3, [pc, #340]	@ (8011274 <tcp_receive+0xb04>)
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	429a      	cmp	r2, r3
 8011124:	d206      	bcs.n	8011134 <tcp_receive+0x9c4>
 8011126:	4b56      	ldr	r3, [pc, #344]	@ (8011280 <tcp_receive+0xb10>)
 8011128:	f240 6207 	movw	r2, #1543	@ 0x607
 801112c:	4957      	ldr	r1, [pc, #348]	@ (801128c <tcp_receive+0xb1c>)
 801112e:	4856      	ldr	r0, [pc, #344]	@ (8011288 <tcp_receive+0xb18>)
 8011130:	f002 fd28 	bl	8013b84 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011138:	4b4e      	ldr	r3, [pc, #312]	@ (8011274 <tcp_receive+0xb04>)
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	1ad3      	subs	r3, r2, r3
 801113e:	b29a      	uxth	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f7fc ffc5 	bl	800e0d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801114a:	4b4c      	ldr	r3, [pc, #304]	@ (801127c <tcp_receive+0xb0c>)
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	891b      	ldrh	r3, [r3, #8]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d006      	beq.n	8011162 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011154:	4b49      	ldr	r3, [pc, #292]	@ (801127c <tcp_receive+0xb0c>)
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	4a4d      	ldr	r2, [pc, #308]	@ (8011290 <tcp_receive+0xb20>)
 801115a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801115c:	4b47      	ldr	r3, [pc, #284]	@ (801127c <tcp_receive+0xb0c>)
 801115e:	2200      	movs	r2, #0
 8011160:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011162:	4b46      	ldr	r3, [pc, #280]	@ (801127c <tcp_receive+0xb0c>)
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	899b      	ldrh	r3, [r3, #12]
 8011168:	b29b      	uxth	r3, r3
 801116a:	4618      	mov	r0, r3
 801116c:	f7f6 fc50 	bl	8007a10 <lwip_htons>
 8011170:	4603      	mov	r3, r0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f003 0301 	and.w	r3, r3, #1
 8011178:	2b00      	cmp	r3, #0
 801117a:	f000 80b8 	beq.w	80112ee <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801117e:	4b45      	ldr	r3, [pc, #276]	@ (8011294 <tcp_receive+0xb24>)
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	f043 0320 	orr.w	r3, r3, #32
 8011186:	b2da      	uxtb	r2, r3
 8011188:	4b42      	ldr	r3, [pc, #264]	@ (8011294 <tcp_receive+0xb24>)
 801118a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801118c:	e0af      	b.n	80112ee <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011192:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	4a36      	ldr	r2, [pc, #216]	@ (8011278 <tcp_receive+0xb08>)
 801119e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	891b      	ldrh	r3, [r3, #8]
 80111a4:	461c      	mov	r4, r3
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	899b      	ldrh	r3, [r3, #12]
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7f6 fc2e 	bl	8007a10 <lwip_htons>
 80111b4:	4603      	mov	r3, r0
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	f003 0303 	and.w	r3, r3, #3
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <tcp_receive+0xa54>
 80111c0:	2301      	movs	r3, #1
 80111c2:	e000      	b.n	80111c6 <tcp_receive+0xa56>
 80111c4:	2300      	movs	r3, #0
 80111c6:	191a      	adds	r2, r3, r4
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111cc:	441a      	add	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80111d6:	461c      	mov	r4, r3
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	891b      	ldrh	r3, [r3, #8]
 80111dc:	461d      	mov	r5, r3
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	899b      	ldrh	r3, [r3, #12]
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7f6 fc12 	bl	8007a10 <lwip_htons>
 80111ec:	4603      	mov	r3, r0
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	f003 0303 	and.w	r3, r3, #3
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d001      	beq.n	80111fc <tcp_receive+0xa8c>
 80111f8:	2301      	movs	r3, #1
 80111fa:	e000      	b.n	80111fe <tcp_receive+0xa8e>
 80111fc:	2300      	movs	r3, #0
 80111fe:	442b      	add	r3, r5
 8011200:	429c      	cmp	r4, r3
 8011202:	d206      	bcs.n	8011212 <tcp_receive+0xaa2>
 8011204:	4b1e      	ldr	r3, [pc, #120]	@ (8011280 <tcp_receive+0xb10>)
 8011206:	f240 622b 	movw	r2, #1579	@ 0x62b
 801120a:	4923      	ldr	r1, [pc, #140]	@ (8011298 <tcp_receive+0xb28>)
 801120c:	481e      	ldr	r0, [pc, #120]	@ (8011288 <tcp_receive+0xb18>)
 801120e:	f002 fcb9 	bl	8013b84 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	891b      	ldrh	r3, [r3, #8]
 8011216:	461c      	mov	r4, r3
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	899b      	ldrh	r3, [r3, #12]
 801121e:	b29b      	uxth	r3, r3
 8011220:	4618      	mov	r0, r3
 8011222:	f7f6 fbf5 	bl	8007a10 <lwip_htons>
 8011226:	4603      	mov	r3, r0
 8011228:	b2db      	uxtb	r3, r3
 801122a:	f003 0303 	and.w	r3, r3, #3
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <tcp_receive+0xac6>
 8011232:	2301      	movs	r3, #1
 8011234:	e000      	b.n	8011238 <tcp_receive+0xac8>
 8011236:	2300      	movs	r3, #0
 8011238:	1919      	adds	r1, r3, r4
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801123e:	b28b      	uxth	r3, r1
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	b29a      	uxth	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7fc ff43 	bl	800e0d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	891b      	ldrh	r3, [r3, #8]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d028      	beq.n	80112aa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011258:	4b0d      	ldr	r3, [pc, #52]	@ (8011290 <tcp_receive+0xb20>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d01d      	beq.n	801129c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011260:	4b0b      	ldr	r3, [pc, #44]	@ (8011290 <tcp_receive+0xb20>)
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	4619      	mov	r1, r3
 801126a:	4610      	mov	r0, r2
 801126c:	f7fc fa50 	bl	800d710 <pbuf_cat>
 8011270:	e018      	b.n	80112a4 <tcp_receive+0xb34>
 8011272:	bf00      	nop
 8011274:	24007cd6 	.word	0x24007cd6
 8011278:	24007ccc 	.word	0x24007ccc
 801127c:	24007cac 	.word	0x24007cac
 8011280:	080169c8 	.word	0x080169c8
 8011284:	08016de4 	.word	0x08016de4
 8011288:	08016a50 	.word	0x08016a50
 801128c:	08016e20 	.word	0x08016e20
 8011290:	24007cdc 	.word	0x24007cdc
 8011294:	24007cd9 	.word	0x24007cd9
 8011298:	08016e40 	.word	0x08016e40
            } else {
              recv_data = cseg->p;
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	4a70      	ldr	r2, [pc, #448]	@ (8011464 <tcp_receive+0xcf4>)
 80112a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	2200      	movs	r2, #0
 80112a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	899b      	ldrh	r3, [r3, #12]
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7f6 fbac 	bl	8007a10 <lwip_htons>
 80112b8:	4603      	mov	r3, r0
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	f003 0301 	and.w	r3, r3, #1
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d00d      	beq.n	80112e0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80112c4:	4b68      	ldr	r3, [pc, #416]	@ (8011468 <tcp_receive+0xcf8>)
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	f043 0320 	orr.w	r3, r3, #32
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	4b66      	ldr	r3, [pc, #408]	@ (8011468 <tcp_receive+0xcf8>)
 80112d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	7d1b      	ldrb	r3, [r3, #20]
 80112d6:	2b04      	cmp	r3, #4
 80112d8:	d102      	bne.n	80112e0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2207      	movs	r2, #7
 80112de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80112e8:	68b8      	ldr	r0, [r7, #8]
 80112ea:	f7fd fbd4 	bl	800ea96 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d008      	beq.n	8011308 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	685a      	ldr	r2, [r3, #4]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011302:	429a      	cmp	r2, r3
 8011304:	f43f af43 	beq.w	801118e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	8b5b      	ldrh	r3, [r3, #26]
 801130c:	f003 0301 	and.w	r3, r3, #1
 8011310:	2b00      	cmp	r3, #0
 8011312:	d00e      	beq.n	8011332 <tcp_receive+0xbc2>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	8b5b      	ldrh	r3, [r3, #26]
 8011318:	f023 0301 	bic.w	r3, r3, #1
 801131c:	b29a      	uxth	r2, r3
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	835a      	strh	r2, [r3, #26]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	8b5b      	ldrh	r3, [r3, #26]
 8011326:	f043 0302 	orr.w	r3, r3, #2
 801132a:	b29a      	uxth	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011330:	e187      	b.n	8011642 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	8b5b      	ldrh	r3, [r3, #26]
 8011336:	f043 0301 	orr.w	r3, r3, #1
 801133a:	b29a      	uxth	r2, r3
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011340:	e17f      	b.n	8011642 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011346:	2b00      	cmp	r3, #0
 8011348:	d106      	bne.n	8011358 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801134a:	4848      	ldr	r0, [pc, #288]	@ (801146c <tcp_receive+0xcfc>)
 801134c:	f7fd fbbc 	bl	800eac8 <tcp_seg_copy>
 8011350:	4602      	mov	r2, r0
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	675a      	str	r2, [r3, #116]	@ 0x74
 8011356:	e16c      	b.n	8011632 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011358:	2300      	movs	r3, #0
 801135a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011362:	e156      	b.n	8011612 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	685a      	ldr	r2, [r3, #4]
 801136a:	4b41      	ldr	r3, [pc, #260]	@ (8011470 <tcp_receive+0xd00>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	429a      	cmp	r2, r3
 8011370:	d11d      	bne.n	80113ae <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011372:	4b3e      	ldr	r3, [pc, #248]	@ (801146c <tcp_receive+0xcfc>)
 8011374:	891a      	ldrh	r2, [r3, #8]
 8011376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011378:	891b      	ldrh	r3, [r3, #8]
 801137a:	429a      	cmp	r2, r3
 801137c:	f240 814e 	bls.w	801161c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011380:	483a      	ldr	r0, [pc, #232]	@ (801146c <tcp_receive+0xcfc>)
 8011382:	f7fd fba1 	bl	800eac8 <tcp_seg_copy>
 8011386:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	2b00      	cmp	r3, #0
 801138c:	f000 8148 	beq.w	8011620 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011392:	2b00      	cmp	r3, #0
 8011394:	d003      	beq.n	801139e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011398:	697a      	ldr	r2, [r7, #20]
 801139a:	601a      	str	r2, [r3, #0]
 801139c:	e002      	b.n	80113a4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	697a      	ldr	r2, [r7, #20]
 80113a2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80113a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80113a6:	6978      	ldr	r0, [r7, #20]
 80113a8:	f7ff f8de 	bl	8010568 <tcp_oos_insert_segment>
                }
                break;
 80113ac:	e138      	b.n	8011620 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80113ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d117      	bne.n	80113e4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80113b4:	4b2e      	ldr	r3, [pc, #184]	@ (8011470 <tcp_receive+0xd00>)
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	da57      	bge.n	8011474 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113c4:	4829      	ldr	r0, [pc, #164]	@ (801146c <tcp_receive+0xcfc>)
 80113c6:	f7fd fb7f 	bl	800eac8 <tcp_seg_copy>
 80113ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80113cc:	69bb      	ldr	r3, [r7, #24]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	f000 8128 	beq.w	8011624 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	69ba      	ldr	r2, [r7, #24]
 80113d8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80113da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80113dc:	69b8      	ldr	r0, [r7, #24]
 80113de:	f7ff f8c3 	bl	8010568 <tcp_oos_insert_segment>
                  }
                  break;
 80113e2:	e11f      	b.n	8011624 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80113e4:	4b22      	ldr	r3, [pc, #136]	@ (8011470 <tcp_receive+0xd00>)
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	1ad3      	subs	r3, r2, r3
 80113f0:	3b01      	subs	r3, #1
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	db3e      	blt.n	8011474 <tcp_receive+0xd04>
 80113f6:	4b1e      	ldr	r3, [pc, #120]	@ (8011470 <tcp_receive+0xd00>)
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	685b      	ldr	r3, [r3, #4]
 8011400:	1ad3      	subs	r3, r2, r3
 8011402:	3301      	adds	r3, #1
 8011404:	2b00      	cmp	r3, #0
 8011406:	dc35      	bgt.n	8011474 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011408:	4818      	ldr	r0, [pc, #96]	@ (801146c <tcp_receive+0xcfc>)
 801140a:	f7fd fb5d 	bl	800eac8 <tcp_seg_copy>
 801140e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	2b00      	cmp	r3, #0
 8011414:	f000 8108 	beq.w	8011628 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011420:	8912      	ldrh	r2, [r2, #8]
 8011422:	441a      	add	r2, r3
 8011424:	4b12      	ldr	r3, [pc, #72]	@ (8011470 <tcp_receive+0xd00>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	1ad3      	subs	r3, r2, r3
 801142a:	2b00      	cmp	r3, #0
 801142c:	dd12      	ble.n	8011454 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801142e:	4b10      	ldr	r3, [pc, #64]	@ (8011470 <tcp_receive+0xd00>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	b29a      	uxth	r2, r3
 8011434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	b29b      	uxth	r3, r3
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	b29a      	uxth	r2, r3
 8011440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011442:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011446:	685a      	ldr	r2, [r3, #4]
 8011448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801144a:	891b      	ldrh	r3, [r3, #8]
 801144c:	4619      	mov	r1, r3
 801144e:	4610      	mov	r0, r2
 8011450:	f7fb ff16 	bl	800d280 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011456:	69fa      	ldr	r2, [r7, #28]
 8011458:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801145a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801145c:	69f8      	ldr	r0, [r7, #28]
 801145e:	f7ff f883 	bl	8010568 <tcp_oos_insert_segment>
                  }
                  break;
 8011462:	e0e1      	b.n	8011628 <tcp_receive+0xeb8>
 8011464:	24007cdc 	.word	0x24007cdc
 8011468:	24007cd9 	.word	0x24007cd9
 801146c:	24007cac 	.word	0x24007cac
 8011470:	24007ccc 	.word	0x24007ccc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011476:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	f040 80c5 	bne.w	801160c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011482:	4b7f      	ldr	r3, [pc, #508]	@ (8011680 <tcp_receive+0xf10>)
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	685b      	ldr	r3, [r3, #4]
 801148c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801148e:	2b00      	cmp	r3, #0
 8011490:	f340 80bc 	ble.w	801160c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	899b      	ldrh	r3, [r3, #12]
 801149a:	b29b      	uxth	r3, r3
 801149c:	4618      	mov	r0, r3
 801149e:	f7f6 fab7 	bl	8007a10 <lwip_htons>
 80114a2:	4603      	mov	r3, r0
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	f003 0301 	and.w	r3, r3, #1
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	f040 80be 	bne.w	801162c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80114b0:	4874      	ldr	r0, [pc, #464]	@ (8011684 <tcp_receive+0xf14>)
 80114b2:	f7fd fb09 	bl	800eac8 <tcp_seg_copy>
 80114b6:	4602      	mov	r2, r0
 80114b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80114bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f000 80b5 	beq.w	8011630 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80114c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114ce:	8912      	ldrh	r2, [r2, #8]
 80114d0:	441a      	add	r2, r3
 80114d2:	4b6b      	ldr	r3, [pc, #428]	@ (8011680 <tcp_receive+0xf10>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	1ad3      	subs	r3, r2, r3
 80114d8:	2b00      	cmp	r3, #0
 80114da:	dd12      	ble.n	8011502 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80114dc:	4b68      	ldr	r3, [pc, #416]	@ (8011680 <tcp_receive+0xf10>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	b29a      	uxth	r2, r3
 80114e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80114f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f4:	685a      	ldr	r2, [r3, #4]
 80114f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f8:	891b      	ldrh	r3, [r3, #8]
 80114fa:	4619      	mov	r1, r3
 80114fc:	4610      	mov	r0, r2
 80114fe:	f7fb febf 	bl	800d280 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011502:	4b61      	ldr	r3, [pc, #388]	@ (8011688 <tcp_receive+0xf18>)
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	461a      	mov	r2, r3
 8011508:	4b5d      	ldr	r3, [pc, #372]	@ (8011680 <tcp_receive+0xf10>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	441a      	add	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011512:	6879      	ldr	r1, [r7, #4]
 8011514:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011516:	440b      	add	r3, r1
 8011518:	1ad3      	subs	r3, r2, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	f340 8088 	ble.w	8011630 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	899b      	ldrh	r3, [r3, #12]
 8011528:	b29b      	uxth	r3, r3
 801152a:	4618      	mov	r0, r3
 801152c:	f7f6 fa70 	bl	8007a10 <lwip_htons>
 8011530:	4603      	mov	r3, r0
 8011532:	b2db      	uxtb	r3, r3
 8011534:	f003 0301 	and.w	r3, r3, #1
 8011538:	2b00      	cmp	r3, #0
 801153a:	d021      	beq.n	8011580 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801153c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	68db      	ldr	r3, [r3, #12]
 8011542:	899b      	ldrh	r3, [r3, #12]
 8011544:	b29b      	uxth	r3, r3
 8011546:	b21b      	sxth	r3, r3
 8011548:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801154c:	b21c      	sxth	r4, r3
 801154e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	899b      	ldrh	r3, [r3, #12]
 8011556:	b29b      	uxth	r3, r3
 8011558:	4618      	mov	r0, r3
 801155a:	f7f6 fa59 	bl	8007a10 <lwip_htons>
 801155e:	4603      	mov	r3, r0
 8011560:	b2db      	uxtb	r3, r3
 8011562:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011566:	b29b      	uxth	r3, r3
 8011568:	4618      	mov	r0, r3
 801156a:	f7f6 fa51 	bl	8007a10 <lwip_htons>
 801156e:	4603      	mov	r3, r0
 8011570:	b21b      	sxth	r3, r3
 8011572:	4323      	orrs	r3, r4
 8011574:	b21a      	sxth	r2, r3
 8011576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	b292      	uxth	r2, r2
 801157e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011584:	b29a      	uxth	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801158a:	4413      	add	r3, r2
 801158c:	b299      	uxth	r1, r3
 801158e:	4b3c      	ldr	r3, [pc, #240]	@ (8011680 <tcp_receive+0xf10>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	b29a      	uxth	r2, r3
 8011594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	1a8a      	subs	r2, r1, r2
 801159a:	b292      	uxth	r2, r2
 801159c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801159e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	685a      	ldr	r2, [r3, #4]
 80115a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	891b      	ldrh	r3, [r3, #8]
 80115aa:	4619      	mov	r1, r3
 80115ac:	4610      	mov	r0, r2
 80115ae:	f7fb fe67 	bl	800d280 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80115b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	891c      	ldrh	r4, [r3, #8]
 80115b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	899b      	ldrh	r3, [r3, #12]
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7f6 fa24 	bl	8007a10 <lwip_htons>
 80115c8:	4603      	mov	r3, r0
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	f003 0303 	and.w	r3, r3, #3
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d001      	beq.n	80115d8 <tcp_receive+0xe68>
 80115d4:	2301      	movs	r3, #1
 80115d6:	e000      	b.n	80115da <tcp_receive+0xe6a>
 80115d8:	2300      	movs	r3, #0
 80115da:	4423      	add	r3, r4
 80115dc:	b29a      	uxth	r2, r3
 80115de:	4b2a      	ldr	r3, [pc, #168]	@ (8011688 <tcp_receive+0xf18>)
 80115e0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80115e2:	4b29      	ldr	r3, [pc, #164]	@ (8011688 <tcp_receive+0xf18>)
 80115e4:	881b      	ldrh	r3, [r3, #0]
 80115e6:	461a      	mov	r2, r3
 80115e8:	4b25      	ldr	r3, [pc, #148]	@ (8011680 <tcp_receive+0xf10>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	441a      	add	r2, r3
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115f2:	6879      	ldr	r1, [r7, #4]
 80115f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80115f6:	440b      	add	r3, r1
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d019      	beq.n	8011630 <tcp_receive+0xec0>
 80115fc:	4b23      	ldr	r3, [pc, #140]	@ (801168c <tcp_receive+0xf1c>)
 80115fe:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011602:	4923      	ldr	r1, [pc, #140]	@ (8011690 <tcp_receive+0xf20>)
 8011604:	4823      	ldr	r0, [pc, #140]	@ (8011694 <tcp_receive+0xf24>)
 8011606:	f002 fabd 	bl	8013b84 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801160a:	e011      	b.n	8011630 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801160c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011614:	2b00      	cmp	r3, #0
 8011616:	f47f aea5 	bne.w	8011364 <tcp_receive+0xbf4>
 801161a:	e00a      	b.n	8011632 <tcp_receive+0xec2>
                break;
 801161c:	bf00      	nop
 801161e:	e008      	b.n	8011632 <tcp_receive+0xec2>
                break;
 8011620:	bf00      	nop
 8011622:	e006      	b.n	8011632 <tcp_receive+0xec2>
                  break;
 8011624:	bf00      	nop
 8011626:	e004      	b.n	8011632 <tcp_receive+0xec2>
                  break;
 8011628:	bf00      	nop
 801162a:	e002      	b.n	8011632 <tcp_receive+0xec2>
                  break;
 801162c:	bf00      	nop
 801162e:	e000      	b.n	8011632 <tcp_receive+0xec2>
                break;
 8011630:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f001 fa30 	bl	8012a98 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011638:	e003      	b.n	8011642 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f001 fa2c 	bl	8012a98 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011640:	e01a      	b.n	8011678 <tcp_receive+0xf08>
 8011642:	e019      	b.n	8011678 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011644:	4b0e      	ldr	r3, [pc, #56]	@ (8011680 <tcp_receive+0xf10>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801164c:	1ad3      	subs	r3, r2, r3
 801164e:	2b00      	cmp	r3, #0
 8011650:	db0a      	blt.n	8011668 <tcp_receive+0xef8>
 8011652:	4b0b      	ldr	r3, [pc, #44]	@ (8011680 <tcp_receive+0xf10>)
 8011654:	681a      	ldr	r2, [r3, #0]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801165a:	6879      	ldr	r1, [r7, #4]
 801165c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801165e:	440b      	add	r3, r1
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	3301      	adds	r3, #1
 8011664:	2b00      	cmp	r3, #0
 8011666:	dd07      	ble.n	8011678 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	8b5b      	ldrh	r3, [r3, #26]
 801166c:	f043 0302 	orr.w	r3, r3, #2
 8011670:	b29a      	uxth	r2, r3
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011676:	e7ff      	b.n	8011678 <tcp_receive+0xf08>
 8011678:	bf00      	nop
 801167a:	3750      	adds	r7, #80	@ 0x50
 801167c:	46bd      	mov	sp, r7
 801167e:	bdb0      	pop	{r4, r5, r7, pc}
 8011680:	24007ccc 	.word	0x24007ccc
 8011684:	24007cac 	.word	0x24007cac
 8011688:	24007cd6 	.word	0x24007cd6
 801168c:	080169c8 	.word	0x080169c8
 8011690:	08016dac 	.word	0x08016dac
 8011694:	08016a50 	.word	0x08016a50

08011698 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801169e:	4b15      	ldr	r3, [pc, #84]	@ (80116f4 <tcp_get_next_optbyte+0x5c>)
 80116a0:	881b      	ldrh	r3, [r3, #0]
 80116a2:	1c5a      	adds	r2, r3, #1
 80116a4:	b291      	uxth	r1, r2
 80116a6:	4a13      	ldr	r2, [pc, #76]	@ (80116f4 <tcp_get_next_optbyte+0x5c>)
 80116a8:	8011      	strh	r1, [r2, #0]
 80116aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80116ac:	4b12      	ldr	r3, [pc, #72]	@ (80116f8 <tcp_get_next_optbyte+0x60>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d004      	beq.n	80116be <tcp_get_next_optbyte+0x26>
 80116b4:	4b11      	ldr	r3, [pc, #68]	@ (80116fc <tcp_get_next_optbyte+0x64>)
 80116b6:	881b      	ldrh	r3, [r3, #0]
 80116b8:	88fa      	ldrh	r2, [r7, #6]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d208      	bcs.n	80116d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80116be:	4b10      	ldr	r3, [pc, #64]	@ (8011700 <tcp_get_next_optbyte+0x68>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	3314      	adds	r3, #20
 80116c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80116c6:	88fb      	ldrh	r3, [r7, #6]
 80116c8:	683a      	ldr	r2, [r7, #0]
 80116ca:	4413      	add	r3, r2
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	e00b      	b.n	80116e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80116d0:	88fb      	ldrh	r3, [r7, #6]
 80116d2:	b2da      	uxtb	r2, r3
 80116d4:	4b09      	ldr	r3, [pc, #36]	@ (80116fc <tcp_get_next_optbyte+0x64>)
 80116d6:	881b      	ldrh	r3, [r3, #0]
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80116de:	4b06      	ldr	r3, [pc, #24]	@ (80116f8 <tcp_get_next_optbyte+0x60>)
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	797b      	ldrb	r3, [r7, #5]
 80116e4:	4413      	add	r3, r2
 80116e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr
 80116f4:	24007cc8 	.word	0x24007cc8
 80116f8:	24007cc4 	.word	0x24007cc4
 80116fc:	24007cc2 	.word	0x24007cc2
 8011700:	24007cbc 	.word	0x24007cbc

08011704 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d106      	bne.n	8011720 <tcp_parseopt+0x1c>
 8011712:	4b32      	ldr	r3, [pc, #200]	@ (80117dc <tcp_parseopt+0xd8>)
 8011714:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011718:	4931      	ldr	r1, [pc, #196]	@ (80117e0 <tcp_parseopt+0xdc>)
 801171a:	4832      	ldr	r0, [pc, #200]	@ (80117e4 <tcp_parseopt+0xe0>)
 801171c:	f002 fa32 	bl	8013b84 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011720:	4b31      	ldr	r3, [pc, #196]	@ (80117e8 <tcp_parseopt+0xe4>)
 8011722:	881b      	ldrh	r3, [r3, #0]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d056      	beq.n	80117d6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011728:	4b30      	ldr	r3, [pc, #192]	@ (80117ec <tcp_parseopt+0xe8>)
 801172a:	2200      	movs	r2, #0
 801172c:	801a      	strh	r2, [r3, #0]
 801172e:	e046      	b.n	80117be <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011730:	f7ff ffb2 	bl	8011698 <tcp_get_next_optbyte>
 8011734:	4603      	mov	r3, r0
 8011736:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011738:	7bfb      	ldrb	r3, [r7, #15]
 801173a:	2b02      	cmp	r3, #2
 801173c:	d006      	beq.n	801174c <tcp_parseopt+0x48>
 801173e:	2b02      	cmp	r3, #2
 8011740:	dc2a      	bgt.n	8011798 <tcp_parseopt+0x94>
 8011742:	2b00      	cmp	r3, #0
 8011744:	d042      	beq.n	80117cc <tcp_parseopt+0xc8>
 8011746:	2b01      	cmp	r3, #1
 8011748:	d038      	beq.n	80117bc <tcp_parseopt+0xb8>
 801174a:	e025      	b.n	8011798 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801174c:	f7ff ffa4 	bl	8011698 <tcp_get_next_optbyte>
 8011750:	4603      	mov	r3, r0
 8011752:	2b04      	cmp	r3, #4
 8011754:	d13c      	bne.n	80117d0 <tcp_parseopt+0xcc>
 8011756:	4b25      	ldr	r3, [pc, #148]	@ (80117ec <tcp_parseopt+0xe8>)
 8011758:	881b      	ldrh	r3, [r3, #0]
 801175a:	3301      	adds	r3, #1
 801175c:	4a22      	ldr	r2, [pc, #136]	@ (80117e8 <tcp_parseopt+0xe4>)
 801175e:	8812      	ldrh	r2, [r2, #0]
 8011760:	4293      	cmp	r3, r2
 8011762:	da35      	bge.n	80117d0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011764:	f7ff ff98 	bl	8011698 <tcp_get_next_optbyte>
 8011768:	4603      	mov	r3, r0
 801176a:	021b      	lsls	r3, r3, #8
 801176c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801176e:	f7ff ff93 	bl	8011698 <tcp_get_next_optbyte>
 8011772:	4603      	mov	r3, r0
 8011774:	461a      	mov	r2, r3
 8011776:	89bb      	ldrh	r3, [r7, #12]
 8011778:	4313      	orrs	r3, r2
 801177a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801177c:	89bb      	ldrh	r3, [r7, #12]
 801177e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011782:	d804      	bhi.n	801178e <tcp_parseopt+0x8a>
 8011784:	89bb      	ldrh	r3, [r7, #12]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d001      	beq.n	801178e <tcp_parseopt+0x8a>
 801178a:	89ba      	ldrh	r2, [r7, #12]
 801178c:	e001      	b.n	8011792 <tcp_parseopt+0x8e>
 801178e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011796:	e012      	b.n	80117be <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011798:	f7ff ff7e 	bl	8011698 <tcp_get_next_optbyte>
 801179c:	4603      	mov	r3, r0
 801179e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80117a0:	7afb      	ldrb	r3, [r7, #11]
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d916      	bls.n	80117d4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80117a6:	7afb      	ldrb	r3, [r7, #11]
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	4b10      	ldr	r3, [pc, #64]	@ (80117ec <tcp_parseopt+0xe8>)
 80117ac:	881b      	ldrh	r3, [r3, #0]
 80117ae:	4413      	add	r3, r2
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	3b02      	subs	r3, #2
 80117b4:	b29a      	uxth	r2, r3
 80117b6:	4b0d      	ldr	r3, [pc, #52]	@ (80117ec <tcp_parseopt+0xe8>)
 80117b8:	801a      	strh	r2, [r3, #0]
 80117ba:	e000      	b.n	80117be <tcp_parseopt+0xba>
          break;
 80117bc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117be:	4b0b      	ldr	r3, [pc, #44]	@ (80117ec <tcp_parseopt+0xe8>)
 80117c0:	881a      	ldrh	r2, [r3, #0]
 80117c2:	4b09      	ldr	r3, [pc, #36]	@ (80117e8 <tcp_parseopt+0xe4>)
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d3b2      	bcc.n	8011730 <tcp_parseopt+0x2c>
 80117ca:	e004      	b.n	80117d6 <tcp_parseopt+0xd2>
          return;
 80117cc:	bf00      	nop
 80117ce:	e002      	b.n	80117d6 <tcp_parseopt+0xd2>
            return;
 80117d0:	bf00      	nop
 80117d2:	e000      	b.n	80117d6 <tcp_parseopt+0xd2>
            return;
 80117d4:	bf00      	nop
      }
    }
  }
}
 80117d6:	3710      	adds	r7, #16
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}
 80117dc:	080169c8 	.word	0x080169c8
 80117e0:	08016e68 	.word	0x08016e68
 80117e4:	08016a50 	.word	0x08016a50
 80117e8:	24007cc0 	.word	0x24007cc0
 80117ec:	24007cc8 	.word	0x24007cc8

080117f0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80117f0:	b480      	push	{r7}
 80117f2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80117f4:	4b05      	ldr	r3, [pc, #20]	@ (801180c <tcp_trigger_input_pcb_close+0x1c>)
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	f043 0310 	orr.w	r3, r3, #16
 80117fc:	b2da      	uxtb	r2, r3
 80117fe:	4b03      	ldr	r3, [pc, #12]	@ (801180c <tcp_trigger_input_pcb_close+0x1c>)
 8011800:	701a      	strb	r2, [r3, #0]
}
 8011802:	bf00      	nop
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr
 801180c:	24007cd9 	.word	0x24007cd9

08011810 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00a      	beq.n	8011838 <tcp_route+0x28>
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	7a1b      	ldrb	r3, [r3, #8]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d006      	beq.n	8011838 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	7a1b      	ldrb	r3, [r3, #8]
 801182e:	4618      	mov	r0, r3
 8011830:	f7fb fb4c 	bl	800cecc <netif_get_by_index>
 8011834:	4603      	mov	r3, r0
 8011836:	e003      	b.n	8011840 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f7f9 fa51 	bl	800ace0 <ip4_route>
 801183e:	4603      	mov	r3, r0
  }
}
 8011840:	4618      	mov	r0, r3
 8011842:	3710      	adds	r7, #16
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011848:	b590      	push	{r4, r7, lr}
 801184a:	b087      	sub	sp, #28
 801184c:	af00      	add	r7, sp, #0
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	603b      	str	r3, [r7, #0]
 8011854:	4613      	mov	r3, r2
 8011856:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d105      	bne.n	801186a <tcp_create_segment+0x22>
 801185e:	4b43      	ldr	r3, [pc, #268]	@ (801196c <tcp_create_segment+0x124>)
 8011860:	22a3      	movs	r2, #163	@ 0xa3
 8011862:	4943      	ldr	r1, [pc, #268]	@ (8011970 <tcp_create_segment+0x128>)
 8011864:	4843      	ldr	r0, [pc, #268]	@ (8011974 <tcp_create_segment+0x12c>)
 8011866:	f002 f98d 	bl	8013b84 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d105      	bne.n	801187c <tcp_create_segment+0x34>
 8011870:	4b3e      	ldr	r3, [pc, #248]	@ (801196c <tcp_create_segment+0x124>)
 8011872:	22a4      	movs	r2, #164	@ 0xa4
 8011874:	4940      	ldr	r1, [pc, #256]	@ (8011978 <tcp_create_segment+0x130>)
 8011876:	483f      	ldr	r0, [pc, #252]	@ (8011974 <tcp_create_segment+0x12c>)
 8011878:	f002 f984 	bl	8013b84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801187c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	b2db      	uxtb	r3, r3
 8011884:	f003 0304 	and.w	r3, r3, #4
 8011888:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801188a:	2003      	movs	r0, #3
 801188c:	f7fa ff8c 	bl	800c7a8 <memp_malloc>
 8011890:	6138      	str	r0, [r7, #16]
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d104      	bne.n	80118a2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011898:	68b8      	ldr	r0, [r7, #8]
 801189a:	f7fb fe77 	bl	800d58c <pbuf_free>
    return NULL;
 801189e:	2300      	movs	r3, #0
 80118a0:	e060      	b.n	8011964 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80118a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	2200      	movs	r2, #0
 80118ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	68ba      	ldr	r2, [r7, #8]
 80118b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	891a      	ldrh	r2, [r3, #8]
 80118ba:	7dfb      	ldrb	r3, [r7, #23]
 80118bc:	b29b      	uxth	r3, r3
 80118be:	429a      	cmp	r2, r3
 80118c0:	d205      	bcs.n	80118ce <tcp_create_segment+0x86>
 80118c2:	4b2a      	ldr	r3, [pc, #168]	@ (801196c <tcp_create_segment+0x124>)
 80118c4:	22b0      	movs	r2, #176	@ 0xb0
 80118c6:	492d      	ldr	r1, [pc, #180]	@ (801197c <tcp_create_segment+0x134>)
 80118c8:	482a      	ldr	r0, [pc, #168]	@ (8011974 <tcp_create_segment+0x12c>)
 80118ca:	f002 f95b 	bl	8013b84 <iprintf>
  seg->len = p->tot_len - optlen;
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	891a      	ldrh	r2, [r3, #8]
 80118d2:	7dfb      	ldrb	r3, [r7, #23]
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	1ad3      	subs	r3, r2, r3
 80118d8:	b29a      	uxth	r2, r3
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80118de:	2114      	movs	r1, #20
 80118e0:	68b8      	ldr	r0, [r7, #8]
 80118e2:	f7fb fdbd 	bl	800d460 <pbuf_add_header>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d004      	beq.n	80118f6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80118ec:	6938      	ldr	r0, [r7, #16]
 80118ee:	f7fd f8d2 	bl	800ea96 <tcp_seg_free>
    return NULL;
 80118f2:	2300      	movs	r3, #0
 80118f4:	e036      	b.n	8011964 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	685a      	ldr	r2, [r3, #4]
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	8ada      	ldrh	r2, [r3, #22]
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	68dc      	ldr	r4, [r3, #12]
 8011908:	4610      	mov	r0, r2
 801190a:	f7f6 f881 	bl	8007a10 <lwip_htons>
 801190e:	4603      	mov	r3, r0
 8011910:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	8b1a      	ldrh	r2, [r3, #24]
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	68dc      	ldr	r4, [r3, #12]
 801191a:	4610      	mov	r0, r2
 801191c:	f7f6 f878 	bl	8007a10 <lwip_htons>
 8011920:	4603      	mov	r3, r0
 8011922:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	68dc      	ldr	r4, [r3, #12]
 8011928:	6838      	ldr	r0, [r7, #0]
 801192a:	f7f6 f886 	bl	8007a3a <lwip_htonl>
 801192e:	4603      	mov	r3, r0
 8011930:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011932:	7dfb      	ldrb	r3, [r7, #23]
 8011934:	089b      	lsrs	r3, r3, #2
 8011936:	b2db      	uxtb	r3, r3
 8011938:	3305      	adds	r3, #5
 801193a:	b29b      	uxth	r3, r3
 801193c:	031b      	lsls	r3, r3, #12
 801193e:	b29a      	uxth	r2, r3
 8011940:	79fb      	ldrb	r3, [r7, #7]
 8011942:	b29b      	uxth	r3, r3
 8011944:	4313      	orrs	r3, r2
 8011946:	b29a      	uxth	r2, r3
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	68dc      	ldr	r4, [r3, #12]
 801194c:	4610      	mov	r0, r2
 801194e:	f7f6 f85f 	bl	8007a10 <lwip_htons>
 8011952:	4603      	mov	r3, r0
 8011954:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	68db      	ldr	r3, [r3, #12]
 801195a:	2200      	movs	r2, #0
 801195c:	749a      	strb	r2, [r3, #18]
 801195e:	2200      	movs	r2, #0
 8011960:	74da      	strb	r2, [r3, #19]
  return seg;
 8011962:	693b      	ldr	r3, [r7, #16]
}
 8011964:	4618      	mov	r0, r3
 8011966:	371c      	adds	r7, #28
 8011968:	46bd      	mov	sp, r7
 801196a:	bd90      	pop	{r4, r7, pc}
 801196c:	08016e84 	.word	0x08016e84
 8011970:	08016ef4 	.word	0x08016ef4
 8011974:	08016f14 	.word	0x08016f14
 8011978:	08016f3c 	.word	0x08016f3c
 801197c:	08016f60 	.word	0x08016f60

08011980 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011980:	b590      	push	{r4, r7, lr}
 8011982:	b08b      	sub	sp, #44	@ 0x2c
 8011984:	af02      	add	r7, sp, #8
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	460b      	mov	r3, r1
 801198a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801198c:	2300      	movs	r3, #0
 801198e:	61fb      	str	r3, [r7, #28]
 8011990:	2300      	movs	r3, #0
 8011992:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011994:	2300      	movs	r3, #0
 8011996:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d106      	bne.n	80119ac <tcp_split_unsent_seg+0x2c>
 801199e:	4b95      	ldr	r3, [pc, #596]	@ (8011bf4 <tcp_split_unsent_seg+0x274>)
 80119a0:	f240 324b 	movw	r2, #843	@ 0x34b
 80119a4:	4994      	ldr	r1, [pc, #592]	@ (8011bf8 <tcp_split_unsent_seg+0x278>)
 80119a6:	4895      	ldr	r0, [pc, #596]	@ (8011bfc <tcp_split_unsent_seg+0x27c>)
 80119a8:	f002 f8ec 	bl	8013b84 <iprintf>

  useg = pcb->unsent;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d102      	bne.n	80119be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80119b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119bc:	e116      	b.n	8011bec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80119be:	887b      	ldrh	r3, [r7, #2]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d109      	bne.n	80119d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80119c4:	4b8b      	ldr	r3, [pc, #556]	@ (8011bf4 <tcp_split_unsent_seg+0x274>)
 80119c6:	f240 3253 	movw	r2, #851	@ 0x353
 80119ca:	498d      	ldr	r1, [pc, #564]	@ (8011c00 <tcp_split_unsent_seg+0x280>)
 80119cc:	488b      	ldr	r0, [pc, #556]	@ (8011bfc <tcp_split_unsent_seg+0x27c>)
 80119ce:	f002 f8d9 	bl	8013b84 <iprintf>
    return ERR_VAL;
 80119d2:	f06f 0305 	mvn.w	r3, #5
 80119d6:	e109      	b.n	8011bec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	891b      	ldrh	r3, [r3, #8]
 80119dc:	887a      	ldrh	r2, [r7, #2]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d301      	bcc.n	80119e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80119e2:	2300      	movs	r3, #0
 80119e4:	e102      	b.n	8011bec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119ea:	887a      	ldrh	r2, [r7, #2]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d906      	bls.n	80119fe <tcp_split_unsent_seg+0x7e>
 80119f0:	4b80      	ldr	r3, [pc, #512]	@ (8011bf4 <tcp_split_unsent_seg+0x274>)
 80119f2:	f240 325b 	movw	r2, #859	@ 0x35b
 80119f6:	4983      	ldr	r1, [pc, #524]	@ (8011c04 <tcp_split_unsent_seg+0x284>)
 80119f8:	4880      	ldr	r0, [pc, #512]	@ (8011bfc <tcp_split_unsent_seg+0x27c>)
 80119fa:	f002 f8c3 	bl	8013b84 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	891b      	ldrh	r3, [r3, #8]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d106      	bne.n	8011a14 <tcp_split_unsent_seg+0x94>
 8011a06:	4b7b      	ldr	r3, [pc, #492]	@ (8011bf4 <tcp_split_unsent_seg+0x274>)
 8011a08:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011a0c:	497e      	ldr	r1, [pc, #504]	@ (8011c08 <tcp_split_unsent_seg+0x288>)
 8011a0e:	487b      	ldr	r0, [pc, #492]	@ (8011bfc <tcp_split_unsent_seg+0x27c>)
 8011a10:	f002 f8b8 	bl	8013b84 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	7a9b      	ldrb	r3, [r3, #10]
 8011a18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011a1a:	7bfb      	ldrb	r3, [r7, #15]
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	f003 0304 	and.w	r3, r3, #4
 8011a24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	891a      	ldrh	r2, [r3, #8]
 8011a2a:	887b      	ldrh	r3, [r7, #2]
 8011a2c:	1ad3      	subs	r3, r2, r3
 8011a2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011a30:	7bbb      	ldrb	r3, [r7, #14]
 8011a32:	b29a      	uxth	r2, r3
 8011a34:	89bb      	ldrh	r3, [r7, #12]
 8011a36:	4413      	add	r3, r2
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a3e:	4619      	mov	r1, r3
 8011a40:	2036      	movs	r0, #54	@ 0x36
 8011a42:	f7fb fabf 	bl	800cfc4 <pbuf_alloc>
 8011a46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	f000 80b7 	beq.w	8011bbe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	891a      	ldrh	r2, [r3, #8]
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	891b      	ldrh	r3, [r3, #8]
 8011a5a:	1ad3      	subs	r3, r2, r3
 8011a5c:	b29a      	uxth	r2, r3
 8011a5e:	887b      	ldrh	r3, [r7, #2]
 8011a60:	4413      	add	r3, r2
 8011a62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	6858      	ldr	r0, [r3, #4]
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	685a      	ldr	r2, [r3, #4]
 8011a6c:	7bbb      	ldrb	r3, [r7, #14]
 8011a6e:	18d1      	adds	r1, r2, r3
 8011a70:	897b      	ldrh	r3, [r7, #10]
 8011a72:	89ba      	ldrh	r2, [r7, #12]
 8011a74:	f7fb ff84 	bl	800d980 <pbuf_copy_partial>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	89bb      	ldrh	r3, [r7, #12]
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	f040 809f 	bne.w	8011bc2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	899b      	ldrh	r3, [r3, #12]
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7f5 ffbf 	bl	8007a10 <lwip_htons>
 8011a92:	4603      	mov	r3, r0
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011aa0:	7efb      	ldrb	r3, [r7, #27]
 8011aa2:	f003 0308 	and.w	r3, r3, #8
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d007      	beq.n	8011aba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011aaa:	7efb      	ldrb	r3, [r7, #27]
 8011aac:	f023 0308 	bic.w	r3, r3, #8
 8011ab0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011ab2:	7ebb      	ldrb	r3, [r7, #26]
 8011ab4:	f043 0308 	orr.w	r3, r3, #8
 8011ab8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011aba:	7efb      	ldrb	r3, [r7, #27]
 8011abc:	f003 0301 	and.w	r3, r3, #1
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d007      	beq.n	8011ad4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011ac4:	7efb      	ldrb	r3, [r7, #27]
 8011ac6:	f023 0301 	bic.w	r3, r3, #1
 8011aca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011acc:	7ebb      	ldrb	r3, [r7, #26]
 8011ace:	f043 0301 	orr.w	r3, r3, #1
 8011ad2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7f5 ffad 	bl	8007a3a <lwip_htonl>
 8011ae0:	4602      	mov	r2, r0
 8011ae2:	887b      	ldrh	r3, [r7, #2]
 8011ae4:	18d1      	adds	r1, r2, r3
 8011ae6:	7eba      	ldrb	r2, [r7, #26]
 8011ae8:	7bfb      	ldrb	r3, [r7, #15]
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	460b      	mov	r3, r1
 8011aee:	6939      	ldr	r1, [r7, #16]
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f7ff fea9 	bl	8011848 <tcp_create_segment>
 8011af6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d063      	beq.n	8011bc6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fb fdca 	bl	800d69c <pbuf_clen>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b12:	1a9b      	subs	r3, r3, r2
 8011b14:	b29a      	uxth	r2, r3
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	6858      	ldr	r0, [r3, #4]
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	891a      	ldrh	r2, [r3, #8]
 8011b26:	89bb      	ldrh	r3, [r7, #12]
 8011b28:	1ad3      	subs	r3, r2, r3
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	f7fb fba7 	bl	800d280 <pbuf_realloc>
  useg->len -= remainder;
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	891a      	ldrh	r2, [r3, #8]
 8011b36:	89bb      	ldrh	r3, [r7, #12]
 8011b38:	1ad3      	subs	r3, r2, r3
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	899b      	ldrh	r3, [r3, #12]
 8011b46:	b29c      	uxth	r4, r3
 8011b48:	7efb      	ldrb	r3, [r7, #27]
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7f5 ff5f 	bl	8007a10 <lwip_htons>
 8011b52:	4603      	mov	r3, r0
 8011b54:	461a      	mov	r2, r3
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	4322      	orrs	r2, r4
 8011b5c:	b292      	uxth	r2, r2
 8011b5e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7fb fd99 	bl	800d69c <pbuf_clen>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b74:	4413      	add	r3, r2
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7fb fd8a 	bl	800d69c <pbuf_clen>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b92:	4413      	add	r3, r2
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	69fb      	ldr	r3, [r7, #28]
 8011ba2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	69fa      	ldr	r2, [r7, #28]
 8011ba8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d103      	bne.n	8011bba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e016      	b.n	8011bec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011bbe:	bf00      	nop
 8011bc0:	e002      	b.n	8011bc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011bc2:	bf00      	nop
 8011bc4:	e000      	b.n	8011bc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011bc6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d006      	beq.n	8011bdc <tcp_split_unsent_seg+0x25c>
 8011bce:	4b09      	ldr	r3, [pc, #36]	@ (8011bf4 <tcp_split_unsent_seg+0x274>)
 8011bd0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011bd4:	490d      	ldr	r1, [pc, #52]	@ (8011c0c <tcp_split_unsent_seg+0x28c>)
 8011bd6:	4809      	ldr	r0, [pc, #36]	@ (8011bfc <tcp_split_unsent_seg+0x27c>)
 8011bd8:	f001 ffd4 	bl	8013b84 <iprintf>
  if (p != NULL) {
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d002      	beq.n	8011be8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011be2:	6938      	ldr	r0, [r7, #16]
 8011be4:	f7fb fcd2 	bl	800d58c <pbuf_free>
  }

  return ERR_MEM;
 8011be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3724      	adds	r7, #36	@ 0x24
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd90      	pop	{r4, r7, pc}
 8011bf4:	08016e84 	.word	0x08016e84
 8011bf8:	08017254 	.word	0x08017254
 8011bfc:	08016f14 	.word	0x08016f14
 8011c00:	08017278 	.word	0x08017278
 8011c04:	0801729c 	.word	0x0801729c
 8011c08:	080172ac 	.word	0x080172ac
 8011c0c:	080172bc 	.word	0x080172bc

08011c10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011c10:	b590      	push	{r4, r7, lr}
 8011c12:	b085      	sub	sp, #20
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d106      	bne.n	8011c2c <tcp_send_fin+0x1c>
 8011c1e:	4b21      	ldr	r3, [pc, #132]	@ (8011ca4 <tcp_send_fin+0x94>)
 8011c20:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011c24:	4920      	ldr	r1, [pc, #128]	@ (8011ca8 <tcp_send_fin+0x98>)
 8011c26:	4821      	ldr	r0, [pc, #132]	@ (8011cac <tcp_send_fin+0x9c>)
 8011c28:	f001 ffac 	bl	8013b84 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d02e      	beq.n	8011c92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c38:	60fb      	str	r3, [r7, #12]
 8011c3a:	e002      	b.n	8011c42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d1f8      	bne.n	8011c3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	899b      	ldrh	r3, [r3, #12]
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7f5 fedc 	bl	8007a10 <lwip_htons>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	b2db      	uxtb	r3, r3
 8011c5c:	f003 0307 	and.w	r3, r3, #7
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d116      	bne.n	8011c92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	899b      	ldrh	r3, [r3, #12]
 8011c6a:	b29c      	uxth	r4, r3
 8011c6c:	2001      	movs	r0, #1
 8011c6e:	f7f5 fecf 	bl	8007a10 <lwip_htons>
 8011c72:	4603      	mov	r3, r0
 8011c74:	461a      	mov	r2, r3
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	4322      	orrs	r2, r4
 8011c7c:	b292      	uxth	r2, r2
 8011c7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	8b5b      	ldrh	r3, [r3, #26]
 8011c84:	f043 0320 	orr.w	r3, r3, #32
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	e004      	b.n	8011c9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011c92:	2101      	movs	r1, #1
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 f80b 	bl	8011cb0 <tcp_enqueue_flags>
 8011c9a:	4603      	mov	r3, r0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3714      	adds	r7, #20
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd90      	pop	{r4, r7, pc}
 8011ca4:	08016e84 	.word	0x08016e84
 8011ca8:	080172c8 	.word	0x080172c8
 8011cac:	08016f14 	.word	0x08016f14

08011cb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b08a      	sub	sp, #40	@ 0x28
 8011cb4:	af02      	add	r7, sp, #8
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011cc4:	78fb      	ldrb	r3, [r7, #3]
 8011cc6:	f003 0303 	and.w	r3, r3, #3
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <tcp_enqueue_flags+0x2c>
 8011cce:	4b67      	ldr	r3, [pc, #412]	@ (8011e6c <tcp_enqueue_flags+0x1bc>)
 8011cd0:	f240 4211 	movw	r2, #1041	@ 0x411
 8011cd4:	4966      	ldr	r1, [pc, #408]	@ (8011e70 <tcp_enqueue_flags+0x1c0>)
 8011cd6:	4867      	ldr	r0, [pc, #412]	@ (8011e74 <tcp_enqueue_flags+0x1c4>)
 8011cd8:	f001 ff54 	bl	8013b84 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d106      	bne.n	8011cf0 <tcp_enqueue_flags+0x40>
 8011ce2:	4b62      	ldr	r3, [pc, #392]	@ (8011e6c <tcp_enqueue_flags+0x1bc>)
 8011ce4:	f240 4213 	movw	r2, #1043	@ 0x413
 8011ce8:	4963      	ldr	r1, [pc, #396]	@ (8011e78 <tcp_enqueue_flags+0x1c8>)
 8011cea:	4862      	ldr	r0, [pc, #392]	@ (8011e74 <tcp_enqueue_flags+0x1c4>)
 8011cec:	f001 ff4a 	bl	8013b84 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011cf0:	78fb      	ldrb	r3, [r7, #3]
 8011cf2:	f003 0302 	and.w	r3, r3, #2
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d001      	beq.n	8011cfe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011cfe:	7ffb      	ldrb	r3, [r7, #31]
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	b2db      	uxtb	r3, r3
 8011d04:	f003 0304 	and.w	r3, r3, #4
 8011d08:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d0a:	7dfb      	ldrb	r3, [r7, #23]
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d12:	4619      	mov	r1, r3
 8011d14:	2036      	movs	r0, #54	@ 0x36
 8011d16:	f7fb f955 	bl	800cfc4 <pbuf_alloc>
 8011d1a:	6138      	str	r0, [r7, #16]
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d109      	bne.n	8011d36 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	8b5b      	ldrh	r3, [r3, #26]
 8011d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d34:	e095      	b.n	8011e62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	895a      	ldrh	r2, [r3, #10]
 8011d3a:	7dfb      	ldrb	r3, [r7, #23]
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d206      	bcs.n	8011d50 <tcp_enqueue_flags+0xa0>
 8011d42:	4b4a      	ldr	r3, [pc, #296]	@ (8011e6c <tcp_enqueue_flags+0x1bc>)
 8011d44:	f240 4239 	movw	r2, #1081	@ 0x439
 8011d48:	494c      	ldr	r1, [pc, #304]	@ (8011e7c <tcp_enqueue_flags+0x1cc>)
 8011d4a:	484a      	ldr	r0, [pc, #296]	@ (8011e74 <tcp_enqueue_flags+0x1c4>)
 8011d4c:	f001 ff1a 	bl	8013b84 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011d54:	78fa      	ldrb	r2, [r7, #3]
 8011d56:	7ffb      	ldrb	r3, [r7, #31]
 8011d58:	9300      	str	r3, [sp, #0]
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	6939      	ldr	r1, [r7, #16]
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f7ff fd72 	bl	8011848 <tcp_create_segment>
 8011d64:	60f8      	str	r0, [r7, #12]
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d109      	bne.n	8011d80 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	8b5b      	ldrh	r3, [r3, #26]
 8011d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d7e:	e070      	b.n	8011e62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	f003 0303 	and.w	r3, r3, #3
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d006      	beq.n	8011d9a <tcp_enqueue_flags+0xea>
 8011d8c:	4b37      	ldr	r3, [pc, #220]	@ (8011e6c <tcp_enqueue_flags+0x1bc>)
 8011d8e:	f240 4242 	movw	r2, #1090	@ 0x442
 8011d92:	493b      	ldr	r1, [pc, #236]	@ (8011e80 <tcp_enqueue_flags+0x1d0>)
 8011d94:	4837      	ldr	r0, [pc, #220]	@ (8011e74 <tcp_enqueue_flags+0x1c4>)
 8011d96:	f001 fef5 	bl	8013b84 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	891b      	ldrh	r3, [r3, #8]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d006      	beq.n	8011db0 <tcp_enqueue_flags+0x100>
 8011da2:	4b32      	ldr	r3, [pc, #200]	@ (8011e6c <tcp_enqueue_flags+0x1bc>)
 8011da4:	f240 4243 	movw	r2, #1091	@ 0x443
 8011da8:	4936      	ldr	r1, [pc, #216]	@ (8011e84 <tcp_enqueue_flags+0x1d4>)
 8011daa:	4832      	ldr	r0, [pc, #200]	@ (8011e74 <tcp_enqueue_flags+0x1c4>)
 8011dac:	f001 feea 	bl	8013b84 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d103      	bne.n	8011dc0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	68fa      	ldr	r2, [r7, #12]
 8011dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011dbe:	e00d      	b.n	8011ddc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011dc4:	61bb      	str	r3, [r7, #24]
 8011dc6:	e002      	b.n	8011dce <tcp_enqueue_flags+0x11e>
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	61bb      	str	r3, [r7, #24]
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d1f8      	bne.n	8011dc8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011dd6:	69bb      	ldr	r3, [r7, #24]
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011de4:	78fb      	ldrb	r3, [r7, #3]
 8011de6:	f003 0302 	and.w	r3, r3, #2
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d104      	bne.n	8011df8 <tcp_enqueue_flags+0x148>
 8011dee:	78fb      	ldrb	r3, [r7, #3]
 8011df0:	f003 0301 	and.w	r3, r3, #1
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d004      	beq.n	8011e02 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011dfc:	1c5a      	adds	r2, r3, #1
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011e02:	78fb      	ldrb	r3, [r7, #3]
 8011e04:	f003 0301 	and.w	r3, r3, #1
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d006      	beq.n	8011e1a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	8b5b      	ldrh	r3, [r3, #26]
 8011e10:	f043 0320 	orr.w	r3, r3, #32
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fb fc3c 	bl	800d69c <pbuf_clen>
 8011e24:	4603      	mov	r3, r0
 8011e26:	461a      	mov	r2, r3
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e2e:	4413      	add	r3, r2
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d00e      	beq.n	8011e60 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10a      	bne.n	8011e60 <tcp_enqueue_flags+0x1b0>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d106      	bne.n	8011e60 <tcp_enqueue_flags+0x1b0>
 8011e52:	4b06      	ldr	r3, [pc, #24]	@ (8011e6c <tcp_enqueue_flags+0x1bc>)
 8011e54:	f240 4265 	movw	r2, #1125	@ 0x465
 8011e58:	490b      	ldr	r1, [pc, #44]	@ (8011e88 <tcp_enqueue_flags+0x1d8>)
 8011e5a:	4806      	ldr	r0, [pc, #24]	@ (8011e74 <tcp_enqueue_flags+0x1c4>)
 8011e5c:	f001 fe92 	bl	8013b84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011e60:	2300      	movs	r3, #0
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3720      	adds	r7, #32
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	08016e84 	.word	0x08016e84
 8011e70:	080172e4 	.word	0x080172e4
 8011e74:	08016f14 	.word	0x08016f14
 8011e78:	0801733c 	.word	0x0801733c
 8011e7c:	0801735c 	.word	0x0801735c
 8011e80:	08017398 	.word	0x08017398
 8011e84:	080173b0 	.word	0x080173b0
 8011e88:	080173dc 	.word	0x080173dc

08011e8c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011e8c:	b5b0      	push	{r4, r5, r7, lr}
 8011e8e:	b08a      	sub	sp, #40	@ 0x28
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d106      	bne.n	8011ea8 <tcp_output+0x1c>
 8011e9a:	4b8a      	ldr	r3, [pc, #552]	@ (80120c4 <tcp_output+0x238>)
 8011e9c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011ea0:	4989      	ldr	r1, [pc, #548]	@ (80120c8 <tcp_output+0x23c>)
 8011ea2:	488a      	ldr	r0, [pc, #552]	@ (80120cc <tcp_output+0x240>)
 8011ea4:	f001 fe6e 	bl	8013b84 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	7d1b      	ldrb	r3, [r3, #20]
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d106      	bne.n	8011ebe <tcp_output+0x32>
 8011eb0:	4b84      	ldr	r3, [pc, #528]	@ (80120c4 <tcp_output+0x238>)
 8011eb2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011eb6:	4986      	ldr	r1, [pc, #536]	@ (80120d0 <tcp_output+0x244>)
 8011eb8:	4884      	ldr	r0, [pc, #528]	@ (80120cc <tcp_output+0x240>)
 8011eba:	f001 fe63 	bl	8013b84 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011ebe:	4b85      	ldr	r3, [pc, #532]	@ (80120d4 <tcp_output+0x248>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d101      	bne.n	8011ecc <tcp_output+0x40>
    return ERR_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	e1ce      	b.n	801226a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	bf28      	it	cs
 8011edc:	4613      	movcs	r3, r2
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ee6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d10b      	bne.n	8011f06 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8b5b      	ldrh	r3, [r3, #26]
 8011ef2:	f003 0302 	and.w	r3, r3, #2
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f000 81aa 	beq.w	8012250 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f000 fdcb 	bl	8012a98 <tcp_send_empty_ack>
 8011f02:	4603      	mov	r3, r0
 8011f04:	e1b1      	b.n	801226a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011f06:	6879      	ldr	r1, [r7, #4]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	3304      	adds	r3, #4
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f7ff fc7e 	bl	8011810 <tcp_route>
 8011f14:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d102      	bne.n	8011f22 <tcp_output+0x96>
    return ERR_RTE;
 8011f1c:	f06f 0303 	mvn.w	r3, #3
 8011f20:	e1a3      	b.n	801226a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d003      	beq.n	8011f30 <tcp_output+0xa4>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d111      	bne.n	8011f54 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d002      	beq.n	8011f3c <tcp_output+0xb0>
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	3304      	adds	r3, #4
 8011f3a:	e000      	b.n	8011f3e <tcp_output+0xb2>
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d102      	bne.n	8011f4c <tcp_output+0xc0>
      return ERR_RTE;
 8011f46:	f06f 0303 	mvn.w	r3, #3
 8011f4a:	e18e      	b.n	801226a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7f5 fd6d 	bl	8007a3a <lwip_htonl>
 8011f60:	4602      	mov	r2, r0
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f66:	1ad3      	subs	r3, r2, r3
 8011f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f6a:	8912      	ldrh	r2, [r2, #8]
 8011f6c:	4413      	add	r3, r2
 8011f6e:	69ba      	ldr	r2, [r7, #24]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d227      	bcs.n	8011fc4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d114      	bne.n	8011fac <tcp_output+0x120>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d110      	bne.n	8011fac <tcp_output+0x120>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d10b      	bne.n	8011fac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2200      	movs	r2, #0
 8011f98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	8b5b      	ldrh	r3, [r3, #26]
 8011fb0:	f003 0302 	and.w	r3, r3, #2
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f000 814d 	beq.w	8012254 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 fd6c 	bl	8012a98 <tcp_send_empty_ack>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	e152      	b.n	801226a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011fd0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011fd2:	6a3b      	ldr	r3, [r7, #32]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f000 811c 	beq.w	8012212 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011fda:	e002      	b.n	8011fe2 <tcp_output+0x156>
 8011fdc:	6a3b      	ldr	r3, [r7, #32]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	623b      	str	r3, [r7, #32]
 8011fe2:	6a3b      	ldr	r3, [r7, #32]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1f8      	bne.n	8011fdc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011fea:	e112      	b.n	8012212 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	899b      	ldrh	r3, [r3, #12]
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7f5 fd0b 	bl	8007a10 <lwip_htons>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	f003 0304 	and.w	r3, r3, #4
 8012002:	2b00      	cmp	r3, #0
 8012004:	d006      	beq.n	8012014 <tcp_output+0x188>
 8012006:	4b2f      	ldr	r3, [pc, #188]	@ (80120c4 <tcp_output+0x238>)
 8012008:	f240 5236 	movw	r2, #1334	@ 0x536
 801200c:	4932      	ldr	r1, [pc, #200]	@ (80120d8 <tcp_output+0x24c>)
 801200e:	482f      	ldr	r0, [pc, #188]	@ (80120cc <tcp_output+0x240>)
 8012010:	f001 fdb8 	bl	8013b84 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012018:	2b00      	cmp	r3, #0
 801201a:	d01f      	beq.n	801205c <tcp_output+0x1d0>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	8b5b      	ldrh	r3, [r3, #26]
 8012020:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012024:	2b00      	cmp	r3, #0
 8012026:	d119      	bne.n	801205c <tcp_output+0x1d0>
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801202c:	2b00      	cmp	r3, #0
 801202e:	d00b      	beq.n	8012048 <tcp_output+0x1bc>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d110      	bne.n	801205c <tcp_output+0x1d0>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801203e:	891a      	ldrh	r2, [r3, #8]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012044:	429a      	cmp	r2, r3
 8012046:	d209      	bcs.n	801205c <tcp_output+0x1d0>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801204e:	2b00      	cmp	r3, #0
 8012050:	d004      	beq.n	801205c <tcp_output+0x1d0>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012058:	2b08      	cmp	r3, #8
 801205a:	d901      	bls.n	8012060 <tcp_output+0x1d4>
 801205c:	2301      	movs	r3, #1
 801205e:	e000      	b.n	8012062 <tcp_output+0x1d6>
 8012060:	2300      	movs	r3, #0
 8012062:	2b00      	cmp	r3, #0
 8012064:	d106      	bne.n	8012074 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	8b5b      	ldrh	r3, [r3, #26]
 801206a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801206e:	2b00      	cmp	r3, #0
 8012070:	f000 80e4 	beq.w	801223c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	7d1b      	ldrb	r3, [r3, #20]
 8012078:	2b02      	cmp	r3, #2
 801207a:	d00d      	beq.n	8012098 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	899b      	ldrh	r3, [r3, #12]
 8012082:	b29c      	uxth	r4, r3
 8012084:	2010      	movs	r0, #16
 8012086:	f7f5 fcc3 	bl	8007a10 <lwip_htons>
 801208a:	4603      	mov	r3, r0
 801208c:	461a      	mov	r2, r3
 801208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	4322      	orrs	r2, r4
 8012094:	b292      	uxth	r2, r2
 8012096:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012098:	697a      	ldr	r2, [r7, #20]
 801209a:	6879      	ldr	r1, [r7, #4]
 801209c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801209e:	f000 f909 	bl	80122b4 <tcp_output_segment>
 80120a2:	4603      	mov	r3, r0
 80120a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80120a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d016      	beq.n	80120dc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	8b5b      	ldrh	r3, [r3, #26]
 80120b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	835a      	strh	r2, [r3, #26]
      return err;
 80120bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120c0:	e0d3      	b.n	801226a <tcp_output+0x3de>
 80120c2:	bf00      	nop
 80120c4:	08016e84 	.word	0x08016e84
 80120c8:	08017404 	.word	0x08017404
 80120cc:	08016f14 	.word	0x08016f14
 80120d0:	0801741c 	.word	0x0801741c
 80120d4:	24007ce0 	.word	0x24007ce0
 80120d8:	08017444 	.word	0x08017444
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80120dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	7d1b      	ldrb	r3, [r3, #20]
 80120e8:	2b02      	cmp	r3, #2
 80120ea:	d006      	beq.n	80120fa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	8b5b      	ldrh	r3, [r3, #26]
 80120f0:	f023 0303 	bic.w	r3, r3, #3
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80120fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fc:	68db      	ldr	r3, [r3, #12]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	4618      	mov	r0, r3
 8012102:	f7f5 fc9a 	bl	8007a3a <lwip_htonl>
 8012106:	4604      	mov	r4, r0
 8012108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210a:	891b      	ldrh	r3, [r3, #8]
 801210c:	461d      	mov	r5, r3
 801210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	899b      	ldrh	r3, [r3, #12]
 8012114:	b29b      	uxth	r3, r3
 8012116:	4618      	mov	r0, r3
 8012118:	f7f5 fc7a 	bl	8007a10 <lwip_htons>
 801211c:	4603      	mov	r3, r0
 801211e:	b2db      	uxtb	r3, r3
 8012120:	f003 0303 	and.w	r3, r3, #3
 8012124:	2b00      	cmp	r3, #0
 8012126:	d001      	beq.n	801212c <tcp_output+0x2a0>
 8012128:	2301      	movs	r3, #1
 801212a:	e000      	b.n	801212e <tcp_output+0x2a2>
 801212c:	2300      	movs	r3, #0
 801212e:	442b      	add	r3, r5
 8012130:	4423      	add	r3, r4
 8012132:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	2b00      	cmp	r3, #0
 801213e:	da02      	bge.n	8012146 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	68ba      	ldr	r2, [r7, #8]
 8012144:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012148:	891b      	ldrh	r3, [r3, #8]
 801214a:	461c      	mov	r4, r3
 801214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214e:	68db      	ldr	r3, [r3, #12]
 8012150:	899b      	ldrh	r3, [r3, #12]
 8012152:	b29b      	uxth	r3, r3
 8012154:	4618      	mov	r0, r3
 8012156:	f7f5 fc5b 	bl	8007a10 <lwip_htons>
 801215a:	4603      	mov	r3, r0
 801215c:	b2db      	uxtb	r3, r3
 801215e:	f003 0303 	and.w	r3, r3, #3
 8012162:	2b00      	cmp	r3, #0
 8012164:	d001      	beq.n	801216a <tcp_output+0x2de>
 8012166:	2301      	movs	r3, #1
 8012168:	e000      	b.n	801216c <tcp_output+0x2e0>
 801216a:	2300      	movs	r3, #0
 801216c:	4423      	add	r3, r4
 801216e:	2b00      	cmp	r3, #0
 8012170:	d049      	beq.n	8012206 <tcp_output+0x37a>
      seg->next = NULL;
 8012172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012174:	2200      	movs	r2, #0
 8012176:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801217c:	2b00      	cmp	r3, #0
 801217e:	d105      	bne.n	801218c <tcp_output+0x300>
        pcb->unacked = seg;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012184:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012188:	623b      	str	r3, [r7, #32]
 801218a:	e03f      	b.n	801220c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4618      	mov	r0, r3
 8012194:	f7f5 fc51 	bl	8007a3a <lwip_htonl>
 8012198:	4604      	mov	r4, r0
 801219a:	6a3b      	ldr	r3, [r7, #32]
 801219c:	68db      	ldr	r3, [r3, #12]
 801219e:	685b      	ldr	r3, [r3, #4]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7f5 fc4a 	bl	8007a3a <lwip_htonl>
 80121a6:	4603      	mov	r3, r0
 80121a8:	1ae3      	subs	r3, r4, r3
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	da24      	bge.n	80121f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	3370      	adds	r3, #112	@ 0x70
 80121b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121b4:	e002      	b.n	80121bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d011      	beq.n	80121e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	68db      	ldr	r3, [r3, #12]
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7f5 fc34 	bl	8007a3a <lwip_htonl>
 80121d2:	4604      	mov	r4, r0
 80121d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	4618      	mov	r0, r3
 80121dc:	f7f5 fc2d 	bl	8007a3a <lwip_htonl>
 80121e0:	4603      	mov	r3, r0
 80121e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	dbe6      	blt.n	80121b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121f4:	601a      	str	r2, [r3, #0]
 80121f6:	e009      	b.n	801220c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80121f8:	6a3b      	ldr	r3, [r7, #32]
 80121fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	623b      	str	r3, [r7, #32]
 8012204:	e002      	b.n	801220c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012208:	f7fc fc45 	bl	800ea96 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012210:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012214:	2b00      	cmp	r3, #0
 8012216:	d012      	beq.n	801223e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221a:	68db      	ldr	r3, [r3, #12]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	4618      	mov	r0, r3
 8012220:	f7f5 fc0b 	bl	8007a3a <lwip_htonl>
 8012224:	4602      	mov	r2, r0
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801222a:	1ad3      	subs	r3, r2, r3
 801222c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801222e:	8912      	ldrh	r2, [r2, #8]
 8012230:	4413      	add	r3, r2
  while (seg != NULL &&
 8012232:	69ba      	ldr	r2, [r7, #24]
 8012234:	429a      	cmp	r2, r3
 8012236:	f4bf aed9 	bcs.w	8011fec <tcp_output+0x160>
 801223a:	e000      	b.n	801223e <tcp_output+0x3b2>
      break;
 801223c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012242:	2b00      	cmp	r3, #0
 8012244:	d108      	bne.n	8012258 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2200      	movs	r2, #0
 801224a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801224e:	e004      	b.n	801225a <tcp_output+0x3ce>
    goto output_done;
 8012250:	bf00      	nop
 8012252:	e002      	b.n	801225a <tcp_output+0x3ce>
    goto output_done;
 8012254:	bf00      	nop
 8012256:	e000      	b.n	801225a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012258:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	8b5b      	ldrh	r3, [r3, #26]
 801225e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012262:	b29a      	uxth	r2, r3
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	3728      	adds	r7, #40	@ 0x28
 801226e:	46bd      	mov	sp, r7
 8012270:	bdb0      	pop	{r4, r5, r7, pc}
 8012272:	bf00      	nop

08012274 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d106      	bne.n	8012290 <tcp_output_segment_busy+0x1c>
 8012282:	4b09      	ldr	r3, [pc, #36]	@ (80122a8 <tcp_output_segment_busy+0x34>)
 8012284:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012288:	4908      	ldr	r1, [pc, #32]	@ (80122ac <tcp_output_segment_busy+0x38>)
 801228a:	4809      	ldr	r0, [pc, #36]	@ (80122b0 <tcp_output_segment_busy+0x3c>)
 801228c:	f001 fc7a 	bl	8013b84 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	7b9b      	ldrb	r3, [r3, #14]
 8012296:	2b01      	cmp	r3, #1
 8012298:	d001      	beq.n	801229e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801229a:	2301      	movs	r3, #1
 801229c:	e000      	b.n	80122a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801229e:	2300      	movs	r3, #0
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3708      	adds	r7, #8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	08016e84 	.word	0x08016e84
 80122ac:	0801745c 	.word	0x0801745c
 80122b0:	08016f14 	.word	0x08016f14

080122b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80122b4:	b5b0      	push	{r4, r5, r7, lr}
 80122b6:	b08c      	sub	sp, #48	@ 0x30
 80122b8:	af04      	add	r7, sp, #16
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d106      	bne.n	80122d4 <tcp_output_segment+0x20>
 80122c6:	4b64      	ldr	r3, [pc, #400]	@ (8012458 <tcp_output_segment+0x1a4>)
 80122c8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80122cc:	4963      	ldr	r1, [pc, #396]	@ (801245c <tcp_output_segment+0x1a8>)
 80122ce:	4864      	ldr	r0, [pc, #400]	@ (8012460 <tcp_output_segment+0x1ac>)
 80122d0:	f001 fc58 	bl	8013b84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d106      	bne.n	80122e8 <tcp_output_segment+0x34>
 80122da:	4b5f      	ldr	r3, [pc, #380]	@ (8012458 <tcp_output_segment+0x1a4>)
 80122dc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80122e0:	4960      	ldr	r1, [pc, #384]	@ (8012464 <tcp_output_segment+0x1b0>)
 80122e2:	485f      	ldr	r0, [pc, #380]	@ (8012460 <tcp_output_segment+0x1ac>)
 80122e4:	f001 fc4e 	bl	8013b84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d106      	bne.n	80122fc <tcp_output_segment+0x48>
 80122ee:	4b5a      	ldr	r3, [pc, #360]	@ (8012458 <tcp_output_segment+0x1a4>)
 80122f0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80122f4:	495c      	ldr	r1, [pc, #368]	@ (8012468 <tcp_output_segment+0x1b4>)
 80122f6:	485a      	ldr	r0, [pc, #360]	@ (8012460 <tcp_output_segment+0x1ac>)
 80122f8:	f001 fc44 	bl	8013b84 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80122fc:	68f8      	ldr	r0, [r7, #12]
 80122fe:	f7ff ffb9 	bl	8012274 <tcp_output_segment_busy>
 8012302:	4603      	mov	r3, r0
 8012304:	2b00      	cmp	r3, #0
 8012306:	d001      	beq.n	801230c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012308:	2300      	movs	r3, #0
 801230a:	e0a1      	b.n	8012450 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	68dc      	ldr	r4, [r3, #12]
 8012314:	4610      	mov	r0, r2
 8012316:	f7f5 fb90 	bl	8007a3a <lwip_htonl>
 801231a:	4603      	mov	r3, r0
 801231c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	68dc      	ldr	r4, [r3, #12]
 8012326:	4610      	mov	r0, r2
 8012328:	f7f5 fb72 	bl	8007a10 <lwip_htons>
 801232c:	4603      	mov	r3, r0
 801232e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012334:	68ba      	ldr	r2, [r7, #8]
 8012336:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012338:	441a      	add	r2, r3
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	3314      	adds	r3, #20
 8012344:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	7a9b      	ldrb	r3, [r3, #10]
 801234a:	f003 0301 	and.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	d015      	beq.n	801237e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	3304      	adds	r3, #4
 8012356:	461a      	mov	r2, r3
 8012358:	6879      	ldr	r1, [r7, #4]
 801235a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801235e:	f7fc fe91 	bl	800f084 <tcp_eff_send_mss_netif>
 8012362:	4603      	mov	r3, r0
 8012364:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012366:	8b7b      	ldrh	r3, [r7, #26]
 8012368:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801236c:	4618      	mov	r0, r3
 801236e:	f7f5 fb64 	bl	8007a3a <lwip_htonl>
 8012372:	4602      	mov	r2, r0
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	3304      	adds	r3, #4
 801237c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012384:	2b00      	cmp	r3, #0
 8012386:	da02      	bge.n	801238e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	2200      	movs	r2, #0
 801238c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012392:	2b00      	cmp	r3, #0
 8012394:	d10c      	bne.n	80123b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012396:	4b35      	ldr	r3, [pc, #212]	@ (801246c <tcp_output_segment+0x1b8>)
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7f5 fb48 	bl	8007a3a <lwip_htonl>
 80123aa:	4602      	mov	r2, r0
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	68da      	ldr	r2, [r3, #12]
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	8959      	ldrh	r1, [r3, #10]
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	8b3a      	ldrh	r2, [r7, #24]
 80123ca:	1a8a      	subs	r2, r1, r2
 80123cc:	b292      	uxth	r2, r2
 80123ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	8919      	ldrh	r1, [r3, #8]
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	8b3a      	ldrh	r2, [r7, #24]
 80123dc:	1a8a      	subs	r2, r1, r2
 80123de:	b292      	uxth	r2, r2
 80123e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	68d2      	ldr	r2, [r2, #12]
 80123ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	2200      	movs	r2, #0
 80123f2:	741a      	strb	r2, [r3, #16]
 80123f4:	2200      	movs	r2, #0
 80123f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	68da      	ldr	r2, [r3, #12]
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	7a9b      	ldrb	r3, [r3, #10]
 8012400:	f003 0301 	and.w	r3, r3, #1
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <tcp_output_segment+0x158>
 8012408:	2318      	movs	r3, #24
 801240a:	e000      	b.n	801240e <tcp_output_segment+0x15a>
 801240c:	2314      	movs	r3, #20
 801240e:	4413      	add	r3, r2
 8012410:	69fa      	ldr	r2, [r7, #28]
 8012412:	429a      	cmp	r2, r3
 8012414:	d006      	beq.n	8012424 <tcp_output_segment+0x170>
 8012416:	4b10      	ldr	r3, [pc, #64]	@ (8012458 <tcp_output_segment+0x1a4>)
 8012418:	f240 621c 	movw	r2, #1564	@ 0x61c
 801241c:	4914      	ldr	r1, [pc, #80]	@ (8012470 <tcp_output_segment+0x1bc>)
 801241e:	4810      	ldr	r0, [pc, #64]	@ (8012460 <tcp_output_segment+0x1ac>)
 8012420:	f001 fbb0 	bl	8013b84 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	6858      	ldr	r0, [r3, #4]
 8012428:	68b9      	ldr	r1, [r7, #8]
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	1d1c      	adds	r4, r3, #4
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	7add      	ldrb	r5, [r3, #11]
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	7a9b      	ldrb	r3, [r3, #10]
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	9202      	str	r2, [sp, #8]
 801243a:	2206      	movs	r2, #6
 801243c:	9201      	str	r2, [sp, #4]
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	462b      	mov	r3, r5
 8012442:	4622      	mov	r2, r4
 8012444:	f7f8 fe28 	bl	800b098 <ip4_output_if>
 8012448:	4603      	mov	r3, r0
 801244a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801244c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012450:	4618      	mov	r0, r3
 8012452:	3720      	adds	r7, #32
 8012454:	46bd      	mov	sp, r7
 8012456:	bdb0      	pop	{r4, r5, r7, pc}
 8012458:	08016e84 	.word	0x08016e84
 801245c:	08017484 	.word	0x08017484
 8012460:	08016f14 	.word	0x08016f14
 8012464:	080174a4 	.word	0x080174a4
 8012468:	080174c4 	.word	0x080174c4
 801246c:	24007c94 	.word	0x24007c94
 8012470:	080174e8 	.word	0x080174e8

08012474 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012474:	b5b0      	push	{r4, r5, r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d106      	bne.n	8012490 <tcp_rexmit_rto_prepare+0x1c>
 8012482:	4b31      	ldr	r3, [pc, #196]	@ (8012548 <tcp_rexmit_rto_prepare+0xd4>)
 8012484:	f240 6263 	movw	r2, #1635	@ 0x663
 8012488:	4930      	ldr	r1, [pc, #192]	@ (801254c <tcp_rexmit_rto_prepare+0xd8>)
 801248a:	4831      	ldr	r0, [pc, #196]	@ (8012550 <tcp_rexmit_rto_prepare+0xdc>)
 801248c:	f001 fb7a 	bl	8013b84 <iprintf>

  if (pcb->unacked == NULL) {
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012494:	2b00      	cmp	r3, #0
 8012496:	d102      	bne.n	801249e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012498:	f06f 0305 	mvn.w	r3, #5
 801249c:	e050      	b.n	8012540 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124a2:	60fb      	str	r3, [r7, #12]
 80124a4:	e00b      	b.n	80124be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80124a6:	68f8      	ldr	r0, [r7, #12]
 80124a8:	f7ff fee4 	bl	8012274 <tcp_output_segment_busy>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d002      	beq.n	80124b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80124b2:	f06f 0305 	mvn.w	r3, #5
 80124b6:	e043      	b.n	8012540 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	60fb      	str	r3, [r7, #12]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d1ef      	bne.n	80124a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80124c6:	68f8      	ldr	r0, [r7, #12]
 80124c8:	f7ff fed4 	bl	8012274 <tcp_output_segment_busy>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d002      	beq.n	80124d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80124d2:	f06f 0305 	mvn.w	r3, #5
 80124d6:	e033      	b.n	8012540 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2200      	movs	r2, #0
 80124ec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	8b5b      	ldrh	r3, [r3, #26]
 80124f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	4618      	mov	r0, r3
 8012504:	f7f5 fa99 	bl	8007a3a <lwip_htonl>
 8012508:	4604      	mov	r4, r0
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	891b      	ldrh	r3, [r3, #8]
 801250e:	461d      	mov	r5, r3
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	68db      	ldr	r3, [r3, #12]
 8012514:	899b      	ldrh	r3, [r3, #12]
 8012516:	b29b      	uxth	r3, r3
 8012518:	4618      	mov	r0, r3
 801251a:	f7f5 fa79 	bl	8007a10 <lwip_htons>
 801251e:	4603      	mov	r3, r0
 8012520:	b2db      	uxtb	r3, r3
 8012522:	f003 0303 	and.w	r3, r3, #3
 8012526:	2b00      	cmp	r3, #0
 8012528:	d001      	beq.n	801252e <tcp_rexmit_rto_prepare+0xba>
 801252a:	2301      	movs	r3, #1
 801252c:	e000      	b.n	8012530 <tcp_rexmit_rto_prepare+0xbc>
 801252e:	2300      	movs	r3, #0
 8012530:	442b      	add	r3, r5
 8012532:	18e2      	adds	r2, r4, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2200      	movs	r2, #0
 801253c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801253e:	2300      	movs	r3, #0
}
 8012540:	4618      	mov	r0, r3
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bdb0      	pop	{r4, r5, r7, pc}
 8012548:	08016e84 	.word	0x08016e84
 801254c:	080174fc 	.word	0x080174fc
 8012550:	08016f14 	.word	0x08016f14

08012554 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d106      	bne.n	8012570 <tcp_rexmit_rto_commit+0x1c>
 8012562:	4b0d      	ldr	r3, [pc, #52]	@ (8012598 <tcp_rexmit_rto_commit+0x44>)
 8012564:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012568:	490c      	ldr	r1, [pc, #48]	@ (801259c <tcp_rexmit_rto_commit+0x48>)
 801256a:	480d      	ldr	r0, [pc, #52]	@ (80125a0 <tcp_rexmit_rto_commit+0x4c>)
 801256c:	f001 fb0a 	bl	8013b84 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012576:	2bff      	cmp	r3, #255	@ 0xff
 8012578:	d007      	beq.n	801258a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012580:	3301      	adds	r3, #1
 8012582:	b2da      	uxtb	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f7ff fc7e 	bl	8011e8c <tcp_output>
}
 8012590:	bf00      	nop
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	08016e84 	.word	0x08016e84
 801259c:	08017520 	.word	0x08017520
 80125a0:	08016f14 	.word	0x08016f14

080125a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d106      	bne.n	80125c0 <tcp_rexmit_rto+0x1c>
 80125b2:	4b0a      	ldr	r3, [pc, #40]	@ (80125dc <tcp_rexmit_rto+0x38>)
 80125b4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80125b8:	4909      	ldr	r1, [pc, #36]	@ (80125e0 <tcp_rexmit_rto+0x3c>)
 80125ba:	480a      	ldr	r0, [pc, #40]	@ (80125e4 <tcp_rexmit_rto+0x40>)
 80125bc:	f001 fae2 	bl	8013b84 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f7ff ff57 	bl	8012474 <tcp_rexmit_rto_prepare>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d102      	bne.n	80125d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f7ff ffc1 	bl	8012554 <tcp_rexmit_rto_commit>
  }
}
 80125d2:	bf00      	nop
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	08016e84 	.word	0x08016e84
 80125e0:	08017544 	.word	0x08017544
 80125e4:	08016f14 	.word	0x08016f14

080125e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80125e8:	b590      	push	{r4, r7, lr}
 80125ea:	b085      	sub	sp, #20
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d106      	bne.n	8012604 <tcp_rexmit+0x1c>
 80125f6:	4b2f      	ldr	r3, [pc, #188]	@ (80126b4 <tcp_rexmit+0xcc>)
 80125f8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80125fc:	492e      	ldr	r1, [pc, #184]	@ (80126b8 <tcp_rexmit+0xd0>)
 80125fe:	482f      	ldr	r0, [pc, #188]	@ (80126bc <tcp_rexmit+0xd4>)
 8012600:	f001 fac0 	bl	8013b84 <iprintf>

  if (pcb->unacked == NULL) {
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012608:	2b00      	cmp	r3, #0
 801260a:	d102      	bne.n	8012612 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801260c:	f06f 0305 	mvn.w	r3, #5
 8012610:	e04c      	b.n	80126ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012616:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012618:	68b8      	ldr	r0, [r7, #8]
 801261a:	f7ff fe2b 	bl	8012274 <tcp_output_segment_busy>
 801261e:	4603      	mov	r3, r0
 8012620:	2b00      	cmp	r3, #0
 8012622:	d002      	beq.n	801262a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012624:	f06f 0305 	mvn.w	r3, #5
 8012628:	e040      	b.n	80126ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	336c      	adds	r3, #108	@ 0x6c
 8012636:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012638:	e002      	b.n	8012640 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d011      	beq.n	801266c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	68db      	ldr	r3, [r3, #12]
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	4618      	mov	r0, r3
 8012652:	f7f5 f9f2 	bl	8007a3a <lwip_htonl>
 8012656:	4604      	mov	r4, r0
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	4618      	mov	r0, r3
 8012660:	f7f5 f9eb 	bl	8007a3a <lwip_htonl>
 8012664:	4603      	mov	r3, r0
 8012666:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012668:	2b00      	cmp	r3, #0
 801266a:	dbe6      	blt.n	801263a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	68ba      	ldr	r2, [r7, #8]
 8012678:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d103      	bne.n	801268a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2200      	movs	r2, #0
 8012686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012690:	2bff      	cmp	r3, #255	@ 0xff
 8012692:	d007      	beq.n	80126a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801269a:	3301      	adds	r3, #1
 801269c:	b2da      	uxtb	r2, r3
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80126aa:	2300      	movs	r3, #0
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3714      	adds	r7, #20
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd90      	pop	{r4, r7, pc}
 80126b4:	08016e84 	.word	0x08016e84
 80126b8:	08017560 	.word	0x08017560
 80126bc:	08016f14 	.word	0x08016f14

080126c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d106      	bne.n	80126dc <tcp_rexmit_fast+0x1c>
 80126ce:	4b2a      	ldr	r3, [pc, #168]	@ (8012778 <tcp_rexmit_fast+0xb8>)
 80126d0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80126d4:	4929      	ldr	r1, [pc, #164]	@ (801277c <tcp_rexmit_fast+0xbc>)
 80126d6:	482a      	ldr	r0, [pc, #168]	@ (8012780 <tcp_rexmit_fast+0xc0>)
 80126d8:	f001 fa54 	bl	8013b84 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d045      	beq.n	8012770 <tcp_rexmit_fast+0xb0>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	8b5b      	ldrh	r3, [r3, #26]
 80126e8:	f003 0304 	and.w	r3, r3, #4
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d13f      	bne.n	8012770 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7ff ff79 	bl	80125e8 <tcp_rexmit>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d139      	bne.n	8012770 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012708:	4293      	cmp	r3, r2
 801270a:	bf28      	it	cs
 801270c:	4613      	movcs	r3, r2
 801270e:	b29b      	uxth	r3, r3
 8012710:	2b00      	cmp	r3, #0
 8012712:	da00      	bge.n	8012716 <tcp_rexmit_fast+0x56>
 8012714:	3301      	adds	r3, #1
 8012716:	105b      	asrs	r3, r3, #1
 8012718:	b29a      	uxth	r2, r3
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012726:	461a      	mov	r2, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801272c:	005b      	lsls	r3, r3, #1
 801272e:	429a      	cmp	r2, r3
 8012730:	d206      	bcs.n	8012740 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012736:	005b      	lsls	r3, r3, #1
 8012738:	b29a      	uxth	r2, r3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801274a:	4619      	mov	r1, r3
 801274c:	0049      	lsls	r1, r1, #1
 801274e:	440b      	add	r3, r1
 8012750:	b29b      	uxth	r3, r3
 8012752:	4413      	add	r3, r2
 8012754:	b29a      	uxth	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	8b5b      	ldrh	r3, [r3, #26]
 8012760:	f043 0304 	orr.w	r3, r3, #4
 8012764:	b29a      	uxth	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2200      	movs	r2, #0
 801276e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012770:	bf00      	nop
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}
 8012778:	08016e84 	.word	0x08016e84
 801277c:	08017578 	.word	0x08017578
 8012780:	08016f14 	.word	0x08016f14

08012784 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	607b      	str	r3, [r7, #4]
 801278e:	460b      	mov	r3, r1
 8012790:	817b      	strh	r3, [r7, #10]
 8012792:	4613      	mov	r3, r2
 8012794:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012796:	897a      	ldrh	r2, [r7, #10]
 8012798:	893b      	ldrh	r3, [r7, #8]
 801279a:	4413      	add	r3, r2
 801279c:	b29b      	uxth	r3, r3
 801279e:	3314      	adds	r3, #20
 80127a0:	b29b      	uxth	r3, r3
 80127a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80127a6:	4619      	mov	r1, r3
 80127a8:	2022      	movs	r0, #34	@ 0x22
 80127aa:	f7fa fc0b 	bl	800cfc4 <pbuf_alloc>
 80127ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d04d      	beq.n	8012852 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80127b6:	897b      	ldrh	r3, [r7, #10]
 80127b8:	3313      	adds	r3, #19
 80127ba:	697a      	ldr	r2, [r7, #20]
 80127bc:	8952      	ldrh	r2, [r2, #10]
 80127be:	4293      	cmp	r3, r2
 80127c0:	db06      	blt.n	80127d0 <tcp_output_alloc_header_common+0x4c>
 80127c2:	4b26      	ldr	r3, [pc, #152]	@ (801285c <tcp_output_alloc_header_common+0xd8>)
 80127c4:	f240 7223 	movw	r2, #1827	@ 0x723
 80127c8:	4925      	ldr	r1, [pc, #148]	@ (8012860 <tcp_output_alloc_header_common+0xdc>)
 80127ca:	4826      	ldr	r0, [pc, #152]	@ (8012864 <tcp_output_alloc_header_common+0xe0>)
 80127cc:	f001 f9da 	bl	8013b84 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80127d6:	8c3b      	ldrh	r3, [r7, #32]
 80127d8:	4618      	mov	r0, r3
 80127da:	f7f5 f919 	bl	8007a10 <lwip_htons>
 80127de:	4603      	mov	r3, r0
 80127e0:	461a      	mov	r2, r3
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80127e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7f5 f911 	bl	8007a10 <lwip_htons>
 80127ee:	4603      	mov	r3, r0
 80127f0:	461a      	mov	r2, r3
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	687a      	ldr	r2, [r7, #4]
 80127fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f7f5 f91c 	bl	8007a3a <lwip_htonl>
 8012802:	4602      	mov	r2, r0
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012808:	897b      	ldrh	r3, [r7, #10]
 801280a:	089b      	lsrs	r3, r3, #2
 801280c:	b29b      	uxth	r3, r3
 801280e:	3305      	adds	r3, #5
 8012810:	b29b      	uxth	r3, r3
 8012812:	031b      	lsls	r3, r3, #12
 8012814:	b29a      	uxth	r2, r3
 8012816:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801281a:	b29b      	uxth	r3, r3
 801281c:	4313      	orrs	r3, r2
 801281e:	b29b      	uxth	r3, r3
 8012820:	4618      	mov	r0, r3
 8012822:	f7f5 f8f5 	bl	8007a10 <lwip_htons>
 8012826:	4603      	mov	r3, r0
 8012828:	461a      	mov	r2, r3
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801282e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012830:	4618      	mov	r0, r3
 8012832:	f7f5 f8ed 	bl	8007a10 <lwip_htons>
 8012836:	4603      	mov	r3, r0
 8012838:	461a      	mov	r2, r3
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	2200      	movs	r2, #0
 8012842:	741a      	strb	r2, [r3, #16]
 8012844:	2200      	movs	r2, #0
 8012846:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	2200      	movs	r2, #0
 801284c:	749a      	strb	r2, [r3, #18]
 801284e:	2200      	movs	r2, #0
 8012850:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012852:	697b      	ldr	r3, [r7, #20]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3718      	adds	r7, #24
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	08016e84 	.word	0x08016e84
 8012860:	08017598 	.word	0x08017598
 8012864:	08016f14 	.word	0x08016f14

08012868 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012868:	b5b0      	push	{r4, r5, r7, lr}
 801286a:	b08a      	sub	sp, #40	@ 0x28
 801286c:	af04      	add	r7, sp, #16
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	607b      	str	r3, [r7, #4]
 8012872:	460b      	mov	r3, r1
 8012874:	817b      	strh	r3, [r7, #10]
 8012876:	4613      	mov	r3, r2
 8012878:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d106      	bne.n	801288e <tcp_output_alloc_header+0x26>
 8012880:	4b15      	ldr	r3, [pc, #84]	@ (80128d8 <tcp_output_alloc_header+0x70>)
 8012882:	f240 7242 	movw	r2, #1858	@ 0x742
 8012886:	4915      	ldr	r1, [pc, #84]	@ (80128dc <tcp_output_alloc_header+0x74>)
 8012888:	4815      	ldr	r0, [pc, #84]	@ (80128e0 <tcp_output_alloc_header+0x78>)
 801288a:	f001 f97b 	bl	8013b84 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	8adb      	ldrh	r3, [r3, #22]
 8012896:	68fa      	ldr	r2, [r7, #12]
 8012898:	8b12      	ldrh	r2, [r2, #24]
 801289a:	68f9      	ldr	r1, [r7, #12]
 801289c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801289e:	893d      	ldrh	r5, [r7, #8]
 80128a0:	897c      	ldrh	r4, [r7, #10]
 80128a2:	9103      	str	r1, [sp, #12]
 80128a4:	2110      	movs	r1, #16
 80128a6:	9102      	str	r1, [sp, #8]
 80128a8:	9201      	str	r2, [sp, #4]
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	462a      	mov	r2, r5
 80128b0:	4621      	mov	r1, r4
 80128b2:	f7ff ff67 	bl	8012784 <tcp_output_alloc_header_common>
 80128b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d006      	beq.n	80128cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80128c6:	441a      	add	r2, r3
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80128cc:	697b      	ldr	r3, [r7, #20]
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3718      	adds	r7, #24
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bdb0      	pop	{r4, r5, r7, pc}
 80128d6:	bf00      	nop
 80128d8:	08016e84 	.word	0x08016e84
 80128dc:	080175c8 	.word	0x080175c8
 80128e0:	08016f14 	.word	0x08016f14

080128e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b088      	sub	sp, #32
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	60f8      	str	r0, [r7, #12]
 80128ec:	60b9      	str	r1, [r7, #8]
 80128ee:	4611      	mov	r1, r2
 80128f0:	461a      	mov	r2, r3
 80128f2:	460b      	mov	r3, r1
 80128f4:	71fb      	strb	r3, [r7, #7]
 80128f6:	4613      	mov	r3, r2
 80128f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d106      	bne.n	8012912 <tcp_output_fill_options+0x2e>
 8012904:	4b12      	ldr	r3, [pc, #72]	@ (8012950 <tcp_output_fill_options+0x6c>)
 8012906:	f240 7256 	movw	r2, #1878	@ 0x756
 801290a:	4912      	ldr	r1, [pc, #72]	@ (8012954 <tcp_output_fill_options+0x70>)
 801290c:	4812      	ldr	r0, [pc, #72]	@ (8012958 <tcp_output_fill_options+0x74>)
 801290e:	f001 f939 	bl	8013b84 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	3314      	adds	r3, #20
 801291c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801291e:	8bfb      	ldrh	r3, [r7, #30]
 8012920:	009b      	lsls	r3, r3, #2
 8012922:	461a      	mov	r2, r3
 8012924:	79fb      	ldrb	r3, [r7, #7]
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	f003 0304 	and.w	r3, r3, #4
 801292c:	4413      	add	r3, r2
 801292e:	3314      	adds	r3, #20
 8012930:	69ba      	ldr	r2, [r7, #24]
 8012932:	4413      	add	r3, r2
 8012934:	697a      	ldr	r2, [r7, #20]
 8012936:	429a      	cmp	r2, r3
 8012938:	d006      	beq.n	8012948 <tcp_output_fill_options+0x64>
 801293a:	4b05      	ldr	r3, [pc, #20]	@ (8012950 <tcp_output_fill_options+0x6c>)
 801293c:	f240 7275 	movw	r2, #1909	@ 0x775
 8012940:	4906      	ldr	r1, [pc, #24]	@ (801295c <tcp_output_fill_options+0x78>)
 8012942:	4805      	ldr	r0, [pc, #20]	@ (8012958 <tcp_output_fill_options+0x74>)
 8012944:	f001 f91e 	bl	8013b84 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012948:	bf00      	nop
 801294a:	3720      	adds	r7, #32
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	08016e84 	.word	0x08016e84
 8012954:	080175f0 	.word	0x080175f0
 8012958:	08016f14 	.word	0x08016f14
 801295c:	080174e8 	.word	0x080174e8

08012960 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b08a      	sub	sp, #40	@ 0x28
 8012964:	af04      	add	r7, sp, #16
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
 801296c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d106      	bne.n	8012982 <tcp_output_control_segment+0x22>
 8012974:	4b1c      	ldr	r3, [pc, #112]	@ (80129e8 <tcp_output_control_segment+0x88>)
 8012976:	f240 7287 	movw	r2, #1927	@ 0x787
 801297a:	491c      	ldr	r1, [pc, #112]	@ (80129ec <tcp_output_control_segment+0x8c>)
 801297c:	481c      	ldr	r0, [pc, #112]	@ (80129f0 <tcp_output_control_segment+0x90>)
 801297e:	f001 f901 	bl	8013b84 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012982:	683a      	ldr	r2, [r7, #0]
 8012984:	6879      	ldr	r1, [r7, #4]
 8012986:	68f8      	ldr	r0, [r7, #12]
 8012988:	f7fe ff42 	bl	8011810 <tcp_route>
 801298c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d102      	bne.n	801299a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012994:	23fc      	movs	r3, #252	@ 0xfc
 8012996:	75fb      	strb	r3, [r7, #23]
 8012998:	e01c      	b.n	80129d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d006      	beq.n	80129ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	7adb      	ldrb	r3, [r3, #11]
 80129a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	7a9b      	ldrb	r3, [r3, #10]
 80129aa:	757b      	strb	r3, [r7, #21]
 80129ac:	e003      	b.n	80129b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80129ae:	23ff      	movs	r3, #255	@ 0xff
 80129b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80129b2:	2300      	movs	r3, #0
 80129b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80129b6:	7dba      	ldrb	r2, [r7, #22]
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	9302      	str	r3, [sp, #8]
 80129bc:	2306      	movs	r3, #6
 80129be:	9301      	str	r3, [sp, #4]
 80129c0:	7d7b      	ldrb	r3, [r7, #21]
 80129c2:	9300      	str	r3, [sp, #0]
 80129c4:	4613      	mov	r3, r2
 80129c6:	683a      	ldr	r2, [r7, #0]
 80129c8:	6879      	ldr	r1, [r7, #4]
 80129ca:	68b8      	ldr	r0, [r7, #8]
 80129cc:	f7f8 fb64 	bl	800b098 <ip4_output_if>
 80129d0:	4603      	mov	r3, r0
 80129d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80129d4:	68b8      	ldr	r0, [r7, #8]
 80129d6:	f7fa fdd9 	bl	800d58c <pbuf_free>
  return err;
 80129da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3718      	adds	r7, #24
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	08016e84 	.word	0x08016e84
 80129ec:	08017618 	.word	0x08017618
 80129f0:	08016f14 	.word	0x08016f14

080129f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80129f4:	b590      	push	{r4, r7, lr}
 80129f6:	b08b      	sub	sp, #44	@ 0x2c
 80129f8:	af04      	add	r7, sp, #16
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	60b9      	str	r1, [r7, #8]
 80129fe:	607a      	str	r2, [r7, #4]
 8012a00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d106      	bne.n	8012a16 <tcp_rst+0x22>
 8012a08:	4b1f      	ldr	r3, [pc, #124]	@ (8012a88 <tcp_rst+0x94>)
 8012a0a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012a0e:	491f      	ldr	r1, [pc, #124]	@ (8012a8c <tcp_rst+0x98>)
 8012a10:	481f      	ldr	r0, [pc, #124]	@ (8012a90 <tcp_rst+0x9c>)
 8012a12:	f001 f8b7 	bl	8013b84 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d106      	bne.n	8012a2a <tcp_rst+0x36>
 8012a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8012a88 <tcp_rst+0x94>)
 8012a1e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012a22:	491c      	ldr	r1, [pc, #112]	@ (8012a94 <tcp_rst+0xa0>)
 8012a24:	481a      	ldr	r0, [pc, #104]	@ (8012a90 <tcp_rst+0x9c>)
 8012a26:	f001 f8ad 	bl	8013b84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012a2e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012a32:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012a34:	7dfb      	ldrb	r3, [r7, #23]
 8012a36:	b29c      	uxth	r4, r3
 8012a38:	68b8      	ldr	r0, [r7, #8]
 8012a3a:	f7f4 fffe 	bl	8007a3a <lwip_htonl>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	8abb      	ldrh	r3, [r7, #20]
 8012a42:	9303      	str	r3, [sp, #12]
 8012a44:	2314      	movs	r3, #20
 8012a46:	9302      	str	r3, [sp, #8]
 8012a48:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012a4a:	9301      	str	r3, [sp, #4]
 8012a4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	4613      	mov	r3, r2
 8012a52:	2200      	movs	r2, #0
 8012a54:	4621      	mov	r1, r4
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7ff fe94 	bl	8012784 <tcp_output_alloc_header_common>
 8012a5c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d00c      	beq.n	8012a7e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012a64:	7dfb      	ldrb	r3, [r7, #23]
 8012a66:	2200      	movs	r2, #0
 8012a68:	6939      	ldr	r1, [r7, #16]
 8012a6a:	68f8      	ldr	r0, [r7, #12]
 8012a6c:	f7ff ff3a 	bl	80128e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a72:	683a      	ldr	r2, [r7, #0]
 8012a74:	6939      	ldr	r1, [r7, #16]
 8012a76:	68f8      	ldr	r0, [r7, #12]
 8012a78:	f7ff ff72 	bl	8012960 <tcp_output_control_segment>
 8012a7c:	e000      	b.n	8012a80 <tcp_rst+0x8c>
    return;
 8012a7e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012a80:	371c      	adds	r7, #28
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd90      	pop	{r4, r7, pc}
 8012a86:	bf00      	nop
 8012a88:	08016e84 	.word	0x08016e84
 8012a8c:	08017644 	.word	0x08017644
 8012a90:	08016f14 	.word	0x08016f14
 8012a94:	08017660 	.word	0x08017660

08012a98 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012a98:	b590      	push	{r4, r7, lr}
 8012a9a:	b087      	sub	sp, #28
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d106      	bne.n	8012abc <tcp_send_empty_ack+0x24>
 8012aae:	4b28      	ldr	r3, [pc, #160]	@ (8012b50 <tcp_send_empty_ack+0xb8>)
 8012ab0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012ab4:	4927      	ldr	r1, [pc, #156]	@ (8012b54 <tcp_send_empty_ack+0xbc>)
 8012ab6:	4828      	ldr	r0, [pc, #160]	@ (8012b58 <tcp_send_empty_ack+0xc0>)
 8012ab8:	f001 f864 	bl	8013b84 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012abc:	7dfb      	ldrb	r3, [r7, #23]
 8012abe:	009b      	lsls	r3, r3, #2
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	f003 0304 	and.w	r3, r3, #4
 8012ac6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012ac8:	7d7b      	ldrb	r3, [r7, #21]
 8012aca:	b29c      	uxth	r4, r3
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7f4 ffb2 	bl	8007a3a <lwip_htonl>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2200      	movs	r2, #0
 8012ada:	4621      	mov	r1, r4
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7ff fec3 	bl	8012868 <tcp_output_alloc_header>
 8012ae2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d109      	bne.n	8012afe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	8b5b      	ldrh	r3, [r3, #26]
 8012aee:	f043 0303 	orr.w	r3, r3, #3
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012af8:	f06f 0301 	mvn.w	r3, #1
 8012afc:	e023      	b.n	8012b46 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012afe:	7dbb      	ldrb	r3, [r7, #22]
 8012b00:	7dfa      	ldrb	r2, [r7, #23]
 8012b02:	6939      	ldr	r1, [r7, #16]
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff feed 	bl	80128e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	3304      	adds	r3, #4
 8012b10:	6939      	ldr	r1, [r7, #16]
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f7ff ff24 	bl	8012960 <tcp_output_control_segment>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d007      	beq.n	8012b34 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	8b5b      	ldrh	r3, [r3, #26]
 8012b28:	f043 0303 	orr.w	r3, r3, #3
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	835a      	strh	r2, [r3, #26]
 8012b32:	e006      	b.n	8012b42 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	8b5b      	ldrh	r3, [r3, #26]
 8012b38:	f023 0303 	bic.w	r3, r3, #3
 8012b3c:	b29a      	uxth	r2, r3
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	371c      	adds	r7, #28
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd90      	pop	{r4, r7, pc}
 8012b4e:	bf00      	nop
 8012b50:	08016e84 	.word	0x08016e84
 8012b54:	0801767c 	.word	0x0801767c
 8012b58:	08016f14 	.word	0x08016f14

08012b5c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012b5c:	b590      	push	{r4, r7, lr}
 8012b5e:	b087      	sub	sp, #28
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012b64:	2300      	movs	r3, #0
 8012b66:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d106      	bne.n	8012b7c <tcp_keepalive+0x20>
 8012b6e:	4b18      	ldr	r3, [pc, #96]	@ (8012bd0 <tcp_keepalive+0x74>)
 8012b70:	f640 0224 	movw	r2, #2084	@ 0x824
 8012b74:	4917      	ldr	r1, [pc, #92]	@ (8012bd4 <tcp_keepalive+0x78>)
 8012b76:	4818      	ldr	r0, [pc, #96]	@ (8012bd8 <tcp_keepalive+0x7c>)
 8012b78:	f001 f804 	bl	8013b84 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012b7c:	7dfb      	ldrb	r3, [r7, #23]
 8012b7e:	b29c      	uxth	r4, r3
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b84:	3b01      	subs	r3, #1
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7f4 ff57 	bl	8007a3a <lwip_htonl>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	2200      	movs	r2, #0
 8012b90:	4621      	mov	r1, r4
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f7ff fe68 	bl	8012868 <tcp_output_alloc_header>
 8012b98:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d102      	bne.n	8012ba6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ba4:	e010      	b.n	8012bc8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ba6:	7dfb      	ldrb	r3, [r7, #23]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	6939      	ldr	r1, [r7, #16]
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7ff fe99 	bl	80128e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	3304      	adds	r3, #4
 8012bb8:	6939      	ldr	r1, [r7, #16]
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f7ff fed0 	bl	8012960 <tcp_output_control_segment>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	371c      	adds	r7, #28
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd90      	pop	{r4, r7, pc}
 8012bd0:	08016e84 	.word	0x08016e84
 8012bd4:	0801769c 	.word	0x0801769c
 8012bd8:	08016f14 	.word	0x08016f14

08012bdc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012bdc:	b590      	push	{r4, r7, lr}
 8012bde:	b08b      	sub	sp, #44	@ 0x2c
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012be4:	2300      	movs	r3, #0
 8012be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d106      	bne.n	8012bfe <tcp_zero_window_probe+0x22>
 8012bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8012d24 <tcp_zero_window_probe+0x148>)
 8012bf2:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012bf6:	494c      	ldr	r1, [pc, #304]	@ (8012d28 <tcp_zero_window_probe+0x14c>)
 8012bf8:	484c      	ldr	r0, [pc, #304]	@ (8012d2c <tcp_zero_window_probe+0x150>)
 8012bfa:	f000 ffc3 	bl	8013b84 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c02:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012c04:	6a3b      	ldr	r3, [r7, #32]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d101      	bne.n	8012c0e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	e086      	b.n	8012d1c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012c14:	2bff      	cmp	r3, #255	@ 0xff
 8012c16:	d007      	beq.n	8012c28 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012c1e:	3301      	adds	r3, #1
 8012c20:	b2da      	uxtb	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	899b      	ldrh	r3, [r3, #12]
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7f4 feed 	bl	8007a10 <lwip_htons>
 8012c36:	4603      	mov	r3, r0
 8012c38:	b2db      	uxtb	r3, r3
 8012c3a:	f003 0301 	and.w	r3, r3, #1
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d005      	beq.n	8012c4e <tcp_zero_window_probe+0x72>
 8012c42:	6a3b      	ldr	r3, [r7, #32]
 8012c44:	891b      	ldrh	r3, [r3, #8]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d101      	bne.n	8012c4e <tcp_zero_window_probe+0x72>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e000      	b.n	8012c50 <tcp_zero_window_probe+0x74>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012c52:	7ffb      	ldrb	r3, [r7, #31]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	bf0c      	ite	eq
 8012c58:	2301      	moveq	r3, #1
 8012c5a:	2300      	movne	r3, #0
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c64:	b299      	uxth	r1, r3
 8012c66:	6a3b      	ldr	r3, [r7, #32]
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	8bba      	ldrh	r2, [r7, #28]
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f7ff fdfa 	bl	8012868 <tcp_output_alloc_header>
 8012c74:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d102      	bne.n	8012c82 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c80:	e04c      	b.n	8012d1c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012c82:	69bb      	ldr	r3, [r7, #24]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012c88:	7ffb      	ldrb	r3, [r7, #31]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d011      	beq.n	8012cb2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	899b      	ldrh	r3, [r3, #12]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	b21b      	sxth	r3, r3
 8012c96:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012c9a:	b21c      	sxth	r4, r3
 8012c9c:	2011      	movs	r0, #17
 8012c9e:	f7f4 feb7 	bl	8007a10 <lwip_htons>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	b21b      	sxth	r3, r3
 8012ca6:	4323      	orrs	r3, r4
 8012ca8:	b21b      	sxth	r3, r3
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	819a      	strh	r2, [r3, #12]
 8012cb0:	e010      	b.n	8012cd4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	3314      	adds	r3, #20
 8012cb8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012cba:	6a3b      	ldr	r3, [r7, #32]
 8012cbc:	6858      	ldr	r0, [r3, #4]
 8012cbe:	6a3b      	ldr	r3, [r7, #32]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	891a      	ldrh	r2, [r3, #8]
 8012cc4:	6a3b      	ldr	r3, [r7, #32]
 8012cc6:	891b      	ldrh	r3, [r3, #8]
 8012cc8:	1ad3      	subs	r3, r2, r3
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	2201      	movs	r2, #1
 8012cce:	6939      	ldr	r1, [r7, #16]
 8012cd0:	f7fa fe56 	bl	800d980 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012cd4:	6a3b      	ldr	r3, [r7, #32]
 8012cd6:	68db      	ldr	r3, [r3, #12]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7f4 fead 	bl	8007a3a <lwip_htonl>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	1ad3      	subs	r3, r2, r3
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	da02      	bge.n	8012cf8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	68fa      	ldr	r2, [r7, #12]
 8012cf6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	69b9      	ldr	r1, [r7, #24]
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f7ff fdef 	bl	80128e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d06:	687a      	ldr	r2, [r7, #4]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	69b9      	ldr	r1, [r7, #24]
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f7ff fe26 	bl	8012960 <tcp_output_control_segment>
 8012d14:	4603      	mov	r3, r0
 8012d16:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	372c      	adds	r7, #44	@ 0x2c
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd90      	pop	{r4, r7, pc}
 8012d24:	08016e84 	.word	0x08016e84
 8012d28:	080176b8 	.word	0x080176b8
 8012d2c:	08016f14 	.word	0x08016f14

08012d30 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012d38:	f7fa ff10 	bl	800db5c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8012d68 <tcpip_tcp_timer+0x38>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d103      	bne.n	8012d4c <tcpip_tcp_timer+0x1c>
 8012d44:	4b09      	ldr	r3, [pc, #36]	@ (8012d6c <tcpip_tcp_timer+0x3c>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d005      	beq.n	8012d58 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	4908      	ldr	r1, [pc, #32]	@ (8012d70 <tcpip_tcp_timer+0x40>)
 8012d50:	20fa      	movs	r0, #250	@ 0xfa
 8012d52:	f000 f8f3 	bl	8012f3c <sys_timeout>
 8012d56:	e003      	b.n	8012d60 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012d58:	4b06      	ldr	r3, [pc, #24]	@ (8012d74 <tcpip_tcp_timer+0x44>)
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	601a      	str	r2, [r3, #0]
  }
}
 8012d5e:	bf00      	nop
 8012d60:	bf00      	nop
 8012d62:	3708      	adds	r7, #8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	24007ca0 	.word	0x24007ca0
 8012d6c:	24007ca4 	.word	0x24007ca4
 8012d70:	08012d31 	.word	0x08012d31
 8012d74:	24007cec 	.word	0x24007cec

08012d78 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8012da8 <tcp_timer_needed+0x30>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d10f      	bne.n	8012da4 <tcp_timer_needed+0x2c>
 8012d84:	4b09      	ldr	r3, [pc, #36]	@ (8012dac <tcp_timer_needed+0x34>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d103      	bne.n	8012d94 <tcp_timer_needed+0x1c>
 8012d8c:	4b08      	ldr	r3, [pc, #32]	@ (8012db0 <tcp_timer_needed+0x38>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d007      	beq.n	8012da4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012d94:	4b04      	ldr	r3, [pc, #16]	@ (8012da8 <tcp_timer_needed+0x30>)
 8012d96:	2201      	movs	r2, #1
 8012d98:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	4905      	ldr	r1, [pc, #20]	@ (8012db4 <tcp_timer_needed+0x3c>)
 8012d9e:	20fa      	movs	r0, #250	@ 0xfa
 8012da0:	f000 f8cc 	bl	8012f3c <sys_timeout>
  }
}
 8012da4:	bf00      	nop
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	24007cec 	.word	0x24007cec
 8012dac:	24007ca0 	.word	0x24007ca0
 8012db0:	24007ca4 	.word	0x24007ca4
 8012db4:	08012d31 	.word	0x08012d31

08012db8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b086      	sub	sp, #24
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012dc4:	2006      	movs	r0, #6
 8012dc6:	f7f9 fcef 	bl	800c7a8 <memp_malloc>
 8012dca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d109      	bne.n	8012de6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d151      	bne.n	8012e7c <sys_timeout_abs+0xc4>
 8012dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8012e84 <sys_timeout_abs+0xcc>)
 8012dda:	22be      	movs	r2, #190	@ 0xbe
 8012ddc:	492a      	ldr	r1, [pc, #168]	@ (8012e88 <sys_timeout_abs+0xd0>)
 8012dde:	482b      	ldr	r0, [pc, #172]	@ (8012e8c <sys_timeout_abs+0xd4>)
 8012de0:	f000 fed0 	bl	8013b84 <iprintf>
    return;
 8012de4:	e04a      	b.n	8012e7c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	2200      	movs	r2, #0
 8012dea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	68ba      	ldr	r2, [r7, #8]
 8012df0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	687a      	ldr	r2, [r7, #4]
 8012df6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	68fa      	ldr	r2, [r7, #12]
 8012dfc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012dfe:	4b24      	ldr	r3, [pc, #144]	@ (8012e90 <sys_timeout_abs+0xd8>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d103      	bne.n	8012e0e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012e06:	4a22      	ldr	r2, [pc, #136]	@ (8012e90 <sys_timeout_abs+0xd8>)
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	6013      	str	r3, [r2, #0]
    return;
 8012e0c:	e037      	b.n	8012e7e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	685a      	ldr	r2, [r3, #4]
 8012e12:	4b1f      	ldr	r3, [pc, #124]	@ (8012e90 <sys_timeout_abs+0xd8>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	1ad3      	subs	r3, r2, r3
 8012e1a:	0fdb      	lsrs	r3, r3, #31
 8012e1c:	f003 0301 	and.w	r3, r3, #1
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d007      	beq.n	8012e36 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012e26:	4b1a      	ldr	r3, [pc, #104]	@ (8012e90 <sys_timeout_abs+0xd8>)
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012e2e:	4a18      	ldr	r2, [pc, #96]	@ (8012e90 <sys_timeout_abs+0xd8>)
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	6013      	str	r3, [r2, #0]
 8012e34:	e023      	b.n	8012e7e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e36:	4b16      	ldr	r3, [pc, #88]	@ (8012e90 <sys_timeout_abs+0xd8>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	617b      	str	r3, [r7, #20]
 8012e3c:	e01a      	b.n	8012e74 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012e3e:	697b      	ldr	r3, [r7, #20]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d00b      	beq.n	8012e5e <sys_timeout_abs+0xa6>
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	685a      	ldr	r2, [r3, #4]
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	1ad3      	subs	r3, r2, r3
 8012e52:	0fdb      	lsrs	r3, r3, #31
 8012e54:	f003 0301 	and.w	r3, r3, #1
 8012e58:	b2db      	uxtb	r3, r3
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d007      	beq.n	8012e6e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	681a      	ldr	r2, [r3, #0]
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	693a      	ldr	r2, [r7, #16]
 8012e6a:	601a      	str	r2, [r3, #0]
        break;
 8012e6c:	e007      	b.n	8012e7e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	617b      	str	r3, [r7, #20]
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1e1      	bne.n	8012e3e <sys_timeout_abs+0x86>
 8012e7a:	e000      	b.n	8012e7e <sys_timeout_abs+0xc6>
    return;
 8012e7c:	bf00      	nop
      }
    }
  }
}
 8012e7e:	3718      	adds	r7, #24
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	080176dc 	.word	0x080176dc
 8012e88:	0801774c 	.word	0x0801774c
 8012e8c:	0801778c 	.word	0x0801778c
 8012e90:	24007ce4 	.word	0x24007ce4

08012e94 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b086      	sub	sp, #24
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	4798      	blx	r3

  now = sys_now();
 8012ea6:	f7f4 fb63 	bl	8007570 <sys_now>
 8012eaa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8012ef0 <lwip_cyclic_timer+0x5c>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	4413      	add	r3, r2
 8012eb6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012eb8:	68fa      	ldr	r2, [r7, #12]
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	1ad3      	subs	r3, r2, r3
 8012ebe:	0fdb      	lsrs	r3, r3, #31
 8012ec0:	f003 0301 	and.w	r3, r3, #1
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d009      	beq.n	8012ede <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	681a      	ldr	r2, [r3, #0]
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	4907      	ldr	r1, [pc, #28]	@ (8012ef4 <lwip_cyclic_timer+0x60>)
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7ff ff6e 	bl	8012db8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012edc:	e004      	b.n	8012ee8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	4904      	ldr	r1, [pc, #16]	@ (8012ef4 <lwip_cyclic_timer+0x60>)
 8012ee2:	68f8      	ldr	r0, [r7, #12]
 8012ee4:	f7ff ff68 	bl	8012db8 <sys_timeout_abs>
}
 8012ee8:	bf00      	nop
 8012eea:	3718      	adds	r7, #24
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	24007ce8 	.word	0x24007ce8
 8012ef4:	08012e95 	.word	0x08012e95

08012ef8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012efe:	2301      	movs	r3, #1
 8012f00:	607b      	str	r3, [r7, #4]
 8012f02:	e00e      	b.n	8012f22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012f04:	4a0b      	ldr	r2, [pc, #44]	@ (8012f34 <sys_timeouts_init+0x3c>)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	00db      	lsls	r3, r3, #3
 8012f10:	4a08      	ldr	r2, [pc, #32]	@ (8012f34 <sys_timeouts_init+0x3c>)
 8012f12:	4413      	add	r3, r2
 8012f14:	461a      	mov	r2, r3
 8012f16:	4908      	ldr	r1, [pc, #32]	@ (8012f38 <sys_timeouts_init+0x40>)
 8012f18:	f000 f810 	bl	8012f3c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	3301      	adds	r3, #1
 8012f20:	607b      	str	r3, [r7, #4]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2b04      	cmp	r3, #4
 8012f26:	d9ed      	bls.n	8012f04 <sys_timeouts_init+0xc>
  }
}
 8012f28:	bf00      	nop
 8012f2a:	bf00      	nop
 8012f2c:	3708      	adds	r7, #8
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	08017cb4 	.word	0x08017cb4
 8012f38:	08012e95 	.word	0x08012e95

08012f3c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b086      	sub	sp, #24
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	60b9      	str	r1, [r7, #8]
 8012f46:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012f4e:	d306      	bcc.n	8012f5e <sys_timeout+0x22>
 8012f50:	4b0a      	ldr	r3, [pc, #40]	@ (8012f7c <sys_timeout+0x40>)
 8012f52:	f240 1229 	movw	r2, #297	@ 0x129
 8012f56:	490a      	ldr	r1, [pc, #40]	@ (8012f80 <sys_timeout+0x44>)
 8012f58:	480a      	ldr	r0, [pc, #40]	@ (8012f84 <sys_timeout+0x48>)
 8012f5a:	f000 fe13 	bl	8013b84 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012f5e:	f7f4 fb07 	bl	8007570 <sys_now>
 8012f62:	4602      	mov	r2, r0
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	4413      	add	r3, r2
 8012f68:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	68b9      	ldr	r1, [r7, #8]
 8012f6e:	6978      	ldr	r0, [r7, #20]
 8012f70:	f7ff ff22 	bl	8012db8 <sys_timeout_abs>
#endif
}
 8012f74:	bf00      	nop
 8012f76:	3718      	adds	r7, #24
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	080176dc 	.word	0x080176dc
 8012f80:	080177b4 	.word	0x080177b4
 8012f84:	0801778c 	.word	0x0801778c

08012f88 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012f8e:	f7f4 faef 	bl	8007570 <sys_now>
 8012f92:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012f94:	4b1a      	ldr	r3, [pc, #104]	@ (8013000 <sys_check_timeouts+0x78>)
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	b2db      	uxtb	r3, r3
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d001      	beq.n	8012fa2 <sys_check_timeouts+0x1a>
 8012f9e:	f7f9 ffbb 	bl	800cf18 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012fa2:	4b18      	ldr	r3, [pc, #96]	@ (8013004 <sys_check_timeouts+0x7c>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d022      	beq.n	8012ff4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	68fa      	ldr	r2, [r7, #12]
 8012fb4:	1ad3      	subs	r3, r2, r3
 8012fb6:	0fdb      	lsrs	r3, r3, #31
 8012fb8:	f003 0301 	and.w	r3, r3, #1
 8012fbc:	b2db      	uxtb	r3, r3
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d11a      	bne.n	8012ff8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8013004 <sys_check_timeouts+0x7c>)
 8012fc8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	689b      	ldr	r3, [r3, #8]
 8012fce:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	685b      	ldr	r3, [r3, #4]
 8012fda:	4a0b      	ldr	r2, [pc, #44]	@ (8013008 <sys_check_timeouts+0x80>)
 8012fdc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012fde:	68b9      	ldr	r1, [r7, #8]
 8012fe0:	2006      	movs	r0, #6
 8012fe2:	f7f9 fc51 	bl	800c888 <memp_free>
    if (handler != NULL) {
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d0d3      	beq.n	8012f94 <sys_check_timeouts+0xc>
      handler(arg);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6838      	ldr	r0, [r7, #0]
 8012ff0:	4798      	blx	r3
  do {
 8012ff2:	e7cf      	b.n	8012f94 <sys_check_timeouts+0xc>
      return;
 8012ff4:	bf00      	nop
 8012ff6:	e000      	b.n	8012ffa <sys_check_timeouts+0x72>
      return;
 8012ff8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012ffa:	3710      	adds	r7, #16
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	24007c91 	.word	0x24007c91
 8013004:	24007ce4 	.word	0x24007ce4
 8013008:	24007ce8 	.word	0x24007ce8

0801300c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013010:	f000 fcb8 	bl	8013984 <rand>
 8013014:	4603      	mov	r3, r0
 8013016:	b29b      	uxth	r3, r3
 8013018:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801301c:	b29b      	uxth	r3, r3
 801301e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013022:	b29a      	uxth	r2, r3
 8013024:	4b01      	ldr	r3, [pc, #4]	@ (801302c <udp_init+0x20>)
 8013026:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013028:	bf00      	nop
 801302a:	bd80      	pop	{r7, pc}
 801302c:	24000030 	.word	0x24000030

08013030 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013030:	b480      	push	{r7}
 8013032:	b083      	sub	sp, #12
 8013034:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013036:	2300      	movs	r3, #0
 8013038:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801303a:	4b17      	ldr	r3, [pc, #92]	@ (8013098 <udp_new_port+0x68>)
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	1c5a      	adds	r2, r3, #1
 8013040:	b291      	uxth	r1, r2
 8013042:	4a15      	ldr	r2, [pc, #84]	@ (8013098 <udp_new_port+0x68>)
 8013044:	8011      	strh	r1, [r2, #0]
 8013046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801304a:	4293      	cmp	r3, r2
 801304c:	d103      	bne.n	8013056 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801304e:	4b12      	ldr	r3, [pc, #72]	@ (8013098 <udp_new_port+0x68>)
 8013050:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013054:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013056:	4b11      	ldr	r3, [pc, #68]	@ (801309c <udp_new_port+0x6c>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	603b      	str	r3, [r7, #0]
 801305c:	e011      	b.n	8013082 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	8a5a      	ldrh	r2, [r3, #18]
 8013062:	4b0d      	ldr	r3, [pc, #52]	@ (8013098 <udp_new_port+0x68>)
 8013064:	881b      	ldrh	r3, [r3, #0]
 8013066:	429a      	cmp	r2, r3
 8013068:	d108      	bne.n	801307c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801306a:	88fb      	ldrh	r3, [r7, #6]
 801306c:	3301      	adds	r3, #1
 801306e:	80fb      	strh	r3, [r7, #6]
 8013070:	88fb      	ldrh	r3, [r7, #6]
 8013072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013076:	d3e0      	bcc.n	801303a <udp_new_port+0xa>
        return 0;
 8013078:	2300      	movs	r3, #0
 801307a:	e007      	b.n	801308c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	603b      	str	r3, [r7, #0]
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d1ea      	bne.n	801305e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013088:	4b03      	ldr	r3, [pc, #12]	@ (8013098 <udp_new_port+0x68>)
 801308a:	881b      	ldrh	r3, [r3, #0]
}
 801308c:	4618      	mov	r0, r3
 801308e:	370c      	adds	r7, #12
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr
 8013098:	24000030 	.word	0x24000030
 801309c:	24007cf0 	.word	0x24007cf0

080130a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b084      	sub	sp, #16
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	60f8      	str	r0, [r7, #12]
 80130a8:	60b9      	str	r1, [r7, #8]
 80130aa:	4613      	mov	r3, r2
 80130ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d105      	bne.n	80130c0 <udp_input_local_match+0x20>
 80130b4:	4b27      	ldr	r3, [pc, #156]	@ (8013154 <udp_input_local_match+0xb4>)
 80130b6:	2287      	movs	r2, #135	@ 0x87
 80130b8:	4927      	ldr	r1, [pc, #156]	@ (8013158 <udp_input_local_match+0xb8>)
 80130ba:	4828      	ldr	r0, [pc, #160]	@ (801315c <udp_input_local_match+0xbc>)
 80130bc:	f000 fd62 	bl	8013b84 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d105      	bne.n	80130d2 <udp_input_local_match+0x32>
 80130c6:	4b23      	ldr	r3, [pc, #140]	@ (8013154 <udp_input_local_match+0xb4>)
 80130c8:	2288      	movs	r2, #136	@ 0x88
 80130ca:	4925      	ldr	r1, [pc, #148]	@ (8013160 <udp_input_local_match+0xc0>)
 80130cc:	4823      	ldr	r0, [pc, #140]	@ (801315c <udp_input_local_match+0xbc>)
 80130ce:	f000 fd59 	bl	8013b84 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	7a1b      	ldrb	r3, [r3, #8]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d00b      	beq.n	80130f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	7a1a      	ldrb	r2, [r3, #8]
 80130de:	4b21      	ldr	r3, [pc, #132]	@ (8013164 <udp_input_local_match+0xc4>)
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80130e6:	3301      	adds	r3, #1
 80130e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d001      	beq.n	80130f2 <udp_input_local_match+0x52>
    return 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	e02b      	b.n	801314a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80130f2:	79fb      	ldrb	r3, [r7, #7]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d018      	beq.n	801312a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d013      	beq.n	8013126 <udp_input_local_match+0x86>
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d00f      	beq.n	8013126 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013106:	4b17      	ldr	r3, [pc, #92]	@ (8013164 <udp_input_local_match+0xc4>)
 8013108:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801310a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801310e:	d00a      	beq.n	8013126 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681a      	ldr	r2, [r3, #0]
 8013114:	4b13      	ldr	r3, [pc, #76]	@ (8013164 <udp_input_local_match+0xc4>)
 8013116:	695b      	ldr	r3, [r3, #20]
 8013118:	405a      	eors	r2, r3
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	3308      	adds	r3, #8
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013122:	2b00      	cmp	r3, #0
 8013124:	d110      	bne.n	8013148 <udp_input_local_match+0xa8>
          return 1;
 8013126:	2301      	movs	r3, #1
 8013128:	e00f      	b.n	801314a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d009      	beq.n	8013144 <udp_input_local_match+0xa4>
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d005      	beq.n	8013144 <udp_input_local_match+0xa4>
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	4b09      	ldr	r3, [pc, #36]	@ (8013164 <udp_input_local_match+0xc4>)
 801313e:	695b      	ldr	r3, [r3, #20]
 8013140:	429a      	cmp	r2, r3
 8013142:	d101      	bne.n	8013148 <udp_input_local_match+0xa8>
        return 1;
 8013144:	2301      	movs	r3, #1
 8013146:	e000      	b.n	801314a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013148:	2300      	movs	r3, #0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3710      	adds	r7, #16
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	08017800 	.word	0x08017800
 8013158:	0801786c 	.word	0x0801786c
 801315c:	08017890 	.word	0x08017890
 8013160:	080178b8 	.word	0x080178b8
 8013164:	24004d4c 	.word	0x24004d4c

08013168 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013168:	b590      	push	{r4, r7, lr}
 801316a:	b08d      	sub	sp, #52	@ 0x34
 801316c:	af02      	add	r7, sp, #8
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013172:	2300      	movs	r3, #0
 8013174:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d105      	bne.n	8013188 <udp_input+0x20>
 801317c:	4b7c      	ldr	r3, [pc, #496]	@ (8013370 <udp_input+0x208>)
 801317e:	22cf      	movs	r2, #207	@ 0xcf
 8013180:	497c      	ldr	r1, [pc, #496]	@ (8013374 <udp_input+0x20c>)
 8013182:	487d      	ldr	r0, [pc, #500]	@ (8013378 <udp_input+0x210>)
 8013184:	f000 fcfe 	bl	8013b84 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d105      	bne.n	801319a <udp_input+0x32>
 801318e:	4b78      	ldr	r3, [pc, #480]	@ (8013370 <udp_input+0x208>)
 8013190:	22d0      	movs	r2, #208	@ 0xd0
 8013192:	497a      	ldr	r1, [pc, #488]	@ (801337c <udp_input+0x214>)
 8013194:	4878      	ldr	r0, [pc, #480]	@ (8013378 <udp_input+0x210>)
 8013196:	f000 fcf5 	bl	8013b84 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	895b      	ldrh	r3, [r3, #10]
 801319e:	2b07      	cmp	r3, #7
 80131a0:	d803      	bhi.n	80131aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f7fa f9f2 	bl	800d58c <pbuf_free>
    goto end;
 80131a8:	e0de      	b.n	8013368 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80131b0:	4b73      	ldr	r3, [pc, #460]	@ (8013380 <udp_input+0x218>)
 80131b2:	695b      	ldr	r3, [r3, #20]
 80131b4:	4a72      	ldr	r2, [pc, #456]	@ (8013380 <udp_input+0x218>)
 80131b6:	6812      	ldr	r2, [r2, #0]
 80131b8:	4611      	mov	r1, r2
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7f8 f844 	bl	800b248 <ip4_addr_isbroadcast_u32>
 80131c0:	4603      	mov	r3, r0
 80131c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	881b      	ldrh	r3, [r3, #0]
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7f4 fc20 	bl	8007a10 <lwip_htons>
 80131d0:	4603      	mov	r3, r0
 80131d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	885b      	ldrh	r3, [r3, #2]
 80131d8:	b29b      	uxth	r3, r3
 80131da:	4618      	mov	r0, r3
 80131dc:	f7f4 fc18 	bl	8007a10 <lwip_htons>
 80131e0:	4603      	mov	r3, r0
 80131e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80131e4:	2300      	movs	r3, #0
 80131e6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80131e8:	2300      	movs	r3, #0
 80131ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80131ec:	2300      	movs	r3, #0
 80131ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80131f0:	4b64      	ldr	r3, [pc, #400]	@ (8013384 <udp_input+0x21c>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80131f6:	e054      	b.n	80132a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80131f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131fa:	8a5b      	ldrh	r3, [r3, #18]
 80131fc:	89fa      	ldrh	r2, [r7, #14]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d14a      	bne.n	8013298 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013202:	7cfb      	ldrb	r3, [r7, #19]
 8013204:	461a      	mov	r2, r3
 8013206:	6839      	ldr	r1, [r7, #0]
 8013208:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801320a:	f7ff ff49 	bl	80130a0 <udp_input_local_match>
 801320e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013210:	2b00      	cmp	r3, #0
 8013212:	d041      	beq.n	8013298 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013216:	7c1b      	ldrb	r3, [r3, #16]
 8013218:	f003 0304 	and.w	r3, r3, #4
 801321c:	2b00      	cmp	r3, #0
 801321e:	d11d      	bne.n	801325c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d102      	bne.n	801322c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013228:	61fb      	str	r3, [r7, #28]
 801322a:	e017      	b.n	801325c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801322c:	7cfb      	ldrb	r3, [r7, #19]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d014      	beq.n	801325c <udp_input+0xf4>
 8013232:	4b53      	ldr	r3, [pc, #332]	@ (8013380 <udp_input+0x218>)
 8013234:	695b      	ldr	r3, [r3, #20]
 8013236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801323a:	d10f      	bne.n	801325c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	3304      	adds	r3, #4
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	429a      	cmp	r2, r3
 8013248:	d008      	beq.n	801325c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801324c:	681a      	ldr	r2, [r3, #0]
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	3304      	adds	r3, #4
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	429a      	cmp	r2, r3
 8013256:	d101      	bne.n	801325c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801325a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801325e:	8a9b      	ldrh	r3, [r3, #20]
 8013260:	8a3a      	ldrh	r2, [r7, #16]
 8013262:	429a      	cmp	r2, r3
 8013264:	d118      	bne.n	8013298 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013268:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801326a:	2b00      	cmp	r3, #0
 801326c:	d005      	beq.n	801327a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013270:	685a      	ldr	r2, [r3, #4]
 8013272:	4b43      	ldr	r3, [pc, #268]	@ (8013380 <udp_input+0x218>)
 8013274:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013276:	429a      	cmp	r2, r3
 8013278:	d10e      	bne.n	8013298 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801327a:	6a3b      	ldr	r3, [r7, #32]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d014      	beq.n	80132aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013282:	68da      	ldr	r2, [r3, #12]
 8013284:	6a3b      	ldr	r3, [r7, #32]
 8013286:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013288:	4b3e      	ldr	r3, [pc, #248]	@ (8013384 <udp_input+0x21c>)
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801328e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013290:	4a3c      	ldr	r2, [pc, #240]	@ (8013384 <udp_input+0x21c>)
 8013292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013294:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013296:	e008      	b.n	80132aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8013298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801329a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80132a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d1a7      	bne.n	80131f8 <udp_input+0x90>
 80132a8:	e000      	b.n	80132ac <udp_input+0x144>
        break;
 80132aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80132ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d101      	bne.n	80132b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80132b2:	69fb      	ldr	r3, [r7, #28]
 80132b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80132b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d002      	beq.n	80132c2 <udp_input+0x15a>
    for_us = 1;
 80132bc:	2301      	movs	r3, #1
 80132be:	76fb      	strb	r3, [r7, #27]
 80132c0:	e00a      	b.n	80132d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	3304      	adds	r3, #4
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	4b2d      	ldr	r3, [pc, #180]	@ (8013380 <udp_input+0x218>)
 80132ca:	695b      	ldr	r3, [r3, #20]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	bf0c      	ite	eq
 80132d0:	2301      	moveq	r3, #1
 80132d2:	2300      	movne	r3, #0
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80132d8:	7efb      	ldrb	r3, [r7, #27]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d041      	beq.n	8013362 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80132de:	2108      	movs	r1, #8
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f7fa f8cd 	bl	800d480 <pbuf_remove_header>
 80132e6:	4603      	mov	r3, r0
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d00a      	beq.n	8013302 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80132ec:	4b20      	ldr	r3, [pc, #128]	@ (8013370 <udp_input+0x208>)
 80132ee:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80132f2:	4925      	ldr	r1, [pc, #148]	@ (8013388 <udp_input+0x220>)
 80132f4:	4820      	ldr	r0, [pc, #128]	@ (8013378 <udp_input+0x210>)
 80132f6:	f000 fc45 	bl	8013b84 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f7fa f946 	bl	800d58c <pbuf_free>
      goto end;
 8013300:	e032      	b.n	8013368 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013304:	2b00      	cmp	r3, #0
 8013306:	d012      	beq.n	801332e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801330a:	699b      	ldr	r3, [r3, #24]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00a      	beq.n	8013326 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013312:	699c      	ldr	r4, [r3, #24]
 8013314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013316:	69d8      	ldr	r0, [r3, #28]
 8013318:	8a3b      	ldrh	r3, [r7, #16]
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	4b1b      	ldr	r3, [pc, #108]	@ (801338c <udp_input+0x224>)
 801331e:	687a      	ldr	r2, [r7, #4]
 8013320:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013322:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013324:	e021      	b.n	801336a <udp_input+0x202>
        pbuf_free(p);
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f7fa f930 	bl	800d58c <pbuf_free>
        goto end;
 801332c:	e01c      	b.n	8013368 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801332e:	7cfb      	ldrb	r3, [r7, #19]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d112      	bne.n	801335a <udp_input+0x1f2>
 8013334:	4b12      	ldr	r3, [pc, #72]	@ (8013380 <udp_input+0x218>)
 8013336:	695b      	ldr	r3, [r3, #20]
 8013338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801333c:	2be0      	cmp	r3, #224	@ 0xe0
 801333e:	d00c      	beq.n	801335a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013340:	4b0f      	ldr	r3, [pc, #60]	@ (8013380 <udp_input+0x218>)
 8013342:	899b      	ldrh	r3, [r3, #12]
 8013344:	3308      	adds	r3, #8
 8013346:	b29b      	uxth	r3, r3
 8013348:	b21b      	sxth	r3, r3
 801334a:	4619      	mov	r1, r3
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7fa f90a 	bl	800d566 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013352:	2103      	movs	r1, #3
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f7f7 fb5d 	bl	800aa14 <icmp_dest_unreach>
      pbuf_free(p);
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f7fa f916 	bl	800d58c <pbuf_free>
  return;
 8013360:	e003      	b.n	801336a <udp_input+0x202>
    pbuf_free(p);
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f7fa f912 	bl	800d58c <pbuf_free>
  return;
 8013368:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801336a:	372c      	adds	r7, #44	@ 0x2c
 801336c:	46bd      	mov	sp, r7
 801336e:	bd90      	pop	{r4, r7, pc}
 8013370:	08017800 	.word	0x08017800
 8013374:	080178e0 	.word	0x080178e0
 8013378:	08017890 	.word	0x08017890
 801337c:	080178f8 	.word	0x080178f8
 8013380:	24004d4c 	.word	0x24004d4c
 8013384:	24007cf0 	.word	0x24007cf0
 8013388:	08017914 	.word	0x08017914
 801338c:	24004d5c 	.word	0x24004d5c

08013390 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b088      	sub	sp, #32
 8013394:	af02      	add	r7, sp, #8
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	607a      	str	r2, [r7, #4]
 801339c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d109      	bne.n	80133b8 <udp_sendto_if+0x28>
 80133a4:	4b2e      	ldr	r3, [pc, #184]	@ (8013460 <udp_sendto_if+0xd0>)
 80133a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80133aa:	492e      	ldr	r1, [pc, #184]	@ (8013464 <udp_sendto_if+0xd4>)
 80133ac:	482e      	ldr	r0, [pc, #184]	@ (8013468 <udp_sendto_if+0xd8>)
 80133ae:	f000 fbe9 	bl	8013b84 <iprintf>
 80133b2:	f06f 030f 	mvn.w	r3, #15
 80133b6:	e04f      	b.n	8013458 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d109      	bne.n	80133d2 <udp_sendto_if+0x42>
 80133be:	4b28      	ldr	r3, [pc, #160]	@ (8013460 <udp_sendto_if+0xd0>)
 80133c0:	f240 2281 	movw	r2, #641	@ 0x281
 80133c4:	4929      	ldr	r1, [pc, #164]	@ (801346c <udp_sendto_if+0xdc>)
 80133c6:	4828      	ldr	r0, [pc, #160]	@ (8013468 <udp_sendto_if+0xd8>)
 80133c8:	f000 fbdc 	bl	8013b84 <iprintf>
 80133cc:	f06f 030f 	mvn.w	r3, #15
 80133d0:	e042      	b.n	8013458 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d109      	bne.n	80133ec <udp_sendto_if+0x5c>
 80133d8:	4b21      	ldr	r3, [pc, #132]	@ (8013460 <udp_sendto_if+0xd0>)
 80133da:	f240 2282 	movw	r2, #642	@ 0x282
 80133de:	4924      	ldr	r1, [pc, #144]	@ (8013470 <udp_sendto_if+0xe0>)
 80133e0:	4821      	ldr	r0, [pc, #132]	@ (8013468 <udp_sendto_if+0xd8>)
 80133e2:	f000 fbcf 	bl	8013b84 <iprintf>
 80133e6:	f06f 030f 	mvn.w	r3, #15
 80133ea:	e035      	b.n	8013458 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80133ec:	6a3b      	ldr	r3, [r7, #32]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d109      	bne.n	8013406 <udp_sendto_if+0x76>
 80133f2:	4b1b      	ldr	r3, [pc, #108]	@ (8013460 <udp_sendto_if+0xd0>)
 80133f4:	f240 2283 	movw	r2, #643	@ 0x283
 80133f8:	491e      	ldr	r1, [pc, #120]	@ (8013474 <udp_sendto_if+0xe4>)
 80133fa:	481b      	ldr	r0, [pc, #108]	@ (8013468 <udp_sendto_if+0xd8>)
 80133fc:	f000 fbc2 	bl	8013b84 <iprintf>
 8013400:	f06f 030f 	mvn.w	r3, #15
 8013404:	e028      	b.n	8013458 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d009      	beq.n	8013420 <udp_sendto_if+0x90>
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d005      	beq.n	8013420 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801341c:	2be0      	cmp	r3, #224	@ 0xe0
 801341e:	d103      	bne.n	8013428 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013420:	6a3b      	ldr	r3, [r7, #32]
 8013422:	3304      	adds	r3, #4
 8013424:	617b      	str	r3, [r7, #20]
 8013426:	e00b      	b.n	8013440 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	6a3b      	ldr	r3, [r7, #32]
 801342e:	3304      	adds	r3, #4
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	429a      	cmp	r2, r3
 8013434:	d002      	beq.n	801343c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013436:	f06f 0303 	mvn.w	r3, #3
 801343a:	e00d      	b.n	8013458 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013440:	887a      	ldrh	r2, [r7, #2]
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	9301      	str	r3, [sp, #4]
 8013446:	6a3b      	ldr	r3, [r7, #32]
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	4613      	mov	r3, r2
 801344c:	687a      	ldr	r2, [r7, #4]
 801344e:	68b9      	ldr	r1, [r7, #8]
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f000 f811 	bl	8013478 <udp_sendto_if_src>
 8013456:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013458:	4618      	mov	r0, r3
 801345a:	3718      	adds	r7, #24
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}
 8013460:	08017800 	.word	0x08017800
 8013464:	080179b0 	.word	0x080179b0
 8013468:	08017890 	.word	0x08017890
 801346c:	080179cc 	.word	0x080179cc
 8013470:	080179e8 	.word	0x080179e8
 8013474:	08017a08 	.word	0x08017a08

08013478 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b08c      	sub	sp, #48	@ 0x30
 801347c:	af04      	add	r7, sp, #16
 801347e:	60f8      	str	r0, [r7, #12]
 8013480:	60b9      	str	r1, [r7, #8]
 8013482:	607a      	str	r2, [r7, #4]
 8013484:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d109      	bne.n	80134a0 <udp_sendto_if_src+0x28>
 801348c:	4b65      	ldr	r3, [pc, #404]	@ (8013624 <udp_sendto_if_src+0x1ac>)
 801348e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013492:	4965      	ldr	r1, [pc, #404]	@ (8013628 <udp_sendto_if_src+0x1b0>)
 8013494:	4865      	ldr	r0, [pc, #404]	@ (801362c <udp_sendto_if_src+0x1b4>)
 8013496:	f000 fb75 	bl	8013b84 <iprintf>
 801349a:	f06f 030f 	mvn.w	r3, #15
 801349e:	e0bc      	b.n	801361a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d109      	bne.n	80134ba <udp_sendto_if_src+0x42>
 80134a6:	4b5f      	ldr	r3, [pc, #380]	@ (8013624 <udp_sendto_if_src+0x1ac>)
 80134a8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80134ac:	4960      	ldr	r1, [pc, #384]	@ (8013630 <udp_sendto_if_src+0x1b8>)
 80134ae:	485f      	ldr	r0, [pc, #380]	@ (801362c <udp_sendto_if_src+0x1b4>)
 80134b0:	f000 fb68 	bl	8013b84 <iprintf>
 80134b4:	f06f 030f 	mvn.w	r3, #15
 80134b8:	e0af      	b.n	801361a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d109      	bne.n	80134d4 <udp_sendto_if_src+0x5c>
 80134c0:	4b58      	ldr	r3, [pc, #352]	@ (8013624 <udp_sendto_if_src+0x1ac>)
 80134c2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80134c6:	495b      	ldr	r1, [pc, #364]	@ (8013634 <udp_sendto_if_src+0x1bc>)
 80134c8:	4858      	ldr	r0, [pc, #352]	@ (801362c <udp_sendto_if_src+0x1b4>)
 80134ca:	f000 fb5b 	bl	8013b84 <iprintf>
 80134ce:	f06f 030f 	mvn.w	r3, #15
 80134d2:	e0a2      	b.n	801361a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80134d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d109      	bne.n	80134ee <udp_sendto_if_src+0x76>
 80134da:	4b52      	ldr	r3, [pc, #328]	@ (8013624 <udp_sendto_if_src+0x1ac>)
 80134dc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80134e0:	4955      	ldr	r1, [pc, #340]	@ (8013638 <udp_sendto_if_src+0x1c0>)
 80134e2:	4852      	ldr	r0, [pc, #328]	@ (801362c <udp_sendto_if_src+0x1b4>)
 80134e4:	f000 fb4e 	bl	8013b84 <iprintf>
 80134e8:	f06f 030f 	mvn.w	r3, #15
 80134ec:	e095      	b.n	801361a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80134ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d109      	bne.n	8013508 <udp_sendto_if_src+0x90>
 80134f4:	4b4b      	ldr	r3, [pc, #300]	@ (8013624 <udp_sendto_if_src+0x1ac>)
 80134f6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80134fa:	4950      	ldr	r1, [pc, #320]	@ (801363c <udp_sendto_if_src+0x1c4>)
 80134fc:	484b      	ldr	r0, [pc, #300]	@ (801362c <udp_sendto_if_src+0x1b4>)
 80134fe:	f000 fb41 	bl	8013b84 <iprintf>
 8013502:	f06f 030f 	mvn.w	r3, #15
 8013506:	e088      	b.n	801361a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	8a5b      	ldrh	r3, [r3, #18]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d10f      	bne.n	8013530 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013510:	68f9      	ldr	r1, [r7, #12]
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	8a5b      	ldrh	r3, [r3, #18]
 8013516:	461a      	mov	r2, r3
 8013518:	68f8      	ldr	r0, [r7, #12]
 801351a:	f000 f893 	bl	8013644 <udp_bind>
 801351e:	4603      	mov	r3, r0
 8013520:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013522:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d002      	beq.n	8013530 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801352a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801352e:	e074      	b.n	801361a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	891b      	ldrh	r3, [r3, #8]
 8013534:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013538:	4293      	cmp	r3, r2
 801353a:	d902      	bls.n	8013542 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801353c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013540:	e06b      	b.n	801361a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013542:	2108      	movs	r1, #8
 8013544:	68b8      	ldr	r0, [r7, #8]
 8013546:	f7f9 ff8b 	bl	800d460 <pbuf_add_header>
 801354a:	4603      	mov	r3, r0
 801354c:	2b00      	cmp	r3, #0
 801354e:	d015      	beq.n	801357c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013550:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013554:	2108      	movs	r1, #8
 8013556:	2022      	movs	r0, #34	@ 0x22
 8013558:	f7f9 fd34 	bl	800cfc4 <pbuf_alloc>
 801355c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801355e:	69fb      	ldr	r3, [r7, #28]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d102      	bne.n	801356a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013568:	e057      	b.n	801361a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	891b      	ldrh	r3, [r3, #8]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d006      	beq.n	8013580 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013572:	68b9      	ldr	r1, [r7, #8]
 8013574:	69f8      	ldr	r0, [r7, #28]
 8013576:	f7fa f921 	bl	800d7bc <pbuf_chain>
 801357a:	e001      	b.n	8013580 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	895b      	ldrh	r3, [r3, #10]
 8013584:	2b07      	cmp	r3, #7
 8013586:	d806      	bhi.n	8013596 <udp_sendto_if_src+0x11e>
 8013588:	4b26      	ldr	r3, [pc, #152]	@ (8013624 <udp_sendto_if_src+0x1ac>)
 801358a:	f240 320d 	movw	r2, #781	@ 0x30d
 801358e:	492c      	ldr	r1, [pc, #176]	@ (8013640 <udp_sendto_if_src+0x1c8>)
 8013590:	4826      	ldr	r0, [pc, #152]	@ (801362c <udp_sendto_if_src+0x1b4>)
 8013592:	f000 faf7 	bl	8013b84 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013596:	69fb      	ldr	r3, [r7, #28]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	8a5b      	ldrh	r3, [r3, #18]
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f4 fa35 	bl	8007a10 <lwip_htons>
 80135a6:	4603      	mov	r3, r0
 80135a8:	461a      	mov	r2, r3
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80135ae:	887b      	ldrh	r3, [r7, #2]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7f4 fa2d 	bl	8007a10 <lwip_htons>
 80135b6:	4603      	mov	r3, r0
 80135b8:	461a      	mov	r2, r3
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	2200      	movs	r2, #0
 80135c2:	719a      	strb	r2, [r3, #6]
 80135c4:	2200      	movs	r2, #0
 80135c6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	891b      	ldrh	r3, [r3, #8]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7f4 fa1f 	bl	8007a10 <lwip_htons>
 80135d2:	4603      	mov	r3, r0
 80135d4:	461a      	mov	r2, r3
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80135da:	2311      	movs	r3, #17
 80135dc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	7adb      	ldrb	r3, [r3, #11]
 80135e2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	7a9b      	ldrb	r3, [r3, #10]
 80135e8:	7cb9      	ldrb	r1, [r7, #18]
 80135ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80135ec:	9202      	str	r2, [sp, #8]
 80135ee:	7cfa      	ldrb	r2, [r7, #19]
 80135f0:	9201      	str	r2, [sp, #4]
 80135f2:	9300      	str	r3, [sp, #0]
 80135f4:	460b      	mov	r3, r1
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80135fa:	69f8      	ldr	r0, [r7, #28]
 80135fc:	f7f7 fd76 	bl	800b0ec <ip4_output_if_src>
 8013600:	4603      	mov	r3, r0
 8013602:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013604:	69fa      	ldr	r2, [r7, #28]
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	429a      	cmp	r2, r3
 801360a:	d004      	beq.n	8013616 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801360c:	69f8      	ldr	r0, [r7, #28]
 801360e:	f7f9 ffbd 	bl	800d58c <pbuf_free>
    q = NULL;
 8013612:	2300      	movs	r3, #0
 8013614:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013616:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801361a:	4618      	mov	r0, r3
 801361c:	3720      	adds	r7, #32
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	08017800 	.word	0x08017800
 8013628:	08017a28 	.word	0x08017a28
 801362c:	08017890 	.word	0x08017890
 8013630:	08017a48 	.word	0x08017a48
 8013634:	08017a68 	.word	0x08017a68
 8013638:	08017a8c 	.word	0x08017a8c
 801363c:	08017ab0 	.word	0x08017ab0
 8013640:	08017ad4 	.word	0x08017ad4

08013644 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b086      	sub	sp, #24
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	4613      	mov	r3, r2
 8013650:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d101      	bne.n	801365c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013658:	4b39      	ldr	r3, [pc, #228]	@ (8013740 <udp_bind+0xfc>)
 801365a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d109      	bne.n	8013676 <udp_bind+0x32>
 8013662:	4b38      	ldr	r3, [pc, #224]	@ (8013744 <udp_bind+0x100>)
 8013664:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013668:	4937      	ldr	r1, [pc, #220]	@ (8013748 <udp_bind+0x104>)
 801366a:	4838      	ldr	r0, [pc, #224]	@ (801374c <udp_bind+0x108>)
 801366c:	f000 fa8a 	bl	8013b84 <iprintf>
 8013670:	f06f 030f 	mvn.w	r3, #15
 8013674:	e060      	b.n	8013738 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013676:	2300      	movs	r3, #0
 8013678:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801367a:	4b35      	ldr	r3, [pc, #212]	@ (8013750 <udp_bind+0x10c>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	617b      	str	r3, [r7, #20]
 8013680:	e009      	b.n	8013696 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013682:	68fa      	ldr	r2, [r7, #12]
 8013684:	697b      	ldr	r3, [r7, #20]
 8013686:	429a      	cmp	r2, r3
 8013688:	d102      	bne.n	8013690 <udp_bind+0x4c>
      rebind = 1;
 801368a:	2301      	movs	r3, #1
 801368c:	74fb      	strb	r3, [r7, #19]
      break;
 801368e:	e005      	b.n	801369c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	617b      	str	r3, [r7, #20]
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d1f2      	bne.n	8013682 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801369c:	88fb      	ldrh	r3, [r7, #6]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d109      	bne.n	80136b6 <udp_bind+0x72>
    port = udp_new_port();
 80136a2:	f7ff fcc5 	bl	8013030 <udp_new_port>
 80136a6:	4603      	mov	r3, r0
 80136a8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80136aa:	88fb      	ldrh	r3, [r7, #6]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d12c      	bne.n	801370a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80136b0:	f06f 0307 	mvn.w	r3, #7
 80136b4:	e040      	b.n	8013738 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80136b6:	4b26      	ldr	r3, [pc, #152]	@ (8013750 <udp_bind+0x10c>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	617b      	str	r3, [r7, #20]
 80136bc:	e022      	b.n	8013704 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80136be:	68fa      	ldr	r2, [r7, #12]
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d01b      	beq.n	80136fe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	8a5b      	ldrh	r3, [r3, #18]
 80136ca:	88fa      	ldrh	r2, [r7, #6]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d116      	bne.n	80136fe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	681a      	ldr	r2, [r3, #0]
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80136d8:	429a      	cmp	r2, r3
 80136da:	d00d      	beq.n	80136f8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d00a      	beq.n	80136f8 <udp_bind+0xb4>
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d006      	beq.n	80136f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80136ea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d003      	beq.n	80136f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d102      	bne.n	80136fe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80136f8:	f06f 0307 	mvn.w	r3, #7
 80136fc:	e01c      	b.n	8013738 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	617b      	str	r3, [r7, #20]
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d1d9      	bne.n	80136be <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d002      	beq.n	8013716 <udp_bind+0xd2>
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	e000      	b.n	8013718 <udp_bind+0xd4>
 8013716:	2300      	movs	r3, #0
 8013718:	68fa      	ldr	r2, [r7, #12]
 801371a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	88fa      	ldrh	r2, [r7, #6]
 8013720:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013722:	7cfb      	ldrb	r3, [r7, #19]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d106      	bne.n	8013736 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013728:	4b09      	ldr	r3, [pc, #36]	@ (8013750 <udp_bind+0x10c>)
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013730:	4a07      	ldr	r2, [pc, #28]	@ (8013750 <udp_bind+0x10c>)
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013736:	2300      	movs	r3, #0
}
 8013738:	4618      	mov	r0, r3
 801373a:	3718      	adds	r7, #24
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	08017bf4 	.word	0x08017bf4
 8013744:	08017800 	.word	0x08017800
 8013748:	08017b04 	.word	0x08017b04
 801374c:	08017890 	.word	0x08017890
 8013750:	24007cf0 	.word	0x24007cf0

08013754 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b086      	sub	sp, #24
 8013758:	af00      	add	r7, sp, #0
 801375a:	60f8      	str	r0, [r7, #12]
 801375c:	60b9      	str	r1, [r7, #8]
 801375e:	4613      	mov	r3, r2
 8013760:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d109      	bne.n	801377c <udp_connect+0x28>
 8013768:	4b2c      	ldr	r3, [pc, #176]	@ (801381c <udp_connect+0xc8>)
 801376a:	f240 4235 	movw	r2, #1077	@ 0x435
 801376e:	492c      	ldr	r1, [pc, #176]	@ (8013820 <udp_connect+0xcc>)
 8013770:	482c      	ldr	r0, [pc, #176]	@ (8013824 <udp_connect+0xd0>)
 8013772:	f000 fa07 	bl	8013b84 <iprintf>
 8013776:	f06f 030f 	mvn.w	r3, #15
 801377a:	e04b      	b.n	8013814 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d109      	bne.n	8013796 <udp_connect+0x42>
 8013782:	4b26      	ldr	r3, [pc, #152]	@ (801381c <udp_connect+0xc8>)
 8013784:	f240 4236 	movw	r2, #1078	@ 0x436
 8013788:	4927      	ldr	r1, [pc, #156]	@ (8013828 <udp_connect+0xd4>)
 801378a:	4826      	ldr	r0, [pc, #152]	@ (8013824 <udp_connect+0xd0>)
 801378c:	f000 f9fa 	bl	8013b84 <iprintf>
 8013790:	f06f 030f 	mvn.w	r3, #15
 8013794:	e03e      	b.n	8013814 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	8a5b      	ldrh	r3, [r3, #18]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d10f      	bne.n	80137be <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801379e:	68f9      	ldr	r1, [r7, #12]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	8a5b      	ldrh	r3, [r3, #18]
 80137a4:	461a      	mov	r2, r3
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f7ff ff4c 	bl	8013644 <udp_bind>
 80137ac:	4603      	mov	r3, r0
 80137ae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80137b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d002      	beq.n	80137be <udp_connect+0x6a>
      return err;
 80137b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80137bc:	e02a      	b.n	8013814 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <udp_connect+0x76>
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	e000      	b.n	80137cc <udp_connect+0x78>
 80137ca:	2300      	movs	r3, #0
 80137cc:	68fa      	ldr	r2, [r7, #12]
 80137ce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	88fa      	ldrh	r2, [r7, #6]
 80137d4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	7c1b      	ldrb	r3, [r3, #16]
 80137da:	f043 0304 	orr.w	r3, r3, #4
 80137de:	b2da      	uxtb	r2, r3
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137e4:	4b11      	ldr	r3, [pc, #68]	@ (801382c <udp_connect+0xd8>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	617b      	str	r3, [r7, #20]
 80137ea:	e008      	b.n	80137fe <udp_connect+0xaa>
    if (pcb == ipcb) {
 80137ec:	68fa      	ldr	r2, [r7, #12]
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d101      	bne.n	80137f8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80137f4:	2300      	movs	r3, #0
 80137f6:	e00d      	b.n	8013814 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	617b      	str	r3, [r7, #20]
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d1f3      	bne.n	80137ec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013804:	4b09      	ldr	r3, [pc, #36]	@ (801382c <udp_connect+0xd8>)
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801380c:	4a07      	ldr	r2, [pc, #28]	@ (801382c <udp_connect+0xd8>)
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013812:	2300      	movs	r3, #0
}
 8013814:	4618      	mov	r0, r3
 8013816:	3718      	adds	r7, #24
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	08017800 	.word	0x08017800
 8013820:	08017b1c 	.word	0x08017b1c
 8013824:	08017890 	.word	0x08017890
 8013828:	08017b38 	.word	0x08017b38
 801382c:	24007cf0 	.word	0x24007cf0

08013830 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d107      	bne.n	8013852 <udp_recv+0x22>
 8013842:	4b08      	ldr	r3, [pc, #32]	@ (8013864 <udp_recv+0x34>)
 8013844:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013848:	4907      	ldr	r1, [pc, #28]	@ (8013868 <udp_recv+0x38>)
 801384a:	4808      	ldr	r0, [pc, #32]	@ (801386c <udp_recv+0x3c>)
 801384c:	f000 f99a 	bl	8013b84 <iprintf>
 8013850:	e005      	b.n	801385e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	68ba      	ldr	r2, [r7, #8]
 8013856:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	687a      	ldr	r2, [r7, #4]
 801385c:	61da      	str	r2, [r3, #28]
}
 801385e:	3710      	adds	r7, #16
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	08017800 	.word	0x08017800
 8013868:	08017b70 	.word	0x08017b70
 801386c:	08017890 	.word	0x08017890

08013870 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d107      	bne.n	801388e <udp_remove+0x1e>
 801387e:	4b19      	ldr	r3, [pc, #100]	@ (80138e4 <udp_remove+0x74>)
 8013880:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013884:	4918      	ldr	r1, [pc, #96]	@ (80138e8 <udp_remove+0x78>)
 8013886:	4819      	ldr	r0, [pc, #100]	@ (80138ec <udp_remove+0x7c>)
 8013888:	f000 f97c 	bl	8013b84 <iprintf>
 801388c:	e026      	b.n	80138dc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801388e:	4b18      	ldr	r3, [pc, #96]	@ (80138f0 <udp_remove+0x80>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	687a      	ldr	r2, [r7, #4]
 8013894:	429a      	cmp	r2, r3
 8013896:	d105      	bne.n	80138a4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013898:	4b15      	ldr	r3, [pc, #84]	@ (80138f0 <udp_remove+0x80>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	68db      	ldr	r3, [r3, #12]
 801389e:	4a14      	ldr	r2, [pc, #80]	@ (80138f0 <udp_remove+0x80>)
 80138a0:	6013      	str	r3, [r2, #0]
 80138a2:	e017      	b.n	80138d4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80138a4:	4b12      	ldr	r3, [pc, #72]	@ (80138f0 <udp_remove+0x80>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	60fb      	str	r3, [r7, #12]
 80138aa:	e010      	b.n	80138ce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d009      	beq.n	80138c8 <udp_remove+0x58>
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	68db      	ldr	r3, [r3, #12]
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d104      	bne.n	80138c8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	68da      	ldr	r2, [r3, #12]
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	60da      	str	r2, [r3, #12]
        break;
 80138c6:	e005      	b.n	80138d4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	68db      	ldr	r3, [r3, #12]
 80138cc:	60fb      	str	r3, [r7, #12]
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d1eb      	bne.n	80138ac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80138d4:	6879      	ldr	r1, [r7, #4]
 80138d6:	2000      	movs	r0, #0
 80138d8:	f7f8 ffd6 	bl	800c888 <memp_free>
}
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	08017800 	.word	0x08017800
 80138e8:	08017b88 	.word	0x08017b88
 80138ec:	08017890 	.word	0x08017890
 80138f0:	24007cf0 	.word	0x24007cf0

080138f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80138fa:	2000      	movs	r0, #0
 80138fc:	f7f8 ff54 	bl	800c7a8 <memp_malloc>
 8013900:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d007      	beq.n	8013918 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013908:	2220      	movs	r2, #32
 801390a:	2100      	movs	r1, #0
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f000 fa91 	bl	8013e34 <memset>
    pcb->ttl = UDP_TTL;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	22ff      	movs	r2, #255	@ 0xff
 8013916:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013918:	687b      	ldr	r3, [r7, #4]
}
 801391a:	4618      	mov	r0, r3
 801391c:	3708      	adds	r7, #8
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
	...

08013924 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013924:	b480      	push	{r7}
 8013926:	b085      	sub	sp, #20
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d01e      	beq.n	8013972 <udp_netif_ip_addr_changed+0x4e>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d01a      	beq.n	8013972 <udp_netif_ip_addr_changed+0x4e>
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d017      	beq.n	8013972 <udp_netif_ip_addr_changed+0x4e>
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d013      	beq.n	8013972 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801394a:	4b0d      	ldr	r3, [pc, #52]	@ (8013980 <udp_netif_ip_addr_changed+0x5c>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	60fb      	str	r3, [r7, #12]
 8013950:	e00c      	b.n	801396c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	429a      	cmp	r2, r3
 801395c:	d103      	bne.n	8013966 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	68db      	ldr	r3, [r3, #12]
 801396a:	60fb      	str	r3, [r7, #12]
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d1ef      	bne.n	8013952 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013972:	bf00      	nop
 8013974:	3714      	adds	r7, #20
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop
 8013980:	24007cf0 	.word	0x24007cf0

08013984 <rand>:
 8013984:	4b16      	ldr	r3, [pc, #88]	@ (80139e0 <rand+0x5c>)
 8013986:	b510      	push	{r4, lr}
 8013988:	681c      	ldr	r4, [r3, #0]
 801398a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801398c:	b9b3      	cbnz	r3, 80139bc <rand+0x38>
 801398e:	2018      	movs	r0, #24
 8013990:	f000 fb3c 	bl	801400c <malloc>
 8013994:	4602      	mov	r2, r0
 8013996:	6320      	str	r0, [r4, #48]	@ 0x30
 8013998:	b920      	cbnz	r0, 80139a4 <rand+0x20>
 801399a:	4b12      	ldr	r3, [pc, #72]	@ (80139e4 <rand+0x60>)
 801399c:	4812      	ldr	r0, [pc, #72]	@ (80139e8 <rand+0x64>)
 801399e:	2152      	movs	r1, #82	@ 0x52
 80139a0:	f000 facc 	bl	8013f3c <__assert_func>
 80139a4:	4911      	ldr	r1, [pc, #68]	@ (80139ec <rand+0x68>)
 80139a6:	4b12      	ldr	r3, [pc, #72]	@ (80139f0 <rand+0x6c>)
 80139a8:	e9c0 1300 	strd	r1, r3, [r0]
 80139ac:	4b11      	ldr	r3, [pc, #68]	@ (80139f4 <rand+0x70>)
 80139ae:	6083      	str	r3, [r0, #8]
 80139b0:	230b      	movs	r3, #11
 80139b2:	8183      	strh	r3, [r0, #12]
 80139b4:	2100      	movs	r1, #0
 80139b6:	2001      	movs	r0, #1
 80139b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80139bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80139be:	480e      	ldr	r0, [pc, #56]	@ (80139f8 <rand+0x74>)
 80139c0:	690b      	ldr	r3, [r1, #16]
 80139c2:	694c      	ldr	r4, [r1, #20]
 80139c4:	4a0d      	ldr	r2, [pc, #52]	@ (80139fc <rand+0x78>)
 80139c6:	4358      	muls	r0, r3
 80139c8:	fb02 0004 	mla	r0, r2, r4, r0
 80139cc:	fba3 3202 	umull	r3, r2, r3, r2
 80139d0:	3301      	adds	r3, #1
 80139d2:	eb40 0002 	adc.w	r0, r0, r2
 80139d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80139da:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80139de:	bd10      	pop	{r4, pc}
 80139e0:	24000040 	.word	0x24000040
 80139e4:	08017cdc 	.word	0x08017cdc
 80139e8:	08017cf3 	.word	0x08017cf3
 80139ec:	abcd330e 	.word	0xabcd330e
 80139f0:	e66d1234 	.word	0xe66d1234
 80139f4:	0005deec 	.word	0x0005deec
 80139f8:	5851f42d 	.word	0x5851f42d
 80139fc:	4c957f2d 	.word	0x4c957f2d

08013a00 <std>:
 8013a00:	2300      	movs	r3, #0
 8013a02:	b510      	push	{r4, lr}
 8013a04:	4604      	mov	r4, r0
 8013a06:	e9c0 3300 	strd	r3, r3, [r0]
 8013a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013a0e:	6083      	str	r3, [r0, #8]
 8013a10:	8181      	strh	r1, [r0, #12]
 8013a12:	6643      	str	r3, [r0, #100]	@ 0x64
 8013a14:	81c2      	strh	r2, [r0, #14]
 8013a16:	6183      	str	r3, [r0, #24]
 8013a18:	4619      	mov	r1, r3
 8013a1a:	2208      	movs	r2, #8
 8013a1c:	305c      	adds	r0, #92	@ 0x5c
 8013a1e:	f000 fa09 	bl	8013e34 <memset>
 8013a22:	4b0d      	ldr	r3, [pc, #52]	@ (8013a58 <std+0x58>)
 8013a24:	6263      	str	r3, [r4, #36]	@ 0x24
 8013a26:	4b0d      	ldr	r3, [pc, #52]	@ (8013a5c <std+0x5c>)
 8013a28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8013a60 <std+0x60>)
 8013a2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8013a64 <std+0x64>)
 8013a30:	6323      	str	r3, [r4, #48]	@ 0x30
 8013a32:	4b0d      	ldr	r3, [pc, #52]	@ (8013a68 <std+0x68>)
 8013a34:	6224      	str	r4, [r4, #32]
 8013a36:	429c      	cmp	r4, r3
 8013a38:	d006      	beq.n	8013a48 <std+0x48>
 8013a3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013a3e:	4294      	cmp	r4, r2
 8013a40:	d002      	beq.n	8013a48 <std+0x48>
 8013a42:	33d0      	adds	r3, #208	@ 0xd0
 8013a44:	429c      	cmp	r4, r3
 8013a46:	d105      	bne.n	8013a54 <std+0x54>
 8013a48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a50:	f000 ba62 	b.w	8013f18 <__retarget_lock_init_recursive>
 8013a54:	bd10      	pop	{r4, pc}
 8013a56:	bf00      	nop
 8013a58:	08013c65 	.word	0x08013c65
 8013a5c:	08013c87 	.word	0x08013c87
 8013a60:	08013cbf 	.word	0x08013cbf
 8013a64:	08013ce3 	.word	0x08013ce3
 8013a68:	24007cf4 	.word	0x24007cf4

08013a6c <stdio_exit_handler>:
 8013a6c:	4a02      	ldr	r2, [pc, #8]	@ (8013a78 <stdio_exit_handler+0xc>)
 8013a6e:	4903      	ldr	r1, [pc, #12]	@ (8013a7c <stdio_exit_handler+0x10>)
 8013a70:	4803      	ldr	r0, [pc, #12]	@ (8013a80 <stdio_exit_handler+0x14>)
 8013a72:	f000 b869 	b.w	8013b48 <_fwalk_sglue>
 8013a76:	bf00      	nop
 8013a78:	24000034 	.word	0x24000034
 8013a7c:	08014821 	.word	0x08014821
 8013a80:	24000044 	.word	0x24000044

08013a84 <cleanup_stdio>:
 8013a84:	6841      	ldr	r1, [r0, #4]
 8013a86:	4b0c      	ldr	r3, [pc, #48]	@ (8013ab8 <cleanup_stdio+0x34>)
 8013a88:	4299      	cmp	r1, r3
 8013a8a:	b510      	push	{r4, lr}
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	d001      	beq.n	8013a94 <cleanup_stdio+0x10>
 8013a90:	f000 fec6 	bl	8014820 <_fflush_r>
 8013a94:	68a1      	ldr	r1, [r4, #8]
 8013a96:	4b09      	ldr	r3, [pc, #36]	@ (8013abc <cleanup_stdio+0x38>)
 8013a98:	4299      	cmp	r1, r3
 8013a9a:	d002      	beq.n	8013aa2 <cleanup_stdio+0x1e>
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f000 febf 	bl	8014820 <_fflush_r>
 8013aa2:	68e1      	ldr	r1, [r4, #12]
 8013aa4:	4b06      	ldr	r3, [pc, #24]	@ (8013ac0 <cleanup_stdio+0x3c>)
 8013aa6:	4299      	cmp	r1, r3
 8013aa8:	d004      	beq.n	8013ab4 <cleanup_stdio+0x30>
 8013aaa:	4620      	mov	r0, r4
 8013aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ab0:	f000 beb6 	b.w	8014820 <_fflush_r>
 8013ab4:	bd10      	pop	{r4, pc}
 8013ab6:	bf00      	nop
 8013ab8:	24007cf4 	.word	0x24007cf4
 8013abc:	24007d5c 	.word	0x24007d5c
 8013ac0:	24007dc4 	.word	0x24007dc4

08013ac4 <global_stdio_init.part.0>:
 8013ac4:	b510      	push	{r4, lr}
 8013ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8013af4 <global_stdio_init.part.0+0x30>)
 8013ac8:	4c0b      	ldr	r4, [pc, #44]	@ (8013af8 <global_stdio_init.part.0+0x34>)
 8013aca:	4a0c      	ldr	r2, [pc, #48]	@ (8013afc <global_stdio_init.part.0+0x38>)
 8013acc:	601a      	str	r2, [r3, #0]
 8013ace:	4620      	mov	r0, r4
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	2104      	movs	r1, #4
 8013ad4:	f7ff ff94 	bl	8013a00 <std>
 8013ad8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013adc:	2201      	movs	r2, #1
 8013ade:	2109      	movs	r1, #9
 8013ae0:	f7ff ff8e 	bl	8013a00 <std>
 8013ae4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013ae8:	2202      	movs	r2, #2
 8013aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013aee:	2112      	movs	r1, #18
 8013af0:	f7ff bf86 	b.w	8013a00 <std>
 8013af4:	24007e2c 	.word	0x24007e2c
 8013af8:	24007cf4 	.word	0x24007cf4
 8013afc:	08013a6d 	.word	0x08013a6d

08013b00 <__sfp_lock_acquire>:
 8013b00:	4801      	ldr	r0, [pc, #4]	@ (8013b08 <__sfp_lock_acquire+0x8>)
 8013b02:	f000 ba0a 	b.w	8013f1a <__retarget_lock_acquire_recursive>
 8013b06:	bf00      	nop
 8013b08:	24007e35 	.word	0x24007e35

08013b0c <__sfp_lock_release>:
 8013b0c:	4801      	ldr	r0, [pc, #4]	@ (8013b14 <__sfp_lock_release+0x8>)
 8013b0e:	f000 ba05 	b.w	8013f1c <__retarget_lock_release_recursive>
 8013b12:	bf00      	nop
 8013b14:	24007e35 	.word	0x24007e35

08013b18 <__sinit>:
 8013b18:	b510      	push	{r4, lr}
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	f7ff fff0 	bl	8013b00 <__sfp_lock_acquire>
 8013b20:	6a23      	ldr	r3, [r4, #32]
 8013b22:	b11b      	cbz	r3, 8013b2c <__sinit+0x14>
 8013b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b28:	f7ff bff0 	b.w	8013b0c <__sfp_lock_release>
 8013b2c:	4b04      	ldr	r3, [pc, #16]	@ (8013b40 <__sinit+0x28>)
 8013b2e:	6223      	str	r3, [r4, #32]
 8013b30:	4b04      	ldr	r3, [pc, #16]	@ (8013b44 <__sinit+0x2c>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d1f5      	bne.n	8013b24 <__sinit+0xc>
 8013b38:	f7ff ffc4 	bl	8013ac4 <global_stdio_init.part.0>
 8013b3c:	e7f2      	b.n	8013b24 <__sinit+0xc>
 8013b3e:	bf00      	nop
 8013b40:	08013a85 	.word	0x08013a85
 8013b44:	24007e2c 	.word	0x24007e2c

08013b48 <_fwalk_sglue>:
 8013b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b4c:	4607      	mov	r7, r0
 8013b4e:	4688      	mov	r8, r1
 8013b50:	4614      	mov	r4, r2
 8013b52:	2600      	movs	r6, #0
 8013b54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b58:	f1b9 0901 	subs.w	r9, r9, #1
 8013b5c:	d505      	bpl.n	8013b6a <_fwalk_sglue+0x22>
 8013b5e:	6824      	ldr	r4, [r4, #0]
 8013b60:	2c00      	cmp	r4, #0
 8013b62:	d1f7      	bne.n	8013b54 <_fwalk_sglue+0xc>
 8013b64:	4630      	mov	r0, r6
 8013b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b6a:	89ab      	ldrh	r3, [r5, #12]
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	d907      	bls.n	8013b80 <_fwalk_sglue+0x38>
 8013b70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b74:	3301      	adds	r3, #1
 8013b76:	d003      	beq.n	8013b80 <_fwalk_sglue+0x38>
 8013b78:	4629      	mov	r1, r5
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	47c0      	blx	r8
 8013b7e:	4306      	orrs	r6, r0
 8013b80:	3568      	adds	r5, #104	@ 0x68
 8013b82:	e7e9      	b.n	8013b58 <_fwalk_sglue+0x10>

08013b84 <iprintf>:
 8013b84:	b40f      	push	{r0, r1, r2, r3}
 8013b86:	b507      	push	{r0, r1, r2, lr}
 8013b88:	4906      	ldr	r1, [pc, #24]	@ (8013ba4 <iprintf+0x20>)
 8013b8a:	ab04      	add	r3, sp, #16
 8013b8c:	6808      	ldr	r0, [r1, #0]
 8013b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b92:	6881      	ldr	r1, [r0, #8]
 8013b94:	9301      	str	r3, [sp, #4]
 8013b96:	f000 fb19 	bl	80141cc <_vfiprintf_r>
 8013b9a:	b003      	add	sp, #12
 8013b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ba0:	b004      	add	sp, #16
 8013ba2:	4770      	bx	lr
 8013ba4:	24000040 	.word	0x24000040

08013ba8 <_puts_r>:
 8013ba8:	6a03      	ldr	r3, [r0, #32]
 8013baa:	b570      	push	{r4, r5, r6, lr}
 8013bac:	6884      	ldr	r4, [r0, #8]
 8013bae:	4605      	mov	r5, r0
 8013bb0:	460e      	mov	r6, r1
 8013bb2:	b90b      	cbnz	r3, 8013bb8 <_puts_r+0x10>
 8013bb4:	f7ff ffb0 	bl	8013b18 <__sinit>
 8013bb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013bba:	07db      	lsls	r3, r3, #31
 8013bbc:	d405      	bmi.n	8013bca <_puts_r+0x22>
 8013bbe:	89a3      	ldrh	r3, [r4, #12]
 8013bc0:	0598      	lsls	r0, r3, #22
 8013bc2:	d402      	bmi.n	8013bca <_puts_r+0x22>
 8013bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bc6:	f000 f9a8 	bl	8013f1a <__retarget_lock_acquire_recursive>
 8013bca:	89a3      	ldrh	r3, [r4, #12]
 8013bcc:	0719      	lsls	r1, r3, #28
 8013bce:	d502      	bpl.n	8013bd6 <_puts_r+0x2e>
 8013bd0:	6923      	ldr	r3, [r4, #16]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d135      	bne.n	8013c42 <_puts_r+0x9a>
 8013bd6:	4621      	mov	r1, r4
 8013bd8:	4628      	mov	r0, r5
 8013bda:	f000 f8c5 	bl	8013d68 <__swsetup_r>
 8013bde:	b380      	cbz	r0, 8013c42 <_puts_r+0x9a>
 8013be0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013be4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013be6:	07da      	lsls	r2, r3, #31
 8013be8:	d405      	bmi.n	8013bf6 <_puts_r+0x4e>
 8013bea:	89a3      	ldrh	r3, [r4, #12]
 8013bec:	059b      	lsls	r3, r3, #22
 8013bee:	d402      	bmi.n	8013bf6 <_puts_r+0x4e>
 8013bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bf2:	f000 f993 	bl	8013f1c <__retarget_lock_release_recursive>
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	bd70      	pop	{r4, r5, r6, pc}
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	da04      	bge.n	8013c08 <_puts_r+0x60>
 8013bfe:	69a2      	ldr	r2, [r4, #24]
 8013c00:	429a      	cmp	r2, r3
 8013c02:	dc17      	bgt.n	8013c34 <_puts_r+0x8c>
 8013c04:	290a      	cmp	r1, #10
 8013c06:	d015      	beq.n	8013c34 <_puts_r+0x8c>
 8013c08:	6823      	ldr	r3, [r4, #0]
 8013c0a:	1c5a      	adds	r2, r3, #1
 8013c0c:	6022      	str	r2, [r4, #0]
 8013c0e:	7019      	strb	r1, [r3, #0]
 8013c10:	68a3      	ldr	r3, [r4, #8]
 8013c12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013c16:	3b01      	subs	r3, #1
 8013c18:	60a3      	str	r3, [r4, #8]
 8013c1a:	2900      	cmp	r1, #0
 8013c1c:	d1ed      	bne.n	8013bfa <_puts_r+0x52>
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	da11      	bge.n	8013c46 <_puts_r+0x9e>
 8013c22:	4622      	mov	r2, r4
 8013c24:	210a      	movs	r1, #10
 8013c26:	4628      	mov	r0, r5
 8013c28:	f000 f85f 	bl	8013cea <__swbuf_r>
 8013c2c:	3001      	adds	r0, #1
 8013c2e:	d0d7      	beq.n	8013be0 <_puts_r+0x38>
 8013c30:	250a      	movs	r5, #10
 8013c32:	e7d7      	b.n	8013be4 <_puts_r+0x3c>
 8013c34:	4622      	mov	r2, r4
 8013c36:	4628      	mov	r0, r5
 8013c38:	f000 f857 	bl	8013cea <__swbuf_r>
 8013c3c:	3001      	adds	r0, #1
 8013c3e:	d1e7      	bne.n	8013c10 <_puts_r+0x68>
 8013c40:	e7ce      	b.n	8013be0 <_puts_r+0x38>
 8013c42:	3e01      	subs	r6, #1
 8013c44:	e7e4      	b.n	8013c10 <_puts_r+0x68>
 8013c46:	6823      	ldr	r3, [r4, #0]
 8013c48:	1c5a      	adds	r2, r3, #1
 8013c4a:	6022      	str	r2, [r4, #0]
 8013c4c:	220a      	movs	r2, #10
 8013c4e:	701a      	strb	r2, [r3, #0]
 8013c50:	e7ee      	b.n	8013c30 <_puts_r+0x88>
	...

08013c54 <puts>:
 8013c54:	4b02      	ldr	r3, [pc, #8]	@ (8013c60 <puts+0xc>)
 8013c56:	4601      	mov	r1, r0
 8013c58:	6818      	ldr	r0, [r3, #0]
 8013c5a:	f7ff bfa5 	b.w	8013ba8 <_puts_r>
 8013c5e:	bf00      	nop
 8013c60:	24000040 	.word	0x24000040

08013c64 <__sread>:
 8013c64:	b510      	push	{r4, lr}
 8013c66:	460c      	mov	r4, r1
 8013c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c6c:	f000 f90c 	bl	8013e88 <_read_r>
 8013c70:	2800      	cmp	r0, #0
 8013c72:	bfab      	itete	ge
 8013c74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013c76:	89a3      	ldrhlt	r3, [r4, #12]
 8013c78:	181b      	addge	r3, r3, r0
 8013c7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013c7e:	bfac      	ite	ge
 8013c80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013c82:	81a3      	strhlt	r3, [r4, #12]
 8013c84:	bd10      	pop	{r4, pc}

08013c86 <__swrite>:
 8013c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c8a:	461f      	mov	r7, r3
 8013c8c:	898b      	ldrh	r3, [r1, #12]
 8013c8e:	05db      	lsls	r3, r3, #23
 8013c90:	4605      	mov	r5, r0
 8013c92:	460c      	mov	r4, r1
 8013c94:	4616      	mov	r6, r2
 8013c96:	d505      	bpl.n	8013ca4 <__swrite+0x1e>
 8013c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c9c:	2302      	movs	r3, #2
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	f000 f8e0 	bl	8013e64 <_lseek_r>
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013caa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013cae:	81a3      	strh	r3, [r4, #12]
 8013cb0:	4632      	mov	r2, r6
 8013cb2:	463b      	mov	r3, r7
 8013cb4:	4628      	mov	r0, r5
 8013cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cba:	f000 b8f7 	b.w	8013eac <_write_r>

08013cbe <__sseek>:
 8013cbe:	b510      	push	{r4, lr}
 8013cc0:	460c      	mov	r4, r1
 8013cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cc6:	f000 f8cd 	bl	8013e64 <_lseek_r>
 8013cca:	1c43      	adds	r3, r0, #1
 8013ccc:	89a3      	ldrh	r3, [r4, #12]
 8013cce:	bf15      	itete	ne
 8013cd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013cd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013cd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013cda:	81a3      	strheq	r3, [r4, #12]
 8013cdc:	bf18      	it	ne
 8013cde:	81a3      	strhne	r3, [r4, #12]
 8013ce0:	bd10      	pop	{r4, pc}

08013ce2 <__sclose>:
 8013ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ce6:	f000 b8ad 	b.w	8013e44 <_close_r>

08013cea <__swbuf_r>:
 8013cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cec:	460e      	mov	r6, r1
 8013cee:	4614      	mov	r4, r2
 8013cf0:	4605      	mov	r5, r0
 8013cf2:	b118      	cbz	r0, 8013cfc <__swbuf_r+0x12>
 8013cf4:	6a03      	ldr	r3, [r0, #32]
 8013cf6:	b90b      	cbnz	r3, 8013cfc <__swbuf_r+0x12>
 8013cf8:	f7ff ff0e 	bl	8013b18 <__sinit>
 8013cfc:	69a3      	ldr	r3, [r4, #24]
 8013cfe:	60a3      	str	r3, [r4, #8]
 8013d00:	89a3      	ldrh	r3, [r4, #12]
 8013d02:	071a      	lsls	r2, r3, #28
 8013d04:	d501      	bpl.n	8013d0a <__swbuf_r+0x20>
 8013d06:	6923      	ldr	r3, [r4, #16]
 8013d08:	b943      	cbnz	r3, 8013d1c <__swbuf_r+0x32>
 8013d0a:	4621      	mov	r1, r4
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	f000 f82b 	bl	8013d68 <__swsetup_r>
 8013d12:	b118      	cbz	r0, 8013d1c <__swbuf_r+0x32>
 8013d14:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013d18:	4638      	mov	r0, r7
 8013d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d1c:	6823      	ldr	r3, [r4, #0]
 8013d1e:	6922      	ldr	r2, [r4, #16]
 8013d20:	1a98      	subs	r0, r3, r2
 8013d22:	6963      	ldr	r3, [r4, #20]
 8013d24:	b2f6      	uxtb	r6, r6
 8013d26:	4283      	cmp	r3, r0
 8013d28:	4637      	mov	r7, r6
 8013d2a:	dc05      	bgt.n	8013d38 <__swbuf_r+0x4e>
 8013d2c:	4621      	mov	r1, r4
 8013d2e:	4628      	mov	r0, r5
 8013d30:	f000 fd76 	bl	8014820 <_fflush_r>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	d1ed      	bne.n	8013d14 <__swbuf_r+0x2a>
 8013d38:	68a3      	ldr	r3, [r4, #8]
 8013d3a:	3b01      	subs	r3, #1
 8013d3c:	60a3      	str	r3, [r4, #8]
 8013d3e:	6823      	ldr	r3, [r4, #0]
 8013d40:	1c5a      	adds	r2, r3, #1
 8013d42:	6022      	str	r2, [r4, #0]
 8013d44:	701e      	strb	r6, [r3, #0]
 8013d46:	6962      	ldr	r2, [r4, #20]
 8013d48:	1c43      	adds	r3, r0, #1
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d004      	beq.n	8013d58 <__swbuf_r+0x6e>
 8013d4e:	89a3      	ldrh	r3, [r4, #12]
 8013d50:	07db      	lsls	r3, r3, #31
 8013d52:	d5e1      	bpl.n	8013d18 <__swbuf_r+0x2e>
 8013d54:	2e0a      	cmp	r6, #10
 8013d56:	d1df      	bne.n	8013d18 <__swbuf_r+0x2e>
 8013d58:	4621      	mov	r1, r4
 8013d5a:	4628      	mov	r0, r5
 8013d5c:	f000 fd60 	bl	8014820 <_fflush_r>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d0d9      	beq.n	8013d18 <__swbuf_r+0x2e>
 8013d64:	e7d6      	b.n	8013d14 <__swbuf_r+0x2a>
	...

08013d68 <__swsetup_r>:
 8013d68:	b538      	push	{r3, r4, r5, lr}
 8013d6a:	4b29      	ldr	r3, [pc, #164]	@ (8013e10 <__swsetup_r+0xa8>)
 8013d6c:	4605      	mov	r5, r0
 8013d6e:	6818      	ldr	r0, [r3, #0]
 8013d70:	460c      	mov	r4, r1
 8013d72:	b118      	cbz	r0, 8013d7c <__swsetup_r+0x14>
 8013d74:	6a03      	ldr	r3, [r0, #32]
 8013d76:	b90b      	cbnz	r3, 8013d7c <__swsetup_r+0x14>
 8013d78:	f7ff fece 	bl	8013b18 <__sinit>
 8013d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d80:	0719      	lsls	r1, r3, #28
 8013d82:	d422      	bmi.n	8013dca <__swsetup_r+0x62>
 8013d84:	06da      	lsls	r2, r3, #27
 8013d86:	d407      	bmi.n	8013d98 <__swsetup_r+0x30>
 8013d88:	2209      	movs	r2, #9
 8013d8a:	602a      	str	r2, [r5, #0]
 8013d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d90:	81a3      	strh	r3, [r4, #12]
 8013d92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d96:	e033      	b.n	8013e00 <__swsetup_r+0x98>
 8013d98:	0758      	lsls	r0, r3, #29
 8013d9a:	d512      	bpl.n	8013dc2 <__swsetup_r+0x5a>
 8013d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013d9e:	b141      	cbz	r1, 8013db2 <__swsetup_r+0x4a>
 8013da0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013da4:	4299      	cmp	r1, r3
 8013da6:	d002      	beq.n	8013dae <__swsetup_r+0x46>
 8013da8:	4628      	mov	r0, r5
 8013daa:	f000 f8e5 	bl	8013f78 <_free_r>
 8013dae:	2300      	movs	r3, #0
 8013db0:	6363      	str	r3, [r4, #52]	@ 0x34
 8013db2:	89a3      	ldrh	r3, [r4, #12]
 8013db4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013db8:	81a3      	strh	r3, [r4, #12]
 8013dba:	2300      	movs	r3, #0
 8013dbc:	6063      	str	r3, [r4, #4]
 8013dbe:	6923      	ldr	r3, [r4, #16]
 8013dc0:	6023      	str	r3, [r4, #0]
 8013dc2:	89a3      	ldrh	r3, [r4, #12]
 8013dc4:	f043 0308 	orr.w	r3, r3, #8
 8013dc8:	81a3      	strh	r3, [r4, #12]
 8013dca:	6923      	ldr	r3, [r4, #16]
 8013dcc:	b94b      	cbnz	r3, 8013de2 <__swsetup_r+0x7a>
 8013dce:	89a3      	ldrh	r3, [r4, #12]
 8013dd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013dd8:	d003      	beq.n	8013de2 <__swsetup_r+0x7a>
 8013dda:	4621      	mov	r1, r4
 8013ddc:	4628      	mov	r0, r5
 8013dde:	f000 fd7f 	bl	80148e0 <__smakebuf_r>
 8013de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013de6:	f013 0201 	ands.w	r2, r3, #1
 8013dea:	d00a      	beq.n	8013e02 <__swsetup_r+0x9a>
 8013dec:	2200      	movs	r2, #0
 8013dee:	60a2      	str	r2, [r4, #8]
 8013df0:	6962      	ldr	r2, [r4, #20]
 8013df2:	4252      	negs	r2, r2
 8013df4:	61a2      	str	r2, [r4, #24]
 8013df6:	6922      	ldr	r2, [r4, #16]
 8013df8:	b942      	cbnz	r2, 8013e0c <__swsetup_r+0xa4>
 8013dfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013dfe:	d1c5      	bne.n	8013d8c <__swsetup_r+0x24>
 8013e00:	bd38      	pop	{r3, r4, r5, pc}
 8013e02:	0799      	lsls	r1, r3, #30
 8013e04:	bf58      	it	pl
 8013e06:	6962      	ldrpl	r2, [r4, #20]
 8013e08:	60a2      	str	r2, [r4, #8]
 8013e0a:	e7f4      	b.n	8013df6 <__swsetup_r+0x8e>
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	e7f7      	b.n	8013e00 <__swsetup_r+0x98>
 8013e10:	24000040 	.word	0x24000040

08013e14 <memcmp>:
 8013e14:	b510      	push	{r4, lr}
 8013e16:	3901      	subs	r1, #1
 8013e18:	4402      	add	r2, r0
 8013e1a:	4290      	cmp	r0, r2
 8013e1c:	d101      	bne.n	8013e22 <memcmp+0xe>
 8013e1e:	2000      	movs	r0, #0
 8013e20:	e005      	b.n	8013e2e <memcmp+0x1a>
 8013e22:	7803      	ldrb	r3, [r0, #0]
 8013e24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013e28:	42a3      	cmp	r3, r4
 8013e2a:	d001      	beq.n	8013e30 <memcmp+0x1c>
 8013e2c:	1b18      	subs	r0, r3, r4
 8013e2e:	bd10      	pop	{r4, pc}
 8013e30:	3001      	adds	r0, #1
 8013e32:	e7f2      	b.n	8013e1a <memcmp+0x6>

08013e34 <memset>:
 8013e34:	4402      	add	r2, r0
 8013e36:	4603      	mov	r3, r0
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d100      	bne.n	8013e3e <memset+0xa>
 8013e3c:	4770      	bx	lr
 8013e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8013e42:	e7f9      	b.n	8013e38 <memset+0x4>

08013e44 <_close_r>:
 8013e44:	b538      	push	{r3, r4, r5, lr}
 8013e46:	4d06      	ldr	r5, [pc, #24]	@ (8013e60 <_close_r+0x1c>)
 8013e48:	2300      	movs	r3, #0
 8013e4a:	4604      	mov	r4, r0
 8013e4c:	4608      	mov	r0, r1
 8013e4e:	602b      	str	r3, [r5, #0]
 8013e50:	f7ec ff26 	bl	8000ca0 <_close>
 8013e54:	1c43      	adds	r3, r0, #1
 8013e56:	d102      	bne.n	8013e5e <_close_r+0x1a>
 8013e58:	682b      	ldr	r3, [r5, #0]
 8013e5a:	b103      	cbz	r3, 8013e5e <_close_r+0x1a>
 8013e5c:	6023      	str	r3, [r4, #0]
 8013e5e:	bd38      	pop	{r3, r4, r5, pc}
 8013e60:	24007e30 	.word	0x24007e30

08013e64 <_lseek_r>:
 8013e64:	b538      	push	{r3, r4, r5, lr}
 8013e66:	4d07      	ldr	r5, [pc, #28]	@ (8013e84 <_lseek_r+0x20>)
 8013e68:	4604      	mov	r4, r0
 8013e6a:	4608      	mov	r0, r1
 8013e6c:	4611      	mov	r1, r2
 8013e6e:	2200      	movs	r2, #0
 8013e70:	602a      	str	r2, [r5, #0]
 8013e72:	461a      	mov	r2, r3
 8013e74:	f7ec ff3b 	bl	8000cee <_lseek>
 8013e78:	1c43      	adds	r3, r0, #1
 8013e7a:	d102      	bne.n	8013e82 <_lseek_r+0x1e>
 8013e7c:	682b      	ldr	r3, [r5, #0]
 8013e7e:	b103      	cbz	r3, 8013e82 <_lseek_r+0x1e>
 8013e80:	6023      	str	r3, [r4, #0]
 8013e82:	bd38      	pop	{r3, r4, r5, pc}
 8013e84:	24007e30 	.word	0x24007e30

08013e88 <_read_r>:
 8013e88:	b538      	push	{r3, r4, r5, lr}
 8013e8a:	4d07      	ldr	r5, [pc, #28]	@ (8013ea8 <_read_r+0x20>)
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	4608      	mov	r0, r1
 8013e90:	4611      	mov	r1, r2
 8013e92:	2200      	movs	r2, #0
 8013e94:	602a      	str	r2, [r5, #0]
 8013e96:	461a      	mov	r2, r3
 8013e98:	f7ec fee5 	bl	8000c66 <_read>
 8013e9c:	1c43      	adds	r3, r0, #1
 8013e9e:	d102      	bne.n	8013ea6 <_read_r+0x1e>
 8013ea0:	682b      	ldr	r3, [r5, #0]
 8013ea2:	b103      	cbz	r3, 8013ea6 <_read_r+0x1e>
 8013ea4:	6023      	str	r3, [r4, #0]
 8013ea6:	bd38      	pop	{r3, r4, r5, pc}
 8013ea8:	24007e30 	.word	0x24007e30

08013eac <_write_r>:
 8013eac:	b538      	push	{r3, r4, r5, lr}
 8013eae:	4d07      	ldr	r5, [pc, #28]	@ (8013ecc <_write_r+0x20>)
 8013eb0:	4604      	mov	r4, r0
 8013eb2:	4608      	mov	r0, r1
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	602a      	str	r2, [r5, #0]
 8013eba:	461a      	mov	r2, r3
 8013ebc:	f7ec fc6e 	bl	800079c <_write>
 8013ec0:	1c43      	adds	r3, r0, #1
 8013ec2:	d102      	bne.n	8013eca <_write_r+0x1e>
 8013ec4:	682b      	ldr	r3, [r5, #0]
 8013ec6:	b103      	cbz	r3, 8013eca <_write_r+0x1e>
 8013ec8:	6023      	str	r3, [r4, #0]
 8013eca:	bd38      	pop	{r3, r4, r5, pc}
 8013ecc:	24007e30 	.word	0x24007e30

08013ed0 <__libc_init_array>:
 8013ed0:	b570      	push	{r4, r5, r6, lr}
 8013ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8013f08 <__libc_init_array+0x38>)
 8013ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8013f0c <__libc_init_array+0x3c>)
 8013ed6:	1b64      	subs	r4, r4, r5
 8013ed8:	10a4      	asrs	r4, r4, #2
 8013eda:	2600      	movs	r6, #0
 8013edc:	42a6      	cmp	r6, r4
 8013ede:	d109      	bne.n	8013ef4 <__libc_init_array+0x24>
 8013ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8013f10 <__libc_init_array+0x40>)
 8013ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8013f14 <__libc_init_array+0x44>)
 8013ee4:	f000 fdb6 	bl	8014a54 <_init>
 8013ee8:	1b64      	subs	r4, r4, r5
 8013eea:	10a4      	asrs	r4, r4, #2
 8013eec:	2600      	movs	r6, #0
 8013eee:	42a6      	cmp	r6, r4
 8013ef0:	d105      	bne.n	8013efe <__libc_init_array+0x2e>
 8013ef2:	bd70      	pop	{r4, r5, r6, pc}
 8013ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ef8:	4798      	blx	r3
 8013efa:	3601      	adds	r6, #1
 8013efc:	e7ee      	b.n	8013edc <__libc_init_array+0xc>
 8013efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f02:	4798      	blx	r3
 8013f04:	3601      	adds	r6, #1
 8013f06:	e7f2      	b.n	8013eee <__libc_init_array+0x1e>
 8013f08:	08017dc4 	.word	0x08017dc4
 8013f0c:	08017dc4 	.word	0x08017dc4
 8013f10:	08017dc4 	.word	0x08017dc4
 8013f14:	08017dc8 	.word	0x08017dc8

08013f18 <__retarget_lock_init_recursive>:
 8013f18:	4770      	bx	lr

08013f1a <__retarget_lock_acquire_recursive>:
 8013f1a:	4770      	bx	lr

08013f1c <__retarget_lock_release_recursive>:
 8013f1c:	4770      	bx	lr

08013f1e <memcpy>:
 8013f1e:	440a      	add	r2, r1
 8013f20:	4291      	cmp	r1, r2
 8013f22:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013f26:	d100      	bne.n	8013f2a <memcpy+0xc>
 8013f28:	4770      	bx	lr
 8013f2a:	b510      	push	{r4, lr}
 8013f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f34:	4291      	cmp	r1, r2
 8013f36:	d1f9      	bne.n	8013f2c <memcpy+0xe>
 8013f38:	bd10      	pop	{r4, pc}
	...

08013f3c <__assert_func>:
 8013f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f3e:	4614      	mov	r4, r2
 8013f40:	461a      	mov	r2, r3
 8013f42:	4b09      	ldr	r3, [pc, #36]	@ (8013f68 <__assert_func+0x2c>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	4605      	mov	r5, r0
 8013f48:	68d8      	ldr	r0, [r3, #12]
 8013f4a:	b954      	cbnz	r4, 8013f62 <__assert_func+0x26>
 8013f4c:	4b07      	ldr	r3, [pc, #28]	@ (8013f6c <__assert_func+0x30>)
 8013f4e:	461c      	mov	r4, r3
 8013f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f54:	9100      	str	r1, [sp, #0]
 8013f56:	462b      	mov	r3, r5
 8013f58:	4905      	ldr	r1, [pc, #20]	@ (8013f70 <__assert_func+0x34>)
 8013f5a:	f000 fc89 	bl	8014870 <fiprintf>
 8013f5e:	f000 fd2d 	bl	80149bc <abort>
 8013f62:	4b04      	ldr	r3, [pc, #16]	@ (8013f74 <__assert_func+0x38>)
 8013f64:	e7f4      	b.n	8013f50 <__assert_func+0x14>
 8013f66:	bf00      	nop
 8013f68:	24000040 	.word	0x24000040
 8013f6c:	08017d86 	.word	0x08017d86
 8013f70:	08017d58 	.word	0x08017d58
 8013f74:	08017d4b 	.word	0x08017d4b

08013f78 <_free_r>:
 8013f78:	b538      	push	{r3, r4, r5, lr}
 8013f7a:	4605      	mov	r5, r0
 8013f7c:	2900      	cmp	r1, #0
 8013f7e:	d041      	beq.n	8014004 <_free_r+0x8c>
 8013f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f84:	1f0c      	subs	r4, r1, #4
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	bfb8      	it	lt
 8013f8a:	18e4      	addlt	r4, r4, r3
 8013f8c:	f000 f8e8 	bl	8014160 <__malloc_lock>
 8013f90:	4a1d      	ldr	r2, [pc, #116]	@ (8014008 <_free_r+0x90>)
 8013f92:	6813      	ldr	r3, [r2, #0]
 8013f94:	b933      	cbnz	r3, 8013fa4 <_free_r+0x2c>
 8013f96:	6063      	str	r3, [r4, #4]
 8013f98:	6014      	str	r4, [r2, #0]
 8013f9a:	4628      	mov	r0, r5
 8013f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fa0:	f000 b8e4 	b.w	801416c <__malloc_unlock>
 8013fa4:	42a3      	cmp	r3, r4
 8013fa6:	d908      	bls.n	8013fba <_free_r+0x42>
 8013fa8:	6820      	ldr	r0, [r4, #0]
 8013faa:	1821      	adds	r1, r4, r0
 8013fac:	428b      	cmp	r3, r1
 8013fae:	bf01      	itttt	eq
 8013fb0:	6819      	ldreq	r1, [r3, #0]
 8013fb2:	685b      	ldreq	r3, [r3, #4]
 8013fb4:	1809      	addeq	r1, r1, r0
 8013fb6:	6021      	streq	r1, [r4, #0]
 8013fb8:	e7ed      	b.n	8013f96 <_free_r+0x1e>
 8013fba:	461a      	mov	r2, r3
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	b10b      	cbz	r3, 8013fc4 <_free_r+0x4c>
 8013fc0:	42a3      	cmp	r3, r4
 8013fc2:	d9fa      	bls.n	8013fba <_free_r+0x42>
 8013fc4:	6811      	ldr	r1, [r2, #0]
 8013fc6:	1850      	adds	r0, r2, r1
 8013fc8:	42a0      	cmp	r0, r4
 8013fca:	d10b      	bne.n	8013fe4 <_free_r+0x6c>
 8013fcc:	6820      	ldr	r0, [r4, #0]
 8013fce:	4401      	add	r1, r0
 8013fd0:	1850      	adds	r0, r2, r1
 8013fd2:	4283      	cmp	r3, r0
 8013fd4:	6011      	str	r1, [r2, #0]
 8013fd6:	d1e0      	bne.n	8013f9a <_free_r+0x22>
 8013fd8:	6818      	ldr	r0, [r3, #0]
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	6053      	str	r3, [r2, #4]
 8013fde:	4408      	add	r0, r1
 8013fe0:	6010      	str	r0, [r2, #0]
 8013fe2:	e7da      	b.n	8013f9a <_free_r+0x22>
 8013fe4:	d902      	bls.n	8013fec <_free_r+0x74>
 8013fe6:	230c      	movs	r3, #12
 8013fe8:	602b      	str	r3, [r5, #0]
 8013fea:	e7d6      	b.n	8013f9a <_free_r+0x22>
 8013fec:	6820      	ldr	r0, [r4, #0]
 8013fee:	1821      	adds	r1, r4, r0
 8013ff0:	428b      	cmp	r3, r1
 8013ff2:	bf04      	itt	eq
 8013ff4:	6819      	ldreq	r1, [r3, #0]
 8013ff6:	685b      	ldreq	r3, [r3, #4]
 8013ff8:	6063      	str	r3, [r4, #4]
 8013ffa:	bf04      	itt	eq
 8013ffc:	1809      	addeq	r1, r1, r0
 8013ffe:	6021      	streq	r1, [r4, #0]
 8014000:	6054      	str	r4, [r2, #4]
 8014002:	e7ca      	b.n	8013f9a <_free_r+0x22>
 8014004:	bd38      	pop	{r3, r4, r5, pc}
 8014006:	bf00      	nop
 8014008:	24007e3c 	.word	0x24007e3c

0801400c <malloc>:
 801400c:	4b02      	ldr	r3, [pc, #8]	@ (8014018 <malloc+0xc>)
 801400e:	4601      	mov	r1, r0
 8014010:	6818      	ldr	r0, [r3, #0]
 8014012:	f000 b825 	b.w	8014060 <_malloc_r>
 8014016:	bf00      	nop
 8014018:	24000040 	.word	0x24000040

0801401c <sbrk_aligned>:
 801401c:	b570      	push	{r4, r5, r6, lr}
 801401e:	4e0f      	ldr	r6, [pc, #60]	@ (801405c <sbrk_aligned+0x40>)
 8014020:	460c      	mov	r4, r1
 8014022:	6831      	ldr	r1, [r6, #0]
 8014024:	4605      	mov	r5, r0
 8014026:	b911      	cbnz	r1, 801402e <sbrk_aligned+0x12>
 8014028:	f000 fcb8 	bl	801499c <_sbrk_r>
 801402c:	6030      	str	r0, [r6, #0]
 801402e:	4621      	mov	r1, r4
 8014030:	4628      	mov	r0, r5
 8014032:	f000 fcb3 	bl	801499c <_sbrk_r>
 8014036:	1c43      	adds	r3, r0, #1
 8014038:	d103      	bne.n	8014042 <sbrk_aligned+0x26>
 801403a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801403e:	4620      	mov	r0, r4
 8014040:	bd70      	pop	{r4, r5, r6, pc}
 8014042:	1cc4      	adds	r4, r0, #3
 8014044:	f024 0403 	bic.w	r4, r4, #3
 8014048:	42a0      	cmp	r0, r4
 801404a:	d0f8      	beq.n	801403e <sbrk_aligned+0x22>
 801404c:	1a21      	subs	r1, r4, r0
 801404e:	4628      	mov	r0, r5
 8014050:	f000 fca4 	bl	801499c <_sbrk_r>
 8014054:	3001      	adds	r0, #1
 8014056:	d1f2      	bne.n	801403e <sbrk_aligned+0x22>
 8014058:	e7ef      	b.n	801403a <sbrk_aligned+0x1e>
 801405a:	bf00      	nop
 801405c:	24007e38 	.word	0x24007e38

08014060 <_malloc_r>:
 8014060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014064:	1ccd      	adds	r5, r1, #3
 8014066:	f025 0503 	bic.w	r5, r5, #3
 801406a:	3508      	adds	r5, #8
 801406c:	2d0c      	cmp	r5, #12
 801406e:	bf38      	it	cc
 8014070:	250c      	movcc	r5, #12
 8014072:	2d00      	cmp	r5, #0
 8014074:	4606      	mov	r6, r0
 8014076:	db01      	blt.n	801407c <_malloc_r+0x1c>
 8014078:	42a9      	cmp	r1, r5
 801407a:	d904      	bls.n	8014086 <_malloc_r+0x26>
 801407c:	230c      	movs	r3, #12
 801407e:	6033      	str	r3, [r6, #0]
 8014080:	2000      	movs	r0, #0
 8014082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801415c <_malloc_r+0xfc>
 801408a:	f000 f869 	bl	8014160 <__malloc_lock>
 801408e:	f8d8 3000 	ldr.w	r3, [r8]
 8014092:	461c      	mov	r4, r3
 8014094:	bb44      	cbnz	r4, 80140e8 <_malloc_r+0x88>
 8014096:	4629      	mov	r1, r5
 8014098:	4630      	mov	r0, r6
 801409a:	f7ff ffbf 	bl	801401c <sbrk_aligned>
 801409e:	1c43      	adds	r3, r0, #1
 80140a0:	4604      	mov	r4, r0
 80140a2:	d158      	bne.n	8014156 <_malloc_r+0xf6>
 80140a4:	f8d8 4000 	ldr.w	r4, [r8]
 80140a8:	4627      	mov	r7, r4
 80140aa:	2f00      	cmp	r7, #0
 80140ac:	d143      	bne.n	8014136 <_malloc_r+0xd6>
 80140ae:	2c00      	cmp	r4, #0
 80140b0:	d04b      	beq.n	801414a <_malloc_r+0xea>
 80140b2:	6823      	ldr	r3, [r4, #0]
 80140b4:	4639      	mov	r1, r7
 80140b6:	4630      	mov	r0, r6
 80140b8:	eb04 0903 	add.w	r9, r4, r3
 80140bc:	f000 fc6e 	bl	801499c <_sbrk_r>
 80140c0:	4581      	cmp	r9, r0
 80140c2:	d142      	bne.n	801414a <_malloc_r+0xea>
 80140c4:	6821      	ldr	r1, [r4, #0]
 80140c6:	1a6d      	subs	r5, r5, r1
 80140c8:	4629      	mov	r1, r5
 80140ca:	4630      	mov	r0, r6
 80140cc:	f7ff ffa6 	bl	801401c <sbrk_aligned>
 80140d0:	3001      	adds	r0, #1
 80140d2:	d03a      	beq.n	801414a <_malloc_r+0xea>
 80140d4:	6823      	ldr	r3, [r4, #0]
 80140d6:	442b      	add	r3, r5
 80140d8:	6023      	str	r3, [r4, #0]
 80140da:	f8d8 3000 	ldr.w	r3, [r8]
 80140de:	685a      	ldr	r2, [r3, #4]
 80140e0:	bb62      	cbnz	r2, 801413c <_malloc_r+0xdc>
 80140e2:	f8c8 7000 	str.w	r7, [r8]
 80140e6:	e00f      	b.n	8014108 <_malloc_r+0xa8>
 80140e8:	6822      	ldr	r2, [r4, #0]
 80140ea:	1b52      	subs	r2, r2, r5
 80140ec:	d420      	bmi.n	8014130 <_malloc_r+0xd0>
 80140ee:	2a0b      	cmp	r2, #11
 80140f0:	d917      	bls.n	8014122 <_malloc_r+0xc2>
 80140f2:	1961      	adds	r1, r4, r5
 80140f4:	42a3      	cmp	r3, r4
 80140f6:	6025      	str	r5, [r4, #0]
 80140f8:	bf18      	it	ne
 80140fa:	6059      	strne	r1, [r3, #4]
 80140fc:	6863      	ldr	r3, [r4, #4]
 80140fe:	bf08      	it	eq
 8014100:	f8c8 1000 	streq.w	r1, [r8]
 8014104:	5162      	str	r2, [r4, r5]
 8014106:	604b      	str	r3, [r1, #4]
 8014108:	4630      	mov	r0, r6
 801410a:	f000 f82f 	bl	801416c <__malloc_unlock>
 801410e:	f104 000b 	add.w	r0, r4, #11
 8014112:	1d23      	adds	r3, r4, #4
 8014114:	f020 0007 	bic.w	r0, r0, #7
 8014118:	1ac2      	subs	r2, r0, r3
 801411a:	bf1c      	itt	ne
 801411c:	1a1b      	subne	r3, r3, r0
 801411e:	50a3      	strne	r3, [r4, r2]
 8014120:	e7af      	b.n	8014082 <_malloc_r+0x22>
 8014122:	6862      	ldr	r2, [r4, #4]
 8014124:	42a3      	cmp	r3, r4
 8014126:	bf0c      	ite	eq
 8014128:	f8c8 2000 	streq.w	r2, [r8]
 801412c:	605a      	strne	r2, [r3, #4]
 801412e:	e7eb      	b.n	8014108 <_malloc_r+0xa8>
 8014130:	4623      	mov	r3, r4
 8014132:	6864      	ldr	r4, [r4, #4]
 8014134:	e7ae      	b.n	8014094 <_malloc_r+0x34>
 8014136:	463c      	mov	r4, r7
 8014138:	687f      	ldr	r7, [r7, #4]
 801413a:	e7b6      	b.n	80140aa <_malloc_r+0x4a>
 801413c:	461a      	mov	r2, r3
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	42a3      	cmp	r3, r4
 8014142:	d1fb      	bne.n	801413c <_malloc_r+0xdc>
 8014144:	2300      	movs	r3, #0
 8014146:	6053      	str	r3, [r2, #4]
 8014148:	e7de      	b.n	8014108 <_malloc_r+0xa8>
 801414a:	230c      	movs	r3, #12
 801414c:	6033      	str	r3, [r6, #0]
 801414e:	4630      	mov	r0, r6
 8014150:	f000 f80c 	bl	801416c <__malloc_unlock>
 8014154:	e794      	b.n	8014080 <_malloc_r+0x20>
 8014156:	6005      	str	r5, [r0, #0]
 8014158:	e7d6      	b.n	8014108 <_malloc_r+0xa8>
 801415a:	bf00      	nop
 801415c:	24007e3c 	.word	0x24007e3c

08014160 <__malloc_lock>:
 8014160:	4801      	ldr	r0, [pc, #4]	@ (8014168 <__malloc_lock+0x8>)
 8014162:	f7ff beda 	b.w	8013f1a <__retarget_lock_acquire_recursive>
 8014166:	bf00      	nop
 8014168:	24007e34 	.word	0x24007e34

0801416c <__malloc_unlock>:
 801416c:	4801      	ldr	r0, [pc, #4]	@ (8014174 <__malloc_unlock+0x8>)
 801416e:	f7ff bed5 	b.w	8013f1c <__retarget_lock_release_recursive>
 8014172:	bf00      	nop
 8014174:	24007e34 	.word	0x24007e34

08014178 <__sfputc_r>:
 8014178:	6893      	ldr	r3, [r2, #8]
 801417a:	3b01      	subs	r3, #1
 801417c:	2b00      	cmp	r3, #0
 801417e:	b410      	push	{r4}
 8014180:	6093      	str	r3, [r2, #8]
 8014182:	da08      	bge.n	8014196 <__sfputc_r+0x1e>
 8014184:	6994      	ldr	r4, [r2, #24]
 8014186:	42a3      	cmp	r3, r4
 8014188:	db01      	blt.n	801418e <__sfputc_r+0x16>
 801418a:	290a      	cmp	r1, #10
 801418c:	d103      	bne.n	8014196 <__sfputc_r+0x1e>
 801418e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014192:	f7ff bdaa 	b.w	8013cea <__swbuf_r>
 8014196:	6813      	ldr	r3, [r2, #0]
 8014198:	1c58      	adds	r0, r3, #1
 801419a:	6010      	str	r0, [r2, #0]
 801419c:	7019      	strb	r1, [r3, #0]
 801419e:	4608      	mov	r0, r1
 80141a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141a4:	4770      	bx	lr

080141a6 <__sfputs_r>:
 80141a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a8:	4606      	mov	r6, r0
 80141aa:	460f      	mov	r7, r1
 80141ac:	4614      	mov	r4, r2
 80141ae:	18d5      	adds	r5, r2, r3
 80141b0:	42ac      	cmp	r4, r5
 80141b2:	d101      	bne.n	80141b8 <__sfputs_r+0x12>
 80141b4:	2000      	movs	r0, #0
 80141b6:	e007      	b.n	80141c8 <__sfputs_r+0x22>
 80141b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141bc:	463a      	mov	r2, r7
 80141be:	4630      	mov	r0, r6
 80141c0:	f7ff ffda 	bl	8014178 <__sfputc_r>
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	d1f3      	bne.n	80141b0 <__sfputs_r+0xa>
 80141c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080141cc <_vfiprintf_r>:
 80141cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d0:	460d      	mov	r5, r1
 80141d2:	b09d      	sub	sp, #116	@ 0x74
 80141d4:	4614      	mov	r4, r2
 80141d6:	4698      	mov	r8, r3
 80141d8:	4606      	mov	r6, r0
 80141da:	b118      	cbz	r0, 80141e4 <_vfiprintf_r+0x18>
 80141dc:	6a03      	ldr	r3, [r0, #32]
 80141de:	b90b      	cbnz	r3, 80141e4 <_vfiprintf_r+0x18>
 80141e0:	f7ff fc9a 	bl	8013b18 <__sinit>
 80141e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141e6:	07d9      	lsls	r1, r3, #31
 80141e8:	d405      	bmi.n	80141f6 <_vfiprintf_r+0x2a>
 80141ea:	89ab      	ldrh	r3, [r5, #12]
 80141ec:	059a      	lsls	r2, r3, #22
 80141ee:	d402      	bmi.n	80141f6 <_vfiprintf_r+0x2a>
 80141f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141f2:	f7ff fe92 	bl	8013f1a <__retarget_lock_acquire_recursive>
 80141f6:	89ab      	ldrh	r3, [r5, #12]
 80141f8:	071b      	lsls	r3, r3, #28
 80141fa:	d501      	bpl.n	8014200 <_vfiprintf_r+0x34>
 80141fc:	692b      	ldr	r3, [r5, #16]
 80141fe:	b99b      	cbnz	r3, 8014228 <_vfiprintf_r+0x5c>
 8014200:	4629      	mov	r1, r5
 8014202:	4630      	mov	r0, r6
 8014204:	f7ff fdb0 	bl	8013d68 <__swsetup_r>
 8014208:	b170      	cbz	r0, 8014228 <_vfiprintf_r+0x5c>
 801420a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801420c:	07dc      	lsls	r4, r3, #31
 801420e:	d504      	bpl.n	801421a <_vfiprintf_r+0x4e>
 8014210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014214:	b01d      	add	sp, #116	@ 0x74
 8014216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801421a:	89ab      	ldrh	r3, [r5, #12]
 801421c:	0598      	lsls	r0, r3, #22
 801421e:	d4f7      	bmi.n	8014210 <_vfiprintf_r+0x44>
 8014220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014222:	f7ff fe7b 	bl	8013f1c <__retarget_lock_release_recursive>
 8014226:	e7f3      	b.n	8014210 <_vfiprintf_r+0x44>
 8014228:	2300      	movs	r3, #0
 801422a:	9309      	str	r3, [sp, #36]	@ 0x24
 801422c:	2320      	movs	r3, #32
 801422e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014232:	f8cd 800c 	str.w	r8, [sp, #12]
 8014236:	2330      	movs	r3, #48	@ 0x30
 8014238:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80143e8 <_vfiprintf_r+0x21c>
 801423c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014240:	f04f 0901 	mov.w	r9, #1
 8014244:	4623      	mov	r3, r4
 8014246:	469a      	mov	sl, r3
 8014248:	f813 2b01 	ldrb.w	r2, [r3], #1
 801424c:	b10a      	cbz	r2, 8014252 <_vfiprintf_r+0x86>
 801424e:	2a25      	cmp	r2, #37	@ 0x25
 8014250:	d1f9      	bne.n	8014246 <_vfiprintf_r+0x7a>
 8014252:	ebba 0b04 	subs.w	fp, sl, r4
 8014256:	d00b      	beq.n	8014270 <_vfiprintf_r+0xa4>
 8014258:	465b      	mov	r3, fp
 801425a:	4622      	mov	r2, r4
 801425c:	4629      	mov	r1, r5
 801425e:	4630      	mov	r0, r6
 8014260:	f7ff ffa1 	bl	80141a6 <__sfputs_r>
 8014264:	3001      	adds	r0, #1
 8014266:	f000 80a7 	beq.w	80143b8 <_vfiprintf_r+0x1ec>
 801426a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801426c:	445a      	add	r2, fp
 801426e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014270:	f89a 3000 	ldrb.w	r3, [sl]
 8014274:	2b00      	cmp	r3, #0
 8014276:	f000 809f 	beq.w	80143b8 <_vfiprintf_r+0x1ec>
 801427a:	2300      	movs	r3, #0
 801427c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014284:	f10a 0a01 	add.w	sl, sl, #1
 8014288:	9304      	str	r3, [sp, #16]
 801428a:	9307      	str	r3, [sp, #28]
 801428c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014290:	931a      	str	r3, [sp, #104]	@ 0x68
 8014292:	4654      	mov	r4, sl
 8014294:	2205      	movs	r2, #5
 8014296:	f814 1b01 	ldrb.w	r1, [r4], #1
 801429a:	4853      	ldr	r0, [pc, #332]	@ (80143e8 <_vfiprintf_r+0x21c>)
 801429c:	f7ec f820 	bl	80002e0 <memchr>
 80142a0:	9a04      	ldr	r2, [sp, #16]
 80142a2:	b9d8      	cbnz	r0, 80142dc <_vfiprintf_r+0x110>
 80142a4:	06d1      	lsls	r1, r2, #27
 80142a6:	bf44      	itt	mi
 80142a8:	2320      	movmi	r3, #32
 80142aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142ae:	0713      	lsls	r3, r2, #28
 80142b0:	bf44      	itt	mi
 80142b2:	232b      	movmi	r3, #43	@ 0x2b
 80142b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142b8:	f89a 3000 	ldrb.w	r3, [sl]
 80142bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80142be:	d015      	beq.n	80142ec <_vfiprintf_r+0x120>
 80142c0:	9a07      	ldr	r2, [sp, #28]
 80142c2:	4654      	mov	r4, sl
 80142c4:	2000      	movs	r0, #0
 80142c6:	f04f 0c0a 	mov.w	ip, #10
 80142ca:	4621      	mov	r1, r4
 80142cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142d0:	3b30      	subs	r3, #48	@ 0x30
 80142d2:	2b09      	cmp	r3, #9
 80142d4:	d94b      	bls.n	801436e <_vfiprintf_r+0x1a2>
 80142d6:	b1b0      	cbz	r0, 8014306 <_vfiprintf_r+0x13a>
 80142d8:	9207      	str	r2, [sp, #28]
 80142da:	e014      	b.n	8014306 <_vfiprintf_r+0x13a>
 80142dc:	eba0 0308 	sub.w	r3, r0, r8
 80142e0:	fa09 f303 	lsl.w	r3, r9, r3
 80142e4:	4313      	orrs	r3, r2
 80142e6:	9304      	str	r3, [sp, #16]
 80142e8:	46a2      	mov	sl, r4
 80142ea:	e7d2      	b.n	8014292 <_vfiprintf_r+0xc6>
 80142ec:	9b03      	ldr	r3, [sp, #12]
 80142ee:	1d19      	adds	r1, r3, #4
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	9103      	str	r1, [sp, #12]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	bfbb      	ittet	lt
 80142f8:	425b      	neglt	r3, r3
 80142fa:	f042 0202 	orrlt.w	r2, r2, #2
 80142fe:	9307      	strge	r3, [sp, #28]
 8014300:	9307      	strlt	r3, [sp, #28]
 8014302:	bfb8      	it	lt
 8014304:	9204      	strlt	r2, [sp, #16]
 8014306:	7823      	ldrb	r3, [r4, #0]
 8014308:	2b2e      	cmp	r3, #46	@ 0x2e
 801430a:	d10a      	bne.n	8014322 <_vfiprintf_r+0x156>
 801430c:	7863      	ldrb	r3, [r4, #1]
 801430e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014310:	d132      	bne.n	8014378 <_vfiprintf_r+0x1ac>
 8014312:	9b03      	ldr	r3, [sp, #12]
 8014314:	1d1a      	adds	r2, r3, #4
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	9203      	str	r2, [sp, #12]
 801431a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801431e:	3402      	adds	r4, #2
 8014320:	9305      	str	r3, [sp, #20]
 8014322:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80143f8 <_vfiprintf_r+0x22c>
 8014326:	7821      	ldrb	r1, [r4, #0]
 8014328:	2203      	movs	r2, #3
 801432a:	4650      	mov	r0, sl
 801432c:	f7eb ffd8 	bl	80002e0 <memchr>
 8014330:	b138      	cbz	r0, 8014342 <_vfiprintf_r+0x176>
 8014332:	9b04      	ldr	r3, [sp, #16]
 8014334:	eba0 000a 	sub.w	r0, r0, sl
 8014338:	2240      	movs	r2, #64	@ 0x40
 801433a:	4082      	lsls	r2, r0
 801433c:	4313      	orrs	r3, r2
 801433e:	3401      	adds	r4, #1
 8014340:	9304      	str	r3, [sp, #16]
 8014342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014346:	4829      	ldr	r0, [pc, #164]	@ (80143ec <_vfiprintf_r+0x220>)
 8014348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801434c:	2206      	movs	r2, #6
 801434e:	f7eb ffc7 	bl	80002e0 <memchr>
 8014352:	2800      	cmp	r0, #0
 8014354:	d03f      	beq.n	80143d6 <_vfiprintf_r+0x20a>
 8014356:	4b26      	ldr	r3, [pc, #152]	@ (80143f0 <_vfiprintf_r+0x224>)
 8014358:	bb1b      	cbnz	r3, 80143a2 <_vfiprintf_r+0x1d6>
 801435a:	9b03      	ldr	r3, [sp, #12]
 801435c:	3307      	adds	r3, #7
 801435e:	f023 0307 	bic.w	r3, r3, #7
 8014362:	3308      	adds	r3, #8
 8014364:	9303      	str	r3, [sp, #12]
 8014366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014368:	443b      	add	r3, r7
 801436a:	9309      	str	r3, [sp, #36]	@ 0x24
 801436c:	e76a      	b.n	8014244 <_vfiprintf_r+0x78>
 801436e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014372:	460c      	mov	r4, r1
 8014374:	2001      	movs	r0, #1
 8014376:	e7a8      	b.n	80142ca <_vfiprintf_r+0xfe>
 8014378:	2300      	movs	r3, #0
 801437a:	3401      	adds	r4, #1
 801437c:	9305      	str	r3, [sp, #20]
 801437e:	4619      	mov	r1, r3
 8014380:	f04f 0c0a 	mov.w	ip, #10
 8014384:	4620      	mov	r0, r4
 8014386:	f810 2b01 	ldrb.w	r2, [r0], #1
 801438a:	3a30      	subs	r2, #48	@ 0x30
 801438c:	2a09      	cmp	r2, #9
 801438e:	d903      	bls.n	8014398 <_vfiprintf_r+0x1cc>
 8014390:	2b00      	cmp	r3, #0
 8014392:	d0c6      	beq.n	8014322 <_vfiprintf_r+0x156>
 8014394:	9105      	str	r1, [sp, #20]
 8014396:	e7c4      	b.n	8014322 <_vfiprintf_r+0x156>
 8014398:	fb0c 2101 	mla	r1, ip, r1, r2
 801439c:	4604      	mov	r4, r0
 801439e:	2301      	movs	r3, #1
 80143a0:	e7f0      	b.n	8014384 <_vfiprintf_r+0x1b8>
 80143a2:	ab03      	add	r3, sp, #12
 80143a4:	9300      	str	r3, [sp, #0]
 80143a6:	462a      	mov	r2, r5
 80143a8:	4b12      	ldr	r3, [pc, #72]	@ (80143f4 <_vfiprintf_r+0x228>)
 80143aa:	a904      	add	r1, sp, #16
 80143ac:	4630      	mov	r0, r6
 80143ae:	f3af 8000 	nop.w
 80143b2:	4607      	mov	r7, r0
 80143b4:	1c78      	adds	r0, r7, #1
 80143b6:	d1d6      	bne.n	8014366 <_vfiprintf_r+0x19a>
 80143b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143ba:	07d9      	lsls	r1, r3, #31
 80143bc:	d405      	bmi.n	80143ca <_vfiprintf_r+0x1fe>
 80143be:	89ab      	ldrh	r3, [r5, #12]
 80143c0:	059a      	lsls	r2, r3, #22
 80143c2:	d402      	bmi.n	80143ca <_vfiprintf_r+0x1fe>
 80143c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143c6:	f7ff fda9 	bl	8013f1c <__retarget_lock_release_recursive>
 80143ca:	89ab      	ldrh	r3, [r5, #12]
 80143cc:	065b      	lsls	r3, r3, #25
 80143ce:	f53f af1f 	bmi.w	8014210 <_vfiprintf_r+0x44>
 80143d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143d4:	e71e      	b.n	8014214 <_vfiprintf_r+0x48>
 80143d6:	ab03      	add	r3, sp, #12
 80143d8:	9300      	str	r3, [sp, #0]
 80143da:	462a      	mov	r2, r5
 80143dc:	4b05      	ldr	r3, [pc, #20]	@ (80143f4 <_vfiprintf_r+0x228>)
 80143de:	a904      	add	r1, sp, #16
 80143e0:	4630      	mov	r0, r6
 80143e2:	f000 f879 	bl	80144d8 <_printf_i>
 80143e6:	e7e4      	b.n	80143b2 <_vfiprintf_r+0x1e6>
 80143e8:	08017d87 	.word	0x08017d87
 80143ec:	08017d91 	.word	0x08017d91
 80143f0:	00000000 	.word	0x00000000
 80143f4:	080141a7 	.word	0x080141a7
 80143f8:	08017d8d 	.word	0x08017d8d

080143fc <_printf_common>:
 80143fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014400:	4616      	mov	r6, r2
 8014402:	4698      	mov	r8, r3
 8014404:	688a      	ldr	r2, [r1, #8]
 8014406:	690b      	ldr	r3, [r1, #16]
 8014408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801440c:	4293      	cmp	r3, r2
 801440e:	bfb8      	it	lt
 8014410:	4613      	movlt	r3, r2
 8014412:	6033      	str	r3, [r6, #0]
 8014414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014418:	4607      	mov	r7, r0
 801441a:	460c      	mov	r4, r1
 801441c:	b10a      	cbz	r2, 8014422 <_printf_common+0x26>
 801441e:	3301      	adds	r3, #1
 8014420:	6033      	str	r3, [r6, #0]
 8014422:	6823      	ldr	r3, [r4, #0]
 8014424:	0699      	lsls	r1, r3, #26
 8014426:	bf42      	ittt	mi
 8014428:	6833      	ldrmi	r3, [r6, #0]
 801442a:	3302      	addmi	r3, #2
 801442c:	6033      	strmi	r3, [r6, #0]
 801442e:	6825      	ldr	r5, [r4, #0]
 8014430:	f015 0506 	ands.w	r5, r5, #6
 8014434:	d106      	bne.n	8014444 <_printf_common+0x48>
 8014436:	f104 0a19 	add.w	sl, r4, #25
 801443a:	68e3      	ldr	r3, [r4, #12]
 801443c:	6832      	ldr	r2, [r6, #0]
 801443e:	1a9b      	subs	r3, r3, r2
 8014440:	42ab      	cmp	r3, r5
 8014442:	dc26      	bgt.n	8014492 <_printf_common+0x96>
 8014444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014448:	6822      	ldr	r2, [r4, #0]
 801444a:	3b00      	subs	r3, #0
 801444c:	bf18      	it	ne
 801444e:	2301      	movne	r3, #1
 8014450:	0692      	lsls	r2, r2, #26
 8014452:	d42b      	bmi.n	80144ac <_printf_common+0xb0>
 8014454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014458:	4641      	mov	r1, r8
 801445a:	4638      	mov	r0, r7
 801445c:	47c8      	blx	r9
 801445e:	3001      	adds	r0, #1
 8014460:	d01e      	beq.n	80144a0 <_printf_common+0xa4>
 8014462:	6823      	ldr	r3, [r4, #0]
 8014464:	6922      	ldr	r2, [r4, #16]
 8014466:	f003 0306 	and.w	r3, r3, #6
 801446a:	2b04      	cmp	r3, #4
 801446c:	bf02      	ittt	eq
 801446e:	68e5      	ldreq	r5, [r4, #12]
 8014470:	6833      	ldreq	r3, [r6, #0]
 8014472:	1aed      	subeq	r5, r5, r3
 8014474:	68a3      	ldr	r3, [r4, #8]
 8014476:	bf0c      	ite	eq
 8014478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801447c:	2500      	movne	r5, #0
 801447e:	4293      	cmp	r3, r2
 8014480:	bfc4      	itt	gt
 8014482:	1a9b      	subgt	r3, r3, r2
 8014484:	18ed      	addgt	r5, r5, r3
 8014486:	2600      	movs	r6, #0
 8014488:	341a      	adds	r4, #26
 801448a:	42b5      	cmp	r5, r6
 801448c:	d11a      	bne.n	80144c4 <_printf_common+0xc8>
 801448e:	2000      	movs	r0, #0
 8014490:	e008      	b.n	80144a4 <_printf_common+0xa8>
 8014492:	2301      	movs	r3, #1
 8014494:	4652      	mov	r2, sl
 8014496:	4641      	mov	r1, r8
 8014498:	4638      	mov	r0, r7
 801449a:	47c8      	blx	r9
 801449c:	3001      	adds	r0, #1
 801449e:	d103      	bne.n	80144a8 <_printf_common+0xac>
 80144a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144a8:	3501      	adds	r5, #1
 80144aa:	e7c6      	b.n	801443a <_printf_common+0x3e>
 80144ac:	18e1      	adds	r1, r4, r3
 80144ae:	1c5a      	adds	r2, r3, #1
 80144b0:	2030      	movs	r0, #48	@ 0x30
 80144b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80144b6:	4422      	add	r2, r4
 80144b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80144bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80144c0:	3302      	adds	r3, #2
 80144c2:	e7c7      	b.n	8014454 <_printf_common+0x58>
 80144c4:	2301      	movs	r3, #1
 80144c6:	4622      	mov	r2, r4
 80144c8:	4641      	mov	r1, r8
 80144ca:	4638      	mov	r0, r7
 80144cc:	47c8      	blx	r9
 80144ce:	3001      	adds	r0, #1
 80144d0:	d0e6      	beq.n	80144a0 <_printf_common+0xa4>
 80144d2:	3601      	adds	r6, #1
 80144d4:	e7d9      	b.n	801448a <_printf_common+0x8e>
	...

080144d8 <_printf_i>:
 80144d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144dc:	7e0f      	ldrb	r7, [r1, #24]
 80144de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80144e0:	2f78      	cmp	r7, #120	@ 0x78
 80144e2:	4691      	mov	r9, r2
 80144e4:	4680      	mov	r8, r0
 80144e6:	460c      	mov	r4, r1
 80144e8:	469a      	mov	sl, r3
 80144ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80144ee:	d807      	bhi.n	8014500 <_printf_i+0x28>
 80144f0:	2f62      	cmp	r7, #98	@ 0x62
 80144f2:	d80a      	bhi.n	801450a <_printf_i+0x32>
 80144f4:	2f00      	cmp	r7, #0
 80144f6:	f000 80d2 	beq.w	801469e <_printf_i+0x1c6>
 80144fa:	2f58      	cmp	r7, #88	@ 0x58
 80144fc:	f000 80b9 	beq.w	8014672 <_printf_i+0x19a>
 8014500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014508:	e03a      	b.n	8014580 <_printf_i+0xa8>
 801450a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801450e:	2b15      	cmp	r3, #21
 8014510:	d8f6      	bhi.n	8014500 <_printf_i+0x28>
 8014512:	a101      	add	r1, pc, #4	@ (adr r1, 8014518 <_printf_i+0x40>)
 8014514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014518:	08014571 	.word	0x08014571
 801451c:	08014585 	.word	0x08014585
 8014520:	08014501 	.word	0x08014501
 8014524:	08014501 	.word	0x08014501
 8014528:	08014501 	.word	0x08014501
 801452c:	08014501 	.word	0x08014501
 8014530:	08014585 	.word	0x08014585
 8014534:	08014501 	.word	0x08014501
 8014538:	08014501 	.word	0x08014501
 801453c:	08014501 	.word	0x08014501
 8014540:	08014501 	.word	0x08014501
 8014544:	08014685 	.word	0x08014685
 8014548:	080145af 	.word	0x080145af
 801454c:	0801463f 	.word	0x0801463f
 8014550:	08014501 	.word	0x08014501
 8014554:	08014501 	.word	0x08014501
 8014558:	080146a7 	.word	0x080146a7
 801455c:	08014501 	.word	0x08014501
 8014560:	080145af 	.word	0x080145af
 8014564:	08014501 	.word	0x08014501
 8014568:	08014501 	.word	0x08014501
 801456c:	08014647 	.word	0x08014647
 8014570:	6833      	ldr	r3, [r6, #0]
 8014572:	1d1a      	adds	r2, r3, #4
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	6032      	str	r2, [r6, #0]
 8014578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801457c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014580:	2301      	movs	r3, #1
 8014582:	e09d      	b.n	80146c0 <_printf_i+0x1e8>
 8014584:	6833      	ldr	r3, [r6, #0]
 8014586:	6820      	ldr	r0, [r4, #0]
 8014588:	1d19      	adds	r1, r3, #4
 801458a:	6031      	str	r1, [r6, #0]
 801458c:	0606      	lsls	r6, r0, #24
 801458e:	d501      	bpl.n	8014594 <_printf_i+0xbc>
 8014590:	681d      	ldr	r5, [r3, #0]
 8014592:	e003      	b.n	801459c <_printf_i+0xc4>
 8014594:	0645      	lsls	r5, r0, #25
 8014596:	d5fb      	bpl.n	8014590 <_printf_i+0xb8>
 8014598:	f9b3 5000 	ldrsh.w	r5, [r3]
 801459c:	2d00      	cmp	r5, #0
 801459e:	da03      	bge.n	80145a8 <_printf_i+0xd0>
 80145a0:	232d      	movs	r3, #45	@ 0x2d
 80145a2:	426d      	negs	r5, r5
 80145a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80145a8:	4859      	ldr	r0, [pc, #356]	@ (8014710 <_printf_i+0x238>)
 80145aa:	230a      	movs	r3, #10
 80145ac:	e011      	b.n	80145d2 <_printf_i+0xfa>
 80145ae:	6821      	ldr	r1, [r4, #0]
 80145b0:	6833      	ldr	r3, [r6, #0]
 80145b2:	0608      	lsls	r0, r1, #24
 80145b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80145b8:	d402      	bmi.n	80145c0 <_printf_i+0xe8>
 80145ba:	0649      	lsls	r1, r1, #25
 80145bc:	bf48      	it	mi
 80145be:	b2ad      	uxthmi	r5, r5
 80145c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80145c2:	4853      	ldr	r0, [pc, #332]	@ (8014710 <_printf_i+0x238>)
 80145c4:	6033      	str	r3, [r6, #0]
 80145c6:	bf14      	ite	ne
 80145c8:	230a      	movne	r3, #10
 80145ca:	2308      	moveq	r3, #8
 80145cc:	2100      	movs	r1, #0
 80145ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80145d2:	6866      	ldr	r6, [r4, #4]
 80145d4:	60a6      	str	r6, [r4, #8]
 80145d6:	2e00      	cmp	r6, #0
 80145d8:	bfa2      	ittt	ge
 80145da:	6821      	ldrge	r1, [r4, #0]
 80145dc:	f021 0104 	bicge.w	r1, r1, #4
 80145e0:	6021      	strge	r1, [r4, #0]
 80145e2:	b90d      	cbnz	r5, 80145e8 <_printf_i+0x110>
 80145e4:	2e00      	cmp	r6, #0
 80145e6:	d04b      	beq.n	8014680 <_printf_i+0x1a8>
 80145e8:	4616      	mov	r6, r2
 80145ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80145ee:	fb03 5711 	mls	r7, r3, r1, r5
 80145f2:	5dc7      	ldrb	r7, [r0, r7]
 80145f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80145f8:	462f      	mov	r7, r5
 80145fa:	42bb      	cmp	r3, r7
 80145fc:	460d      	mov	r5, r1
 80145fe:	d9f4      	bls.n	80145ea <_printf_i+0x112>
 8014600:	2b08      	cmp	r3, #8
 8014602:	d10b      	bne.n	801461c <_printf_i+0x144>
 8014604:	6823      	ldr	r3, [r4, #0]
 8014606:	07df      	lsls	r7, r3, #31
 8014608:	d508      	bpl.n	801461c <_printf_i+0x144>
 801460a:	6923      	ldr	r3, [r4, #16]
 801460c:	6861      	ldr	r1, [r4, #4]
 801460e:	4299      	cmp	r1, r3
 8014610:	bfde      	ittt	le
 8014612:	2330      	movle	r3, #48	@ 0x30
 8014614:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014618:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801461c:	1b92      	subs	r2, r2, r6
 801461e:	6122      	str	r2, [r4, #16]
 8014620:	f8cd a000 	str.w	sl, [sp]
 8014624:	464b      	mov	r3, r9
 8014626:	aa03      	add	r2, sp, #12
 8014628:	4621      	mov	r1, r4
 801462a:	4640      	mov	r0, r8
 801462c:	f7ff fee6 	bl	80143fc <_printf_common>
 8014630:	3001      	adds	r0, #1
 8014632:	d14a      	bne.n	80146ca <_printf_i+0x1f2>
 8014634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014638:	b004      	add	sp, #16
 801463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801463e:	6823      	ldr	r3, [r4, #0]
 8014640:	f043 0320 	orr.w	r3, r3, #32
 8014644:	6023      	str	r3, [r4, #0]
 8014646:	4833      	ldr	r0, [pc, #204]	@ (8014714 <_printf_i+0x23c>)
 8014648:	2778      	movs	r7, #120	@ 0x78
 801464a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801464e:	6823      	ldr	r3, [r4, #0]
 8014650:	6831      	ldr	r1, [r6, #0]
 8014652:	061f      	lsls	r7, r3, #24
 8014654:	f851 5b04 	ldr.w	r5, [r1], #4
 8014658:	d402      	bmi.n	8014660 <_printf_i+0x188>
 801465a:	065f      	lsls	r7, r3, #25
 801465c:	bf48      	it	mi
 801465e:	b2ad      	uxthmi	r5, r5
 8014660:	6031      	str	r1, [r6, #0]
 8014662:	07d9      	lsls	r1, r3, #31
 8014664:	bf44      	itt	mi
 8014666:	f043 0320 	orrmi.w	r3, r3, #32
 801466a:	6023      	strmi	r3, [r4, #0]
 801466c:	b11d      	cbz	r5, 8014676 <_printf_i+0x19e>
 801466e:	2310      	movs	r3, #16
 8014670:	e7ac      	b.n	80145cc <_printf_i+0xf4>
 8014672:	4827      	ldr	r0, [pc, #156]	@ (8014710 <_printf_i+0x238>)
 8014674:	e7e9      	b.n	801464a <_printf_i+0x172>
 8014676:	6823      	ldr	r3, [r4, #0]
 8014678:	f023 0320 	bic.w	r3, r3, #32
 801467c:	6023      	str	r3, [r4, #0]
 801467e:	e7f6      	b.n	801466e <_printf_i+0x196>
 8014680:	4616      	mov	r6, r2
 8014682:	e7bd      	b.n	8014600 <_printf_i+0x128>
 8014684:	6833      	ldr	r3, [r6, #0]
 8014686:	6825      	ldr	r5, [r4, #0]
 8014688:	6961      	ldr	r1, [r4, #20]
 801468a:	1d18      	adds	r0, r3, #4
 801468c:	6030      	str	r0, [r6, #0]
 801468e:	062e      	lsls	r6, r5, #24
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	d501      	bpl.n	8014698 <_printf_i+0x1c0>
 8014694:	6019      	str	r1, [r3, #0]
 8014696:	e002      	b.n	801469e <_printf_i+0x1c6>
 8014698:	0668      	lsls	r0, r5, #25
 801469a:	d5fb      	bpl.n	8014694 <_printf_i+0x1bc>
 801469c:	8019      	strh	r1, [r3, #0]
 801469e:	2300      	movs	r3, #0
 80146a0:	6123      	str	r3, [r4, #16]
 80146a2:	4616      	mov	r6, r2
 80146a4:	e7bc      	b.n	8014620 <_printf_i+0x148>
 80146a6:	6833      	ldr	r3, [r6, #0]
 80146a8:	1d1a      	adds	r2, r3, #4
 80146aa:	6032      	str	r2, [r6, #0]
 80146ac:	681e      	ldr	r6, [r3, #0]
 80146ae:	6862      	ldr	r2, [r4, #4]
 80146b0:	2100      	movs	r1, #0
 80146b2:	4630      	mov	r0, r6
 80146b4:	f7eb fe14 	bl	80002e0 <memchr>
 80146b8:	b108      	cbz	r0, 80146be <_printf_i+0x1e6>
 80146ba:	1b80      	subs	r0, r0, r6
 80146bc:	6060      	str	r0, [r4, #4]
 80146be:	6863      	ldr	r3, [r4, #4]
 80146c0:	6123      	str	r3, [r4, #16]
 80146c2:	2300      	movs	r3, #0
 80146c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146c8:	e7aa      	b.n	8014620 <_printf_i+0x148>
 80146ca:	6923      	ldr	r3, [r4, #16]
 80146cc:	4632      	mov	r2, r6
 80146ce:	4649      	mov	r1, r9
 80146d0:	4640      	mov	r0, r8
 80146d2:	47d0      	blx	sl
 80146d4:	3001      	adds	r0, #1
 80146d6:	d0ad      	beq.n	8014634 <_printf_i+0x15c>
 80146d8:	6823      	ldr	r3, [r4, #0]
 80146da:	079b      	lsls	r3, r3, #30
 80146dc:	d413      	bmi.n	8014706 <_printf_i+0x22e>
 80146de:	68e0      	ldr	r0, [r4, #12]
 80146e0:	9b03      	ldr	r3, [sp, #12]
 80146e2:	4298      	cmp	r0, r3
 80146e4:	bfb8      	it	lt
 80146e6:	4618      	movlt	r0, r3
 80146e8:	e7a6      	b.n	8014638 <_printf_i+0x160>
 80146ea:	2301      	movs	r3, #1
 80146ec:	4632      	mov	r2, r6
 80146ee:	4649      	mov	r1, r9
 80146f0:	4640      	mov	r0, r8
 80146f2:	47d0      	blx	sl
 80146f4:	3001      	adds	r0, #1
 80146f6:	d09d      	beq.n	8014634 <_printf_i+0x15c>
 80146f8:	3501      	adds	r5, #1
 80146fa:	68e3      	ldr	r3, [r4, #12]
 80146fc:	9903      	ldr	r1, [sp, #12]
 80146fe:	1a5b      	subs	r3, r3, r1
 8014700:	42ab      	cmp	r3, r5
 8014702:	dcf2      	bgt.n	80146ea <_printf_i+0x212>
 8014704:	e7eb      	b.n	80146de <_printf_i+0x206>
 8014706:	2500      	movs	r5, #0
 8014708:	f104 0619 	add.w	r6, r4, #25
 801470c:	e7f5      	b.n	80146fa <_printf_i+0x222>
 801470e:	bf00      	nop
 8014710:	08017d98 	.word	0x08017d98
 8014714:	08017da9 	.word	0x08017da9

08014718 <__sflush_r>:
 8014718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014720:	0716      	lsls	r6, r2, #28
 8014722:	4605      	mov	r5, r0
 8014724:	460c      	mov	r4, r1
 8014726:	d454      	bmi.n	80147d2 <__sflush_r+0xba>
 8014728:	684b      	ldr	r3, [r1, #4]
 801472a:	2b00      	cmp	r3, #0
 801472c:	dc02      	bgt.n	8014734 <__sflush_r+0x1c>
 801472e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014730:	2b00      	cmp	r3, #0
 8014732:	dd48      	ble.n	80147c6 <__sflush_r+0xae>
 8014734:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014736:	2e00      	cmp	r6, #0
 8014738:	d045      	beq.n	80147c6 <__sflush_r+0xae>
 801473a:	2300      	movs	r3, #0
 801473c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014740:	682f      	ldr	r7, [r5, #0]
 8014742:	6a21      	ldr	r1, [r4, #32]
 8014744:	602b      	str	r3, [r5, #0]
 8014746:	d030      	beq.n	80147aa <__sflush_r+0x92>
 8014748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801474a:	89a3      	ldrh	r3, [r4, #12]
 801474c:	0759      	lsls	r1, r3, #29
 801474e:	d505      	bpl.n	801475c <__sflush_r+0x44>
 8014750:	6863      	ldr	r3, [r4, #4]
 8014752:	1ad2      	subs	r2, r2, r3
 8014754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014756:	b10b      	cbz	r3, 801475c <__sflush_r+0x44>
 8014758:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801475a:	1ad2      	subs	r2, r2, r3
 801475c:	2300      	movs	r3, #0
 801475e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014760:	6a21      	ldr	r1, [r4, #32]
 8014762:	4628      	mov	r0, r5
 8014764:	47b0      	blx	r6
 8014766:	1c43      	adds	r3, r0, #1
 8014768:	89a3      	ldrh	r3, [r4, #12]
 801476a:	d106      	bne.n	801477a <__sflush_r+0x62>
 801476c:	6829      	ldr	r1, [r5, #0]
 801476e:	291d      	cmp	r1, #29
 8014770:	d82b      	bhi.n	80147ca <__sflush_r+0xb2>
 8014772:	4a2a      	ldr	r2, [pc, #168]	@ (801481c <__sflush_r+0x104>)
 8014774:	410a      	asrs	r2, r1
 8014776:	07d6      	lsls	r6, r2, #31
 8014778:	d427      	bmi.n	80147ca <__sflush_r+0xb2>
 801477a:	2200      	movs	r2, #0
 801477c:	6062      	str	r2, [r4, #4]
 801477e:	04d9      	lsls	r1, r3, #19
 8014780:	6922      	ldr	r2, [r4, #16]
 8014782:	6022      	str	r2, [r4, #0]
 8014784:	d504      	bpl.n	8014790 <__sflush_r+0x78>
 8014786:	1c42      	adds	r2, r0, #1
 8014788:	d101      	bne.n	801478e <__sflush_r+0x76>
 801478a:	682b      	ldr	r3, [r5, #0]
 801478c:	b903      	cbnz	r3, 8014790 <__sflush_r+0x78>
 801478e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014792:	602f      	str	r7, [r5, #0]
 8014794:	b1b9      	cbz	r1, 80147c6 <__sflush_r+0xae>
 8014796:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801479a:	4299      	cmp	r1, r3
 801479c:	d002      	beq.n	80147a4 <__sflush_r+0x8c>
 801479e:	4628      	mov	r0, r5
 80147a0:	f7ff fbea 	bl	8013f78 <_free_r>
 80147a4:	2300      	movs	r3, #0
 80147a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80147a8:	e00d      	b.n	80147c6 <__sflush_r+0xae>
 80147aa:	2301      	movs	r3, #1
 80147ac:	4628      	mov	r0, r5
 80147ae:	47b0      	blx	r6
 80147b0:	4602      	mov	r2, r0
 80147b2:	1c50      	adds	r0, r2, #1
 80147b4:	d1c9      	bne.n	801474a <__sflush_r+0x32>
 80147b6:	682b      	ldr	r3, [r5, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d0c6      	beq.n	801474a <__sflush_r+0x32>
 80147bc:	2b1d      	cmp	r3, #29
 80147be:	d001      	beq.n	80147c4 <__sflush_r+0xac>
 80147c0:	2b16      	cmp	r3, #22
 80147c2:	d11e      	bne.n	8014802 <__sflush_r+0xea>
 80147c4:	602f      	str	r7, [r5, #0]
 80147c6:	2000      	movs	r0, #0
 80147c8:	e022      	b.n	8014810 <__sflush_r+0xf8>
 80147ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147ce:	b21b      	sxth	r3, r3
 80147d0:	e01b      	b.n	801480a <__sflush_r+0xf2>
 80147d2:	690f      	ldr	r7, [r1, #16]
 80147d4:	2f00      	cmp	r7, #0
 80147d6:	d0f6      	beq.n	80147c6 <__sflush_r+0xae>
 80147d8:	0793      	lsls	r3, r2, #30
 80147da:	680e      	ldr	r6, [r1, #0]
 80147dc:	bf08      	it	eq
 80147de:	694b      	ldreq	r3, [r1, #20]
 80147e0:	600f      	str	r7, [r1, #0]
 80147e2:	bf18      	it	ne
 80147e4:	2300      	movne	r3, #0
 80147e6:	eba6 0807 	sub.w	r8, r6, r7
 80147ea:	608b      	str	r3, [r1, #8]
 80147ec:	f1b8 0f00 	cmp.w	r8, #0
 80147f0:	dde9      	ble.n	80147c6 <__sflush_r+0xae>
 80147f2:	6a21      	ldr	r1, [r4, #32]
 80147f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80147f6:	4643      	mov	r3, r8
 80147f8:	463a      	mov	r2, r7
 80147fa:	4628      	mov	r0, r5
 80147fc:	47b0      	blx	r6
 80147fe:	2800      	cmp	r0, #0
 8014800:	dc08      	bgt.n	8014814 <__sflush_r+0xfc>
 8014802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801480a:	81a3      	strh	r3, [r4, #12]
 801480c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014814:	4407      	add	r7, r0
 8014816:	eba8 0800 	sub.w	r8, r8, r0
 801481a:	e7e7      	b.n	80147ec <__sflush_r+0xd4>
 801481c:	dfbffffe 	.word	0xdfbffffe

08014820 <_fflush_r>:
 8014820:	b538      	push	{r3, r4, r5, lr}
 8014822:	690b      	ldr	r3, [r1, #16]
 8014824:	4605      	mov	r5, r0
 8014826:	460c      	mov	r4, r1
 8014828:	b913      	cbnz	r3, 8014830 <_fflush_r+0x10>
 801482a:	2500      	movs	r5, #0
 801482c:	4628      	mov	r0, r5
 801482e:	bd38      	pop	{r3, r4, r5, pc}
 8014830:	b118      	cbz	r0, 801483a <_fflush_r+0x1a>
 8014832:	6a03      	ldr	r3, [r0, #32]
 8014834:	b90b      	cbnz	r3, 801483a <_fflush_r+0x1a>
 8014836:	f7ff f96f 	bl	8013b18 <__sinit>
 801483a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d0f3      	beq.n	801482a <_fflush_r+0xa>
 8014842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014844:	07d0      	lsls	r0, r2, #31
 8014846:	d404      	bmi.n	8014852 <_fflush_r+0x32>
 8014848:	0599      	lsls	r1, r3, #22
 801484a:	d402      	bmi.n	8014852 <_fflush_r+0x32>
 801484c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801484e:	f7ff fb64 	bl	8013f1a <__retarget_lock_acquire_recursive>
 8014852:	4628      	mov	r0, r5
 8014854:	4621      	mov	r1, r4
 8014856:	f7ff ff5f 	bl	8014718 <__sflush_r>
 801485a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801485c:	07da      	lsls	r2, r3, #31
 801485e:	4605      	mov	r5, r0
 8014860:	d4e4      	bmi.n	801482c <_fflush_r+0xc>
 8014862:	89a3      	ldrh	r3, [r4, #12]
 8014864:	059b      	lsls	r3, r3, #22
 8014866:	d4e1      	bmi.n	801482c <_fflush_r+0xc>
 8014868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801486a:	f7ff fb57 	bl	8013f1c <__retarget_lock_release_recursive>
 801486e:	e7dd      	b.n	801482c <_fflush_r+0xc>

08014870 <fiprintf>:
 8014870:	b40e      	push	{r1, r2, r3}
 8014872:	b503      	push	{r0, r1, lr}
 8014874:	4601      	mov	r1, r0
 8014876:	ab03      	add	r3, sp, #12
 8014878:	4805      	ldr	r0, [pc, #20]	@ (8014890 <fiprintf+0x20>)
 801487a:	f853 2b04 	ldr.w	r2, [r3], #4
 801487e:	6800      	ldr	r0, [r0, #0]
 8014880:	9301      	str	r3, [sp, #4]
 8014882:	f7ff fca3 	bl	80141cc <_vfiprintf_r>
 8014886:	b002      	add	sp, #8
 8014888:	f85d eb04 	ldr.w	lr, [sp], #4
 801488c:	b003      	add	sp, #12
 801488e:	4770      	bx	lr
 8014890:	24000040 	.word	0x24000040

08014894 <__swhatbuf_r>:
 8014894:	b570      	push	{r4, r5, r6, lr}
 8014896:	460c      	mov	r4, r1
 8014898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801489c:	2900      	cmp	r1, #0
 801489e:	b096      	sub	sp, #88	@ 0x58
 80148a0:	4615      	mov	r5, r2
 80148a2:	461e      	mov	r6, r3
 80148a4:	da0d      	bge.n	80148c2 <__swhatbuf_r+0x2e>
 80148a6:	89a3      	ldrh	r3, [r4, #12]
 80148a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80148ac:	f04f 0100 	mov.w	r1, #0
 80148b0:	bf14      	ite	ne
 80148b2:	2340      	movne	r3, #64	@ 0x40
 80148b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80148b8:	2000      	movs	r0, #0
 80148ba:	6031      	str	r1, [r6, #0]
 80148bc:	602b      	str	r3, [r5, #0]
 80148be:	b016      	add	sp, #88	@ 0x58
 80148c0:	bd70      	pop	{r4, r5, r6, pc}
 80148c2:	466a      	mov	r2, sp
 80148c4:	f000 f848 	bl	8014958 <_fstat_r>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	dbec      	blt.n	80148a6 <__swhatbuf_r+0x12>
 80148cc:	9901      	ldr	r1, [sp, #4]
 80148ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80148d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80148d6:	4259      	negs	r1, r3
 80148d8:	4159      	adcs	r1, r3
 80148da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80148de:	e7eb      	b.n	80148b8 <__swhatbuf_r+0x24>

080148e0 <__smakebuf_r>:
 80148e0:	898b      	ldrh	r3, [r1, #12]
 80148e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148e4:	079d      	lsls	r5, r3, #30
 80148e6:	4606      	mov	r6, r0
 80148e8:	460c      	mov	r4, r1
 80148ea:	d507      	bpl.n	80148fc <__smakebuf_r+0x1c>
 80148ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80148f0:	6023      	str	r3, [r4, #0]
 80148f2:	6123      	str	r3, [r4, #16]
 80148f4:	2301      	movs	r3, #1
 80148f6:	6163      	str	r3, [r4, #20]
 80148f8:	b003      	add	sp, #12
 80148fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fc:	ab01      	add	r3, sp, #4
 80148fe:	466a      	mov	r2, sp
 8014900:	f7ff ffc8 	bl	8014894 <__swhatbuf_r>
 8014904:	9f00      	ldr	r7, [sp, #0]
 8014906:	4605      	mov	r5, r0
 8014908:	4639      	mov	r1, r7
 801490a:	4630      	mov	r0, r6
 801490c:	f7ff fba8 	bl	8014060 <_malloc_r>
 8014910:	b948      	cbnz	r0, 8014926 <__smakebuf_r+0x46>
 8014912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014916:	059a      	lsls	r2, r3, #22
 8014918:	d4ee      	bmi.n	80148f8 <__smakebuf_r+0x18>
 801491a:	f023 0303 	bic.w	r3, r3, #3
 801491e:	f043 0302 	orr.w	r3, r3, #2
 8014922:	81a3      	strh	r3, [r4, #12]
 8014924:	e7e2      	b.n	80148ec <__smakebuf_r+0xc>
 8014926:	89a3      	ldrh	r3, [r4, #12]
 8014928:	6020      	str	r0, [r4, #0]
 801492a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801492e:	81a3      	strh	r3, [r4, #12]
 8014930:	9b01      	ldr	r3, [sp, #4]
 8014932:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014936:	b15b      	cbz	r3, 8014950 <__smakebuf_r+0x70>
 8014938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801493c:	4630      	mov	r0, r6
 801493e:	f000 f81d 	bl	801497c <_isatty_r>
 8014942:	b128      	cbz	r0, 8014950 <__smakebuf_r+0x70>
 8014944:	89a3      	ldrh	r3, [r4, #12]
 8014946:	f023 0303 	bic.w	r3, r3, #3
 801494a:	f043 0301 	orr.w	r3, r3, #1
 801494e:	81a3      	strh	r3, [r4, #12]
 8014950:	89a3      	ldrh	r3, [r4, #12]
 8014952:	431d      	orrs	r5, r3
 8014954:	81a5      	strh	r5, [r4, #12]
 8014956:	e7cf      	b.n	80148f8 <__smakebuf_r+0x18>

08014958 <_fstat_r>:
 8014958:	b538      	push	{r3, r4, r5, lr}
 801495a:	4d07      	ldr	r5, [pc, #28]	@ (8014978 <_fstat_r+0x20>)
 801495c:	2300      	movs	r3, #0
 801495e:	4604      	mov	r4, r0
 8014960:	4608      	mov	r0, r1
 8014962:	4611      	mov	r1, r2
 8014964:	602b      	str	r3, [r5, #0]
 8014966:	f7ec f9a7 	bl	8000cb8 <_fstat>
 801496a:	1c43      	adds	r3, r0, #1
 801496c:	d102      	bne.n	8014974 <_fstat_r+0x1c>
 801496e:	682b      	ldr	r3, [r5, #0]
 8014970:	b103      	cbz	r3, 8014974 <_fstat_r+0x1c>
 8014972:	6023      	str	r3, [r4, #0]
 8014974:	bd38      	pop	{r3, r4, r5, pc}
 8014976:	bf00      	nop
 8014978:	24007e30 	.word	0x24007e30

0801497c <_isatty_r>:
 801497c:	b538      	push	{r3, r4, r5, lr}
 801497e:	4d06      	ldr	r5, [pc, #24]	@ (8014998 <_isatty_r+0x1c>)
 8014980:	2300      	movs	r3, #0
 8014982:	4604      	mov	r4, r0
 8014984:	4608      	mov	r0, r1
 8014986:	602b      	str	r3, [r5, #0]
 8014988:	f7ec f9a6 	bl	8000cd8 <_isatty>
 801498c:	1c43      	adds	r3, r0, #1
 801498e:	d102      	bne.n	8014996 <_isatty_r+0x1a>
 8014990:	682b      	ldr	r3, [r5, #0]
 8014992:	b103      	cbz	r3, 8014996 <_isatty_r+0x1a>
 8014994:	6023      	str	r3, [r4, #0]
 8014996:	bd38      	pop	{r3, r4, r5, pc}
 8014998:	24007e30 	.word	0x24007e30

0801499c <_sbrk_r>:
 801499c:	b538      	push	{r3, r4, r5, lr}
 801499e:	4d06      	ldr	r5, [pc, #24]	@ (80149b8 <_sbrk_r+0x1c>)
 80149a0:	2300      	movs	r3, #0
 80149a2:	4604      	mov	r4, r0
 80149a4:	4608      	mov	r0, r1
 80149a6:	602b      	str	r3, [r5, #0]
 80149a8:	f7ec f9ae 	bl	8000d08 <_sbrk>
 80149ac:	1c43      	adds	r3, r0, #1
 80149ae:	d102      	bne.n	80149b6 <_sbrk_r+0x1a>
 80149b0:	682b      	ldr	r3, [r5, #0]
 80149b2:	b103      	cbz	r3, 80149b6 <_sbrk_r+0x1a>
 80149b4:	6023      	str	r3, [r4, #0]
 80149b6:	bd38      	pop	{r3, r4, r5, pc}
 80149b8:	24007e30 	.word	0x24007e30

080149bc <abort>:
 80149bc:	b508      	push	{r3, lr}
 80149be:	2006      	movs	r0, #6
 80149c0:	f000 f82c 	bl	8014a1c <raise>
 80149c4:	2001      	movs	r0, #1
 80149c6:	f7ec f943 	bl	8000c50 <_exit>

080149ca <_raise_r>:
 80149ca:	291f      	cmp	r1, #31
 80149cc:	b538      	push	{r3, r4, r5, lr}
 80149ce:	4605      	mov	r5, r0
 80149d0:	460c      	mov	r4, r1
 80149d2:	d904      	bls.n	80149de <_raise_r+0x14>
 80149d4:	2316      	movs	r3, #22
 80149d6:	6003      	str	r3, [r0, #0]
 80149d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149dc:	bd38      	pop	{r3, r4, r5, pc}
 80149de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80149e0:	b112      	cbz	r2, 80149e8 <_raise_r+0x1e>
 80149e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80149e6:	b94b      	cbnz	r3, 80149fc <_raise_r+0x32>
 80149e8:	4628      	mov	r0, r5
 80149ea:	f000 f831 	bl	8014a50 <_getpid_r>
 80149ee:	4622      	mov	r2, r4
 80149f0:	4601      	mov	r1, r0
 80149f2:	4628      	mov	r0, r5
 80149f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149f8:	f000 b818 	b.w	8014a2c <_kill_r>
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d00a      	beq.n	8014a16 <_raise_r+0x4c>
 8014a00:	1c59      	adds	r1, r3, #1
 8014a02:	d103      	bne.n	8014a0c <_raise_r+0x42>
 8014a04:	2316      	movs	r3, #22
 8014a06:	6003      	str	r3, [r0, #0]
 8014a08:	2001      	movs	r0, #1
 8014a0a:	e7e7      	b.n	80149dc <_raise_r+0x12>
 8014a0c:	2100      	movs	r1, #0
 8014a0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014a12:	4620      	mov	r0, r4
 8014a14:	4798      	blx	r3
 8014a16:	2000      	movs	r0, #0
 8014a18:	e7e0      	b.n	80149dc <_raise_r+0x12>
	...

08014a1c <raise>:
 8014a1c:	4b02      	ldr	r3, [pc, #8]	@ (8014a28 <raise+0xc>)
 8014a1e:	4601      	mov	r1, r0
 8014a20:	6818      	ldr	r0, [r3, #0]
 8014a22:	f7ff bfd2 	b.w	80149ca <_raise_r>
 8014a26:	bf00      	nop
 8014a28:	24000040 	.word	0x24000040

08014a2c <_kill_r>:
 8014a2c:	b538      	push	{r3, r4, r5, lr}
 8014a2e:	4d07      	ldr	r5, [pc, #28]	@ (8014a4c <_kill_r+0x20>)
 8014a30:	2300      	movs	r3, #0
 8014a32:	4604      	mov	r4, r0
 8014a34:	4608      	mov	r0, r1
 8014a36:	4611      	mov	r1, r2
 8014a38:	602b      	str	r3, [r5, #0]
 8014a3a:	f7ec f8f7 	bl	8000c2c <_kill>
 8014a3e:	1c43      	adds	r3, r0, #1
 8014a40:	d102      	bne.n	8014a48 <_kill_r+0x1c>
 8014a42:	682b      	ldr	r3, [r5, #0]
 8014a44:	b103      	cbz	r3, 8014a48 <_kill_r+0x1c>
 8014a46:	6023      	str	r3, [r4, #0]
 8014a48:	bd38      	pop	{r3, r4, r5, pc}
 8014a4a:	bf00      	nop
 8014a4c:	24007e30 	.word	0x24007e30

08014a50 <_getpid_r>:
 8014a50:	f7ec b8e4 	b.w	8000c1c <_getpid>

08014a54 <_init>:
 8014a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a56:	bf00      	nop
 8014a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a5a:	bc08      	pop	{r3}
 8014a5c:	469e      	mov	lr, r3
 8014a5e:	4770      	bx	lr

08014a60 <_fini>:
 8014a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a62:	bf00      	nop
 8014a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a66:	bc08      	pop	{r3}
 8014a68:	469e      	mov	lr, r3
 8014a6a:	4770      	bx	lr
