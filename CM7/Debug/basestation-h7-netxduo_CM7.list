
basestation-h7-netxduo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012818  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f64  08012ab8  08012ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a1c  08015a1c  0001ba0f  2**0
                  CONTENTS
  4 .ARM          00000008  08015a1c  08015a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a24  08015a24  0001ba0f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a24  08015a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015a28  08015a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  24000000  08015a2c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .Rx_PoolSection 00004983  2400008c  08015ab8  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000033e0  24004a10  0801a43b  0001ba10  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24007df0  0801a43b  0001bdf0  2**0
                  ALLOC
 12 .lwip_sec     00040200  30000000  30000000  0001c000  2**2
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001ba0f  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025f9d  00000000  00000000  0001ba3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005bd5  00000000  00000000  000419da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018c8  00000000  00000000  000475b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013b3  00000000  00000000  00048e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000468f1  00000000  00000000  0004a22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a2f1  00000000  00000000  00090b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001941ea  00000000  00000000  000bae0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0024eff7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e04  00000000  00000000  0024f03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00255e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004a10 	.word	0x24004a10
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012aa0 	.word	0x08012aa0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004a14 	.word	0x24004a14
 80002dc:	08012aa0 	.word	0x08012aa0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <_write>:
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

int _write(int fd, char *ch, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)ch, len, HAL_MAX_DELAY);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <_write+0x28>)
 80007b4:	f005 fcb2 	bl	800611c <HAL_UART_Transmit>
  return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24004a2c 	.word	0x24004a2c

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  /* MPU Configuration--------------------------------------------------------*/
	  MPU_Config();
 80007ce:	f000 f9ad 	bl	8000b2c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007d2:	4b44      	ldr	r3, [pc, #272]	@ (80008e4 <main+0x11c>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d11b      	bne.n	8000816 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007de:	f3bf 8f4f 	dsb	sy
}
 80007e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e4:	f3bf 8f6f 	isb	sy
}
 80007e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ea:	4b3e      	ldr	r3, [pc, #248]	@ (80008e4 <main+0x11c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007f2:	f3bf 8f4f 	dsb	sy
}
 80007f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f8:	f3bf 8f6f 	isb	sy
}
 80007fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007fe:	4b39      	ldr	r3, [pc, #228]	@ (80008e4 <main+0x11c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a38      	ldr	r2, [pc, #224]	@ (80008e4 <main+0x11c>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000808:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800080a:	f3bf 8f4f 	dsb	sy
}
 800080e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000810:	f3bf 8f6f 	isb	sy
}
 8000814:	e000      	b.n	8000818 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000816:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000818:	4b32      	ldr	r3, [pc, #200]	@ (80008e4 <main+0x11c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000820:	2b00      	cmp	r3, #0
 8000822:	d138      	bne.n	8000896 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000824:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <main+0x11c>)
 8000826:	2200      	movs	r2, #0
 8000828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800082c:	f3bf 8f4f 	dsb	sy
}
 8000830:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000832:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <main+0x11c>)
 8000834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000838:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	0b5b      	lsrs	r3, r3, #13
 800083e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000842:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	08db      	lsrs	r3, r3, #3
 8000848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800084c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	015a      	lsls	r2, r3, #5
 8000852:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000856:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800085c:	4921      	ldr	r1, [pc, #132]	@ (80008e4 <main+0x11c>)
 800085e:	4313      	orrs	r3, r2
 8000860:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1e5a      	subs	r2, r3, #1
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1ef      	bne.n	800084e <main+0x86>
    } while(sets-- != 0U);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1e5      	bne.n	8000844 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000878:	f3bf 8f4f 	dsb	sy
}
 800087c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <main+0x11c>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a18      	ldr	r2, [pc, #96]	@ (80008e4 <main+0x11c>)
 8000884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000888:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800088a:	f3bf 8f4f 	dsb	sy
}
 800088e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
}
 8000894:	e000      	b.n	8000898 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000896:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fc2c 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f828 	bl	80008f0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <main+0x120>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <main+0x120>)
 80008a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <main+0x120>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008be:	2000      	movs	r0, #0
 80008c0:	f002 fd42 	bl	8003348 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f002 fd58 	bl	800337c <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 f8d8 	bl	8000a80 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008d0:	f000 f88a 	bl	80009e8 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80008d4:	f006 fd3c 	bl	8007350 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  printf("basestation-h7-netxduo\r\n");
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <main+0x124>)
 80008da:	f011 f9e1 	bl	8011ca0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 MX_LWIP_Process();
 80008de:	f006 fe77 	bl	80075d0 <MX_LWIP_Process>
 80008e2:	e7fc      	b.n	80008de <main+0x116>
 80008e4:	e000ed00 	.word	0xe000ed00
 80008e8:	58024400 	.word	0x58024400
 80008ec:	08012ab8 	.word	0x08012ab8

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	@ 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	224c      	movs	r2, #76	@ 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f011 fabe 	bl	8011e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f011 fab8 	bl	8011e80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_SMPS_2V5_SUPPLIES_EXT);
 8000910:	202d      	movs	r0, #45	@ 0x2d
 8000912:	f002 fd47 	bl	80033a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b31      	ldr	r3, [pc, #196]	@ (80009e0 <SystemClock_Config+0xf0>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a30      	ldr	r2, [pc, #192]	@ (80009e0 <SystemClock_Config+0xf0>)
 8000920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b2e      	ldr	r3, [pc, #184]	@ (80009e0 <SystemClock_Config+0xf0>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <SystemClock_Config+0xf4>)
 8000932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000934:	4a2b      	ldr	r2, [pc, #172]	@ (80009e4 <SystemClock_Config+0xf4>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800093c:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <SystemClock_Config+0xf4>)
 800093e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000948:	bf00      	nop
 800094a:	4b25      	ldr	r3, [pc, #148]	@ (80009e0 <SystemClock_Config+0xf0>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000956:	d1f8      	bne.n	800094a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800095c:	2301      	movs	r3, #1
 800095e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000960:	2340      	movs	r3, #64	@ 0x40
 8000962:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000968:	2300      	movs	r3, #0
 800096a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000970:	233c      	movs	r3, #60	@ 0x3c
 8000972:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000980:	230c      	movs	r3, #12
 8000982:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000984:	2300      	movs	r3, #0
 8000986:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000990:	4618      	mov	r0, r3
 8000992:	f002 fd61 	bl	8003458 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800099c:	f000 f902 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	233f      	movs	r3, #63	@ 0x3f
 80009a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2303      	movs	r3, #3
 80009a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ac:	2308      	movs	r3, #8
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b0:	2340      	movs	r3, #64	@ 0x40
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009b4:	2340      	movs	r3, #64	@ 0x40
 80009b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009be:	2340      	movs	r3, #64	@ 0x40
 80009c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2104      	movs	r1, #4
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 f9a0 	bl	8003d0c <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80009d2:	f000 f8e7 	bl	8000ba4 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3770      	adds	r7, #112	@ 0x70
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	58024800 	.word	0x58024800
 80009e4:	58000400 	.word	0x58000400

080009e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	@ (8000a7c <MX_USART3_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a32:	f005 fb23 	bl	800607c <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f8b2 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a44:	f006 fbb9 	bl	80071ba <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f8a9 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a56:	f006 fbee 	bl	8007236 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 f8a0 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_USART3_UART_Init+0x90>)
 8000a66:	f006 fb6f 	bl	8007148 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f898 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24004a2c 	.word	0x24004a2c
 8000a7c:	40004800 	.word	0x40004800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	4a26      	ldr	r2, [pc, #152]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a96:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_GPIO_Init+0xa8>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	371c      	adds	r7, #28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	58024400 	.word	0x58024400

08000b2c <MPU_Config>:

/* USER CODE BEGIN 4 */
void MPU_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b3e:	f000 fc9b 	bl	8001478 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b42:	2301      	movs	r3, #1
 8000b44:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MPU_Config+0x74>)
 8000b4c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000b4e:	230e      	movs	r3, #14
 8000b50:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fcb9 	bl	80014e8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b82:	2301      	movs	r3, #1
 8000b84:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fcab 	bl	80014e8 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b92:	2004      	movs	r0, #4
 8000b94:	f000 fc88 	bl	80014a8 <HAL_MPU_Enable>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	30040000 	.word	0x30040000

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  printf("Error_Handler(void)");
 8000ba8:	4803      	ldr	r0, [pc, #12]	@ (8000bb8 <Error_Handler+0x14>)
 8000baa:	f011 f811 	bl	8011bd0 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb2:	bf00      	nop
 8000bb4:	e7fd      	b.n	8000bb2 <Error_Handler+0xe>
 8000bb6:	bf00      	nop
 8000bb8:	08012ad0 	.word	0x08012ad0

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_MspInit+0x30>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bc8:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_MspInit+0x30>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_MspInit+0x30>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	58024400 	.word	0x58024400

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ba      	sub	sp, #232	@ 0xe8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	22c0      	movs	r2, #192	@ 0xc0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f011 f935 	bl	8011e80 <memset>
  if(huart->Instance==USART3)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a27      	ldr	r2, [pc, #156]	@ (8000cb8 <HAL_UART_MspInit+0xc8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d146      	bne.n	8000cae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c20:	f04f 0202 	mov.w	r2, #2
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fbf4 	bl	8004424 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c42:	f7ff ffaf 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c46:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <HAL_UART_MspInit+0xcc>)
 8000c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <HAL_UART_MspInit+0xcc>)
 8000c4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_UART_MspInit+0xcc>)
 8000c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_UART_MspInit+0xcc>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_UART_MspInit+0xcc>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_UART_MspInit+0xcc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <HAL_UART_MspInit+0xd0>)
 8000caa:	f002 f99d 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	37e8      	adds	r7, #232	@ 0xe8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40004800 	.word	0x40004800
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	58020c00 	.word	0x58020c00

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1a:	f000 fa5d 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d28:	4802      	ldr	r0, [pc, #8]	@ (8000d34 <ETH_IRQHandler+0x10>)
 8000d2a:	f000 ffaf 	bl	8001c8c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	24004b20 	.word	0x24004b20

08000d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return 1;
 8000d3c:	2301      	movs	r3, #1
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_kill>:

int _kill(int pid, int sig)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <_kill+0x20>)
 8000d54:	2216      	movs	r2, #22
 8000d56:	601a      	str	r2, [r3, #0]
  return -1;
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	24007de0 	.word	0x24007de0

08000d6c <_exit>:

void _exit (int status)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ffe5 	bl	8000d48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d7e:	bf00      	nop
 8000d80:	e7fd      	b.n	8000d7e <_exit+0x12>

08000d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e00a      	b.n	8000daa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d94:	f3af 8000 	nop.w
 8000d98:	4601      	mov	r1, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	b2ca      	uxtb	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dbf0      	blt.n	8000d94 <_read+0x12>
  }

  return len;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de4:	605a      	str	r2, [r3, #4]
  return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_isatty>:

int _isatty(int file)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d205      	bcs.n	8000e60 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <_sbrk+0x6c>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	371c      	adds	r7, #28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	24080000 	.word	0x24080000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	24004ac0 	.word	0x24004ac0
 8000e8c:	24007df0 	.word	0x24007df0
 8000e90:	24007de0 	.word	0x24007de0

08000e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ecc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e98:	f7ff fbea 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e9c:	480c      	ldr	r0, [pc, #48]	@ (8000ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9e:	490d      	ldr	r1, [pc, #52]	@ (8000ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f011 f82b 	bl	8011f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f7ff fc7f 	bl	80007c8 <main>
  bx  lr
 8000eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ed0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ed4:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000ed8:	08015a2c 	.word	0x08015a2c
  ldr r2, =_sbss
 8000edc:	24004a10 	.word	0x24004a10
  ldr r4, =_ebss
 8000ee0:	24007df0 	.word	0x24007df0

08000ee4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC3_IRQHandler>

08000ee6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00b      	beq.n	8000f0e <LAN8742_RegisterBusIO+0x28>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <LAN8742_RegisterBusIO+0x28>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <LAN8742_RegisterBusIO+0x28>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f12:	e014      	b.n	8000f3e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d139      	bne.n	8000fda <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2220      	movs	r2, #32
 8000f78:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e01c      	b.n	8000fba <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f107 020c 	add.w	r2, r7, #12
 8000f88:	2112      	movs	r1, #18
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	4798      	blx	r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	da03      	bge.n	8000f9c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000f94:	f06f 0304 	mvn.w	r3, #4
 8000f98:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f9a:	e00b      	b.n	8000fb4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d105      	bne.n	8000fb4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
         break;
 8000fb2:	e005      	b.n	8000fc0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2b1f      	cmp	r3, #31
 8000fbe:	d9df      	bls.n	8000f80 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b1f      	cmp	r3, #31
 8000fc6:	d902      	bls.n	8000fce <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000fc8:	f06f 0302 	mvn.w	r3, #2
 8000fcc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000fda:	693b      	ldr	r3, [r7, #16]
 }
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6810      	ldr	r0, [r2, #0]
 8000ff8:	f107 020c 	add.w	r2, r7, #12
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4798      	blx	r3
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	da02      	bge.n	800100c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001006:	f06f 0304 	mvn.w	r3, #4
 800100a:	e06e      	b.n	80010ea <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6810      	ldr	r0, [r2, #0]
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	2101      	movs	r1, #1
 800101a:	4798      	blx	r3
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	da02      	bge.n	8001028 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001022:	f06f 0304 	mvn.w	r3, #4
 8001026:	e060      	b.n	80010ea <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001032:	2301      	movs	r3, #1
 8001034:	e059      	b.n	80010ea <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6810      	ldr	r0, [r2, #0]
 800103e:	f107 020c 	add.w	r2, r7, #12
 8001042:	2100      	movs	r1, #0
 8001044:	4798      	blx	r3
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	da02      	bge.n	8001052 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800104c:	f06f 0304 	mvn.w	r3, #4
 8001050:	e04b      	b.n	80010ea <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d11b      	bne.n	8001094 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <LAN8742_GetLinkState+0x90>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001070:	2302      	movs	r3, #2
 8001072:	e03a      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800107e:	2303      	movs	r3, #3
 8001080:	e033      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800108c:	2304      	movs	r3, #4
 800108e:	e02c      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001090:	2305      	movs	r3, #5
 8001092:	e02a      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6810      	ldr	r0, [r2, #0]
 800109c:	f107 020c 	add.w	r2, r7, #12
 80010a0:	211f      	movs	r1, #31
 80010a2:	4798      	blx	r3
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da02      	bge.n	80010b0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010aa:	f06f 0304 	mvn.w	r3, #4
 80010ae:	e01c      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010ba:	2306      	movs	r3, #6
 80010bc:	e015      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f003 031c 	and.w	r3, r3, #28
 80010c4:	2b18      	cmp	r3, #24
 80010c6:	d101      	bne.n	80010cc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010c8:	2302      	movs	r3, #2
 80010ca:	e00e      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 031c 	and.w	r3, r3, #28
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d101      	bne.n	80010da <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e007      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f003 031c 	and.w	r3, r3, #28
 80010e0:	2b14      	cmp	r3, #20
 80010e2:	d101      	bne.n	80010e8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010e4:	2304      	movs	r3, #4
 80010e6:	e000      	b.n	80010ea <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010e8:	2305      	movs	r3, #5
    }
  }
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fa:	2003      	movs	r0, #3
 80010fc:	f000 f97c 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001100:	f002 ffba 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8001104:	4602      	mov	r2, r0
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_Init+0x68>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	4913      	ldr	r1, [pc, #76]	@ (8001160 <HAL_Init+0x6c>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <HAL_Init+0x68>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <HAL_Init+0x6c>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_Init+0x70>)
 8001136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001138:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <HAL_Init+0x74>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113e:	200f      	movs	r0, #15
 8001140:	f000 f814 	bl	800116c <HAL_InitTick>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e002      	b.n	8001154 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800114e:	f7ff fd35 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58024400 	.word	0x58024400
 8001160:	08015814 	.word	0x08015814
 8001164:	24000004 	.word	0x24000004
 8001168:	24000000 	.word	0x24000000

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_InitTick+0x60>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e021      	b.n	80011c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <HAL_InitTick+0x64>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_InitTick+0x60>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f961 	bl	800145e <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b4:	f000 f92b 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_InitTick+0x68>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2400000c 	.word	0x2400000c
 80011d0:	24000000 	.word	0x24000000
 80011d4:	24000008 	.word	0x24000008

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	2400000c 	.word	0x2400000c
 80011fc:	24004ac4 	.word	0x24004ac4

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	24004ac4 	.word	0x24004ac4

08001218 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <HAL_GetREVID+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0c1b      	lsrs	r3, r3, #16
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	5c001000 	.word	0x5c001000

08001230 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001240:	4904      	ldr	r1, [pc, #16]	@ (8001254 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	58000400 	.word	0x58000400

08001258 <__NVIC_SetPriorityGrouping>:
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <__NVIC_SetPriorityGrouping+0x40>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	4313      	orrs	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <__NVIC_SetPriorityGrouping+0x40>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	05fa0000 	.word	0x05fa0000

080012a0 <__NVIC_GetPriorityGrouping>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	@ (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	@ (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	@ 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	@ 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800141c:	f7ff ff40 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff ff90 	bl	800134c <NVIC_EncodePriority>
 800142c:	4602      	mov	r2, r0
 800142e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff5f 	bl	80012f8 <__NVIC_SetPriority>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff33 	bl	80012bc <__NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffa4 	bl	80013b4 <SysTick_Config>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800147c:	f3bf 8f5f 	dmb	sy
}
 8001480:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_MPU_Disable+0x28>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	4a06      	ldr	r2, [pc, #24]	@ (80014a0 <HAL_MPU_Disable+0x28>)
 8001488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800148e:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_MPU_Disable+0x2c>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	e000ed90 	.word	0xe000ed90

080014a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014b0:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <HAL_MPU_Enable+0x38>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_MPU_Enable+0x3c>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_MPU_Enable+0x3c>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014c6:	f3bf 8f4f 	dsb	sy
}
 80014ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014cc:	f3bf 8f6f 	isb	sy
}
 80014d0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed90 	.word	0xe000ed90
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	785a      	ldrb	r2, [r3, #1]
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_MPU_ConfigRegion+0x7c>)
 80014f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <HAL_MPU_ConfigRegion+0x7c>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <HAL_MPU_ConfigRegion+0x7c>)
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001504:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <HAL_MPU_ConfigRegion+0x7c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7b1b      	ldrb	r3, [r3, #12]
 8001510:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7adb      	ldrb	r3, [r3, #11]
 8001516:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001518:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7a9b      	ldrb	r3, [r3, #10]
 800151e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001520:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7b5b      	ldrb	r3, [r3, #13]
 8001526:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7b9b      	ldrb	r3, [r3, #14]
 800152e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001530:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7bdb      	ldrb	r3, [r3, #15]
 8001536:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7a5b      	ldrb	r3, [r3, #9]
 800153e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7a1b      	ldrb	r3, [r3, #8]
 8001546:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001548:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001552:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001554:	6113      	str	r3, [r2, #16]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed90 	.word	0xe000ed90

08001568 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <HAL_GetCurrentCPUID+0x24>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	2b07      	cmp	r3, #7
 8001578:	d101      	bne.n	800157e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800157a:	2303      	movs	r3, #3
 800157c:	e000      	b.n	8001580 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800157e:	2301      	movs	r3, #1
  }
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0e3      	b.n	800176a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d106      	bne.n	80015ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2223      	movs	r2, #35	@ 0x23
 80015b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f006 f9d7 	bl	8007968 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001774 <HAL_ETH_Init+0x1e4>)
 80015bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c0:	4a6c      	ldr	r2, [pc, #432]	@ (8001774 <HAL_ETH_Init+0x1e4>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <HAL_ETH_Init+0x1e4>)
 80015cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7a1b      	ldrb	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d103      	bne.n	80015e8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff fe25 	bl	8001230 <HAL_SYSCFG_ETHInterfaceSelect>
 80015e6:	e003      	b.n	80015f0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015e8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80015ec:	f7ff fe20 	bl	8001230 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015f0:	4b61      	ldr	r3, [pc, #388]	@ (8001778 <HAL_ETH_Init+0x1e8>)
 80015f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800160a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800160c:	f7ff fdf8 	bl	8001200 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001612:	e011      	b.n	8001638 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001614:	f7ff fdf4 	bl	8001200 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001622:	d909      	bls.n	8001638 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2204      	movs	r2, #4
 8001628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	22e0      	movs	r2, #224	@ 0xe0
 8001630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e098      	b.n	800176a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e4      	bne.n	8001614 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fefa 	bl	8002444 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001650:	f002 fe8c 	bl	800436c <HAL_RCC_GetHCLKFreq>
 8001654:	4603      	mov	r3, r0
 8001656:	4a49      	ldr	r2, [pc, #292]	@ (800177c <HAL_ETH_Init+0x1ec>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	0c9a      	lsrs	r2, r3, #18
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3a01      	subs	r2, #1
 8001664:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f001 f8dd 	bl	8002828 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001676:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800167a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001686:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800168a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	22e0      	movs	r2, #224	@ 0xe0
 80016a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e05d      	b.n	800176a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <HAL_ETH_Init+0x1f0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6952      	ldr	r2, [r2, #20]
 80016c2:	0051      	lsls	r1, r2, #1
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016ce:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f001 f945 	bl	8002962 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f001 f98b 	bl	80029f4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	3305      	adds	r3, #5
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	021a      	lsls	r2, r3, #8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	3304      	adds	r3, #4
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	3303      	adds	r3, #3
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	061a      	lsls	r2, r3, #24
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	3302      	adds	r3, #2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800171c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800172a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800172c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <HAL_ETH_Init+0x1f4>)
 800173e:	430b      	orrs	r3, r1
 8001740:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <HAL_ETH_Init+0x1f8>)
 8001752:	430b      	orrs	r3, r1
 8001754:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2210      	movs	r2, #16
 8001764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	58024400 	.word	0x58024400
 8001778:	58000400 	.word	0x58000400
 800177c:	431bde83 	.word	0x431bde83
 8001780:	ffff8001 	.word	0xffff8001
 8001784:	0c020060 	.word	0x0c020060
 8001788:	0c20c000 	.word	0x0c20c000

0800178c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800179a:	2b10      	cmp	r3, #16
 800179c:	d153      	bne.n	8001846 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2223      	movs	r2, #35	@ 0x23
 80017a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2204      	movs	r2, #4
 80017aa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f9f3 	bl	8001b98 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0202 	orr.w	r2, r2, #2
 80017c0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017fe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800180a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800181a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001826:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001832:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001836:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2223      	movs	r2, #35	@ 0x23
 800183e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800185e:	2b23      	cmp	r3, #35	@ 0x23
 8001860:	d13f      	bne.n	80018e2 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2223      	movs	r2, #35	@ 0x23
 8001866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001872:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001882:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800189e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0202 	bic.w	r2, r2, #2
 80018d4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2210      	movs	r2, #16
 80018da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
  }
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07f      	b.n	8001a16 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800191c:	2b23      	cmp	r3, #35	@ 0x23
 800191e:	d179      	bne.n	8001a14 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001920:	2200      	movs	r2, #0
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f001 f8c3 	bl	8002ab0 <ETH_Prepare_Tx_Descriptors>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001936:	f043 0202 	orr.w	r2, r3, #2
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e068      	b.n	8001a16 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001944:	f3bf 8f4f 	dsb	sy
}
 8001948:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3206      	adds	r2, #6
 8001952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001956:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	629a      	str	r2, [r3, #40]	@ 0x28
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001966:	2b03      	cmp	r3, #3
 8001968:	d904      	bls.n	8001974 <HAL_ETH_Transmit+0x84>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	1f1a      	subs	r2, r3, #4
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3106      	adds	r1, #6
 8001980:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001984:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001988:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 800198c:	f7ff fc38 	bl	8001200 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001992:	e039      	b.n	8001a08 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80019a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d012      	beq.n	80019ce <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ae:	f043 0208 	orr.w	r2, r3, #8
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e023      	b.n	8001a16 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019d4:	d018      	beq.n	8001a08 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019d6:	f7ff fc13 	bl	8001200 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d302      	bcc.n	80019ec <HAL_ETH_Transmit+0xfc>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10d      	bne.n	8001a08 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f2:	f043 0204 	orr.w	r2, r3, #4
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001a02:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e006      	b.n	8001a16 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dbc1      	blt.n	8001994 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e000      	b.n	8001a16 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
  }
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b088      	sub	sp, #32
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0a2      	b.n	8001b90 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a50:	2b23      	cmp	r3, #35	@ 0x23
 8001a52:	d001      	beq.n	8001a58 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e09b      	b.n	8001b90 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	3212      	adds	r2, #18
 8001a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a68:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a6e:	f1c3 0304 	rsb	r3, r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a74:	e064      	b.n	8001b40 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d103      	bne.n	8001aa6 <HAL_ETH_ReadData+0x88>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d03a      	beq.n	8001b1c <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f006 f914 	bl	8007d28 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d902      	bls.n	8001b2e <HAL_ETH_ReadData+0x110>
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	3212      	adds	r2, #18
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db06      	blt.n	8001b56 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d202      	bcs.n	8001b56 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001b50:	7cfb      	ldrb	r3, [r7, #19]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d08f      	beq.n	8001a76 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	441a      	add	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f814 	bl	8001b98 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001b76:	7cfb      	ldrb	r3, [r7, #19]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d108      	bne.n	8001b8e <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	3212      	adds	r2, #18
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bbe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001bc0:	e038      	b.n	8001c34 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d112      	bne.n	8001bf0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f006 f87a 	bl	8007cc8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	74fb      	strb	r3, [r7, #19]
 8001bde:	e007      	b.n	8001bf0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	461a      	mov	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	461a      	mov	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01e      	beq.n	8001c34 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	e003      	b.n	8001c10 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001c0e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	3301      	adds	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d902      	bls.n	8001c22 <ETH_UpdateDescriptor+0x8a>
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	3212      	adds	r2, #18
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <ETH_UpdateDescriptor+0xa8>
 8001c3a:	7cfb      	ldrb	r3, [r7, #19]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1c0      	bne.n	8001bc2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d01b      	beq.n	8001c82 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c54:	f3bf 8f5f 	dmb	sy
}
 8001c58:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6919      	ldr	r1, [r3, #16]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	18ca      	adds	r2, r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c72:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001c9c:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001caa:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001cba:	4b77      	ldr	r3, [pc, #476]	@ (8001e98 <HAL_ETH_IRQHandler+0x20c>)
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbe:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8001cc0:	4b76      	ldr	r3, [pc, #472]	@ (8001e9c <HAL_ETH_IRQHandler+0x210>)
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d010      	beq.n	8001cf2 <HAL_ETH_IRQHandler+0x66>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001ce8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8e1 	bl	8001eb4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <HAL_ETH_IRQHandler+0x92>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001d14:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f8c1 	bl	8001ea0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d047      	beq.n	8001db8 <HAL_ETH_IRQHandler+0x12c>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d042      	beq.n	8001db8 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d38:	f043 0208 	orr.w	r2, r3, #8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01e      	beq.n	8001d8a <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d54:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001d58:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d6c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d7c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	22e0      	movs	r2, #224	@ 0xe0
 8001d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001d88:	e013      	b.n	8001db2 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d92:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001d96:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da8:	461a      	mov	r2, r3
 8001daa:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001dae:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f888 	bl	8001ec8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d104      	bne.n	8001dcc <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d019      	beq.n	8001e00 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd2:	f043 0210 	orr.w	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	22e0      	movs	r2, #224	@ 0xe0
 8001dee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f868 	bl	8001ec8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00f      	beq.n	8001e2a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e12:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f85d 	bl	8001edc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00f      	beq.n	8001e54 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001e3c:	f003 020f 	and.w	r2, r3, #15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f852 	bl	8001ef0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001e54:	f7ff fb88 	bl	8001568 <HAL_GetCurrentCPUID>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d10c      	bne.n	8001e78 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_ETH_IRQHandler+0x20c>)
 8001e6a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e6e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f847 	bl	8001f04 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8001e76:	e00b      	b.n	8001e90 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_ETH_IRQHandler+0x210>)
 8001e84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f83a 	bl	8001f04 <HAL_ETH_WakeUpCallback>
}
 8001e90:	bf00      	nop
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58000080 	.word	0x58000080
 8001e9c:	580000c0 	.word	0x580000c0

08001ea0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e03e      	b.n	8001fb8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f42:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	055b      	lsls	r3, r3, #21
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f043 030c 	orr.w	r3, r3, #12
 8001f66:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001f7a:	f7ff f941 	bl	8001200 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f80:	e009      	b.n	8001f96 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f82:	f7ff f93d 	bl	8001200 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f90:	d901      	bls.n	8001f96 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e010      	b.n	8001fb8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ed      	bne.n	8001f82 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e03c      	b.n	800205c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fea:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	055b      	lsls	r3, r3, #21
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f023 030c 	bic.w	r3, r3, #12
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <HAL_ETH_WritePHYRegister+0xa4>)
 8002022:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002026:	4a0f      	ldr	r2, [pc, #60]	@ (8002064 <HAL_ETH_WritePHYRegister+0xa4>)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800202e:	f7ff f8e7 	bl	8001200 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002034:	e009      	b.n	800204a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002036:	f7ff f8e3 	bl	8001200 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002044:	d901      	bls.n	800204a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e008      	b.n	800205c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ed      	bne.n	8002036 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40028000 	.word	0x40028000

08002068 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e1c3      	b.n	8002404 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800210a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf14      	ite	ne
 8002112:	2301      	movne	r3, #1
 8002114:	2300      	moveq	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf14      	ite	ne
 8002162:	2301      	movne	r3, #1
 8002164:	2300      	moveq	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf0c      	ite	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	2300      	movne	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80021f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800228c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	0e5b      	lsrs	r3, r3, #25
 80022c6:	f003 021f 	and.w	r2, r3, #31
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf0c      	ite	eq
 8002322:	2301      	moveq	r3, #1
 8002324:	2300      	movne	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002336:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	b29a      	uxth	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf14      	ite	ne
 800235c:	2301      	movne	r3, #1
 800235e:	2300      	moveq	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002372:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf14      	ite	ne
 800237a:	2301      	movne	r3, #1
 800237c:	2300      	moveq	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002390:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80023a0:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80023ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e00b      	b.n	800243c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800242a:	2b10      	cmp	r3, #16
 800242c:	d105      	bne.n	800243a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f857 	bl	80024e4 <ETH_SetMACConfig>

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002454:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800245c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800245e:	f001 ff85 	bl	800436c <HAL_RCC_GetHCLKFreq>
 8002462:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4a1a      	ldr	r2, [pc, #104]	@ (80024d0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d804      	bhi.n	8002476 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e022      	b.n	80024bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4a16      	ldr	r2, [pc, #88]	@ (80024d4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d204      	bcs.n	8002488 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e019      	b.n	80024bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4a13      	ldr	r2, [pc, #76]	@ (80024d8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d915      	bls.n	80024bc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d804      	bhi.n	80024a2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e00c      	b.n	80024bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4a0e      	ldr	r2, [pc, #56]	@ (80024e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d804      	bhi.n	80024b4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e003      	b.n	80024bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80024ba:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	02160ebf 	.word	0x02160ebf
 80024d4:	03938700 	.word	0x03938700
 80024d8:	05f5e0ff 	.word	0x05f5e0ff
 80024dc:	08f0d17f 	.word	0x08f0d17f
 80024e0:	0ee6b27f 	.word	0x0ee6b27f

080024e4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80024f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	791b      	ldrb	r3, [r3, #4]
 80024fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80024fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	7b1b      	ldrb	r3, [r3, #12]
 8002504:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002506:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	7b5b      	ldrb	r3, [r3, #13]
 800250c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800250e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	7b9b      	ldrb	r3, [r3, #14]
 8002514:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002516:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	7bdb      	ldrb	r3, [r3, #15]
 800251c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800251e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	7c12      	ldrb	r2, [r2, #16]
 8002524:	2a00      	cmp	r2, #0
 8002526:	d102      	bne.n	800252e <ETH_SetMACConfig+0x4a>
 8002528:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800252c:	e000      	b.n	8002530 <ETH_SetMACConfig+0x4c>
 800252e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002530:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	7c52      	ldrb	r2, [r2, #17]
 8002536:	2a00      	cmp	r2, #0
 8002538:	d102      	bne.n	8002540 <ETH_SetMACConfig+0x5c>
 800253a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800253e:	e000      	b.n	8002542 <ETH_SetMACConfig+0x5e>
 8002540:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002542:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	7c9b      	ldrb	r3, [r3, #18]
 8002548:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800254a:	431a      	orrs	r2, r3
               macconf->Speed |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002550:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002556:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	7f1b      	ldrb	r3, [r3, #28]
 800255c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800255e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	7f5b      	ldrb	r3, [r3, #29]
 8002564:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002566:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	7f92      	ldrb	r2, [r2, #30]
 800256c:	2a00      	cmp	r2, #0
 800256e:	d102      	bne.n	8002576 <ETH_SetMACConfig+0x92>
 8002570:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002574:	e000      	b.n	8002578 <ETH_SetMACConfig+0x94>
 8002576:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002578:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7fdb      	ldrb	r3, [r3, #31]
 800257e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002580:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002588:	2a00      	cmp	r2, #0
 800258a:	d102      	bne.n	8002592 <ETH_SetMACConfig+0xae>
 800258c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002590:	e000      	b.n	8002594 <ETH_SetMACConfig+0xb0>
 8002592:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002594:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800259a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80025a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b56      	ldr	r3, [pc, #344]	@ (8002710 <ETH_SetMACConfig+0x22c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	430b      	orrs	r3, r1
 80025c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80025da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80025e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80025e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	d102      	bne.n	80025f6 <ETH_SetMACConfig+0x112>
 80025f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025f4:	e000      	b.n	80025f8 <ETH_SetMACConfig+0x114>
 80025f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80025f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4b42      	ldr	r3, [pc, #264]	@ (8002714 <ETH_SetMACConfig+0x230>)
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	430b      	orrs	r3, r1
 8002614:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800261c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	4b3a      	ldr	r3, [pc, #232]	@ (8002718 <ETH_SetMACConfig+0x234>)
 800262e:	4013      	ands	r3, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	68f9      	ldr	r1, [r7, #12]
 8002636:	430b      	orrs	r3, r1
 8002638:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002640:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002646:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800264e:	2a00      	cmp	r2, #0
 8002650:	d101      	bne.n	8002656 <ETH_SetMACConfig+0x172>
 8002652:	2280      	movs	r2, #128	@ 0x80
 8002654:	e000      	b.n	8002658 <ETH_SetMACConfig+0x174>
 8002656:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002658:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800266a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800266e:	4013      	ands	r3, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	430b      	orrs	r3, r1
 8002678:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002680:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002688:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002696:	f023 0103 	bic.w	r1, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80026ae:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80026ca:	2a00      	cmp	r2, #0
 80026cc:	d101      	bne.n	80026d2 <ETH_SetMACConfig+0x1ee>
 80026ce:	2240      	movs	r2, #64	@ 0x40
 80026d0:	e000      	b.n	80026d4 <ETH_SetMACConfig+0x1f0>
 80026d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80026d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80026dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80026e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80026f4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	430a      	orrs	r2, r1
 8002700:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	00048083 	.word	0x00048083
 8002714:	c0f88000 	.word	0xc0f88000
 8002718:	fffffef0 	.word	0xfffffef0

0800271c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <ETH_SetDMAConfig+0xf8>)
 8002732:	4013      	ands	r3, r2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	6811      	ldr	r1, [r2, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002742:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	791b      	ldrb	r3, [r3, #4]
 8002748:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800274e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	7b1b      	ldrb	r3, [r3, #12]
 8002754:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4b2c      	ldr	r3, [pc, #176]	@ (8002818 <ETH_SetDMAConfig+0xfc>)
 8002766:	4013      	ands	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	430b      	orrs	r3, r1
 8002770:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002774:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	7b5b      	ldrb	r3, [r3, #13]
 800277a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800278c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002790:	4b22      	ldr	r3, [pc, #136]	@ (800281c <ETH_SetDMAConfig+0x100>)
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	430b      	orrs	r3, r1
 800279c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027a0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	7d1b      	ldrb	r3, [r3, #20]
 80027ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80027ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	7f5b      	ldrb	r3, [r3, #29]
 80027b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80027c6:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <ETH_SetDMAConfig+0x104>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027d6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7f1b      	ldrb	r3, [r3, #28]
 80027de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <ETH_SetDMAConfig+0x108>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	430b      	orrs	r3, r1
 8002800:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002804:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	ffff87fd 	.word	0xffff87fd
 8002818:	ffff2ffe 	.word	0xffff2ffe
 800281c:	fffec000 	.word	0xfffec000
 8002820:	ffc0efef 	.word	0xffc0efef
 8002824:	7fc0ffff 	.word	0x7fc0ffff

08002828 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0a4      	sub	sp, #144	@ 0x90
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002836:	2300      	movs	r3, #0
 8002838:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800284c:	2301      	movs	r3, #1
 800284e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002868:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002870:	2300      	movs	r3, #0
 8002872:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002880:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002884:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800288c:	2300      	movs	r3, #0
 800288e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80028a2:	2300      	movs	r3, #0
 80028a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80028aa:	2300      	movs	r3, #0
 80028ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80028c0:	2320      	movs	r3, #32
 80028c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80028d2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028dc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80028e4:	2302      	movs	r3, #2
 80028e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002902:	2300      	movs	r3, #0
 8002904:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800290c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002910:	4619      	mov	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fde6 	bl	80024e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002918:	2301      	movs	r3, #1
 800291a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800291c:	2301      	movs	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002932:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002936:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800293c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002940:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002948:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff fee1 	bl	800271c <ETH_SetDMAConfig>
}
 800295a:	bf00      	nop
 800295c:	3790      	adds	r7, #144	@ 0x90
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e01d      	b.n	80029ac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68d9      	ldr	r1, [r3, #12]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2200      	movs	r2, #0
 800298c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	3206      	adds	r2, #6
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3301      	adds	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d9de      	bls.n	8002970 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c0:	461a      	mov	r2, r3
 80029c2:	2303      	movs	r3, #3
 80029c4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029d4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e023      	b.n	8002a4a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6919      	ldr	r1, [r3, #16]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	3212      	adds	r2, #18
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d9d8      	bls.n	8002a02 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a76:	461a      	mov	r2, r3
 8002a78:	2303      	movs	r3, #3
 8002a7a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a8a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b091      	sub	sp, #68	@ 0x44
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3318      	adds	r3, #24
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ada:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002aee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002af2:	d007      	beq.n	8002b04 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af8:	3304      	adds	r3, #4
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b04:	2302      	movs	r3, #2
 8002b06:	e266      	b.n	8002fd6 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d044      	beq.n	8002b9e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	4b75      	ldr	r3, [pc, #468]	@ (8002cf0 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b20:	431a      	orrs	r2, r3
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b30:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b40:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d027      	beq.n	8002b9e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b8c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b9c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b51      	ldr	r3, [pc, #324]	@ (8002cf4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	6992      	ldr	r2, [r2, #24]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d036      	beq.n	8002c4e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bea:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bec:	f3bf 8f5f 	dmb	sy
}
 8002bf0:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c00:	3301      	adds	r3, #1
 8002c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d902      	bls.n	8002c10 <ETH_Prepare_Tx_Descriptors+0x160>
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0c:	3b04      	subs	r3, #4
 8002c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c2c:	d10f      	bne.n	8002c4e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002c38:	f3bf 8f5f 	dmb	sy
}
 8002c3c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c48:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e1c3      	b.n	8002fd6 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c50:	3301      	adds	r3, #1
 8002c52:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c68:	6852      	ldr	r2, [r2, #4]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d012      	beq.n	8002c9e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c92:	6852      	ldr	r2, [r2, #4]
 8002c94:	0412      	lsls	r2, r2, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	e008      	b.n	8002cb0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	4b13      	ldr	r3, [pc, #76]	@ (8002cf8 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cae:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d021      	beq.n	8002d00 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	04db      	lsls	r3, r3, #19
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	69d2      	ldr	r2, [r2, #28]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	e02e      	b.n	8002d4e <ETH_Prepare_Tx_Descriptors+0x29e>
 8002cf0:	ffff0000 	.word	0xffff0000
 8002cf4:	ffffc000 	.word	0xffffc000
 8002cf8:	c000ffff 	.word	0xc000ffff
 8002cfc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef4 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	6852      	ldr	r2, [r2, #4]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d10:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d66:	431a      	orrs	r2, r3
 8002d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d76:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d82:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d84:	f3bf 8f5f 	dmb	sy
}
 8002d88:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80da 	beq.w	8002f58 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002db6:	e0cf      	b.n	8002f58 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d902      	bls.n	8002dd6 <ETH_Prepare_Tx_Descriptors+0x326>
 8002dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dde:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dea:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002df8:	d007      	beq.n	8002e0a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dfe:	3304      	adds	r3, #4
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d029      	beq.n	8002e5e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e16:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e1c:	e019      	b.n	8002e52 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e1e:	f3bf 8f5f 	dmb	sy
}
 8002e22:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e32:	3301      	adds	r3, #1
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d902      	bls.n	8002e42 <ETH_Prepare_Tx_Descriptors+0x392>
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4e:	3301      	adds	r3, #1
 8002e50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d3e1      	bcc.n	8002e1e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0bb      	b.n	8002fd6 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e60:	3301      	adds	r3, #1
 8002e62:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e72:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef8 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7e:	6852      	ldr	r2, [r2, #4]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d012      	beq.n	8002eb4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea8:	6852      	ldr	r2, [r2, #4]
 8002eaa:	0412      	lsls	r2, r2, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	e008      	b.n	8002ec6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ec4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	69d2      	ldr	r2, [r2, #28]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	e020      	b.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x484>
 8002ef2:	bf00      	nop
 8002ef4:	ffff8000 	.word	0xffff8000
 8002ef8:	ffffc000 	.word	0xffffc000
 8002efc:	c000ffff 	.word	0xc000ffff
 8002f00:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	4b36      	ldr	r3, [pc, #216]	@ (8002fe4 <ETH_Prepare_Tx_Descriptors+0x534>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	6852      	ldr	r2, [r2, #4]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	3301      	adds	r3, #1
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002f3a:	f3bf 8f5f 	dmb	sy
}
 8002f3e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f56:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f47f af2b 	bne.w	8002db8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e005      	b.n	8002f82 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f80:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f96:	3304      	adds	r3, #4
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fa2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa8:	613b      	str	r3, [r7, #16]
  return(result);
 8002faa:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f383 8810 	msr	PRIMASK, r3
}
 8002fb8:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc0:	4413      	add	r3, r2
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f383 8810 	msr	PRIMASK, r3
}
 8002fd2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3744      	adds	r7, #68	@ 0x44
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	ffff8000 	.word	0xffff8000

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	@ 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ff6:	4b89      	ldr	r3, [pc, #548]	@ (800321c <HAL_GPIO_Init+0x234>)
 8002ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ffa:	e194      	b.n	8003326 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8186 	beq.w	8003320 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d005      	beq.n	800302c <HAL_GPIO_Init+0x44>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d130      	bne.n	800308e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003062:	2201      	movs	r2, #1
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 0201 	and.w	r2, r3, #1
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b03      	cmp	r3, #3
 8003098:	d017      	beq.n	80030ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2203      	movs	r2, #3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d123      	bne.n	800311e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	08da      	lsrs	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3208      	adds	r2, #8
 80030de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	220f      	movs	r2, #15
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	69b9      	ldr	r1, [r7, #24]
 800311a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0203 	and.w	r2, r3, #3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80e0 	beq.w	8003320 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003160:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <HAL_GPIO_Init+0x238>)
 8003162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003166:	4a2e      	ldr	r2, [pc, #184]	@ (8003220 <HAL_GPIO_Init+0x238>)
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003170:	4b2b      	ldr	r3, [pc, #172]	@ (8003220 <HAL_GPIO_Init+0x238>)
 8003172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317e:	4a29      	ldr	r2, [pc, #164]	@ (8003224 <HAL_GPIO_Init+0x23c>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a20      	ldr	r2, [pc, #128]	@ (8003228 <HAL_GPIO_Init+0x240>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d052      	beq.n	8003250 <HAL_GPIO_Init+0x268>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1f      	ldr	r2, [pc, #124]	@ (800322c <HAL_GPIO_Init+0x244>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_GPIO_Init+0x22e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003230 <HAL_GPIO_Init+0x248>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02b      	beq.n	8003212 <HAL_GPIO_Init+0x22a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_GPIO_Init+0x24c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d025      	beq.n	800320e <HAL_GPIO_Init+0x226>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <HAL_GPIO_Init+0x250>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01f      	beq.n	800320a <HAL_GPIO_Init+0x222>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1b      	ldr	r2, [pc, #108]	@ (800323c <HAL_GPIO_Init+0x254>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d019      	beq.n	8003206 <HAL_GPIO_Init+0x21e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003240 <HAL_GPIO_Init+0x258>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_GPIO_Init+0x21a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a19      	ldr	r2, [pc, #100]	@ (8003244 <HAL_GPIO_Init+0x25c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00d      	beq.n	80031fe <HAL_GPIO_Init+0x216>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <HAL_GPIO_Init+0x260>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <HAL_GPIO_Init+0x212>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a17      	ldr	r2, [pc, #92]	@ (800324c <HAL_GPIO_Init+0x264>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_GPIO_Init+0x20e>
 80031f2:	2309      	movs	r3, #9
 80031f4:	e02d      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 80031f6:	230a      	movs	r3, #10
 80031f8:	e02b      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 80031fa:	2308      	movs	r3, #8
 80031fc:	e029      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 80031fe:	2307      	movs	r3, #7
 8003200:	e027      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 8003202:	2306      	movs	r3, #6
 8003204:	e025      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 8003206:	2305      	movs	r3, #5
 8003208:	e023      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 800320a:	2304      	movs	r3, #4
 800320c:	e021      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 800320e:	2303      	movs	r3, #3
 8003210:	e01f      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 8003212:	2302      	movs	r3, #2
 8003214:	e01d      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 8003216:	2301      	movs	r3, #1
 8003218:	e01b      	b.n	8003252 <HAL_GPIO_Init+0x26a>
 800321a:	bf00      	nop
 800321c:	58000080 	.word	0x58000080
 8003220:	58024400 	.word	0x58024400
 8003224:	58000400 	.word	0x58000400
 8003228:	58020000 	.word	0x58020000
 800322c:	58020400 	.word	0x58020400
 8003230:	58020800 	.word	0x58020800
 8003234:	58020c00 	.word	0x58020c00
 8003238:	58021000 	.word	0x58021000
 800323c:	58021400 	.word	0x58021400
 8003240:	58021800 	.word	0x58021800
 8003244:	58021c00 	.word	0x58021c00
 8003248:	58022000 	.word	0x58022000
 800324c:	58022400 	.word	0x58022400
 8003250:	2300      	movs	r3, #0
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	f002 0203 	and.w	r2, r2, #3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4093      	lsls	r3, r2
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003262:	4938      	ldr	r1, [pc, #224]	@ (8003344 <HAL_GPIO_Init+0x35c>)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003296:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f ae63 	bne.w	8002ffc <HAL_GPIO_Init+0x14>
  }
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	3724      	adds	r7, #36	@ 0x24
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	58000400 	.word	0x58000400

08003348 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003350:	4a08      	ldr	r2, [pc, #32]	@ (8003374 <HAL_HSEM_FastTake+0x2c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3320      	adds	r3, #32
 8003356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335a:	4a07      	ldr	r2, [pc, #28]	@ (8003378 <HAL_HSEM_FastTake+0x30>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	58026400 	.word	0x58026400
 8003378:	80000300 	.word	0x80000300

0800337c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003386:	4906      	ldr	r1, [pc, #24]	@ (80033a0 <HAL_HSEM_Release+0x24>)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	58026400 	.word	0x58026400

080033a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80033ac:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	2b06      	cmp	r3, #6
 80033b6:	d00a      	beq.n	80033ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033b8:	4b26      	ldr	r3, [pc, #152]	@ (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e040      	b.n	800344c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e03e      	b.n	800344c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033ce:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80033d6:	491f      	ldr	r1, [pc, #124]	@ (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80033de:	f7fd ff0f 	bl	8001200 <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033e4:	e009      	b.n	80033fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80033e6:	f7fd ff0b 	bl	8001200 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033f4:	d901      	bls.n	80033fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e028      	b.n	800344c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033fa:	4b16      	ldr	r3, [pc, #88]	@ (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003406:	d1ee      	bne.n	80033e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b1e      	cmp	r3, #30
 800340c:	d008      	beq.n	8003420 <HAL_PWREx_ConfigSupply+0x7c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b2e      	cmp	r3, #46	@ 0x2e
 8003412:	d005      	beq.n	8003420 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b1d      	cmp	r3, #29
 8003418:	d002      	beq.n	8003420 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b2d      	cmp	r3, #45	@ 0x2d
 800341e:	d114      	bne.n	800344a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003420:	f7fd feee 	bl	8001200 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003426:	e009      	b.n	800343c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003428:	f7fd feea 	bl	8001200 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003436:	d901      	bls.n	800343c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_PWREx_ConfigSupply+0xb0>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003448:	d1ee      	bne.n	8003428 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	58024800 	.word	0x58024800

08003458 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	@ 0x30
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f000 bc48 	b.w	8003cfc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8088 	beq.w	800358a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347a:	4b99      	ldr	r3, [pc, #612]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003484:	4b96      	ldr	r3, [pc, #600]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348c:	2b10      	cmp	r3, #16
 800348e:	d007      	beq.n	80034a0 <HAL_RCC_OscConfig+0x48>
 8003490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003492:	2b18      	cmp	r3, #24
 8003494:	d111      	bne.n	80034ba <HAL_RCC_OscConfig+0x62>
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d10c      	bne.n	80034ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	4b8f      	ldr	r3, [pc, #572]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d06d      	beq.n	8003588 <HAL_RCC_OscConfig+0x130>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d169      	bne.n	8003588 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f000 bc21 	b.w	8003cfc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x7a>
 80034c4:	4b86      	ldr	r3, [pc, #536]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a85      	ldr	r2, [pc, #532]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e02e      	b.n	8003530 <HAL_RCC_OscConfig+0xd8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x9c>
 80034da:	4b81      	ldr	r3, [pc, #516]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a80      	ldr	r2, [pc, #512]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b7e      	ldr	r3, [pc, #504]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7d      	ldr	r2, [pc, #500]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80034ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e01d      	b.n	8003530 <HAL_RCC_OscConfig+0xd8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0xc0>
 80034fe:	4b78      	ldr	r3, [pc, #480]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a77      	ldr	r2, [pc, #476]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b75      	ldr	r3, [pc, #468]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a74      	ldr	r2, [pc, #464]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0xd8>
 8003518:	4b71      	ldr	r3, [pc, #452]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a70      	ldr	r2, [pc, #448]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800351e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b6e      	ldr	r3, [pc, #440]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6d      	ldr	r2, [pc, #436]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800352a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800352e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd fe62 	bl	8001200 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7fd fe5e 	bl	8001200 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	@ 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e3d4      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003552:	4b63      	ldr	r3, [pc, #396]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0xe8>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fd fe4e 	bl	8001200 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7fd fe4a 	bl	8001200 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	@ 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e3c0      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800357a:	4b59      	ldr	r3, [pc, #356]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x110>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80ca 	beq.w	800372c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003598:	4b51      	ldr	r3, [pc, #324]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035a2:	4b4f      	ldr	r3, [pc, #316]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_RCC_OscConfig+0x166>
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2b18      	cmp	r3, #24
 80035b2:	d156      	bne.n	8003662 <HAL_RCC_OscConfig+0x20a>
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d151      	bne.n	8003662 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035be:	4b48      	ldr	r3, [pc, #288]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_RCC_OscConfig+0x17e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e392      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035d6:	4b42      	ldr	r3, [pc, #264]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0219 	bic.w	r2, r3, #25
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	493f      	ldr	r1, [pc, #252]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd fe0a 	bl	8001200 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fd fe06 	bl	8001200 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e37c      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003602:	4b37      	ldr	r3, [pc, #220]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360e:	f7fd fe03 	bl	8001218 <HAL_GetREVID>
 8003612:	4603      	mov	r3, r0
 8003614:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003618:	4293      	cmp	r3, r2
 800361a:	d817      	bhi.n	800364c <HAL_RCC_OscConfig+0x1f4>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d108      	bne.n	8003636 <HAL_RCC_OscConfig+0x1de>
 8003624:	4b2e      	ldr	r3, [pc, #184]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800362c:	4a2c      	ldr	r2, [pc, #176]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003634:	e07a      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b2a      	ldr	r3, [pc, #168]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	031b      	lsls	r3, r3, #12
 8003644:	4926      	ldr	r1, [pc, #152]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364a:	e06f      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	4b24      	ldr	r3, [pc, #144]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	4921      	ldr	r1, [pc, #132]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003660:	e064      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d047      	beq.n	80036fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800366a:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 0219 	bic.w	r2, r3, #25
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	491a      	ldr	r1, [pc, #104]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fdc0 	bl	8001200 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003684:	f7fd fdbc 	bl	8001200 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e332      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003696:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a2:	f7fd fdb9 	bl	8001218 <HAL_GetREVID>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d819      	bhi.n	80036e4 <HAL_RCC_OscConfig+0x28c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2b40      	cmp	r3, #64	@ 0x40
 80036b6:	d108      	bne.n	80036ca <HAL_RCC_OscConfig+0x272>
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80036c0:	4a07      	ldr	r2, [pc, #28]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c6:	6053      	str	r3, [r2, #4]
 80036c8:	e030      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	031b      	lsls	r3, r3, #12
 80036d8:	4901      	ldr	r1, [pc, #4]	@ (80036e0 <HAL_RCC_OscConfig+0x288>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
 80036de:	e025      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
 80036e0:	58024400 	.word	0x58024400
 80036e4:	4b9a      	ldr	r3, [pc, #616]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	4997      	ldr	r1, [pc, #604]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
 80036f8:	e018      	b.n	800372c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b95      	ldr	r3, [pc, #596]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a94      	ldr	r2, [pc, #592]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fd fd7b 	bl	8001200 <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370e:	f7fd fd77 	bl	8001200 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e2ed      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003720:	4b8b      	ldr	r3, [pc, #556]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80a9 	beq.w	800388c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373a:	4b85      	ldr	r3, [pc, #532]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003742:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003744:	4b82      	ldr	r3, [pc, #520]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d007      	beq.n	8003760 <HAL_RCC_OscConfig+0x308>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b18      	cmp	r3, #24
 8003754:	d13a      	bne.n	80037cc <HAL_RCC_OscConfig+0x374>
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d135      	bne.n	80037cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003760:	4b7b      	ldr	r3, [pc, #492]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x320>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b80      	cmp	r3, #128	@ 0x80
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e2c1      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003778:	f7fd fd4e 	bl	8001218 <HAL_GetREVID>
 800377c:	4603      	mov	r3, r0
 800377e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003782:	4293      	cmp	r3, r2
 8003784:	d817      	bhi.n	80037b6 <HAL_RCC_OscConfig+0x35e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	2b20      	cmp	r3, #32
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x348>
 800378e:	4b70      	ldr	r3, [pc, #448]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003796:	4a6e      	ldr	r2, [pc, #440]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003798:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800379c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800379e:	e075      	b.n	800388c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037a0:	4b6b      	ldr	r3, [pc, #428]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	069b      	lsls	r3, r3, #26
 80037ae:	4968      	ldr	r1, [pc, #416]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037b4:	e06a      	b.n	800388c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037b6:	4b66      	ldr	r3, [pc, #408]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	061b      	lsls	r3, r3, #24
 80037c4:	4962      	ldr	r1, [pc, #392]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037ca:	e05f      	b.n	800388c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d042      	beq.n	800385a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd fd0e 	bl	8001200 <HAL_GetTick>
 80037e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80037e8:	f7fd fd0a 	bl	8001200 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e280      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037fa:	4b55      	ldr	r3, [pc, #340]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003806:	f7fd fd07 	bl	8001218 <HAL_GetREVID>
 800380a:	4603      	mov	r3, r0
 800380c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003810:	4293      	cmp	r3, r2
 8003812:	d817      	bhi.n	8003844 <HAL_RCC_OscConfig+0x3ec>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	2b20      	cmp	r3, #32
 800381a:	d108      	bne.n	800382e <HAL_RCC_OscConfig+0x3d6>
 800381c:	4b4c      	ldr	r3, [pc, #304]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003824:	4a4a      	ldr	r2, [pc, #296]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003826:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800382a:	6053      	str	r3, [r2, #4]
 800382c:	e02e      	b.n	800388c <HAL_RCC_OscConfig+0x434>
 800382e:	4b48      	ldr	r3, [pc, #288]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	069b      	lsls	r3, r3, #26
 800383c:	4944      	ldr	r1, [pc, #272]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
 8003842:	e023      	b.n	800388c <HAL_RCC_OscConfig+0x434>
 8003844:	4b42      	ldr	r3, [pc, #264]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	493f      	ldr	r1, [pc, #252]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
 8003858:	e018      	b.n	800388c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800385a:	4b3d      	ldr	r3, [pc, #244]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3c      	ldr	r2, [pc, #240]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fd fccb 	bl	8001200 <HAL_GetTick>
 800386a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800386e:	f7fd fcc7 	bl	8001200 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e23d      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003880:	4b33      	ldr	r3, [pc, #204]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d036      	beq.n	8003906 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d019      	beq.n	80038d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fd fca8 	bl	8001200 <HAL_GetTick>
 80038b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b4:	f7fd fca4 	bl	8001200 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e21a      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038c6:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x45c>
 80038d2:	e018      	b.n	8003906 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fd fc8e 	bl	8001200 <HAL_GetTick>
 80038e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fd fc8a 	bl	8001200 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e200      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038fa:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d039      	beq.n	8003986 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01c      	beq.n	8003954 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800391a:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a0c      	ldr	r2, [pc, #48]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003920:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003924:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003926:	f7fd fc6b 	bl	8001200 <HAL_GetTick>
 800392a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800392e:	f7fd fc67 	bl	8001200 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1dd      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <HAL_RCC_OscConfig+0x4f8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x4d6>
 800394c:	e01b      	b.n	8003986 <HAL_RCC_OscConfig+0x52e>
 800394e:	bf00      	nop
 8003950:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003954:	4b9b      	ldr	r3, [pc, #620]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a9a      	ldr	r2, [pc, #616]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 800395a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800395e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003960:	f7fd fc4e 	bl	8001200 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003968:	f7fd fc4a 	bl	8001200 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e1c0      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800397a:	4b92      	ldr	r3, [pc, #584]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8081 	beq.w	8003a96 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003994:	4b8c      	ldr	r3, [pc, #560]	@ (8003bc8 <HAL_RCC_OscConfig+0x770>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8b      	ldr	r2, [pc, #556]	@ (8003bc8 <HAL_RCC_OscConfig+0x770>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039a0:	f7fd fc2e 	bl	8001200 <HAL_GetTick>
 80039a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fd fc2a 	bl	8001200 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1a0      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ba:	4b83      	ldr	r3, [pc, #524]	@ (8003bc8 <HAL_RCC_OscConfig+0x770>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x584>
 80039ce:	4b7d      	ldr	r3, [pc, #500]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039da:	e02d      	b.n	8003a38 <HAL_RCC_OscConfig+0x5e0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x5a6>
 80039e4:	4b77      	ldr	r3, [pc, #476]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e8:	4a76      	ldr	r2, [pc, #472]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f0:	4b74      	ldr	r3, [pc, #464]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f4:	4a73      	ldr	r2, [pc, #460]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 80039f6:	f023 0304 	bic.w	r3, r3, #4
 80039fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80039fc:	e01c      	b.n	8003a38 <HAL_RCC_OscConfig+0x5e0>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5c8>
 8003a06:	4b6f      	ldr	r3, [pc, #444]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a12:	4b6c      	ldr	r3, [pc, #432]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a16:	4a6b      	ldr	r2, [pc, #428]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0x5e0>
 8003a20:	4b68      	ldr	r3, [pc, #416]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a24:	4a67      	ldr	r2, [pc, #412]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2c:	4b65      	ldr	r3, [pc, #404]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a30:	4a64      	ldr	r2, [pc, #400]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a32:	f023 0304 	bic.w	r3, r3, #4
 8003a36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fbde 	bl	8001200 <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fd fbda 	bl	8001200 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e14e      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a5e:	4b59      	ldr	r3, [pc, #356]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ee      	beq.n	8003a48 <HAL_RCC_OscConfig+0x5f0>
 8003a6a:	e014      	b.n	8003a96 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fbc8 	bl	8001200 <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd fbc4 	bl	8001200 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e138      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ee      	bne.n	8003a74 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 812d 	beq.w	8003cfa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003aa0:	4b48      	ldr	r3, [pc, #288]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa8:	2b18      	cmp	r3, #24
 8003aaa:	f000 80bd 	beq.w	8003c28 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	f040 809e 	bne.w	8003bf4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	4b42      	ldr	r3, [pc, #264]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a41      	ldr	r2, [pc, #260]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fb9c 	bl	8001200 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fb98 	bl	8001200 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e10e      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ade:	4b39      	ldr	r3, [pc, #228]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aea:	4b36      	ldr	r3, [pc, #216]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aee:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <HAL_RCC_OscConfig+0x774>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	430a      	orrs	r2, r1
 8003afe:	4931      	ldr	r1, [pc, #196]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b12:	3b01      	subs	r3, #1
 8003b14:	025b      	lsls	r3, r3, #9
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b34:	4923      	ldr	r1, [pc, #140]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003b3a:	4b22      	ldr	r3, [pc, #136]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	4a21      	ldr	r2, [pc, #132]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b46:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b4a:	4b21      	ldr	r3, [pc, #132]	@ (8003bd0 <HAL_RCC_OscConfig+0x778>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b52:	00d2      	lsls	r2, r2, #3
 8003b54:	491b      	ldr	r1, [pc, #108]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	f023 020c 	bic.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	4917      	ldr	r1, [pc, #92]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b6c:	4b15      	ldr	r3, [pc, #84]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	f023 0202 	bic.w	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b78:	4912      	ldr	r1, [pc, #72]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b7e:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	4a10      	ldr	r2, [pc, #64]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b96:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ba2:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	4a07      	ldr	r2, [pc, #28]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bae:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a04      	ldr	r2, [pc, #16]	@ (8003bc4 <HAL_RCC_OscConfig+0x76c>)
 8003bb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fb21 	bl	8001200 <HAL_GetTick>
 8003bbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bc0:	e011      	b.n	8003be6 <HAL_RCC_OscConfig+0x78e>
 8003bc2:	bf00      	nop
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	58024800 	.word	0x58024800
 8003bcc:	fffffc0c 	.word	0xfffffc0c
 8003bd0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fd fb14 	bl	8001200 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e08a      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003be6:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x77c>
 8003bf2:	e082      	b.n	8003cfa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf4:	4b43      	ldr	r3, [pc, #268]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a42      	ldr	r2, [pc, #264]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003bfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fafe 	bl	8001200 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd fafa 	bl	8001200 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e070      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x7b0>
 8003c26:	e068      	b.n	8003cfa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c28:	4b36      	ldr	r3, [pc, #216]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c2e:	4b35      	ldr	r3, [pc, #212]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d031      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0203 	and.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d12a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d122      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d11a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	0a5b      	lsrs	r3, r3, #9
 8003c6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d108      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0e1b      	lsrs	r3, r3, #24
 8003c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e02b      	b.n	8003cfc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ca4:	4b17      	ldr	r3, [pc, #92]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d01f      	beq.n	8003cfa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003cba:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	4a11      	ldr	r2, [pc, #68]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cc6:	f7fd fa9b 	bl	8001200 <HAL_GetTick>
 8003cca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ccc:	bf00      	nop
 8003cce:	f7fd fa97 	bl	8001200 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d0f9      	beq.n	8003cce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cde:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <HAL_RCC_OscConfig+0x8b0>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ce6:	00d2      	lsls	r2, r2, #3
 8003ce8:	4906      	ldr	r1, [pc, #24]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003cee:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	4a04      	ldr	r2, [pc, #16]	@ (8003d04 <HAL_RCC_OscConfig+0x8ac>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3730      	adds	r7, #48	@ 0x30
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	58024400 	.word	0x58024400
 8003d08:	ffff0007 	.word	0xffff0007

08003d0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e19c      	b.n	800405a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d20:	4b8a      	ldr	r3, [pc, #552]	@ (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d910      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b87      	ldr	r3, [pc, #540]	@ (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 020f 	bic.w	r2, r3, #15
 8003d36:	4985      	ldr	r1, [pc, #532]	@ (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b83      	ldr	r3, [pc, #524]	@ (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e184      	b.n	800405a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d010      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	4b7b      	ldr	r3, [pc, #492]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d908      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d6c:	4b78      	ldr	r3, [pc, #480]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	4975      	ldr	r1, [pc, #468]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d010      	beq.n	8003dac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	4b70      	ldr	r3, [pc, #448]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d908      	bls.n	8003dac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	496a      	ldr	r1, [pc, #424]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	4b64      	ldr	r3, [pc, #400]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d908      	bls.n	8003dda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dc8:	4b61      	ldr	r3, [pc, #388]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	495e      	ldr	r1, [pc, #376]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d010      	beq.n	8003e08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	4b59      	ldr	r3, [pc, #356]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d908      	bls.n	8003e08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003df6:	4b56      	ldr	r3, [pc, #344]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4953      	ldr	r1, [pc, #332]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	4b4d      	ldr	r3, [pc, #308]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d908      	bls.n	8003e36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b4a      	ldr	r3, [pc, #296]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f023 020f 	bic.w	r2, r3, #15
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4947      	ldr	r1, [pc, #284]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d055      	beq.n	8003eee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e42:	4b43      	ldr	r3, [pc, #268]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	4940      	ldr	r1, [pc, #256]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d121      	bne.n	8003eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0f6      	b.n	800405a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e74:	4b36      	ldr	r3, [pc, #216]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d115      	bne.n	8003eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0ea      	b.n	800405a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e8c:	4b30      	ldr	r3, [pc, #192]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0de      	b.n	800405a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0d6      	b.n	800405a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eac:	4b28      	ldr	r3, [pc, #160]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f023 0207 	bic.w	r2, r3, #7
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4925      	ldr	r1, [pc, #148]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fd f99f 	bl	8001200 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec6:	f7fd f99b 	bl	8001200 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0be      	b.n	800405a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003edc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d1eb      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d010      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	4b14      	ldr	r3, [pc, #80]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d208      	bcs.n	8003f1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0a:	4b11      	ldr	r3, [pc, #68]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f023 020f 	bic.w	r2, r3, #15
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	490e      	ldr	r1, [pc, #56]	@ (8003f50 <HAL_RCC_ClockConfig+0x244>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d214      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 020f 	bic.w	r2, r3, #15
 8003f32:	4906      	ldr	r1, [pc, #24]	@ (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b04      	ldr	r3, [pc, #16]	@ (8003f4c <HAL_RCC_ClockConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e086      	b.n	800405a <HAL_RCC_ClockConfig+0x34e>
 8003f4c:	52002000 	.word	0x52002000
 8003f50:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d010      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	4b3f      	ldr	r3, [pc, #252]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d208      	bcs.n	8003f82 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f70:	4b3c      	ldr	r3, [pc, #240]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	4939      	ldr	r1, [pc, #228]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	4b34      	ldr	r3, [pc, #208]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d208      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f9e:	4b31      	ldr	r3, [pc, #196]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	492e      	ldr	r1, [pc, #184]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	4b28      	ldr	r3, [pc, #160]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d208      	bcs.n	8003fde <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fcc:	4b25      	ldr	r3, [pc, #148]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	4922      	ldr	r1, [pc, #136]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d208      	bcs.n	800400c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4917      	ldr	r1, [pc, #92]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8004008:	4313      	orrs	r3, r2
 800400a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800400c:	f000 f834 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	4912      	ldr	r1, [pc, #72]	@ (8004068 <HAL_RCC_ClockConfig+0x35c>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
 8004028:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800402a:	4b0e      	ldr	r3, [pc, #56]	@ (8004064 <HAL_RCC_ClockConfig+0x358>)
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	4a0d      	ldr	r2, [pc, #52]	@ (8004068 <HAL_RCC_ClockConfig+0x35c>)
 8004034:	5cd3      	ldrb	r3, [r2, r3]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	4a0a      	ldr	r2, [pc, #40]	@ (800406c <HAL_RCC_ClockConfig+0x360>)
 8004042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004044:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <HAL_RCC_ClockConfig+0x364>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_RCC_ClockConfig+0x368>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd f88c 	bl	800116c <HAL_InitTick>
 8004054:	4603      	mov	r3, r0
 8004056:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
 8004068:	08015814 	.word	0x08015814
 800406c:	24000004 	.word	0x24000004
 8004070:	24000000 	.word	0x24000000
 8004074:	24000008 	.word	0x24000008

08004078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	@ 0x24
 800407c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800407e:	4bb3      	ldr	r3, [pc, #716]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004086:	2b18      	cmp	r3, #24
 8004088:	f200 8155 	bhi.w	8004336 <HAL_RCC_GetSysClockFreq+0x2be>
 800408c:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <HAL_RCC_GetSysClockFreq+0x1c>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040f9 	.word	0x080040f9
 8004098:	08004337 	.word	0x08004337
 800409c:	08004337 	.word	0x08004337
 80040a0:	08004337 	.word	0x08004337
 80040a4:	08004337 	.word	0x08004337
 80040a8:	08004337 	.word	0x08004337
 80040ac:	08004337 	.word	0x08004337
 80040b0:	08004337 	.word	0x08004337
 80040b4:	0800411f 	.word	0x0800411f
 80040b8:	08004337 	.word	0x08004337
 80040bc:	08004337 	.word	0x08004337
 80040c0:	08004337 	.word	0x08004337
 80040c4:	08004337 	.word	0x08004337
 80040c8:	08004337 	.word	0x08004337
 80040cc:	08004337 	.word	0x08004337
 80040d0:	08004337 	.word	0x08004337
 80040d4:	08004125 	.word	0x08004125
 80040d8:	08004337 	.word	0x08004337
 80040dc:	08004337 	.word	0x08004337
 80040e0:	08004337 	.word	0x08004337
 80040e4:	08004337 	.word	0x08004337
 80040e8:	08004337 	.word	0x08004337
 80040ec:	08004337 	.word	0x08004337
 80040f0:	08004337 	.word	0x08004337
 80040f4:	0800412b 	.word	0x0800412b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040f8:	4b94      	ldr	r3, [pc, #592]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d009      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004104:	4b91      	ldr	r3, [pc, #580]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	4a90      	ldr	r2, [pc, #576]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004116:	e111      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004118:	4b8d      	ldr	r3, [pc, #564]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800411a:	61bb      	str	r3, [r7, #24]
      break;
 800411c:	e10e      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800411e:	4b8d      	ldr	r3, [pc, #564]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004120:	61bb      	str	r3, [r7, #24]
      break;
 8004122:	e10b      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004124:	4b8c      	ldr	r3, [pc, #560]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004126:	61bb      	str	r3, [r7, #24]
      break;
 8004128:	e108      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800412a:	4b88      	ldr	r3, [pc, #544]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004134:	4b85      	ldr	r3, [pc, #532]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800413e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004140:	4b82      	ldr	r3, [pc, #520]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800414a:	4b80      	ldr	r3, [pc, #512]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800414c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414e:	08db      	lsrs	r3, r3, #3
 8004150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004162:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80e1 	beq.w	8004330 <HAL_RCC_GetSysClockFreq+0x2b8>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b02      	cmp	r3, #2
 8004172:	f000 8083 	beq.w	800427c <HAL_RCC_GetSysClockFreq+0x204>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b02      	cmp	r3, #2
 800417a:	f200 80a1 	bhi.w	80042c0 <HAL_RCC_GetSysClockFreq+0x248>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x114>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d056      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x1c0>
 800418a:	e099      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800418c:	4b6f      	ldr	r3, [pc, #444]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02d      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004198:	4b6c      	ldr	r3, [pc, #432]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	08db      	lsrs	r3, r3, #3
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	4a6b      	ldr	r2, [pc, #428]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
 80041a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b62      	ldr	r3, [pc, #392]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041d6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800435c <HAL_RCC_GetSysClockFreq+0x2e4>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80041f2:	e087      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004360 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004206:	4b51      	ldr	r3, [pc, #324]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004216:	ed97 6a02 	vldr	s12, [r7, #8]
 800421a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800435c <HAL_RCC_GetSysClockFreq+0x2e4>
 800421e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800422a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004236:	e065      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004242:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004364 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424a:	4b40      	ldr	r3, [pc, #256]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425a:	ed97 6a02 	vldr	s12, [r7, #8]
 800425e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800435c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800426e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800427a:	e043      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004286:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004368 <HAL_RCC_GetSysClockFreq+0x2f0>
 800428a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428e:	4b2f      	ldr	r3, [pc, #188]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429e:	ed97 6a02 	vldr	s12, [r7, #8]
 80042a2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800435c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042be:	e021      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004364 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d2:	4b1e      	ldr	r3, [pc, #120]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800435c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004302:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004304:	4b11      	ldr	r3, [pc, #68]	@ (800434c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004308:	0a5b      	lsrs	r3, r3, #9
 800430a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430e:	3301      	adds	r3, #1
 8004310:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800431c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004328:	ee17 3a90 	vmov	r3, s15
 800432c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800432e:	e005      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	61bb      	str	r3, [r7, #24]
      break;
 8004334:	e002      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004336:	4b07      	ldr	r3, [pc, #28]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004338:	61bb      	str	r3, [r7, #24]
      break;
 800433a:	bf00      	nop
  }

  return sysclockfreq;
 800433c:	69bb      	ldr	r3, [r7, #24]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3724      	adds	r7, #36	@ 0x24
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400
 8004350:	03d09000 	.word	0x03d09000
 8004354:	003d0900 	.word	0x003d0900
 8004358:	017d7840 	.word	0x017d7840
 800435c:	46000000 	.word	0x46000000
 8004360:	4c742400 	.word	0x4c742400
 8004364:	4a742400 	.word	0x4a742400
 8004368:	4bbebc20 	.word	0x4bbebc20

0800436c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004372:	f7ff fe81 	bl	8004078 <HAL_RCC_GetSysClockFreq>
 8004376:	4602      	mov	r2, r0
 8004378:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <HAL_RCC_GetHCLKFreq+0x50>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	490f      	ldr	r1, [pc, #60]	@ (80043c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004384:	5ccb      	ldrb	r3, [r1, r3]
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	fa22 f303 	lsr.w	r3, r2, r3
 800438e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004390:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <HAL_RCC_GetHCLKFreq+0x50>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	4a07      	ldr	r2, [pc, #28]	@ (80043c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80043a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043aa:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80043b0:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	58024400 	.word	0x58024400
 80043c0:	08015814 	.word	0x08015814
 80043c4:	24000004 	.word	0x24000004
 80043c8:	24000000 	.word	0x24000000

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80043d0:	f7ff ffcc 	bl	800436c <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4904      	ldr	r1, [pc, #16]	@ (80043f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	58024400 	.word	0x58024400
 80043f4:	08015814 	.word	0x08015814

080043f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80043fc:	f7ff ffb6 	bl	800436c <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4904      	ldr	r1, [pc, #16]	@ (8004420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	58024400 	.word	0x58024400
 8004420:	08015814 	.word	0x08015814

08004424 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004428:	b0ca      	sub	sp, #296	@ 0x128
 800442a:	af00      	add	r7, sp, #0
 800442c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004430:	2300      	movs	r3, #0
 8004432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004436:	2300      	movs	r3, #0
 8004438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004448:	2500      	movs	r5, #0
 800444a:	ea54 0305 	orrs.w	r3, r4, r5
 800444e:	d049      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004456:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800445a:	d02f      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800445c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004460:	d828      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004462:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004466:	d01a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004468:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800446c:	d822      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004476:	d007      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004478:	e01c      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447a:	4bb8      	ldr	r3, [pc, #736]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	4ab7      	ldr	r2, [pc, #732]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004486:	e01a      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448c:	3308      	adds	r3, #8
 800448e:	2102      	movs	r1, #2
 8004490:	4618      	mov	r0, r3
 8004492:	f001 fc8f 	bl	8005db4 <RCCEx_PLL2_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800449c:	e00f      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	3328      	adds	r3, #40	@ 0x28
 80044a4:	2102      	movs	r1, #2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 fd36 	bl	8005f18 <RCCEx_PLL3_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80044b2:	e004      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80044bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044c6:	4ba5      	ldr	r3, [pc, #660]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d4:	4aa1      	ldr	r2, [pc, #644]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80044da:	e003      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80044f0:	f04f 0900 	mov.w	r9, #0
 80044f4:	ea58 0309 	orrs.w	r3, r8, r9
 80044f8:	d047      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	2b04      	cmp	r3, #4
 8004502:	d82a      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004504:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004521 	.word	0x08004521
 8004510:	0800452f 	.word	0x0800452f
 8004514:	08004545 	.word	0x08004545
 8004518:	08004563 	.word	0x08004563
 800451c:	08004563 	.word	0x08004563
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004520:	4b8e      	ldr	r3, [pc, #568]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	4a8d      	ldr	r2, [pc, #564]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800452c:	e01a      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	3308      	adds	r3, #8
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f001 fc3c 	bl	8005db4 <RCCEx_PLL2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004542:	e00f      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	3328      	adds	r3, #40	@ 0x28
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f001 fce3 	bl	8005f18 <RCCEx_PLL3_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004558:	e004      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004560:	e000      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800456c:	4b7b      	ldr	r3, [pc, #492]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	f023 0107 	bic.w	r1, r3, #7
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457a:	4a78      	ldr	r2, [pc, #480]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800457c:	430b      	orrs	r3, r1
 800457e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004580:	e003      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004596:	f04f 0b00 	mov.w	fp, #0
 800459a:	ea5a 030b 	orrs.w	r3, sl, fp
 800459e:	d04c      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045aa:	d030      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b0:	d829      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045b4:	d02d      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80045b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80045b8:	d825      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045ba:	2b80      	cmp	r3, #128	@ 0x80
 80045bc:	d018      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80045be:	2b80      	cmp	r3, #128	@ 0x80
 80045c0:	d821      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80045c6:	2b40      	cmp	r3, #64	@ 0x40
 80045c8:	d007      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80045ca:	e01c      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045cc:	4b63      	ldr	r3, [pc, #396]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d0:	4a62      	ldr	r2, [pc, #392]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80045d8:	e01c      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	3308      	adds	r3, #8
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 fbe6 	bl	8005db4 <RCCEx_PLL2_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80045ee:	e011      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	3328      	adds	r3, #40	@ 0x28
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 fc8d 	bl	8005f18 <RCCEx_PLL3_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004604:	e006      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800460c:	e002      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800461c:	4b4f      	ldr	r3, [pc, #316]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800461e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004620:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	4a4c      	ldr	r2, [pc, #304]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004630:	e003      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004646:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800464a:	2300      	movs	r3, #0
 800464c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004650:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004654:	460b      	mov	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	d053      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004662:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004666:	d035      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004668:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800466c:	d82e      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800466e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004672:	d031      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004674:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004678:	d828      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800467a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800467e:	d01a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004684:	d822      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800468a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800468e:	d007      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004690:	e01c      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004692:	4b32      	ldr	r3, [pc, #200]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	4a31      	ldr	r2, [pc, #196]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800469e:	e01c      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a4:	3308      	adds	r3, #8
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fb83 	bl	8005db4 <RCCEx_PLL2_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046b4:	e011      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	3328      	adds	r3, #40	@ 0x28
 80046bc:	2100      	movs	r1, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fc2a 	bl	8005f18 <RCCEx_PLL3_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046ca:	e006      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d2:	e002      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80046d4:	bf00      	nop
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80046d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046e2:	4b1e      	ldr	r3, [pc, #120]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046f2:	4a1a      	ldr	r2, [pc, #104]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f8:	e003      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800470e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004712:	2300      	movs	r3, #0
 8004714:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004718:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d056      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800472a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800472e:	d038      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004730:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004734:	d831      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004736:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800473a:	d034      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800473c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004740:	d82b      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004742:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004746:	d01d      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004748:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800474c:	d825      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d006      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004758:	e01f      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800475a:	bf00      	nop
 800475c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004760:	4ba2      	ldr	r3, [pc, #648]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4aa1      	ldr	r2, [pc, #644]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800476c:	e01c      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	3308      	adds	r3, #8
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f001 fb1c 	bl	8005db4 <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004782:	e011      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	3328      	adds	r3, #40	@ 0x28
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f001 fbc3 	bl	8005f18 <RCCEx_PLL3_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047a0:	e002      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80047a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047b0:	4b8e      	ldr	r3, [pc, #568]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80047c0:	4a8a      	ldr	r2, [pc, #552]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047c2:	430b      	orrs	r3, r1
 80047c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c6:	e003      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80047dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80047e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	d03a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f6:	2b30      	cmp	r3, #48	@ 0x30
 80047f8:	d01f      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80047fa:	2b30      	cmp	r3, #48	@ 0x30
 80047fc:	d819      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d00c      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004802:	2b20      	cmp	r3, #32
 8004804:	d815      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d019      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800480a:	2b10      	cmp	r3, #16
 800480c:	d111      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800480e:	4b77      	ldr	r3, [pc, #476]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	4a76      	ldr	r2, [pc, #472]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800481a:	e011      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004820:	3308      	adds	r3, #8
 8004822:	2102      	movs	r1, #2
 8004824:	4618      	mov	r0, r3
 8004826:	f001 fac5 	bl	8005db4 <RCCEx_PLL2_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004830:	e006      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004838:	e002      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800483e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004848:	4b68      	ldr	r3, [pc, #416]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800484a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004856:	4a65      	ldr	r2, [pc, #404]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004858:	430b      	orrs	r3, r1
 800485a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800485c:	e003      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004872:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800487c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004880:	460b      	mov	r3, r1
 8004882:	4313      	orrs	r3, r2
 8004884:	d051      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004890:	d035      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004896:	d82e      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004898:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800489c:	d031      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800489e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048a2:	d828      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048a8:	d01a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ae:	d822      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80048b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b8:	d007      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80048ba:	e01c      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048bc:	4b4b      	ldr	r3, [pc, #300]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	4a4a      	ldr	r2, [pc, #296]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048c8:	e01c      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	3308      	adds	r3, #8
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fa6e 	bl	8005db4 <RCCEx_PLL2_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048de:	e011      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e4:	3328      	adds	r3, #40	@ 0x28
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 fb15 	bl	8005f18 <RCCEx_PLL3_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048f4:	e006      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048fc:	e002      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800490c:	4b37      	ldr	r3, [pc, #220]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800490e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004910:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491a:	4a34      	ldr	r2, [pc, #208]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800491c:	430b      	orrs	r3, r1
 800491e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004920:	e003      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004936:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800493a:	2300      	movs	r3, #0
 800493c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004940:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004944:	460b      	mov	r3, r1
 8004946:	4313      	orrs	r3, r2
 8004948:	d056      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004954:	d033      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004956:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800495a:	d82c      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800495c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004960:	d02f      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004962:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004966:	d826      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004968:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800496c:	d02b      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800496e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004972:	d820      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004978:	d012      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800497a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800497e:	d81a      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d022      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004988:	d115      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	3308      	adds	r3, #8
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fa0e 	bl	8005db4 <RCCEx_PLL2_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800499e:	e015      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a4:	3328      	adds	r3, #40	@ 0x28
 80049a6:	2101      	movs	r1, #1
 80049a8:	4618      	mov	r0, r3
 80049aa:	f001 fab5 	bl	8005f18 <RCCEx_PLL3_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049b4:	e00a      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049bc:	e006      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049be:	bf00      	nop
 80049c0:	e004      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80049ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10d      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80049d4:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049e2:	4a02      	ldr	r2, [pc, #8]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80049ea:	bf00      	nop
 80049ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a0e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4313      	orrs	r3, r2
 8004a16:	d055      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a24:	d033      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a2a:	d82c      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a30:	d02f      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a36:	d826      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a3c:	d02b      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004a3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a42:	d820      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a48:	d012      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a4e:	d81a      	bhi.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d022      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a58:	d115      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	3308      	adds	r3, #8
 8004a60:	2101      	movs	r1, #1
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 f9a6 	bl	8005db4 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a6e:	e015      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a74:	3328      	adds	r3, #40	@ 0x28
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fa4d 	bl	8005f18 <RCCEx_PLL3_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a84:	e00a      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a8c:	e006      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e004      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a92:	bf00      	nop
 8004a94:	e002      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004aa4:	4ba3      	ldr	r3, [pc, #652]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ab4:	4a9f      	ldr	r2, [pc, #636]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aba:	e003      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	d037      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aee:	d00e      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af4:	d816      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d018      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004afa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004afe:	d111      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4b8c      	ldr	r3, [pc, #560]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	4a8b      	ldr	r2, [pc, #556]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b0c:	e00f      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	3308      	adds	r3, #8
 8004b14:	2101      	movs	r1, #1
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 f94c 	bl	8005db4 <RCCEx_PLL2_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b22:	e004      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b2a:	e000      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b36:	4b7f      	ldr	r3, [pc, #508]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b44:	4a7b      	ldr	r2, [pc, #492]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b4a:	e003      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004b6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	d039      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d81c      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b84 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004bc1 	.word	0x08004bc1
 8004b88:	08004b95 	.word	0x08004b95
 8004b8c:	08004ba3 	.word	0x08004ba3
 8004b90:	08004bc1 	.word	0x08004bc1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b94:	4b67      	ldr	r3, [pc, #412]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	4a66      	ldr	r2, [pc, #408]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ba0:	e00f      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	2102      	movs	r1, #2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f902 	bl	8005db4 <RCCEx_PLL2_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bb6:	e004      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bca:	4b5a      	ldr	r3, [pc, #360]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bce:	f023 0103 	bic.w	r1, r3, #3
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd8:	4a56      	ldr	r2, [pc, #344]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bde:	e003      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f000 809f 	beq.w	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c16:	f7fc faf3 	bl	8001200 <HAL_GetTick>
 8004c1a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7fc faee 	bl	8001200 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b64      	cmp	r3, #100	@ 0x64
 8004c2e:	d903      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c36:	e005      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c38:	4b3f      	ldr	r3, [pc, #252]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ed      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d179      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c4c:	4b39      	ldr	r3, [pc, #228]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c58:	4053      	eors	r3, r2
 8004c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d015      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c62:	4b34      	ldr	r3, [pc, #208]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c6e:	4b31      	ldr	r3, [pc, #196]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	4a30      	ldr	r2, [pc, #192]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c86:	4a2b      	ldr	r2, [pc, #172]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c9a:	d118      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fc fab0 	bl	8001200 <HAL_GetTick>
 8004ca0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ca4:	e00d      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fc faab 	bl	8001200 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004cb0:	1ad2      	subs	r2, r2, r3
 8004cb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d903      	bls.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004cc0:	e005      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0eb      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d129      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ce6:	d10e      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ce8:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004cf8:	091a      	lsrs	r2, r3, #4
 8004cfa:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6113      	str	r3, [r2, #16]
 8004d04:	e005      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d10:	6113      	str	r3, [r2, #16]
 8004d12:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d22:	4a04      	ldr	r2, [pc, #16]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d28:	e00e      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004d32:	e009      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004d34:	58024400 	.word	0x58024400
 8004d38:	58024800 	.word	0x58024800
 8004d3c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f002 0301 	and.w	r3, r2, #1
 8004d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f000 8089 	beq.w	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d70:	2b28      	cmp	r3, #40	@ 0x28
 8004d72:	d86b      	bhi.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004d74:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004e55 	.word	0x08004e55
 8004d80:	08004e4d 	.word	0x08004e4d
 8004d84:	08004e4d 	.word	0x08004e4d
 8004d88:	08004e4d 	.word	0x08004e4d
 8004d8c:	08004e4d 	.word	0x08004e4d
 8004d90:	08004e4d 	.word	0x08004e4d
 8004d94:	08004e4d 	.word	0x08004e4d
 8004d98:	08004e4d 	.word	0x08004e4d
 8004d9c:	08004e21 	.word	0x08004e21
 8004da0:	08004e4d 	.word	0x08004e4d
 8004da4:	08004e4d 	.word	0x08004e4d
 8004da8:	08004e4d 	.word	0x08004e4d
 8004dac:	08004e4d 	.word	0x08004e4d
 8004db0:	08004e4d 	.word	0x08004e4d
 8004db4:	08004e4d 	.word	0x08004e4d
 8004db8:	08004e4d 	.word	0x08004e4d
 8004dbc:	08004e37 	.word	0x08004e37
 8004dc0:	08004e4d 	.word	0x08004e4d
 8004dc4:	08004e4d 	.word	0x08004e4d
 8004dc8:	08004e4d 	.word	0x08004e4d
 8004dcc:	08004e4d 	.word	0x08004e4d
 8004dd0:	08004e4d 	.word	0x08004e4d
 8004dd4:	08004e4d 	.word	0x08004e4d
 8004dd8:	08004e4d 	.word	0x08004e4d
 8004ddc:	08004e55 	.word	0x08004e55
 8004de0:	08004e4d 	.word	0x08004e4d
 8004de4:	08004e4d 	.word	0x08004e4d
 8004de8:	08004e4d 	.word	0x08004e4d
 8004dec:	08004e4d 	.word	0x08004e4d
 8004df0:	08004e4d 	.word	0x08004e4d
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e4d 	.word	0x08004e4d
 8004e04:	08004e4d 	.word	0x08004e4d
 8004e08:	08004e4d 	.word	0x08004e4d
 8004e0c:	08004e4d 	.word	0x08004e4d
 8004e10:	08004e4d 	.word	0x08004e4d
 8004e14:	08004e4d 	.word	0x08004e4d
 8004e18:	08004e4d 	.word	0x08004e4d
 8004e1c:	08004e55 	.word	0x08004e55
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e24:	3308      	adds	r3, #8
 8004e26:	2101      	movs	r1, #1
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 ffc3 	bl	8005db4 <RCCEx_PLL2_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e34:	e00f      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3a:	3328      	adds	r3, #40	@ 0x28
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 f86a 	bl	8005f18 <RCCEx_PLL3_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e4a:	e004      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e5e:	4bbf      	ldr	r3, [pc, #764]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e6c:	4abb      	ldr	r2, [pc, #748]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e72:	e003      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f002 0302 	and.w	r3, r2, #2
 8004e88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004e92:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004e96:	460b      	mov	r3, r1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	d041      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d824      	bhi.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ef9 	.word	0x08004ef9
 8004eb0:	08004ec5 	.word	0x08004ec5
 8004eb4:	08004edb 	.word	0x08004edb
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004ef9 	.word	0x08004ef9
 8004ec0:	08004ef9 	.word	0x08004ef9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec8:	3308      	adds	r3, #8
 8004eca:	2101      	movs	r1, #1
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 ff71 	bl	8005db4 <RCCEx_PLL2_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ed8:	e00f      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	3328      	adds	r3, #40	@ 0x28
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 f818 	bl	8005f18 <RCCEx_PLL3_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004eee:	e004      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ef6:	e000      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f02:	4b96      	ldr	r3, [pc, #600]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f06:	f023 0107 	bic.w	r1, r3, #7
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f10:	4a92      	ldr	r2, [pc, #584]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f12:	430b      	orrs	r3, r1
 8004f14:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f16:	e003      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	f002 0304 	and.w	r3, r2, #4
 8004f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	d044      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	d825      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004fa1 	.word	0x08004fa1
 8004f58:	08004f6d 	.word	0x08004f6d
 8004f5c:	08004f83 	.word	0x08004f83
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004fa1 	.word	0x08004fa1
 8004f68:	08004fa1 	.word	0x08004fa1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f70:	3308      	adds	r3, #8
 8004f72:	2101      	movs	r1, #1
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 ff1d 	bl	8005db4 <RCCEx_PLL2_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f80:	e00f      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	3328      	adds	r3, #40	@ 0x28
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ffc4 	bl	8005f18 <RCCEx_PLL3_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f96:	e004      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004faa:	4b6c      	ldr	r3, [pc, #432]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f023 0107 	bic.w	r1, r3, #7
 8004fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fba:	4a68      	ldr	r2, [pc, #416]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fc0:	e003      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f002 0320 	and.w	r3, r2, #32
 8004fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	d055      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ff6:	d033      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ffc:	d82c      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005002:	d02f      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005008:	d826      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800500a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800500e:	d02b      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005010:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005014:	d820      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800501a:	d012      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800501c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005020:	d81a      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d022      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800502a:	d115      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800502c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005030:	3308      	adds	r3, #8
 8005032:	2100      	movs	r1, #0
 8005034:	4618      	mov	r0, r3
 8005036:	f000 febd 	bl	8005db4 <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005040:	e015      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005046:	3328      	adds	r3, #40	@ 0x28
 8005048:	2102      	movs	r1, #2
 800504a:	4618      	mov	r0, r3
 800504c:	f000 ff64 	bl	8005f18 <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005056:	e00a      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800505e:	e006      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005060:	bf00      	nop
 8005062:	e004      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005064:	bf00      	nop
 8005066:	e002      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800506c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005076:	4b39      	ldr	r3, [pc, #228]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005086:	4a35      	ldr	r2, [pc, #212]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005088:	430b      	orrs	r3, r1
 800508a:	6553      	str	r3, [r2, #84]	@ 0x54
 800508c:	e003      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80050a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80050ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4313      	orrs	r3, r2
 80050b4:	d058      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80050c2:	d033      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80050c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80050c8:	d82c      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ce:	d02f      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80050d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d4:	d826      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050da:	d02b      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80050dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050e0:	d820      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e6:	d012      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80050e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ec:	d81a      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d022      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f6:	d115      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fc:	3308      	adds	r3, #8
 80050fe:	2100      	movs	r1, #0
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fe57 	bl	8005db4 <RCCEx_PLL2_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800510c:	e015      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005112:	3328      	adds	r3, #40	@ 0x28
 8005114:	2102      	movs	r1, #2
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fefe 	bl	8005f18 <RCCEx_PLL3_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005122:	e00a      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800512a:	e006      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800512c:	bf00      	nop
 800512e:	e004      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005130:	bf00      	nop
 8005132:	e002      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10e      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005142:	4b06      	ldr	r3, [pc, #24]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005146:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800514a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005152:	4a02      	ldr	r2, [pc, #8]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005154:	430b      	orrs	r3, r1
 8005156:	6593      	str	r3, [r2, #88]	@ 0x58
 8005158:	e006      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005178:	2300      	movs	r3, #0
 800517a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800517e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005182:	460b      	mov	r3, r1
 8005184:	4313      	orrs	r3, r2
 8005186:	d055      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005190:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005194:	d033      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005196:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800519a:	d82c      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a0:	d02f      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80051a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a6:	d826      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80051ac:	d02b      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80051ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80051b2:	d820      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051b8:	d012      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80051ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051be:	d81a      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d022      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c8:	d115      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ce:	3308      	adds	r3, #8
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fdee 	bl	8005db4 <RCCEx_PLL2_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80051de:	e015      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	3328      	adds	r3, #40	@ 0x28
 80051e6:	2102      	movs	r1, #2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fe95 	bl	8005f18 <RCCEx_PLL3_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80051f4:	e00a      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80051fe:	bf00      	nop
 8005200:	e004      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800520a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005214:	4ba1      	ldr	r3, [pc, #644]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005218:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005224:	4a9d      	ldr	r2, [pc, #628]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005226:	430b      	orrs	r3, r1
 8005228:	6593      	str	r3, [r2, #88]	@ 0x58
 800522a:	e003      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f002 0308 	and.w	r3, r2, #8
 8005240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800524a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800524e:	460b      	mov	r3, r1
 8005250:	4313      	orrs	r3, r2
 8005252:	d01e      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005260:	d10c      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005266:	3328      	adds	r3, #40	@ 0x28
 8005268:	2102      	movs	r1, #2
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fe54 	bl	8005f18 <RCCEx_PLL3_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800527c:	4b87      	ldr	r3, [pc, #540]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800527e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005280:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800528c:	4a83      	ldr	r2, [pc, #524]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800528e:	430b      	orrs	r3, r1
 8005290:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f002 0310 	and.w	r3, r2, #16
 800529e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80052a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d01e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052be:	d10c      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c4:	3328      	adds	r3, #40	@ 0x28
 80052c6:	2102      	movs	r1, #2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fe25 	bl	8005f18 <RCCEx_PLL3_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052da:	4b70      	ldr	r3, [pc, #448]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ea:	4a6c      	ldr	r2, [pc, #432]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80052fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005300:	2300      	movs	r3, #0
 8005302:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005306:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800530a:	460b      	mov	r3, r1
 800530c:	4313      	orrs	r3, r2
 800530e:	d03e      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005314:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800531c:	d022      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800531e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005322:	d81b      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532c:	d00b      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800532e:	e015      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005334:	3308      	adds	r3, #8
 8005336:	2100      	movs	r1, #0
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fd3b 	bl	8005db4 <RCCEx_PLL2_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005344:	e00f      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534a:	3328      	adds	r3, #40	@ 0x28
 800534c:	2102      	movs	r1, #2
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fde2 	bl	8005f18 <RCCEx_PLL3_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800535a:	e004      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005362:	e000      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800536e:	4b4b      	ldr	r3, [pc, #300]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005372:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800537e:	4a47      	ldr	r2, [pc, #284]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005380:	430b      	orrs	r3, r1
 8005382:	6593      	str	r3, [r2, #88]	@ 0x58
 8005384:	e003      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005396:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800539a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800539c:	2300      	movs	r3, #0
 800539e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80053a4:	460b      	mov	r3, r1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	d03b      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053b6:	d01f      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80053b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053bc:	d818      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053c2:	d003      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80053c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053c8:	d007      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80053ca:	e011      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053cc:	4b33      	ldr	r3, [pc, #204]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	4a32      	ldr	r2, [pc, #200]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80053d8:	e00f      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053de:	3328      	adds	r3, #40	@ 0x28
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fd98 	bl	8005f18 <RCCEx_PLL3_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80053ee:	e004      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053f6:	e000      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80053f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005402:	4b26      	ldr	r3, [pc, #152]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005412:	4a22      	ldr	r2, [pc, #136]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005414:	430b      	orrs	r3, r1
 8005416:	6553      	str	r3, [r2, #84]	@ 0x54
 8005418:	e003      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800541e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800542e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005430:	2300      	movs	r3, #0
 8005432:	677b      	str	r3, [r7, #116]	@ 0x74
 8005434:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d034      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544c:	d007      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800544e:	e011      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005450:	4b12      	ldr	r3, [pc, #72]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	4a11      	ldr	r2, [pc, #68]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800545c:	e00e      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	3308      	adds	r3, #8
 8005464:	2102      	movs	r1, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fca4 	bl	8005db4 <RCCEx_PLL2_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005472:	e003      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800547a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10d      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005484:	4b05      	ldr	r3, [pc, #20]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005488:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005492:	4a02      	ldr	r2, [pc, #8]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005494:	430b      	orrs	r3, r1
 8005496:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005498:	e006      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800549a:	bf00      	nop
 800549c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80054b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054b6:	2300      	movs	r3, #0
 80054b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80054be:	460b      	mov	r3, r1
 80054c0:	4313      	orrs	r3, r2
 80054c2:	d00c      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c8:	3328      	adds	r3, #40	@ 0x28
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fd23 	bl	8005f18 <RCCEx_PLL3_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80054ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ec:	2300      	movs	r3, #0
 80054ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80054f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054f4:	460b      	mov	r3, r1
 80054f6:	4313      	orrs	r3, r2
 80054f8:	d038      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005506:	d018      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005508:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800550c:	d811      	bhi.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800550e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005512:	d014      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005518:	d80b      	bhi.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800551e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005522:	d106      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005524:	4bc3      	ldr	r3, [pc, #780]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	4ac2      	ldr	r2, [pc, #776]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800552a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800552e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005530:	e008      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005538:	e004      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800553a:	bf00      	nop
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800554c:	4bb9      	ldr	r3, [pc, #740]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800554e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005550:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800555c:	4ab5      	ldr	r2, [pc, #724]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800555e:	430b      	orrs	r3, r1
 8005560:	6553      	str	r3, [r2, #84]	@ 0x54
 8005562:	e003      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005578:	65bb      	str	r3, [r7, #88]	@ 0x58
 800557a:	2300      	movs	r3, #0
 800557c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800557e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005582:	460b      	mov	r3, r1
 8005584:	4313      	orrs	r3, r2
 8005586:	d009      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005588:	4baa      	ldr	r3, [pc, #680]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800558a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005596:	4aa7      	ldr	r2, [pc, #668]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005598:	430b      	orrs	r3, r1
 800559a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80055a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80055aa:	2300      	movs	r3, #0
 80055ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80055ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80055b2:	460b      	mov	r3, r1
 80055b4:	4313      	orrs	r3, r2
 80055b6:	d00a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80055b8:	4b9e      	ldr	r3, [pc, #632]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055c8:	4a9a      	ldr	r2, [pc, #616]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055ca:	430b      	orrs	r3, r1
 80055cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80055da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055dc:	2300      	movs	r3, #0
 80055de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80055e4:	460b      	mov	r3, r1
 80055e6:	4313      	orrs	r3, r2
 80055e8:	d009      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055ea:	4b92      	ldr	r3, [pc, #584]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f8:	4a8e      	ldr	r2, [pc, #568]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800560a:	643b      	str	r3, [r7, #64]	@ 0x40
 800560c:	2300      	movs	r3, #0
 800560e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005610:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005614:	460b      	mov	r3, r1
 8005616:	4313      	orrs	r3, r2
 8005618:	d00e      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800561a:	4b86      	ldr	r3, [pc, #536]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	4a85      	ldr	r2, [pc, #532]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005620:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005624:	6113      	str	r3, [r2, #16]
 8005626:	4b83      	ldr	r3, [pc, #524]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005628:	6919      	ldr	r1, [r3, #16]
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005632:	4a80      	ldr	r2, [pc, #512]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005634:	430b      	orrs	r3, r1
 8005636:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005646:	2300      	movs	r3, #0
 8005648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800564a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d009      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005654:	4b77      	ldr	r3, [pc, #476]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005658:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	4a74      	ldr	r2, [pc, #464]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005664:	430b      	orrs	r3, r1
 8005666:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005674:	633b      	str	r3, [r7, #48]	@ 0x30
 8005676:	2300      	movs	r3, #0
 8005678:	637b      	str	r3, [r7, #52]	@ 0x34
 800567a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800567e:	460b      	mov	r3, r1
 8005680:	4313      	orrs	r3, r2
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005684:	4b6b      	ldr	r3, [pc, #428]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005688:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005694:	4a67      	ldr	r2, [pc, #412]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005696:	430b      	orrs	r3, r1
 8005698:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	2100      	movs	r1, #0
 80056a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80056b0:	460b      	mov	r3, r1
 80056b2:	4313      	orrs	r3, r2
 80056b4:	d011      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	3308      	adds	r3, #8
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fb78 	bl	8005db4 <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80056ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	2100      	movs	r1, #0
 80056e4:	6239      	str	r1, [r7, #32]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80056f0:	460b      	mov	r3, r1
 80056f2:	4313      	orrs	r3, r2
 80056f4:	d011      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	3308      	adds	r3, #8
 80056fc:	2101      	movs	r1, #1
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fb58 	bl	8005db4 <RCCEx_PLL2_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800570a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	2100      	movs	r1, #0
 8005724:	61b9      	str	r1, [r7, #24]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005730:	460b      	mov	r3, r1
 8005732:	4313      	orrs	r3, r2
 8005734:	d011      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573a:	3308      	adds	r3, #8
 800573c:	2102      	movs	r1, #2
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fb38 	bl	8005db4 <RCCEx_PLL2_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800574a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	2100      	movs	r1, #0
 8005764:	6139      	str	r1, [r7, #16]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005770:	460b      	mov	r3, r1
 8005772:	4313      	orrs	r3, r2
 8005774:	d011      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	3328      	adds	r3, #40	@ 0x28
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fbca 	bl	8005f18 <RCCEx_PLL3_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800578a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	2100      	movs	r1, #0
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057b0:	460b      	mov	r3, r1
 80057b2:	4313      	orrs	r3, r2
 80057b4:	d011      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ba:	3328      	adds	r3, #40	@ 0x28
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fbaa 	bl	8005f18 <RCCEx_PLL3_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80057ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	2100      	movs	r1, #0
 80057e4:	6039      	str	r1, [r7, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	607b      	str	r3, [r7, #4]
 80057ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057f0:	460b      	mov	r3, r1
 80057f2:	4313      	orrs	r3, r2
 80057f4:	d011      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fa:	3328      	adds	r3, #40	@ 0x28
 80057fc:	2102      	movs	r1, #2
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fb8a 	bl	8005f18 <RCCEx_PLL3_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800580a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800581a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
}
 8005828:	4618      	mov	r0, r3
 800582a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800582e:	46bd      	mov	sp, r7
 8005830:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005834:	58024400 	.word	0x58024400

08005838 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800583c:	f7fe fd96 	bl	800436c <HAL_RCC_GetHCLKFreq>
 8005840:	4602      	mov	r2, r0
 8005842:	4b06      	ldr	r3, [pc, #24]	@ (800585c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	4904      	ldr	r1, [pc, #16]	@ (8005860 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800584e:	5ccb      	ldrb	r3, [r1, r3]
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005858:	4618      	mov	r0, r3
 800585a:	bd80      	pop	{r7, pc}
 800585c:	58024400 	.word	0x58024400
 8005860:	08015814 	.word	0x08015814

08005864 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	@ 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800586c:	4ba1      	ldr	r3, [pc, #644]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005876:	4b9f      	ldr	r3, [pc, #636]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587a:	0b1b      	lsrs	r3, r3, #12
 800587c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005880:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005882:	4b9c      	ldr	r3, [pc, #624]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800588e:	4b99      	ldr	r3, [pc, #612]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005892:	08db      	lsrs	r3, r3, #3
 8005894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8111 	beq.w	8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	f000 8083 	beq.w	80059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	f200 80a1 	bhi.w	8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d056      	beq.n	800597c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80058ce:	e099      	b.n	8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d0:	4b88      	ldr	r3, [pc, #544]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02d      	beq.n	8005938 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058dc:	4b85      	ldr	r3, [pc, #532]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	08db      	lsrs	r3, r3, #3
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	4a84      	ldr	r2, [pc, #528]	@ (8005af8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005906:	4b7b      	ldr	r3, [pc, #492]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005916:	ed97 6a03 	vldr	s12, [r7, #12]
 800591a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800591e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800592a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005932:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005936:	e087      	b.n	8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005942:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800594a:	4b6a      	ldr	r3, [pc, #424]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800594c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595a:	ed97 6a03 	vldr	s12, [r7, #12]
 800595e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800596a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800596e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800597a:	e065      	b.n	8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800598a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598e:	4b59      	ldr	r3, [pc, #356]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599e:	ed97 6a03 	vldr	s12, [r7, #12]
 80059a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059be:	e043      	b.n	8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80059ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059d2:	4b48      	ldr	r3, [pc, #288]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a02:	e021      	b.n	8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a16:	4b37      	ldr	r3, [pc, #220]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a48:	4b2a      	ldr	r3, [pc, #168]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4c:	0a5b      	lsrs	r3, r3, #9
 8005a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a6e:	ee17 2a90 	vmov	r2, s15
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a76:	4b1f      	ldr	r3, [pc, #124]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	0c1b      	lsrs	r3, r3, #16
 8005a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a9c:	ee17 2a90 	vmov	r2, s15
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005aa4:	4b13      	ldr	r3, [pc, #76]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa8:	0e1b      	lsrs	r3, r3, #24
 8005aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aca:	ee17 2a90 	vmov	r2, s15
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
}
 8005ae6:	bf00      	nop
 8005ae8:	3724      	adds	r7, #36	@ 0x24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	58024400 	.word	0x58024400
 8005af8:	03d09000 	.word	0x03d09000
 8005afc:	46000000 	.word	0x46000000
 8005b00:	4c742400 	.word	0x4c742400
 8005b04:	4a742400 	.word	0x4a742400
 8005b08:	4bbebc20 	.word	0x4bbebc20

08005b0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b089      	sub	sp, #36	@ 0x24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b14:	4ba1      	ldr	r3, [pc, #644]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b1e:	4b9f      	ldr	r3, [pc, #636]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	0d1b      	lsrs	r3, r3, #20
 8005b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b2a:	4b9c      	ldr	r3, [pc, #624]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b36:	4b99      	ldr	r3, [pc, #612]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	08db      	lsrs	r3, r3, #3
 8005b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8111 	beq.w	8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	f000 8083 	beq.w	8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	f200 80a1 	bhi.w	8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d056      	beq.n	8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b76:	e099      	b.n	8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b78:	4b88      	ldr	r3, [pc, #544]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d02d      	beq.n	8005be0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b84:	4b85      	ldr	r3, [pc, #532]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	08db      	lsrs	r3, r3, #3
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	4a84      	ldr	r2, [pc, #528]	@ (8005da0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
 8005b94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bae:	4b7b      	ldr	r3, [pc, #492]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005bde:	e087      	b.n	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c22:	e065      	b.n	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c36:	4b59      	ldr	r3, [pc, #356]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c66:	e043      	b.n	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7a:	4b48      	ldr	r3, [pc, #288]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005caa:	e021      	b.n	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b37      	ldr	r3, [pc, #220]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf4:	0a5b      	lsrs	r3, r3, #9
 8005cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d16:	ee17 2a90 	vmov	r2, s15
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	0c1b      	lsrs	r3, r3, #16
 8005d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d44:	ee17 2a90 	vmov	r2, s15
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005d4c:	4b13      	ldr	r3, [pc, #76]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	0e1b      	lsrs	r3, r3, #24
 8005d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d72:	ee17 2a90 	vmov	r2, s15
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d7a:	e008      	b.n	8005d8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	609a      	str	r2, [r3, #8]
}
 8005d8e:	bf00      	nop
 8005d90:	3724      	adds	r7, #36	@ 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	58024400 	.word	0x58024400
 8005da0:	03d09000 	.word	0x03d09000
 8005da4:	46000000 	.word	0x46000000
 8005da8:	4c742400 	.word	0x4c742400
 8005dac:	4a742400 	.word	0x4a742400
 8005db0:	4bbebc20 	.word	0x4bbebc20

08005db4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dc2:	4b53      	ldr	r3, [pc, #332]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d101      	bne.n	8005dd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e099      	b.n	8005f06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4e      	ldr	r2, [pc, #312]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005dd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dde:	f7fb fa0f 	bl	8001200 <HAL_GetTick>
 8005de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005de4:	e008      	b.n	8005df8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005de6:	f7fb fa0b 	bl	8001200 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e086      	b.n	8005f06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005df8:	4b45      	ldr	r3, [pc, #276]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f0      	bne.n	8005de6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e04:	4b42      	ldr	r3, [pc, #264]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	031b      	lsls	r3, r3, #12
 8005e12:	493f      	ldr	r1, [pc, #252]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	025b      	lsls	r3, r3, #9
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	061b      	lsls	r3, r3, #24
 8005e44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e48:	4931      	ldr	r1, [pc, #196]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e4e:	4b30      	ldr	r3, [pc, #192]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	492d      	ldr	r1, [pc, #180]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e60:	4b2b      	ldr	r3, [pc, #172]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	f023 0220 	bic.w	r2, r3, #32
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	4928      	ldr	r1, [pc, #160]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e72:	4b27      	ldr	r3, [pc, #156]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	4a26      	ldr	r2, [pc, #152]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e78:	f023 0310 	bic.w	r3, r3, #16
 8005e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e7e:	4b24      	ldr	r3, [pc, #144]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e82:	4b24      	ldr	r3, [pc, #144]	@ (8005f14 <RCCEx_PLL2_Config+0x160>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	69d2      	ldr	r2, [r2, #28]
 8005e8a:	00d2      	lsls	r2, r2, #3
 8005e8c:	4920      	ldr	r1, [pc, #128]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e92:	4b1f      	ldr	r3, [pc, #124]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e96:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005e98:	f043 0310 	orr.w	r3, r3, #16
 8005e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	4a19      	ldr	r2, [pc, #100]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005eaa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005eb0:	e00f      	b.n	8005ed2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d106      	bne.n	8005ec6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005eb8:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	4a14      	ldr	r2, [pc, #80]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ec4:	e005      	b.n	8005ed2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ec6:	4b12      	ldr	r3, [pc, #72]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	4a11      	ldr	r2, [pc, #68]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005ecc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005ed8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ede:	f7fb f98f 	bl	8001200 <HAL_GetTick>
 8005ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ee4:	e008      	b.n	8005ef8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ee6:	f7fb f98b 	bl	8001200 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e006      	b.n	8005f06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <RCCEx_PLL2_Config+0x15c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	58024400 	.word	0x58024400
 8005f14:	ffff0007 	.word	0xffff0007

08005f18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f26:	4b53      	ldr	r3, [pc, #332]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d101      	bne.n	8005f36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e099      	b.n	800606a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f36:	4b4f      	ldr	r3, [pc, #316]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4e      	ldr	r2, [pc, #312]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f42:	f7fb f95d 	bl	8001200 <HAL_GetTick>
 8005f46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f48:	e008      	b.n	8005f5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f4a:	f7fb f959 	bl	8001200 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e086      	b.n	800606a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f5c:	4b45      	ldr	r3, [pc, #276]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1f0      	bne.n	8005f4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f68:	4b42      	ldr	r3, [pc, #264]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	051b      	lsls	r3, r3, #20
 8005f76:	493f      	ldr	r1, [pc, #252]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	025b      	lsls	r3, r3, #9
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	061b      	lsls	r3, r3, #24
 8005fa8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fac:	4931      	ldr	r1, [pc, #196]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fb2:	4b30      	ldr	r3, [pc, #192]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	492d      	ldr	r1, [pc, #180]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	4928      	ldr	r1, [pc, #160]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005fd6:	4b27      	ldr	r3, [pc, #156]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	4a26      	ldr	r2, [pc, #152]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005fe2:	4b24      	ldr	r3, [pc, #144]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe6:	4b24      	ldr	r3, [pc, #144]	@ (8006078 <RCCEx_PLL3_Config+0x160>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	69d2      	ldr	r2, [r2, #28]
 8005fee:	00d2      	lsls	r2, r2, #3
 8005ff0:	4920      	ldr	r1, [pc, #128]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8005ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006000:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006008:	4b1a      	ldr	r3, [pc, #104]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	4a19      	ldr	r2, [pc, #100]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 800600e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006012:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006014:	e00f      	b.n	8006036 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d106      	bne.n	800602a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800601c:	4b15      	ldr	r3, [pc, #84]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	4a14      	ldr	r2, [pc, #80]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8006022:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006026:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006028:	e005      	b.n	8006036 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 800602c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602e:	4a11      	ldr	r2, [pc, #68]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8006030:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006034:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006036:	4b0f      	ldr	r3, [pc, #60]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a0e      	ldr	r2, [pc, #56]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 800603c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006042:	f7fb f8dd 	bl	8001200 <HAL_GetTick>
 8006046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006048:	e008      	b.n	800605c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800604a:	f7fb f8d9 	bl	8001200 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e006      	b.n	800606a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800605c:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <RCCEx_PLL3_Config+0x15c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f0      	beq.n	800604a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	58024400 	.word	0x58024400
 8006078:	ffff0007 	.word	0xffff0007

0800607c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e042      	b.n	8006114 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fa fda5 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2224      	movs	r2, #36	@ 0x24
 80060aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fe1e 	bl	8006d08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8b3 	bl	8006238 <UART_SetConfig>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e01b      	b.n	8006114 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fe9d 	bl	8006e4c <UART_CheckIdleState>
 8006112:	4603      	mov	r3, r0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	@ 0x28
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006132:	2b20      	cmp	r3, #32
 8006134:	d17b      	bne.n	800622e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_UART_Transmit+0x26>
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e074      	b.n	8006230 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2221      	movs	r2, #33	@ 0x21
 8006152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006156:	f7fb f853 	bl	8001200 <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006174:	d108      	bne.n	8006188 <HAL_UART_Transmit+0x6c>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e003      	b.n	8006190 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800618c:	2300      	movs	r3, #0
 800618e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006190:	e030      	b.n	80061f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2200      	movs	r2, #0
 800619a:	2180      	movs	r1, #128	@ 0x80
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 feff 	bl	8006fa0 <UART_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e03d      	b.n	8006230 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	3302      	adds	r3, #2
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e007      	b.n	80061e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3301      	adds	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1c8      	bne.n	8006192 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2200      	movs	r2, #0
 8006208:	2140      	movs	r1, #64	@ 0x40
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fec8 	bl	8006fa0 <UART_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	e000      	b.n	8006230 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800622e:	2302      	movs	r3, #2
  }
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800623c:	b092      	sub	sp, #72	@ 0x48
 800623e:	af00      	add	r7, sp, #0
 8006240:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	431a      	orrs	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	431a      	orrs	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	4313      	orrs	r3, r2
 800625e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4bbe      	ldr	r3, [pc, #760]	@ (8006560 <UART_SetConfig+0x328>)
 8006268:	4013      	ands	r3, r2
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006270:	430b      	orrs	r3, r1
 8006272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4ab3      	ldr	r2, [pc, #716]	@ (8006564 <UART_SetConfig+0x32c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062a0:	4313      	orrs	r3, r2
 80062a2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	4baf      	ldr	r3, [pc, #700]	@ (8006568 <UART_SetConfig+0x330>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	6812      	ldr	r2, [r2, #0]
 80062b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	f023 010f 	bic.w	r1, r3, #15
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4aa6      	ldr	r2, [pc, #664]	@ (800656c <UART_SetConfig+0x334>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d177      	bne.n	80063c8 <UART_SetConfig+0x190>
 80062d8:	4ba5      	ldr	r3, [pc, #660]	@ (8006570 <UART_SetConfig+0x338>)
 80062da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062e0:	2b28      	cmp	r3, #40	@ 0x28
 80062e2:	d86d      	bhi.n	80063c0 <UART_SetConfig+0x188>
 80062e4:	a201      	add	r2, pc, #4	@ (adr r2, 80062ec <UART_SetConfig+0xb4>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	08006391 	.word	0x08006391
 80062f0:	080063c1 	.word	0x080063c1
 80062f4:	080063c1 	.word	0x080063c1
 80062f8:	080063c1 	.word	0x080063c1
 80062fc:	080063c1 	.word	0x080063c1
 8006300:	080063c1 	.word	0x080063c1
 8006304:	080063c1 	.word	0x080063c1
 8006308:	080063c1 	.word	0x080063c1
 800630c:	08006399 	.word	0x08006399
 8006310:	080063c1 	.word	0x080063c1
 8006314:	080063c1 	.word	0x080063c1
 8006318:	080063c1 	.word	0x080063c1
 800631c:	080063c1 	.word	0x080063c1
 8006320:	080063c1 	.word	0x080063c1
 8006324:	080063c1 	.word	0x080063c1
 8006328:	080063c1 	.word	0x080063c1
 800632c:	080063a1 	.word	0x080063a1
 8006330:	080063c1 	.word	0x080063c1
 8006334:	080063c1 	.word	0x080063c1
 8006338:	080063c1 	.word	0x080063c1
 800633c:	080063c1 	.word	0x080063c1
 8006340:	080063c1 	.word	0x080063c1
 8006344:	080063c1 	.word	0x080063c1
 8006348:	080063c1 	.word	0x080063c1
 800634c:	080063a9 	.word	0x080063a9
 8006350:	080063c1 	.word	0x080063c1
 8006354:	080063c1 	.word	0x080063c1
 8006358:	080063c1 	.word	0x080063c1
 800635c:	080063c1 	.word	0x080063c1
 8006360:	080063c1 	.word	0x080063c1
 8006364:	080063c1 	.word	0x080063c1
 8006368:	080063c1 	.word	0x080063c1
 800636c:	080063b1 	.word	0x080063b1
 8006370:	080063c1 	.word	0x080063c1
 8006374:	080063c1 	.word	0x080063c1
 8006378:	080063c1 	.word	0x080063c1
 800637c:	080063c1 	.word	0x080063c1
 8006380:	080063c1 	.word	0x080063c1
 8006384:	080063c1 	.word	0x080063c1
 8006388:	080063c1 	.word	0x080063c1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006396:	e222      	b.n	80067de <UART_SetConfig+0x5a6>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639e:	e21e      	b.n	80067de <UART_SetConfig+0x5a6>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a6:	e21a      	b.n	80067de <UART_SetConfig+0x5a6>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ae:	e216      	b.n	80067de <UART_SetConfig+0x5a6>
 80063b0:	2320      	movs	r3, #32
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b6:	e212      	b.n	80067de <UART_SetConfig+0x5a6>
 80063b8:	2340      	movs	r3, #64	@ 0x40
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063be:	e20e      	b.n	80067de <UART_SetConfig+0x5a6>
 80063c0:	2380      	movs	r3, #128	@ 0x80
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c6:	e20a      	b.n	80067de <UART_SetConfig+0x5a6>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a69      	ldr	r2, [pc, #420]	@ (8006574 <UART_SetConfig+0x33c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d130      	bne.n	8006434 <UART_SetConfig+0x1fc>
 80063d2:	4b67      	ldr	r3, [pc, #412]	@ (8006570 <UART_SetConfig+0x338>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d826      	bhi.n	800642c <UART_SetConfig+0x1f4>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <UART_SetConfig+0x1ac>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063fd 	.word	0x080063fd
 80063e8:	08006405 	.word	0x08006405
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e1ec      	b.n	80067de <UART_SetConfig+0x5a6>
 8006404:	2304      	movs	r3, #4
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640a:	e1e8      	b.n	80067de <UART_SetConfig+0x5a6>
 800640c:	2308      	movs	r3, #8
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e1e4      	b.n	80067de <UART_SetConfig+0x5a6>
 8006414:	2310      	movs	r3, #16
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e1e0      	b.n	80067de <UART_SetConfig+0x5a6>
 800641c:	2320      	movs	r3, #32
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e1dc      	b.n	80067de <UART_SetConfig+0x5a6>
 8006424:	2340      	movs	r3, #64	@ 0x40
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642a:	e1d8      	b.n	80067de <UART_SetConfig+0x5a6>
 800642c:	2380      	movs	r3, #128	@ 0x80
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006432:	e1d4      	b.n	80067de <UART_SetConfig+0x5a6>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a4f      	ldr	r2, [pc, #316]	@ (8006578 <UART_SetConfig+0x340>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d130      	bne.n	80064a0 <UART_SetConfig+0x268>
 800643e:	4b4c      	ldr	r3, [pc, #304]	@ (8006570 <UART_SetConfig+0x338>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b05      	cmp	r3, #5
 8006448:	d826      	bhi.n	8006498 <UART_SetConfig+0x260>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <UART_SetConfig+0x218>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006469 	.word	0x08006469
 8006454:	08006471 	.word	0x08006471
 8006458:	08006479 	.word	0x08006479
 800645c:	08006481 	.word	0x08006481
 8006460:	08006489 	.word	0x08006489
 8006464:	08006491 	.word	0x08006491
 8006468:	2300      	movs	r3, #0
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646e:	e1b6      	b.n	80067de <UART_SetConfig+0x5a6>
 8006470:	2304      	movs	r3, #4
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006476:	e1b2      	b.n	80067de <UART_SetConfig+0x5a6>
 8006478:	2308      	movs	r3, #8
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647e:	e1ae      	b.n	80067de <UART_SetConfig+0x5a6>
 8006480:	2310      	movs	r3, #16
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e1aa      	b.n	80067de <UART_SetConfig+0x5a6>
 8006488:	2320      	movs	r3, #32
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e1a6      	b.n	80067de <UART_SetConfig+0x5a6>
 8006490:	2340      	movs	r3, #64	@ 0x40
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006496:	e1a2      	b.n	80067de <UART_SetConfig+0x5a6>
 8006498:	2380      	movs	r3, #128	@ 0x80
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649e:	e19e      	b.n	80067de <UART_SetConfig+0x5a6>
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a35      	ldr	r2, [pc, #212]	@ (800657c <UART_SetConfig+0x344>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d130      	bne.n	800650c <UART_SetConfig+0x2d4>
 80064aa:	4b31      	ldr	r3, [pc, #196]	@ (8006570 <UART_SetConfig+0x338>)
 80064ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d826      	bhi.n	8006504 <UART_SetConfig+0x2cc>
 80064b6:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <UART_SetConfig+0x284>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064d5 	.word	0x080064d5
 80064c0:	080064dd 	.word	0x080064dd
 80064c4:	080064e5 	.word	0x080064e5
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	2300      	movs	r3, #0
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e180      	b.n	80067de <UART_SetConfig+0x5a6>
 80064dc:	2304      	movs	r3, #4
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e17c      	b.n	80067de <UART_SetConfig+0x5a6>
 80064e4:	2308      	movs	r3, #8
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e178      	b.n	80067de <UART_SetConfig+0x5a6>
 80064ec:	2310      	movs	r3, #16
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e174      	b.n	80067de <UART_SetConfig+0x5a6>
 80064f4:	2320      	movs	r3, #32
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e170      	b.n	80067de <UART_SetConfig+0x5a6>
 80064fc:	2340      	movs	r3, #64	@ 0x40
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e16c      	b.n	80067de <UART_SetConfig+0x5a6>
 8006504:	2380      	movs	r3, #128	@ 0x80
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e168      	b.n	80067de <UART_SetConfig+0x5a6>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1b      	ldr	r2, [pc, #108]	@ (8006580 <UART_SetConfig+0x348>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d142      	bne.n	800659c <UART_SetConfig+0x364>
 8006516:	4b16      	ldr	r3, [pc, #88]	@ (8006570 <UART_SetConfig+0x338>)
 8006518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	2b05      	cmp	r3, #5
 8006520:	d838      	bhi.n	8006594 <UART_SetConfig+0x35c>
 8006522:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <UART_SetConfig+0x2f0>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006541 	.word	0x08006541
 800652c:	08006549 	.word	0x08006549
 8006530:	08006551 	.word	0x08006551
 8006534:	08006559 	.word	0x08006559
 8006538:	08006585 	.word	0x08006585
 800653c:	0800658d 	.word	0x0800658d
 8006540:	2300      	movs	r3, #0
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e14a      	b.n	80067de <UART_SetConfig+0x5a6>
 8006548:	2304      	movs	r3, #4
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e146      	b.n	80067de <UART_SetConfig+0x5a6>
 8006550:	2308      	movs	r3, #8
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e142      	b.n	80067de <UART_SetConfig+0x5a6>
 8006558:	2310      	movs	r3, #16
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e13e      	b.n	80067de <UART_SetConfig+0x5a6>
 8006560:	cfff69f3 	.word	0xcfff69f3
 8006564:	58000c00 	.word	0x58000c00
 8006568:	11fff4ff 	.word	0x11fff4ff
 800656c:	40011000 	.word	0x40011000
 8006570:	58024400 	.word	0x58024400
 8006574:	40004400 	.word	0x40004400
 8006578:	40004800 	.word	0x40004800
 800657c:	40004c00 	.word	0x40004c00
 8006580:	40005000 	.word	0x40005000
 8006584:	2320      	movs	r3, #32
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658a:	e128      	b.n	80067de <UART_SetConfig+0x5a6>
 800658c:	2340      	movs	r3, #64	@ 0x40
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006592:	e124      	b.n	80067de <UART_SetConfig+0x5a6>
 8006594:	2380      	movs	r3, #128	@ 0x80
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659a:	e120      	b.n	80067de <UART_SetConfig+0x5a6>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4acb      	ldr	r2, [pc, #812]	@ (80068d0 <UART_SetConfig+0x698>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d176      	bne.n	8006694 <UART_SetConfig+0x45c>
 80065a6:	4bcb      	ldr	r3, [pc, #812]	@ (80068d4 <UART_SetConfig+0x69c>)
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065ae:	2b28      	cmp	r3, #40	@ 0x28
 80065b0:	d86c      	bhi.n	800668c <UART_SetConfig+0x454>
 80065b2:	a201      	add	r2, pc, #4	@ (adr r2, 80065b8 <UART_SetConfig+0x380>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	0800665d 	.word	0x0800665d
 80065bc:	0800668d 	.word	0x0800668d
 80065c0:	0800668d 	.word	0x0800668d
 80065c4:	0800668d 	.word	0x0800668d
 80065c8:	0800668d 	.word	0x0800668d
 80065cc:	0800668d 	.word	0x0800668d
 80065d0:	0800668d 	.word	0x0800668d
 80065d4:	0800668d 	.word	0x0800668d
 80065d8:	08006665 	.word	0x08006665
 80065dc:	0800668d 	.word	0x0800668d
 80065e0:	0800668d 	.word	0x0800668d
 80065e4:	0800668d 	.word	0x0800668d
 80065e8:	0800668d 	.word	0x0800668d
 80065ec:	0800668d 	.word	0x0800668d
 80065f0:	0800668d 	.word	0x0800668d
 80065f4:	0800668d 	.word	0x0800668d
 80065f8:	0800666d 	.word	0x0800666d
 80065fc:	0800668d 	.word	0x0800668d
 8006600:	0800668d 	.word	0x0800668d
 8006604:	0800668d 	.word	0x0800668d
 8006608:	0800668d 	.word	0x0800668d
 800660c:	0800668d 	.word	0x0800668d
 8006610:	0800668d 	.word	0x0800668d
 8006614:	0800668d 	.word	0x0800668d
 8006618:	08006675 	.word	0x08006675
 800661c:	0800668d 	.word	0x0800668d
 8006620:	0800668d 	.word	0x0800668d
 8006624:	0800668d 	.word	0x0800668d
 8006628:	0800668d 	.word	0x0800668d
 800662c:	0800668d 	.word	0x0800668d
 8006630:	0800668d 	.word	0x0800668d
 8006634:	0800668d 	.word	0x0800668d
 8006638:	0800667d 	.word	0x0800667d
 800663c:	0800668d 	.word	0x0800668d
 8006640:	0800668d 	.word	0x0800668d
 8006644:	0800668d 	.word	0x0800668d
 8006648:	0800668d 	.word	0x0800668d
 800664c:	0800668d 	.word	0x0800668d
 8006650:	0800668d 	.word	0x0800668d
 8006654:	0800668d 	.word	0x0800668d
 8006658:	08006685 	.word	0x08006685
 800665c:	2301      	movs	r3, #1
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e0bc      	b.n	80067de <UART_SetConfig+0x5a6>
 8006664:	2304      	movs	r3, #4
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666a:	e0b8      	b.n	80067de <UART_SetConfig+0x5a6>
 800666c:	2308      	movs	r3, #8
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e0b4      	b.n	80067de <UART_SetConfig+0x5a6>
 8006674:	2310      	movs	r3, #16
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e0b0      	b.n	80067de <UART_SetConfig+0x5a6>
 800667c:	2320      	movs	r3, #32
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e0ac      	b.n	80067de <UART_SetConfig+0x5a6>
 8006684:	2340      	movs	r3, #64	@ 0x40
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e0a8      	b.n	80067de <UART_SetConfig+0x5a6>
 800668c:	2380      	movs	r3, #128	@ 0x80
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006692:	e0a4      	b.n	80067de <UART_SetConfig+0x5a6>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a8f      	ldr	r2, [pc, #572]	@ (80068d8 <UART_SetConfig+0x6a0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d130      	bne.n	8006700 <UART_SetConfig+0x4c8>
 800669e:	4b8d      	ldr	r3, [pc, #564]	@ (80068d4 <UART_SetConfig+0x69c>)
 80066a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	d826      	bhi.n	80066f8 <UART_SetConfig+0x4c0>
 80066aa:	a201      	add	r2, pc, #4	@ (adr r2, 80066b0 <UART_SetConfig+0x478>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c9 	.word	0x080066c9
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	080066d9 	.word	0x080066d9
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	2300      	movs	r3, #0
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e086      	b.n	80067de <UART_SetConfig+0x5a6>
 80066d0:	2304      	movs	r3, #4
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e082      	b.n	80067de <UART_SetConfig+0x5a6>
 80066d8:	2308      	movs	r3, #8
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e07e      	b.n	80067de <UART_SetConfig+0x5a6>
 80066e0:	2310      	movs	r3, #16
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e07a      	b.n	80067de <UART_SetConfig+0x5a6>
 80066e8:	2320      	movs	r3, #32
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e076      	b.n	80067de <UART_SetConfig+0x5a6>
 80066f0:	2340      	movs	r3, #64	@ 0x40
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e072      	b.n	80067de <UART_SetConfig+0x5a6>
 80066f8:	2380      	movs	r3, #128	@ 0x80
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fe:	e06e      	b.n	80067de <UART_SetConfig+0x5a6>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a75      	ldr	r2, [pc, #468]	@ (80068dc <UART_SetConfig+0x6a4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d130      	bne.n	800676c <UART_SetConfig+0x534>
 800670a:	4b72      	ldr	r3, [pc, #456]	@ (80068d4 <UART_SetConfig+0x69c>)
 800670c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	2b05      	cmp	r3, #5
 8006714:	d826      	bhi.n	8006764 <UART_SetConfig+0x52c>
 8006716:	a201      	add	r2, pc, #4	@ (adr r2, 800671c <UART_SetConfig+0x4e4>)
 8006718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671c:	08006735 	.word	0x08006735
 8006720:	0800673d 	.word	0x0800673d
 8006724:	08006745 	.word	0x08006745
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006755 	.word	0x08006755
 8006730:	0800675d 	.word	0x0800675d
 8006734:	2300      	movs	r3, #0
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673a:	e050      	b.n	80067de <UART_SetConfig+0x5a6>
 800673c:	2304      	movs	r3, #4
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006742:	e04c      	b.n	80067de <UART_SetConfig+0x5a6>
 8006744:	2308      	movs	r3, #8
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674a:	e048      	b.n	80067de <UART_SetConfig+0x5a6>
 800674c:	2310      	movs	r3, #16
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e044      	b.n	80067de <UART_SetConfig+0x5a6>
 8006754:	2320      	movs	r3, #32
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e040      	b.n	80067de <UART_SetConfig+0x5a6>
 800675c:	2340      	movs	r3, #64	@ 0x40
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e03c      	b.n	80067de <UART_SetConfig+0x5a6>
 8006764:	2380      	movs	r3, #128	@ 0x80
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676a:	e038      	b.n	80067de <UART_SetConfig+0x5a6>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a5b      	ldr	r2, [pc, #364]	@ (80068e0 <UART_SetConfig+0x6a8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d130      	bne.n	80067d8 <UART_SetConfig+0x5a0>
 8006776:	4b57      	ldr	r3, [pc, #348]	@ (80068d4 <UART_SetConfig+0x69c>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	2b05      	cmp	r3, #5
 8006780:	d826      	bhi.n	80067d0 <UART_SetConfig+0x598>
 8006782:	a201      	add	r2, pc, #4	@ (adr r2, 8006788 <UART_SetConfig+0x550>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067a1 	.word	0x080067a1
 800678c:	080067a9 	.word	0x080067a9
 8006790:	080067b1 	.word	0x080067b1
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067c1 	.word	0x080067c1
 800679c:	080067c9 	.word	0x080067c9
 80067a0:	2302      	movs	r3, #2
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e01a      	b.n	80067de <UART_SetConfig+0x5a6>
 80067a8:	2304      	movs	r3, #4
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e016      	b.n	80067de <UART_SetConfig+0x5a6>
 80067b0:	2308      	movs	r3, #8
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e012      	b.n	80067de <UART_SetConfig+0x5a6>
 80067b8:	2310      	movs	r3, #16
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e00e      	b.n	80067de <UART_SetConfig+0x5a6>
 80067c0:	2320      	movs	r3, #32
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e00a      	b.n	80067de <UART_SetConfig+0x5a6>
 80067c8:	2340      	movs	r3, #64	@ 0x40
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e006      	b.n	80067de <UART_SetConfig+0x5a6>
 80067d0:	2380      	movs	r3, #128	@ 0x80
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d6:	e002      	b.n	80067de <UART_SetConfig+0x5a6>
 80067d8:	2380      	movs	r3, #128	@ 0x80
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a3f      	ldr	r2, [pc, #252]	@ (80068e0 <UART_SetConfig+0x6a8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	f040 80f8 	bne.w	80069da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	dc46      	bgt.n	8006880 <UART_SetConfig+0x648>
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	f2c0 8082 	blt.w	80068fc <UART_SetConfig+0x6c4>
 80067f8:	3b02      	subs	r3, #2
 80067fa:	2b1e      	cmp	r3, #30
 80067fc:	d87e      	bhi.n	80068fc <UART_SetConfig+0x6c4>
 80067fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006804 <UART_SetConfig+0x5cc>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006887 	.word	0x08006887
 8006808:	080068fd 	.word	0x080068fd
 800680c:	0800688f 	.word	0x0800688f
 8006810:	080068fd 	.word	0x080068fd
 8006814:	080068fd 	.word	0x080068fd
 8006818:	080068fd 	.word	0x080068fd
 800681c:	0800689f 	.word	0x0800689f
 8006820:	080068fd 	.word	0x080068fd
 8006824:	080068fd 	.word	0x080068fd
 8006828:	080068fd 	.word	0x080068fd
 800682c:	080068fd 	.word	0x080068fd
 8006830:	080068fd 	.word	0x080068fd
 8006834:	080068fd 	.word	0x080068fd
 8006838:	080068fd 	.word	0x080068fd
 800683c:	080068af 	.word	0x080068af
 8006840:	080068fd 	.word	0x080068fd
 8006844:	080068fd 	.word	0x080068fd
 8006848:	080068fd 	.word	0x080068fd
 800684c:	080068fd 	.word	0x080068fd
 8006850:	080068fd 	.word	0x080068fd
 8006854:	080068fd 	.word	0x080068fd
 8006858:	080068fd 	.word	0x080068fd
 800685c:	080068fd 	.word	0x080068fd
 8006860:	080068fd 	.word	0x080068fd
 8006864:	080068fd 	.word	0x080068fd
 8006868:	080068fd 	.word	0x080068fd
 800686c:	080068fd 	.word	0x080068fd
 8006870:	080068fd 	.word	0x080068fd
 8006874:	080068fd 	.word	0x080068fd
 8006878:	080068fd 	.word	0x080068fd
 800687c:	080068ef 	.word	0x080068ef
 8006880:	2b40      	cmp	r3, #64	@ 0x40
 8006882:	d037      	beq.n	80068f4 <UART_SetConfig+0x6bc>
 8006884:	e03a      	b.n	80068fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006886:	f7fe ffd7 	bl	8005838 <HAL_RCCEx_GetD3PCLK1Freq>
 800688a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800688c:	e03c      	b.n	8006908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800688e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe ffe6 	bl	8005864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689c:	e034      	b.n	8006908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800689e:	f107 0318 	add.w	r3, r7, #24
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff f932 	bl	8005b0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ac:	e02c      	b.n	8006908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ae:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <UART_SetConfig+0x69c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068ba:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <UART_SetConfig+0x69c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	4a07      	ldr	r2, [pc, #28]	@ (80068e4 <UART_SetConfig+0x6ac>)
 80068c6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068cc:	e01c      	b.n	8006908 <UART_SetConfig+0x6d0>
 80068ce:	bf00      	nop
 80068d0:	40011400 	.word	0x40011400
 80068d4:	58024400 	.word	0x58024400
 80068d8:	40007800 	.word	0x40007800
 80068dc:	40007c00 	.word	0x40007c00
 80068e0:	58000c00 	.word	0x58000c00
 80068e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80068e8:	4b9d      	ldr	r3, [pc, #628]	@ (8006b60 <UART_SetConfig+0x928>)
 80068ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ec:	e00c      	b.n	8006908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068ee:	4b9d      	ldr	r3, [pc, #628]	@ (8006b64 <UART_SetConfig+0x92c>)
 80068f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f2:	e009      	b.n	8006908 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fa:	e005      	b.n	8006908 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006906:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 81de 	beq.w	8006ccc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006914:	4a94      	ldr	r2, [pc, #592]	@ (8006b68 <UART_SetConfig+0x930>)
 8006916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800691a:	461a      	mov	r2, r3
 800691c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800691e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006922:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4413      	add	r3, r2
 800692e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006930:	429a      	cmp	r2, r3
 8006932:	d305      	bcc.n	8006940 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800693a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800693c:	429a      	cmp	r2, r3
 800693e:	d903      	bls.n	8006948 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006946:	e1c1      	b.n	8006ccc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694a:	2200      	movs	r2, #0
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	60fa      	str	r2, [r7, #12]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006954:	4a84      	ldr	r2, [pc, #528]	@ (8006b68 <UART_SetConfig+0x930>)
 8006956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800695a:	b29b      	uxth	r3, r3
 800695c:	2200      	movs	r2, #0
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800696a:	f7f9 fd09 	bl	8000380 <__aeabi_uldivmod>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4610      	mov	r0, r2
 8006974:	4619      	mov	r1, r3
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	020b      	lsls	r3, r1, #8
 8006980:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006984:	0202      	lsls	r2, r0, #8
 8006986:	6979      	ldr	r1, [r7, #20]
 8006988:	6849      	ldr	r1, [r1, #4]
 800698a:	0849      	lsrs	r1, r1, #1
 800698c:	2000      	movs	r0, #0
 800698e:	460c      	mov	r4, r1
 8006990:	4605      	mov	r5, r0
 8006992:	eb12 0804 	adds.w	r8, r2, r4
 8006996:	eb43 0905 	adc.w	r9, r3, r5
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	469a      	mov	sl, r3
 80069a2:	4693      	mov	fp, r2
 80069a4:	4652      	mov	r2, sl
 80069a6:	465b      	mov	r3, fp
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	f7f9 fce8 	bl	8000380 <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4613      	mov	r3, r2
 80069b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069be:	d308      	bcc.n	80069d2 <UART_SetConfig+0x79a>
 80069c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069c6:	d204      	bcs.n	80069d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069ce:	60da      	str	r2, [r3, #12]
 80069d0:	e17c      	b.n	8006ccc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069d8:	e178      	b.n	8006ccc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069e2:	f040 80c5 	bne.w	8006b70 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80069e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	dc48      	bgt.n	8006a80 <UART_SetConfig+0x848>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	db7b      	blt.n	8006aea <UART_SetConfig+0x8b2>
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	d879      	bhi.n	8006aea <UART_SetConfig+0x8b2>
 80069f6:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <UART_SetConfig+0x7c4>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a87 	.word	0x08006a87
 8006a00:	08006a8f 	.word	0x08006a8f
 8006a04:	08006aeb 	.word	0x08006aeb
 8006a08:	08006aeb 	.word	0x08006aeb
 8006a0c:	08006a97 	.word	0x08006a97
 8006a10:	08006aeb 	.word	0x08006aeb
 8006a14:	08006aeb 	.word	0x08006aeb
 8006a18:	08006aeb 	.word	0x08006aeb
 8006a1c:	08006aa7 	.word	0x08006aa7
 8006a20:	08006aeb 	.word	0x08006aeb
 8006a24:	08006aeb 	.word	0x08006aeb
 8006a28:	08006aeb 	.word	0x08006aeb
 8006a2c:	08006aeb 	.word	0x08006aeb
 8006a30:	08006aeb 	.word	0x08006aeb
 8006a34:	08006aeb 	.word	0x08006aeb
 8006a38:	08006aeb 	.word	0x08006aeb
 8006a3c:	08006ab7 	.word	0x08006ab7
 8006a40:	08006aeb 	.word	0x08006aeb
 8006a44:	08006aeb 	.word	0x08006aeb
 8006a48:	08006aeb 	.word	0x08006aeb
 8006a4c:	08006aeb 	.word	0x08006aeb
 8006a50:	08006aeb 	.word	0x08006aeb
 8006a54:	08006aeb 	.word	0x08006aeb
 8006a58:	08006aeb 	.word	0x08006aeb
 8006a5c:	08006aeb 	.word	0x08006aeb
 8006a60:	08006aeb 	.word	0x08006aeb
 8006a64:	08006aeb 	.word	0x08006aeb
 8006a68:	08006aeb 	.word	0x08006aeb
 8006a6c:	08006aeb 	.word	0x08006aeb
 8006a70:	08006aeb 	.word	0x08006aeb
 8006a74:	08006aeb 	.word	0x08006aeb
 8006a78:	08006aeb 	.word	0x08006aeb
 8006a7c:	08006add 	.word	0x08006add
 8006a80:	2b40      	cmp	r3, #64	@ 0x40
 8006a82:	d02e      	beq.n	8006ae2 <UART_SetConfig+0x8aa>
 8006a84:	e031      	b.n	8006aea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a86:	f7fd fca1 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8006a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a8c:	e033      	b.n	8006af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a8e:	f7fd fcb3 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
 8006a92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a94:	e02f      	b.n	8006af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fee2 	bl	8005864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aa4:	e027      	b.n	8006af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aa6:	f107 0318 	add.w	r3, r7, #24
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff f82e 	bl	8005b0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ab4:	e01f      	b.n	8006af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8006b6c <UART_SetConfig+0x934>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d009      	beq.n	8006ad6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b6c <UART_SetConfig+0x934>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	08db      	lsrs	r3, r3, #3
 8006ac8:	f003 0303 	and.w	r3, r3, #3
 8006acc:	4a24      	ldr	r2, [pc, #144]	@ (8006b60 <UART_SetConfig+0x928>)
 8006ace:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ad4:	e00f      	b.n	8006af6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006ad6:	4b22      	ldr	r3, [pc, #136]	@ (8006b60 <UART_SetConfig+0x928>)
 8006ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ada:	e00c      	b.n	8006af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006adc:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <UART_SetConfig+0x92c>)
 8006ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae0:	e009      	b.n	8006af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae8:	e005      	b.n	8006af6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006af4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80e7 	beq.w	8006ccc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b02:	4a19      	ldr	r2, [pc, #100]	@ (8006b68 <UART_SetConfig+0x930>)
 8006b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b10:	005a      	lsls	r2, r3, #1
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	085b      	lsrs	r3, r3, #1
 8006b18:	441a      	add	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	2b0f      	cmp	r3, #15
 8006b28:	d916      	bls.n	8006b58 <UART_SetConfig+0x920>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b30:	d212      	bcs.n	8006b58 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	f023 030f 	bic.w	r3, r3, #15
 8006b3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006b54:	60da      	str	r2, [r3, #12]
 8006b56:	e0b9      	b.n	8006ccc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b5e:	e0b5      	b.n	8006ccc <UART_SetConfig+0xa94>
 8006b60:	03d09000 	.word	0x03d09000
 8006b64:	003d0900 	.word	0x003d0900
 8006b68:	08015824 	.word	0x08015824
 8006b6c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b70:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	dc49      	bgt.n	8006c0c <UART_SetConfig+0x9d4>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	db7c      	blt.n	8006c76 <UART_SetConfig+0xa3e>
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d87a      	bhi.n	8006c76 <UART_SetConfig+0xa3e>
 8006b80:	a201      	add	r2, pc, #4	@ (adr r2, 8006b88 <UART_SetConfig+0x950>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006c13 	.word	0x08006c13
 8006b8c:	08006c1b 	.word	0x08006c1b
 8006b90:	08006c77 	.word	0x08006c77
 8006b94:	08006c77 	.word	0x08006c77
 8006b98:	08006c23 	.word	0x08006c23
 8006b9c:	08006c77 	.word	0x08006c77
 8006ba0:	08006c77 	.word	0x08006c77
 8006ba4:	08006c77 	.word	0x08006c77
 8006ba8:	08006c33 	.word	0x08006c33
 8006bac:	08006c77 	.word	0x08006c77
 8006bb0:	08006c77 	.word	0x08006c77
 8006bb4:	08006c77 	.word	0x08006c77
 8006bb8:	08006c77 	.word	0x08006c77
 8006bbc:	08006c77 	.word	0x08006c77
 8006bc0:	08006c77 	.word	0x08006c77
 8006bc4:	08006c77 	.word	0x08006c77
 8006bc8:	08006c43 	.word	0x08006c43
 8006bcc:	08006c77 	.word	0x08006c77
 8006bd0:	08006c77 	.word	0x08006c77
 8006bd4:	08006c77 	.word	0x08006c77
 8006bd8:	08006c77 	.word	0x08006c77
 8006bdc:	08006c77 	.word	0x08006c77
 8006be0:	08006c77 	.word	0x08006c77
 8006be4:	08006c77 	.word	0x08006c77
 8006be8:	08006c77 	.word	0x08006c77
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006c77 	.word	0x08006c77
 8006bf4:	08006c77 	.word	0x08006c77
 8006bf8:	08006c77 	.word	0x08006c77
 8006bfc:	08006c77 	.word	0x08006c77
 8006c00:	08006c77 	.word	0x08006c77
 8006c04:	08006c77 	.word	0x08006c77
 8006c08:	08006c69 	.word	0x08006c69
 8006c0c:	2b40      	cmp	r3, #64	@ 0x40
 8006c0e:	d02e      	beq.n	8006c6e <UART_SetConfig+0xa36>
 8006c10:	e031      	b.n	8006c76 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c12:	f7fd fbdb 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8006c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c18:	e033      	b.n	8006c82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c1a:	f7fd fbed 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
 8006c1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c20:	e02f      	b.n	8006c82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fe1c 	bl	8005864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c30:	e027      	b.n	8006c82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c32:	f107 0318 	add.w	r3, r7, #24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe ff68 	bl	8005b0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c40:	e01f      	b.n	8006c82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c42:	4b2d      	ldr	r3, [pc, #180]	@ (8006cf8 <UART_SetConfig+0xac0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf8 <UART_SetConfig+0xac0>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	08db      	lsrs	r3, r3, #3
 8006c54:	f003 0303 	and.w	r3, r3, #3
 8006c58:	4a28      	ldr	r2, [pc, #160]	@ (8006cfc <UART_SetConfig+0xac4>)
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c60:	e00f      	b.n	8006c82 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006c62:	4b26      	ldr	r3, [pc, #152]	@ (8006cfc <UART_SetConfig+0xac4>)
 8006c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c66:	e00c      	b.n	8006c82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c68:	4b25      	ldr	r3, [pc, #148]	@ (8006d00 <UART_SetConfig+0xac8>)
 8006c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c6c:	e009      	b.n	8006c82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c74:	e005      	b.n	8006c82 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c80:	bf00      	nop
    }

    if (pclk != 0U)
 8006c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d021      	beq.n	8006ccc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d04 <UART_SetConfig+0xacc>)
 8006c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c92:	461a      	mov	r2, r3
 8006c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c96:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	085b      	lsrs	r3, r3, #1
 8006ca0:	441a      	add	r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cae:	2b0f      	cmp	r3, #15
 8006cb0:	d909      	bls.n	8006cc6 <UART_SetConfig+0xa8e>
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb8:	d205      	bcs.n	8006cc6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60da      	str	r2, [r3, #12]
 8006cc4:	e002      	b.n	8006ccc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ce8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3748      	adds	r7, #72	@ 0x48
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cf6:	bf00      	nop
 8006cf8:	58024400 	.word	0x58024400
 8006cfc:	03d09000 	.word	0x03d09000
 8006d00:	003d0900 	.word	0x003d0900
 8006d04:	08015824 	.word	0x08015824

08006d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e06:	d10a      	bne.n	8006e1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b098      	sub	sp, #96	@ 0x60
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e5c:	f7fa f9d0 	bl	8001200 <HAL_GetTick>
 8006e60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d12f      	bne.n	8006ed0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f88e 	bl	8006fa0 <UART_WaitOnFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d022      	beq.n	8006ed0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eaa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e6      	bne.n	8006e8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e063      	b.n	8006f98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d149      	bne.n	8006f72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ede:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f857 	bl	8006fa0 <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d03c      	beq.n	8006f72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	623b      	str	r3, [r7, #32]
   return(result);
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e6      	bne.n	8006ef8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f4a:	61fa      	str	r2, [r7, #28]
 8006f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	69b9      	ldr	r1, [r7, #24]
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	617b      	str	r3, [r7, #20]
   return(result);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e012      	b.n	8006f98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3758      	adds	r7, #88	@ 0x58
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	4613      	mov	r3, r2
 8006fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb0:	e04f      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fb8:	d04b      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fba:	f7fa f921 	bl	8001200 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d302      	bcc.n	8006fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e04e      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d037      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b80      	cmp	r3, #128	@ 0x80
 8006fe6:	d034      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b40      	cmp	r3, #64	@ 0x40
 8006fec:	d031      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d110      	bne.n	800701e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2208      	movs	r2, #8
 8007002:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f839 	bl	800707c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2208      	movs	r2, #8
 800700e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e029      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800702c:	d111      	bne.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007036:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f81f 	bl	800707c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e00f      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4013      	ands	r3, r2
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	bf0c      	ite	eq
 8007062:	2301      	moveq	r3, #1
 8007064:	2300      	movne	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	461a      	mov	r2, r3
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	429a      	cmp	r2, r3
 800706e:	d0a0      	beq.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b095      	sub	sp, #84	@ 0x54
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80070a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e6      	bne.n	8007084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3308      	adds	r3, #8
 80070bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007144 <UART_EndRxTransfer+0xc8>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3308      	adds	r3, #8
 80070d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e5      	bne.n	80070b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d118      	bne.n	8007124 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f023 0310 	bic.w	r3, r3, #16
 8007106:	647b      	str	r3, [r7, #68]	@ 0x44
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007110:	61bb      	str	r3, [r7, #24]
 8007112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6979      	ldr	r1, [r7, #20]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	613b      	str	r3, [r7, #16]
   return(result);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e6      	bne.n	80070f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007138:	bf00      	nop
 800713a:	3754      	adds	r7, #84	@ 0x54
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	effffffe 	.word	0xeffffffe

08007148 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_UARTEx_DisableFifoMode+0x16>
 800715a:	2302      	movs	r3, #2
 800715c:	e027      	b.n	80071ae <HAL_UARTEx_DisableFifoMode+0x66>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2224      	movs	r2, #36	@ 0x24
 800716a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0201 	bic.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800718c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e02d      	b.n	800722e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2224      	movs	r2, #36	@ 0x24
 80071de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f850 	bl	80072b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800724a:	2302      	movs	r3, #2
 800724c:	e02d      	b.n	80072aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2224      	movs	r2, #36	@ 0x24
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f812 	bl	80072b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d108      	bne.n	80072d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072d4:	e031      	b.n	800733a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072d6:	2310      	movs	r3, #16
 80072d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072da:	2310      	movs	r3, #16
 80072dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	0e5b      	lsrs	r3, r3, #25
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	0f5b      	lsrs	r3, r3, #29
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	7b3a      	ldrb	r2, [r7, #12]
 8007302:	4911      	ldr	r1, [pc, #68]	@ (8007348 <UARTEx_SetNbDataToProcess+0x94>)
 8007304:	5c8a      	ldrb	r2, [r1, r2]
 8007306:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800730a:	7b3a      	ldrb	r2, [r7, #12]
 800730c:	490f      	ldr	r1, [pc, #60]	@ (800734c <UARTEx_SetNbDataToProcess+0x98>)
 800730e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007310:	fb93 f3f2 	sdiv	r3, r3, r2
 8007314:	b29a      	uxth	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	7b7a      	ldrb	r2, [r7, #13]
 8007320:	4909      	ldr	r1, [pc, #36]	@ (8007348 <UARTEx_SetNbDataToProcess+0x94>)
 8007322:	5c8a      	ldrb	r2, [r1, r2]
 8007324:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007328:	7b7a      	ldrb	r2, [r7, #13]
 800732a:	4908      	ldr	r1, [pc, #32]	@ (800734c <UARTEx_SetNbDataToProcess+0x98>)
 800732c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800732e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007332:	b29a      	uxth	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	0801583c 	.word	0x0801583c
 800734c:	08015844 	.word	0x08015844

08007350 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007356:	4b87      	ldr	r3, [pc, #540]	@ (8007574 <MX_LWIP_Init+0x224>)
 8007358:	22c0      	movs	r2, #192	@ 0xc0
 800735a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800735c:	4b85      	ldr	r3, [pc, #532]	@ (8007574 <MX_LWIP_Init+0x224>)
 800735e:	22a8      	movs	r2, #168	@ 0xa8
 8007360:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007362:	4b84      	ldr	r3, [pc, #528]	@ (8007574 <MX_LWIP_Init+0x224>)
 8007364:	2200      	movs	r2, #0
 8007366:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8007368:	4b82      	ldr	r3, [pc, #520]	@ (8007574 <MX_LWIP_Init+0x224>)
 800736a:	2202      	movs	r2, #2
 800736c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800736e:	4b82      	ldr	r3, [pc, #520]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007370:	22ff      	movs	r2, #255	@ 0xff
 8007372:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007374:	4b80      	ldr	r3, [pc, #512]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007376:	22ff      	movs	r2, #255	@ 0xff
 8007378:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800737a:	4b7f      	ldr	r3, [pc, #508]	@ (8007578 <MX_LWIP_Init+0x228>)
 800737c:	22ff      	movs	r2, #255	@ 0xff
 800737e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007380:	4b7d      	ldr	r3, [pc, #500]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007382:	2200      	movs	r2, #0
 8007384:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007386:	4b7d      	ldr	r3, [pc, #500]	@ (800757c <MX_LWIP_Init+0x22c>)
 8007388:	22c0      	movs	r2, #192	@ 0xc0
 800738a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800738c:	4b7b      	ldr	r3, [pc, #492]	@ (800757c <MX_LWIP_Init+0x22c>)
 800738e:	22a8      	movs	r2, #168	@ 0xa8
 8007390:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007392:	4b7a      	ldr	r3, [pc, #488]	@ (800757c <MX_LWIP_Init+0x22c>)
 8007394:	2200      	movs	r2, #0
 8007396:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007398:	4b78      	ldr	r3, [pc, #480]	@ (800757c <MX_LWIP_Init+0x22c>)
 800739a:	2201      	movs	r2, #1
 800739c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800739e:	f001 ffeb 	bl	8009378 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80073a2:	4b74      	ldr	r3, [pc, #464]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	061a      	lsls	r2, r3, #24
 80073a8:	4b72      	ldr	r3, [pc, #456]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	431a      	orrs	r2, r3
 80073b0:	4b70      	ldr	r3, [pc, #448]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073b2:	789b      	ldrb	r3, [r3, #2]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	4313      	orrs	r3, r2
 80073b8:	4a6e      	ldr	r2, [pc, #440]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073ba:	78d2      	ldrb	r2, [r2, #3]
 80073bc:	4313      	orrs	r3, r2
 80073be:	061a      	lsls	r2, r3, #24
 80073c0:	4b6c      	ldr	r3, [pc, #432]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	0619      	lsls	r1, r3, #24
 80073c6:	4b6b      	ldr	r3, [pc, #428]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	4319      	orrs	r1, r3
 80073ce:	4b69      	ldr	r3, [pc, #420]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073d0:	789b      	ldrb	r3, [r3, #2]
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	430b      	orrs	r3, r1
 80073d6:	4967      	ldr	r1, [pc, #412]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073d8:	78c9      	ldrb	r1, [r1, #3]
 80073da:	430b      	orrs	r3, r1
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80073e2:	431a      	orrs	r2, r3
 80073e4:	4b63      	ldr	r3, [pc, #396]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	0619      	lsls	r1, r3, #24
 80073ea:	4b62      	ldr	r3, [pc, #392]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	4319      	orrs	r1, r3
 80073f2:	4b60      	ldr	r3, [pc, #384]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073f4:	789b      	ldrb	r3, [r3, #2]
 80073f6:	021b      	lsls	r3, r3, #8
 80073f8:	430b      	orrs	r3, r1
 80073fa:	495e      	ldr	r1, [pc, #376]	@ (8007574 <MX_LWIP_Init+0x224>)
 80073fc:	78c9      	ldrb	r1, [r1, #3]
 80073fe:	430b      	orrs	r3, r1
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007406:	431a      	orrs	r2, r3
 8007408:	4b5a      	ldr	r3, [pc, #360]	@ (8007574 <MX_LWIP_Init+0x224>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	0619      	lsls	r1, r3, #24
 800740e:	4b59      	ldr	r3, [pc, #356]	@ (8007574 <MX_LWIP_Init+0x224>)
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	041b      	lsls	r3, r3, #16
 8007414:	4319      	orrs	r1, r3
 8007416:	4b57      	ldr	r3, [pc, #348]	@ (8007574 <MX_LWIP_Init+0x224>)
 8007418:	789b      	ldrb	r3, [r3, #2]
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	430b      	orrs	r3, r1
 800741e:	4955      	ldr	r1, [pc, #340]	@ (8007574 <MX_LWIP_Init+0x224>)
 8007420:	78c9      	ldrb	r1, [r1, #3]
 8007422:	430b      	orrs	r3, r1
 8007424:	0e1b      	lsrs	r3, r3, #24
 8007426:	4313      	orrs	r3, r2
 8007428:	4a55      	ldr	r2, [pc, #340]	@ (8007580 <MX_LWIP_Init+0x230>)
 800742a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800742c:	4b52      	ldr	r3, [pc, #328]	@ (8007578 <MX_LWIP_Init+0x228>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	061a      	lsls	r2, r3, #24
 8007432:	4b51      	ldr	r3, [pc, #324]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	041b      	lsls	r3, r3, #16
 8007438:	431a      	orrs	r2, r3
 800743a:	4b4f      	ldr	r3, [pc, #316]	@ (8007578 <MX_LWIP_Init+0x228>)
 800743c:	789b      	ldrb	r3, [r3, #2]
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	4313      	orrs	r3, r2
 8007442:	4a4d      	ldr	r2, [pc, #308]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007444:	78d2      	ldrb	r2, [r2, #3]
 8007446:	4313      	orrs	r3, r2
 8007448:	061a      	lsls	r2, r3, #24
 800744a:	4b4b      	ldr	r3, [pc, #300]	@ (8007578 <MX_LWIP_Init+0x228>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	0619      	lsls	r1, r3, #24
 8007450:	4b49      	ldr	r3, [pc, #292]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	041b      	lsls	r3, r3, #16
 8007456:	4319      	orrs	r1, r3
 8007458:	4b47      	ldr	r3, [pc, #284]	@ (8007578 <MX_LWIP_Init+0x228>)
 800745a:	789b      	ldrb	r3, [r3, #2]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	430b      	orrs	r3, r1
 8007460:	4945      	ldr	r1, [pc, #276]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007462:	78c9      	ldrb	r1, [r1, #3]
 8007464:	430b      	orrs	r3, r1
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800746c:	431a      	orrs	r2, r3
 800746e:	4b42      	ldr	r3, [pc, #264]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	0619      	lsls	r1, r3, #24
 8007474:	4b40      	ldr	r3, [pc, #256]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	041b      	lsls	r3, r3, #16
 800747a:	4319      	orrs	r1, r3
 800747c:	4b3e      	ldr	r3, [pc, #248]	@ (8007578 <MX_LWIP_Init+0x228>)
 800747e:	789b      	ldrb	r3, [r3, #2]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	430b      	orrs	r3, r1
 8007484:	493c      	ldr	r1, [pc, #240]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007486:	78c9      	ldrb	r1, [r1, #3]
 8007488:	430b      	orrs	r3, r1
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007490:	431a      	orrs	r2, r3
 8007492:	4b39      	ldr	r3, [pc, #228]	@ (8007578 <MX_LWIP_Init+0x228>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	0619      	lsls	r1, r3, #24
 8007498:	4b37      	ldr	r3, [pc, #220]	@ (8007578 <MX_LWIP_Init+0x228>)
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	4319      	orrs	r1, r3
 80074a0:	4b35      	ldr	r3, [pc, #212]	@ (8007578 <MX_LWIP_Init+0x228>)
 80074a2:	789b      	ldrb	r3, [r3, #2]
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	430b      	orrs	r3, r1
 80074a8:	4933      	ldr	r1, [pc, #204]	@ (8007578 <MX_LWIP_Init+0x228>)
 80074aa:	78c9      	ldrb	r1, [r1, #3]
 80074ac:	430b      	orrs	r3, r1
 80074ae:	0e1b      	lsrs	r3, r3, #24
 80074b0:	4313      	orrs	r3, r2
 80074b2:	4a34      	ldr	r2, [pc, #208]	@ (8007584 <MX_LWIP_Init+0x234>)
 80074b4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80074b6:	4b31      	ldr	r3, [pc, #196]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	061a      	lsls	r2, r3, #24
 80074bc:	4b2f      	ldr	r3, [pc, #188]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	431a      	orrs	r2, r3
 80074c4:	4b2d      	ldr	r3, [pc, #180]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074c6:	789b      	ldrb	r3, [r3, #2]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	4313      	orrs	r3, r2
 80074cc:	4a2b      	ldr	r2, [pc, #172]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074ce:	78d2      	ldrb	r2, [r2, #3]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	061a      	lsls	r2, r3, #24
 80074d4:	4b29      	ldr	r3, [pc, #164]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	0619      	lsls	r1, r3, #24
 80074da:	4b28      	ldr	r3, [pc, #160]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	4319      	orrs	r1, r3
 80074e2:	4b26      	ldr	r3, [pc, #152]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074e4:	789b      	ldrb	r3, [r3, #2]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	430b      	orrs	r3, r1
 80074ea:	4924      	ldr	r1, [pc, #144]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074ec:	78c9      	ldrb	r1, [r1, #3]
 80074ee:	430b      	orrs	r3, r1
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80074f6:	431a      	orrs	r2, r3
 80074f8:	4b20      	ldr	r3, [pc, #128]	@ (800757c <MX_LWIP_Init+0x22c>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	0619      	lsls	r1, r3, #24
 80074fe:	4b1f      	ldr	r3, [pc, #124]	@ (800757c <MX_LWIP_Init+0x22c>)
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	041b      	lsls	r3, r3, #16
 8007504:	4319      	orrs	r1, r3
 8007506:	4b1d      	ldr	r3, [pc, #116]	@ (800757c <MX_LWIP_Init+0x22c>)
 8007508:	789b      	ldrb	r3, [r3, #2]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	430b      	orrs	r3, r1
 800750e:	491b      	ldr	r1, [pc, #108]	@ (800757c <MX_LWIP_Init+0x22c>)
 8007510:	78c9      	ldrb	r1, [r1, #3]
 8007512:	430b      	orrs	r3, r1
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800751a:	431a      	orrs	r2, r3
 800751c:	4b17      	ldr	r3, [pc, #92]	@ (800757c <MX_LWIP_Init+0x22c>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	0619      	lsls	r1, r3, #24
 8007522:	4b16      	ldr	r3, [pc, #88]	@ (800757c <MX_LWIP_Init+0x22c>)
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	041b      	lsls	r3, r3, #16
 8007528:	4319      	orrs	r1, r3
 800752a:	4b14      	ldr	r3, [pc, #80]	@ (800757c <MX_LWIP_Init+0x22c>)
 800752c:	789b      	ldrb	r3, [r3, #2]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	430b      	orrs	r3, r1
 8007532:	4912      	ldr	r1, [pc, #72]	@ (800757c <MX_LWIP_Init+0x22c>)
 8007534:	78c9      	ldrb	r1, [r1, #3]
 8007536:	430b      	orrs	r3, r1
 8007538:	0e1b      	lsrs	r3, r3, #24
 800753a:	4313      	orrs	r3, r2
 800753c:	4a12      	ldr	r2, [pc, #72]	@ (8007588 <MX_LWIP_Init+0x238>)
 800753e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007540:	4b12      	ldr	r3, [pc, #72]	@ (800758c <MX_LWIP_Init+0x23c>)
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	4b12      	ldr	r3, [pc, #72]	@ (8007590 <MX_LWIP_Init+0x240>)
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	2300      	movs	r3, #0
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	4b0e      	ldr	r3, [pc, #56]	@ (8007588 <MX_LWIP_Init+0x238>)
 800754e:	4a0d      	ldr	r2, [pc, #52]	@ (8007584 <MX_LWIP_Init+0x234>)
 8007550:	490b      	ldr	r1, [pc, #44]	@ (8007580 <MX_LWIP_Init+0x230>)
 8007552:	4810      	ldr	r0, [pc, #64]	@ (8007594 <MX_LWIP_Init+0x244>)
 8007554:	f003 fd0e 	bl	800af74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007558:	480e      	ldr	r0, [pc, #56]	@ (8007594 <MX_LWIP_Init+0x244>)
 800755a:	f003 febd 	bl	800b2d8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800755e:	480d      	ldr	r0, [pc, #52]	@ (8007594 <MX_LWIP_Init+0x244>)
 8007560:	f003 feca 	bl	800b2f8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007564:	490c      	ldr	r1, [pc, #48]	@ (8007598 <MX_LWIP_Init+0x248>)
 8007566:	480b      	ldr	r0, [pc, #44]	@ (8007594 <MX_LWIP_Init+0x244>)
 8007568:	f003 ffc8 	bl	800b4fc <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800756c:	bf00      	nop
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	24004b0c 	.word	0x24004b0c
 8007578:	24004b10 	.word	0x24004b10
 800757c:	24004b14 	.word	0x24004b14
 8007580:	24004b00 	.word	0x24004b00
 8007584:	24004b04 	.word	0x24004b04
 8007588:	24004b08 	.word	0x24004b08
 800758c:	08008ced 	.word	0x08008ced
 8007590:	080078c9 	.word	0x080078c9
 8007594:	24004acc 	.word	0x24004acc
 8007598:	080075ed 	.word	0x080075ed

0800759c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80075a4:	f7f9 fe2c 	bl	8001200 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b08      	ldr	r3, [pc, #32]	@ (80075cc <Ethernet_Link_Periodic_Handle+0x30>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b63      	cmp	r3, #99	@ 0x63
 80075b2:	d907      	bls.n	80075c4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80075b4:	f7f9 fe24 	bl	8001200 <HAL_GetTick>
 80075b8:	4603      	mov	r3, r0
 80075ba:	4a04      	ldr	r2, [pc, #16]	@ (80075cc <Ethernet_Link_Periodic_Handle+0x30>)
 80075bc:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 faf6 	bl	8007bb0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	24004ac8 	.word	0x24004ac8

080075d0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80075d4:	4804      	ldr	r0, [pc, #16]	@ (80075e8 <MX_LWIP_Process+0x18>)
 80075d6:	f000 f957 	bl	8007888 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80075da:	f009 fffd 	bl	80115d8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80075de:	4802      	ldr	r0, [pc, #8]	@ (80075e8 <MX_LWIP_Process+0x18>)
 80075e0:	f7ff ffdc 	bl	800759c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80075e4:	bf00      	nop
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	24004acc 	.word	0x24004acc

080075ec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
	  printf("got link\r\n");
 8007604:	4805      	ldr	r0, [pc, #20]	@ (800761c <ethernet_link_status_updated+0x30>)
 8007606:	f00a fb4b 	bl	8011ca0 <puts>
  {
/* USER CODE BEGIN 6 */
	  printf("lost link\r\n");
/* USER CODE END 6 */
  }
}
 800760a:	e002      	b.n	8007612 <ethernet_link_status_updated+0x26>
	  printf("lost link\r\n");
 800760c:	4804      	ldr	r0, [pc, #16]	@ (8007620 <ethernet_link_status_updated+0x34>)
 800760e:	f00a fb47 	bl	8011ca0 <puts>
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	08012ae4 	.word	0x08012ae4
 8007620:	08012af0 	.word	0x08012af0

08007624 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007630:	4b3f      	ldr	r3, [pc, #252]	@ (8007730 <low_level_init+0x10c>)
 8007632:	4a40      	ldr	r2, [pc, #256]	@ (8007734 <low_level_init+0x110>)
 8007634:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007636:	2300      	movs	r3, #0
 8007638:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800763a:	2380      	movs	r3, #128	@ 0x80
 800763c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800763e:	23e1      	movs	r3, #225	@ 0xe1
 8007640:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007642:	2300      	movs	r3, #0
 8007644:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007646:	2300      	movs	r3, #0
 8007648:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800764a:	2300      	movs	r3, #0
 800764c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800764e:	4a38      	ldr	r2, [pc, #224]	@ (8007730 <low_level_init+0x10c>)
 8007650:	f107 0308 	add.w	r3, r7, #8
 8007654:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007656:	4b36      	ldr	r3, [pc, #216]	@ (8007730 <low_level_init+0x10c>)
 8007658:	2201      	movs	r2, #1
 800765a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800765c:	4b34      	ldr	r3, [pc, #208]	@ (8007730 <low_level_init+0x10c>)
 800765e:	4a36      	ldr	r2, [pc, #216]	@ (8007738 <low_level_init+0x114>)
 8007660:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007662:	4b33      	ldr	r3, [pc, #204]	@ (8007730 <low_level_init+0x10c>)
 8007664:	4a35      	ldr	r2, [pc, #212]	@ (800773c <low_level_init+0x118>)
 8007666:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007668:	4b31      	ldr	r3, [pc, #196]	@ (8007730 <low_level_init+0x10c>)
 800766a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800766e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007670:	482f      	ldr	r0, [pc, #188]	@ (8007730 <low_level_init+0x10c>)
 8007672:	f7f9 ff8d 	bl	8001590 <HAL_ETH_Init>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800767a:	2238      	movs	r2, #56	@ 0x38
 800767c:	2100      	movs	r1, #0
 800767e:	4830      	ldr	r0, [pc, #192]	@ (8007740 <low_level_init+0x11c>)
 8007680:	f00a fbfe 	bl	8011e80 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007684:	4b2e      	ldr	r3, [pc, #184]	@ (8007740 <low_level_init+0x11c>)
 8007686:	2221      	movs	r2, #33	@ 0x21
 8007688:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800768a:	4b2d      	ldr	r3, [pc, #180]	@ (8007740 <low_level_init+0x11c>)
 800768c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8007690:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007692:	4b2b      	ldr	r3, [pc, #172]	@ (8007740 <low_level_init+0x11c>)
 8007694:	2200      	movs	r2, #0
 8007696:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007698:	482a      	ldr	r0, [pc, #168]	@ (8007744 <low_level_init+0x120>)
 800769a:	f003 fb33 	bl	800ad04 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2206      	movs	r2, #6
 80076a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80076a6:	4b22      	ldr	r3, [pc, #136]	@ (8007730 <low_level_init+0x10c>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	781a      	ldrb	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80076b2:	4b1f      	ldr	r3, [pc, #124]	@ (8007730 <low_level_init+0x10c>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	785a      	ldrb	r2, [r3, #1]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80076be:	4b1c      	ldr	r3, [pc, #112]	@ (8007730 <low_level_init+0x10c>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	789a      	ldrb	r2, [r3, #2]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80076ca:	4b19      	ldr	r3, [pc, #100]	@ (8007730 <low_level_init+0x10c>)
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	78da      	ldrb	r2, [r3, #3]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80076d6:	4b16      	ldr	r3, [pc, #88]	@ (8007730 <low_level_init+0x10c>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	791a      	ldrb	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80076e2:	4b13      	ldr	r3, [pc, #76]	@ (8007730 <low_level_init+0x10c>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	795a      	ldrb	r2, [r3, #5]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80076f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80076fc:	f043 030a 	orr.w	r3, r3, #10
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007708:	490f      	ldr	r1, [pc, #60]	@ (8007748 <low_level_init+0x124>)
 800770a:	4810      	ldr	r0, [pc, #64]	@ (800774c <low_level_init+0x128>)
 800770c:	f7f9 fbeb 	bl	8000ee6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007710:	480e      	ldr	r0, [pc, #56]	@ (800774c <low_level_init+0x128>)
 8007712:	f7f9 fc1a 	bl	8000f4a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa47 	bl	8007bb0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007722:	e001      	b.n	8007728 <low_level_init+0x104>
    Error_Handler();
 8007724:	f7f9 fa3e 	bl	8000ba4 <Error_Handler>
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	24004b20 	.word	0x24004b20
 8007734:	40028000 	.word	0x40028000
 8007738:	30040060 	.word	0x30040060
 800773c:	30040000 	.word	0x30040000
 8007740:	24004bd0 	.word	0x24004bd0
 8007744:	0801584c 	.word	0x0801584c
 8007748:	24000010 	.word	0x24000010
 800774c:	24004c08 	.word	0x24004c08

08007750 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b092      	sub	sp, #72	@ 0x48
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007768:	f107 030c 	add.w	r3, r7, #12
 800776c:	2230      	movs	r2, #48	@ 0x30
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f00a fb85 	bl	8011e80 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007776:	f107 030c 	add.w	r3, r7, #12
 800777a:	2230      	movs	r2, #48	@ 0x30
 800777c:	2100      	movs	r1, #0
 800777e:	4618      	mov	r0, r3
 8007780:	f00a fb7e 	bl	8011e80 <memset>

  for(q = p; q != NULL; q = q->next)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	643b      	str	r3, [r7, #64]	@ 0x40
 8007788:	e045      	b.n	8007816 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800778a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800778c:	2b03      	cmp	r3, #3
 800778e:	d902      	bls.n	8007796 <low_level_output+0x46>
      return ERR_IF;
 8007790:	f06f 030b 	mvn.w	r3, #11
 8007794:	e055      	b.n	8007842 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007798:	6859      	ldr	r1, [r3, #4]
 800779a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800779c:	4613      	mov	r3, r2
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	3348      	adds	r3, #72	@ 0x48
 80077a6:	443b      	add	r3, r7
 80077a8:	3b3c      	subs	r3, #60	@ 0x3c
 80077aa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80077ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ae:	895b      	ldrh	r3, [r3, #10]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077b4:	4613      	mov	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	3348      	adds	r3, #72	@ 0x48
 80077be:	443b      	add	r3, r7
 80077c0:	3b38      	subs	r3, #56	@ 0x38
 80077c2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80077c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d011      	beq.n	80077ee <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80077ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077cc:	1e5a      	subs	r2, r3, #1
 80077ce:	f107 000c 	add.w	r0, r7, #12
 80077d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077d4:	460b      	mov	r3, r1
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	440b      	add	r3, r1
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	18c1      	adds	r1, r0, r3
 80077de:	4613      	mov	r3, r2
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	3348      	adds	r3, #72	@ 0x48
 80077e8:	443b      	add	r3, r7
 80077ea:	3b34      	subs	r3, #52	@ 0x34
 80077ec:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80077ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80077f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077f8:	4613      	mov	r3, r2
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	3348      	adds	r3, #72	@ 0x48
 8007802:	443b      	add	r3, r7
 8007804:	3b34      	subs	r3, #52	@ 0x34
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
    }

    i++;
 800780a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800780c:	3301      	adds	r3, #1
 800780e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	643b      	str	r3, [r7, #64]	@ 0x40
 8007816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1b6      	bne.n	800778a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	891b      	ldrh	r3, [r3, #8]
 8007820:	461a      	mov	r2, r3
 8007822:	4b0a      	ldr	r3, [pc, #40]	@ (800784c <low_level_output+0xfc>)
 8007824:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007826:	4a09      	ldr	r2, [pc, #36]	@ (800784c <low_level_output+0xfc>)
 8007828:	f107 030c 	add.w	r3, r7, #12
 800782c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800782e:	4a07      	ldr	r2, [pc, #28]	@ (800784c <low_level_output+0xfc>)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007834:	2214      	movs	r2, #20
 8007836:	4905      	ldr	r1, [pc, #20]	@ (800784c <low_level_output+0xfc>)
 8007838:	4805      	ldr	r0, [pc, #20]	@ (8007850 <low_level_output+0x100>)
 800783a:	f7fa f859 	bl	80018f0 <HAL_ETH_Transmit>

  return errval;
 800783e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007842:	4618      	mov	r0, r3
 8007844:	3748      	adds	r7, #72	@ 0x48
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	24004bd0 	.word	0x24004bd0
 8007850:	24004b20 	.word	0x24004b20

08007854 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007860:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <low_level_input+0x2c>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007868:	f107 030c 	add.w	r3, r7, #12
 800786c:	4619      	mov	r1, r3
 800786e:	4805      	ldr	r0, [pc, #20]	@ (8007884 <low_level_input+0x30>)
 8007870:	f7fa f8d5 	bl	8001a1e <HAL_ETH_ReadData>
  }

  return p;
 8007874:	68fb      	ldr	r3, [r7, #12]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	24004b1c 	.word	0x24004b1c
 8007884:	24004b20 	.word	0x24004b20

08007888 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff ffdd 	bl	8007854 <low_level_input>
 800789a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f004 f9a2 	bl	800bbfc <pbuf_free>
      }
    }
  } while(p!=NULL);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1ea      	bne.n	8007894 <ethernetif_input+0xc>
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <ethernetif_init+0x1c>
 80078d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007910 <ethernetif_init+0x48>)
 80078d8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80078dc:	490d      	ldr	r1, [pc, #52]	@ (8007914 <ethernetif_init+0x4c>)
 80078de:	480e      	ldr	r0, [pc, #56]	@ (8007918 <ethernetif_init+0x50>)
 80078e0:	f00a f976 	bl	8011bd0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2273      	movs	r2, #115	@ 0x73
 80078e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2274      	movs	r2, #116	@ 0x74
 80078f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a09      	ldr	r2, [pc, #36]	@ (800791c <ethernetif_init+0x54>)
 80078f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a08      	ldr	r2, [pc, #32]	@ (8007920 <ethernetif_init+0x58>)
 80078fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff fe8f 	bl	8007624 <low_level_init>

  return ERR_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	08012afc 	.word	0x08012afc
 8007914:	08012b18 	.word	0x08012b18
 8007918:	08012b28 	.word	0x08012b28
 800791c:	080086ed 	.word	0x080086ed
 8007920:	08007751 	.word	0x08007751

08007924 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007930:	68f9      	ldr	r1, [r7, #12]
 8007932:	4807      	ldr	r0, [pc, #28]	@ (8007950 <pbuf_free_custom+0x2c>)
 8007934:	f003 fac8 	bl	800aec8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007938:	4b06      	ldr	r3, [pc, #24]	@ (8007954 <pbuf_free_custom+0x30>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d102      	bne.n	8007946 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007940:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <pbuf_free_custom+0x30>)
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
  }
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	0801584c 	.word	0x0801584c
 8007954:	24004b1c 	.word	0x24004b1c

08007958 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800795c:	f7f9 fc50 	bl	8001200 <HAL_GetTick>
 8007960:	4603      	mov	r3, r0
}
 8007962:	4618      	mov	r0, r3
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08e      	sub	sp, #56	@ 0x38
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	605a      	str	r2, [r3, #4]
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	60da      	str	r2, [r3, #12]
 800797e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a5d      	ldr	r2, [pc, #372]	@ (8007afc <HAL_ETH_MspInit+0x194>)
 8007986:	4293      	cmp	r3, r2
 8007988:	f040 80b3 	bne.w	8007af2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800798c:	4b5c      	ldr	r3, [pc, #368]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 800798e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007992:	4a5b      	ldr	r2, [pc, #364]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007998:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800799c:	4b58      	ldr	r3, [pc, #352]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 800799e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079a6:	623b      	str	r3, [r7, #32]
 80079a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80079aa:	4b55      	ldr	r3, [pc, #340]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079b0:	4a53      	ldr	r2, [pc, #332]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80079ba:	4b51      	ldr	r3, [pc, #324]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80079c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079ce:	4a4c      	ldr	r2, [pc, #304]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80079d8:	4b49      	ldr	r3, [pc, #292]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e2:	61bb      	str	r3, [r7, #24]
 80079e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079e6:	4b46      	ldr	r3, [pc, #280]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079ec:	4a44      	ldr	r2, [pc, #272]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079ee:	f043 0304 	orr.w	r3, r3, #4
 80079f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80079f6:	4b42      	ldr	r3, [pc, #264]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 80079f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a04:	4b3e      	ldr	r3, [pc, #248]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a0a:	4a3d      	ldr	r2, [pc, #244]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a14:	4b3a      	ldr	r3, [pc, #232]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a22:	4b37      	ldr	r3, [pc, #220]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a28:	4a35      	ldr	r2, [pc, #212]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a2a:	f043 0302 	orr.w	r3, r3, #2
 8007a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a32:	4b33      	ldr	r3, [pc, #204]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007a40:	4b2f      	ldr	r3, [pc, #188]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a46:	4a2e      	ldr	r2, [pc, #184]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a50:	4b2b      	ldr	r3, [pc, #172]	@ (8007b00 <HAL_ETH_MspInit+0x198>)
 8007a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5a:	60bb      	str	r3, [r7, #8]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007a5e:	2332      	movs	r3, #50	@ 0x32
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a62:	2302      	movs	r3, #2
 8007a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a6e:	230b      	movs	r3, #11
 8007a70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a76:	4619      	mov	r1, r3
 8007a78:	4822      	ldr	r0, [pc, #136]	@ (8007b04 <HAL_ETH_MspInit+0x19c>)
 8007a7a:	f7fb fab5 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007a7e:	2386      	movs	r3, #134	@ 0x86
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a82:	2302      	movs	r3, #2
 8007a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a8e:	230b      	movs	r3, #11
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a96:	4619      	mov	r1, r3
 8007a98:	481b      	ldr	r0, [pc, #108]	@ (8007b08 <HAL_ETH_MspInit+0x1a0>)
 8007a9a:	f7fb faa5 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aac:	2300      	movs	r3, #0
 8007aae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ab0:	230b      	movs	r3, #11
 8007ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4814      	ldr	r0, [pc, #80]	@ (8007b0c <HAL_ETH_MspInit+0x1a4>)
 8007abc:	f7fb fa94 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007ac0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8007ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ad2:	230b      	movs	r3, #11
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ada:	4619      	mov	r1, r3
 8007adc:	480c      	ldr	r0, [pc, #48]	@ (8007b10 <HAL_ETH_MspInit+0x1a8>)
 8007ade:	f7fb fa83 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	203d      	movs	r0, #61	@ 0x3d
 8007ae8:	f7f9 fc91 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007aec:	203d      	movs	r0, #61	@ 0x3d
 8007aee:	f7f9 fca8 	bl	8001442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007af2:	bf00      	nop
 8007af4:	3738      	adds	r7, #56	@ 0x38
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40028000 	.word	0x40028000
 8007b00:	58024400 	.word	0x58024400
 8007b04:	58020800 	.word	0x58020800
 8007b08:	58020000 	.word	0x58020000
 8007b0c:	58020400 	.word	0x58020400
 8007b10:	58021800 	.word	0x58021800

08007b14 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007b18:	4802      	ldr	r0, [pc, #8]	@ (8007b24 <ETH_PHY_IO_Init+0x10>)
 8007b1a:	f7fa fc93 	bl	8002444 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	24004b20 	.word	0x24004b20

08007b28 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  return 0;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	68f9      	ldr	r1, [r7, #12]
 8007b4a:	4807      	ldr	r0, [pc, #28]	@ (8007b68 <ETH_PHY_IO_ReadReg+0x30>)
 8007b4c:	f7fa f9e4 	bl	8001f18 <HAL_ETH_ReadPHYRegister>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b5a:	e000      	b.n	8007b5e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	24004b20 	.word	0x24004b20

08007b6c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	68f9      	ldr	r1, [r7, #12]
 8007b7e:	4807      	ldr	r0, [pc, #28]	@ (8007b9c <ETH_PHY_IO_WriteReg+0x30>)
 8007b80:	f7fa fa1e 	bl	8001fc0 <HAL_ETH_WritePHYRegister>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b8e:	e000      	b.n	8007b92 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	24004b20 	.word	0x24004b20

08007ba0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007ba4:	f7f9 fb2c 	bl	8001200 <HAL_GetTick>
 8007ba8:	4603      	mov	r3, r0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b0a0      	sub	sp, #128	@ 0x80
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007bb8:	f107 030c 	add.w	r3, r7, #12
 8007bbc:	2264      	movs	r2, #100	@ 0x64
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f00a f95d 	bl	8011e80 <memset>
  int32_t PHYLinkState = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007bce:	2300      	movs	r3, #0
 8007bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007bd6:	483a      	ldr	r0, [pc, #232]	@ (8007cc0 <ethernet_link_check_state+0x110>)
 8007bd8:	f7f9 fa04 	bl	8000fe4 <LAN8742_GetLinkState>
 8007bdc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007be4:	089b      	lsrs	r3, r3, #2
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00c      	beq.n	8007c0a <ethernet_link_check_state+0x5a>
 8007bf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	dc09      	bgt.n	8007c0a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8007bf6:	4833      	ldr	r0, [pc, #204]	@ (8007cc4 <ethernet_link_check_state+0x114>)
 8007bf8:	f7f9 fe2a 	bl	8001850 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f003 fbe7 	bl	800b3d0 <netif_set_down>
    netif_set_link_down(netif);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f003 fc4a 	bl	800b49c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007c08:	e055      	b.n	8007cb6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d14e      	bne.n	8007cb6 <ethernet_link_check_state+0x106>
 8007c18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	dd4b      	ble.n	8007cb6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c20:	3b02      	subs	r3, #2
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d82a      	bhi.n	8007c7c <ethernet_link_check_state+0xcc>
 8007c26:	a201      	add	r2, pc, #4	@ (adr r2, 8007c2c <ethernet_link_check_state+0x7c>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c4f 	.word	0x08007c4f
 8007c34:	08007c5f 	.word	0x08007c5f
 8007c38:	08007c6f 	.word	0x08007c6f
      duplex = ETH_FULLDUPLEX_MODE;
 8007c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c40:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007c42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c46:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007c4c:	e017      	b.n	8007c7e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007c52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c56:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007c5c:	e00f      	b.n	8007c7e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c62:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007c64:	2300      	movs	r3, #0
 8007c66:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007c6c:	e007      	b.n	8007c7e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007c72:	2300      	movs	r3, #0
 8007c74:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007c76:	2301      	movs	r3, #1
 8007c78:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007c7a:	e000      	b.n	8007c7e <ethernet_link_check_state+0xce>
      break;
 8007c7c:	bf00      	nop
    if(linkchanged)
 8007c7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d018      	beq.n	8007cb6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007c84:	f107 030c 	add.w	r3, r7, #12
 8007c88:	4619      	mov	r1, r3
 8007c8a:	480e      	ldr	r0, [pc, #56]	@ (8007cc4 <ethernet_link_check_state+0x114>)
 8007c8c:	f7fa f9ec 	bl	8002068 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8007c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c96:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4809      	ldr	r0, [pc, #36]	@ (8007cc4 <ethernet_link_check_state+0x114>)
 8007ca0:	f7fa fbb6 	bl	8002410 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007ca4:	4807      	ldr	r0, [pc, #28]	@ (8007cc4 <ethernet_link_check_state+0x114>)
 8007ca6:	f7f9 fd71 	bl	800178c <HAL_ETH_Start>
      netif_set_up(netif);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f003 fb24 	bl	800b2f8 <netif_set_up>
      netif_set_link_up(netif);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f003 fbbf 	bl	800b434 <netif_set_link_up>
}
 8007cb6:	bf00      	nop
 8007cb8:	3780      	adds	r7, #128	@ 0x80
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	24004c08 	.word	0x24004c08
 8007cc4:	24004b20 	.word	0x24004b20

08007cc8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007cd0:	4812      	ldr	r0, [pc, #72]	@ (8007d1c <HAL_ETH_RxAllocateCallback+0x54>)
 8007cd2:	f003 f88b 	bl	800adec <memp_malloc_pool>
 8007cd6:	60f8      	str	r0, [r7, #12]
  if (p)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d014      	beq.n	8007d08 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f103 0220 	add.w	r2, r3, #32
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a0d      	ldr	r2, [pc, #52]	@ (8007d20 <HAL_ETH_RxAllocateCallback+0x58>)
 8007cec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007cf6:	9201      	str	r2, [sp, #4]
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2241      	movs	r2, #65	@ 0x41
 8007cfe:	2100      	movs	r1, #0
 8007d00:	2000      	movs	r0, #0
 8007d02:	f003 fdc1 	bl	800b888 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007d06:	e005      	b.n	8007d14 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007d08:	4b06      	ldr	r3, [pc, #24]	@ (8007d24 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	601a      	str	r2, [r3, #0]
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	0801584c 	.word	0x0801584c
 8007d20:	08007925 	.word	0x08007925
 8007d24:	24004b1c 	.word	0x24004b1c

08007d28 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b08d      	sub	sp, #52	@ 0x34
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3b20      	subs	r3, #32
 8007d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8007d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d50:	2200      	movs	r2, #0
 8007d52:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d103      	bne.n	8007d6a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e003      	b.n	8007d72 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d70:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d76:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d7e:	e009      	b.n	8007d94 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	891a      	ldrh	r2, [r3, #8]
 8007d84:	887b      	ldrh	r3, [r7, #2]
 8007d86:	4413      	add	r3, r2
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f2      	bne.n	8007d80 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007d9a:	887b      	ldrh	r3, [r7, #2]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	623a      	str	r2, [r7, #32]
 8007da0:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dd1d      	ble.n	8007de4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	f003 021f 	and.w	r2, r3, #31
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007db8:	f3bf 8f4f 	dsb	sy
}
 8007dbc:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007df4 <HAL_ETH_RxLinkCallback+0xcc>)
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	3320      	adds	r3, #32
 8007dca:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	3b20      	subs	r3, #32
 8007dd0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dcf2      	bgt.n	8007dbe <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8007dd8:	f3bf 8f4f 	dsb	sy
}
 8007ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007dde:	f3bf 8f6f 	isb	sy
}
 8007de2:	bf00      	nop
}
 8007de4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007de6:	bf00      	nop
 8007de8:	3734      	adds	r7, #52	@ 0x34
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	e000ed00 	.word	0xe000ed00

08007df8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	b21a      	sxth	r2, r3
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	0a1b      	lsrs	r3, r3, #8
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	b21b      	sxth	r3, r3
 8007e10:	4313      	orrs	r3, r2
 8007e12:	b21b      	sxth	r3, r3
 8007e14:	b29b      	uxth	r3, r3
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	061a      	lsls	r2, r3, #24
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	0a1b      	lsrs	r3, r3, #8
 8007e3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007e40:	431a      	orrs	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	0e1b      	lsrs	r3, r3, #24
 8007e46:	4313      	orrs	r3, r2
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8007e5c:	4915      	ldr	r1, [pc, #84]	@ (8007eb4 <etharp_free_entry+0x60>)
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4413      	add	r3, r2
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	440b      	add	r3, r1
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d013      	beq.n	8007e98 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8007e70:	4910      	ldr	r1, [pc, #64]	@ (8007eb4 <etharp_free_entry+0x60>)
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	4613      	mov	r3, r2
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	4413      	add	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	440b      	add	r3, r1
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f003 febb 	bl	800bbfc <pbuf_free>
    arp_table[i].q = NULL;
 8007e86:	490b      	ldr	r1, [pc, #44]	@ (8007eb4 <etharp_free_entry+0x60>)
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4413      	add	r3, r2
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	440b      	add	r3, r1
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8007e98:	4906      	ldr	r1, [pc, #24]	@ (8007eb4 <etharp_free_entry+0x60>)
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	440b      	add	r3, r1
 8007ea6:	3314      	adds	r3, #20
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	24004c28 	.word	0x24004c28

08007eb8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	e096      	b.n	8007ff2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8007ec4:	494f      	ldr	r1, [pc, #316]	@ (8008004 <etharp_tmr+0x14c>)
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	4413      	add	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	440b      	add	r3, r1
 8007ed2:	3314      	adds	r3, #20
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8007ed8:	78fb      	ldrb	r3, [r7, #3]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 8086 	beq.w	8007fec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8007ee0:	4948      	ldr	r1, [pc, #288]	@ (8008004 <etharp_tmr+0x14c>)
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4413      	add	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	440b      	add	r3, r1
 8007eee:	3312      	adds	r3, #18
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	b298      	uxth	r0, r3
 8007ef6:	4943      	ldr	r1, [pc, #268]	@ (8008004 <etharp_tmr+0x14c>)
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	4413      	add	r3, r2
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	440b      	add	r3, r1
 8007f04:	3312      	adds	r3, #18
 8007f06:	4602      	mov	r2, r0
 8007f08:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007f0a:	493e      	ldr	r1, [pc, #248]	@ (8008004 <etharp_tmr+0x14c>)
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	4413      	add	r3, r2
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	440b      	add	r3, r1
 8007f18:	3312      	adds	r3, #18
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8007f20:	d215      	bcs.n	8007f4e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007f22:	4938      	ldr	r1, [pc, #224]	@ (8008004 <etharp_tmr+0x14c>)
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4413      	add	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	440b      	add	r3, r1
 8007f30:	3314      	adds	r3, #20
 8007f32:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d10e      	bne.n	8007f56 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8007f38:	4932      	ldr	r1, [pc, #200]	@ (8008004 <etharp_tmr+0x14c>)
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	4413      	add	r3, r2
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	440b      	add	r3, r1
 8007f46:	3312      	adds	r3, #18
 8007f48:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d903      	bls.n	8007f56 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff ff80 	bl	8007e54 <etharp_free_entry>
 8007f54:	e04a      	b.n	8007fec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8007f56:	492b      	ldr	r1, [pc, #172]	@ (8008004 <etharp_tmr+0x14c>)
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4413      	add	r3, r2
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	440b      	add	r3, r1
 8007f64:	3314      	adds	r3, #20
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d10a      	bne.n	8007f82 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007f6c:	4925      	ldr	r1, [pc, #148]	@ (8008004 <etharp_tmr+0x14c>)
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	4413      	add	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	440b      	add	r3, r1
 8007f7a:	3314      	adds	r3, #20
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e034      	b.n	8007fec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8007f82:	4920      	ldr	r1, [pc, #128]	@ (8008004 <etharp_tmr+0x14c>)
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	4613      	mov	r3, r2
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	4413      	add	r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	440b      	add	r3, r1
 8007f90:	3314      	adds	r3, #20
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d10a      	bne.n	8007fae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007f98:	491a      	ldr	r1, [pc, #104]	@ (8008004 <etharp_tmr+0x14c>)
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	4413      	add	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	2202      	movs	r2, #2
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	e01e      	b.n	8007fec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8007fae:	4915      	ldr	r1, [pc, #84]	@ (8008004 <etharp_tmr+0x14c>)
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	4413      	add	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	440b      	add	r3, r1
 8007fbc:	3314      	adds	r3, #20
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d113      	bne.n	8007fec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8007fc4:	490f      	ldr	r1, [pc, #60]	@ (8008004 <etharp_tmr+0x14c>)
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	4413      	add	r3, r2
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	440b      	add	r3, r1
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	4413      	add	r3, r2
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	4a08      	ldr	r2, [pc, #32]	@ (8008004 <etharp_tmr+0x14c>)
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	f000 fe6e 	bl	8008cc8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b09      	cmp	r3, #9
 8007ff6:	f77f af65 	ble.w	8007ec4 <etharp_tmr+0xc>
      }
    }
  }
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	24004c28 	.word	0x24004c28

08008008 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	@ 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	460b      	mov	r3, r1
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008016:	230a      	movs	r3, #10
 8008018:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800801a:	230a      	movs	r3, #10
 800801c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800801e:	230a      	movs	r3, #10
 8008020:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008026:	230a      	movs	r3, #10
 8008028:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	83bb      	strh	r3, [r7, #28]
 800802e:	2300      	movs	r3, #0
 8008030:	837b      	strh	r3, [r7, #26]
 8008032:	2300      	movs	r3, #0
 8008034:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008036:	2300      	movs	r3, #0
 8008038:	843b      	strh	r3, [r7, #32]
 800803a:	e0ae      	b.n	800819a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800803c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008040:	49a6      	ldr	r1, [pc, #664]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008042:	4613      	mov	r3, r2
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4413      	add	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	440b      	add	r3, r1
 800804c:	3314      	adds	r3, #20
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008052:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8008056:	2b0a      	cmp	r3, #10
 8008058:	d105      	bne.n	8008066 <etharp_find_entry+0x5e>
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d102      	bne.n	8008066 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008060:	8c3b      	ldrh	r3, [r7, #32]
 8008062:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008064:	e095      	b.n	8008192 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8092 	beq.w	8008192 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d009      	beq.n	8008088 <etharp_find_entry+0x80>
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d806      	bhi.n	8008088 <etharp_find_entry+0x80>
 800807a:	4b99      	ldr	r3, [pc, #612]	@ (80082e0 <etharp_find_entry+0x2d8>)
 800807c:	f240 1223 	movw	r2, #291	@ 0x123
 8008080:	4998      	ldr	r1, [pc, #608]	@ (80082e4 <etharp_find_entry+0x2dc>)
 8008082:	4899      	ldr	r0, [pc, #612]	@ (80082e8 <etharp_find_entry+0x2e0>)
 8008084:	f009 fda4 	bl	8011bd0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d020      	beq.n	80080d0 <etharp_find_entry+0xc8>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6819      	ldr	r1, [r3, #0]
 8008092:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008096:	4891      	ldr	r0, [pc, #580]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008098:	4613      	mov	r3, r2
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	4413      	add	r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	4403      	add	r3, r0
 80080a2:	3304      	adds	r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4299      	cmp	r1, r3
 80080a8:	d112      	bne.n	80080d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <etharp_find_entry+0xc2>
 80080b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80080b4:	4989      	ldr	r1, [pc, #548]	@ (80082dc <etharp_find_entry+0x2d4>)
 80080b6:	4613      	mov	r3, r2
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	4413      	add	r3, r2
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	440b      	add	r3, r1
 80080c0:	3308      	adds	r3, #8
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d102      	bne.n	80080d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80080ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80080ce:	e100      	b.n	80082d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d140      	bne.n	8008158 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80080d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80080da:	4980      	ldr	r1, [pc, #512]	@ (80082dc <etharp_find_entry+0x2d4>)
 80080dc:	4613      	mov	r3, r2
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	4413      	add	r3, r2
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	440b      	add	r3, r1
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01a      	beq.n	8008122 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80080ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80080f0:	497a      	ldr	r1, [pc, #488]	@ (80082dc <etharp_find_entry+0x2d4>)
 80080f2:	4613      	mov	r3, r2
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	4413      	add	r3, r2
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	440b      	add	r3, r1
 80080fc:	3312      	adds	r3, #18
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	8bba      	ldrh	r2, [r7, #28]
 8008102:	429a      	cmp	r2, r3
 8008104:	d845      	bhi.n	8008192 <etharp_find_entry+0x18a>
            old_queue = i;
 8008106:	8c3b      	ldrh	r3, [r7, #32]
 8008108:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800810a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800810e:	4973      	ldr	r1, [pc, #460]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008110:	4613      	mov	r3, r2
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	4413      	add	r3, r2
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	440b      	add	r3, r1
 800811a:	3312      	adds	r3, #18
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	83bb      	strh	r3, [r7, #28]
 8008120:	e037      	b.n	8008192 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008126:	496d      	ldr	r1, [pc, #436]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008128:	4613      	mov	r3, r2
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	4413      	add	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	440b      	add	r3, r1
 8008132:	3312      	adds	r3, #18
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	8b7a      	ldrh	r2, [r7, #26]
 8008138:	429a      	cmp	r2, r3
 800813a:	d82a      	bhi.n	8008192 <etharp_find_entry+0x18a>
            old_pending = i;
 800813c:	8c3b      	ldrh	r3, [r7, #32]
 800813e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8008140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008144:	4965      	ldr	r1, [pc, #404]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008146:	4613      	mov	r3, r2
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4413      	add	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	440b      	add	r3, r1
 8008150:	3312      	adds	r3, #18
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	837b      	strh	r3, [r7, #26]
 8008156:	e01c      	b.n	8008192 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d919      	bls.n	8008192 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800815e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008162:	495e      	ldr	r1, [pc, #376]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008164:	4613      	mov	r3, r2
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	4413      	add	r3, r2
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	440b      	add	r3, r1
 800816e:	3312      	adds	r3, #18
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	8b3a      	ldrh	r2, [r7, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	d80c      	bhi.n	8008192 <etharp_find_entry+0x18a>
            old_stable = i;
 8008178:	8c3b      	ldrh	r3, [r7, #32]
 800817a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800817c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008180:	4956      	ldr	r1, [pc, #344]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008182:	4613      	mov	r3, r2
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4413      	add	r3, r2
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	440b      	add	r3, r1
 800818c:	3312      	adds	r3, #18
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008192:	8c3b      	ldrh	r3, [r7, #32]
 8008194:	3301      	adds	r3, #1
 8008196:	b29b      	uxth	r3, r3
 8008198:	843b      	strh	r3, [r7, #32]
 800819a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800819e:	2b09      	cmp	r3, #9
 80081a0:	f77f af4c 	ble.w	800803c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <etharp_find_entry+0x1b8>
 80081ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80081b2:	2b0a      	cmp	r3, #10
 80081b4:	d107      	bne.n	80081c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80081c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081c4:	e085      	b.n	80082d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80081c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80081ca:	2b09      	cmp	r3, #9
 80081cc:	dc02      	bgt.n	80081d4 <etharp_find_entry+0x1cc>
    i = empty;
 80081ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081d0:	843b      	strh	r3, [r7, #32]
 80081d2:	e039      	b.n	8008248 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80081d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80081d8:	2b09      	cmp	r3, #9
 80081da:	dc14      	bgt.n	8008206 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80081dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80081e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80081e4:	493d      	ldr	r1, [pc, #244]	@ (80082dc <etharp_find_entry+0x2d4>)
 80081e6:	4613      	mov	r3, r2
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	4413      	add	r3, r2
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	440b      	add	r3, r1
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d018      	beq.n	8008228 <etharp_find_entry+0x220>
 80081f6:	4b3a      	ldr	r3, [pc, #232]	@ (80082e0 <etharp_find_entry+0x2d8>)
 80081f8:	f240 126d 	movw	r2, #365	@ 0x16d
 80081fc:	493b      	ldr	r1, [pc, #236]	@ (80082ec <etharp_find_entry+0x2e4>)
 80081fe:	483a      	ldr	r0, [pc, #232]	@ (80082e8 <etharp_find_entry+0x2e0>)
 8008200:	f009 fce6 	bl	8011bd0 <iprintf>
 8008204:	e010      	b.n	8008228 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8008206:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800820a:	2b09      	cmp	r3, #9
 800820c:	dc02      	bgt.n	8008214 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800820e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008210:	843b      	strh	r3, [r7, #32]
 8008212:	e009      	b.n	8008228 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008214:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008218:	2b09      	cmp	r3, #9
 800821a:	dc02      	bgt.n	8008222 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800821c:	8bfb      	ldrh	r3, [r7, #30]
 800821e:	843b      	strh	r3, [r7, #32]
 8008220:	e002      	b.n	8008228 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8008222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008226:	e054      	b.n	80082d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008228:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800822c:	2b09      	cmp	r3, #9
 800822e:	dd06      	ble.n	800823e <etharp_find_entry+0x236>
 8008230:	4b2b      	ldr	r3, [pc, #172]	@ (80082e0 <etharp_find_entry+0x2d8>)
 8008232:	f240 127f 	movw	r2, #383	@ 0x17f
 8008236:	492e      	ldr	r1, [pc, #184]	@ (80082f0 <etharp_find_entry+0x2e8>)
 8008238:	482b      	ldr	r0, [pc, #172]	@ (80082e8 <etharp_find_entry+0x2e0>)
 800823a:	f009 fcc9 	bl	8011bd0 <iprintf>
    etharp_free_entry(i);
 800823e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fe06 	bl	8007e54 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008248:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800824c:	2b09      	cmp	r3, #9
 800824e:	dd06      	ble.n	800825e <etharp_find_entry+0x256>
 8008250:	4b23      	ldr	r3, [pc, #140]	@ (80082e0 <etharp_find_entry+0x2d8>)
 8008252:	f240 1283 	movw	r2, #387	@ 0x183
 8008256:	4926      	ldr	r1, [pc, #152]	@ (80082f0 <etharp_find_entry+0x2e8>)
 8008258:	4823      	ldr	r0, [pc, #140]	@ (80082e8 <etharp_find_entry+0x2e0>)
 800825a:	f009 fcb9 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800825e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008262:	491e      	ldr	r1, [pc, #120]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008264:	4613      	mov	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4413      	add	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	440b      	add	r3, r1
 800826e:	3314      	adds	r3, #20
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d006      	beq.n	8008284 <etharp_find_entry+0x27c>
 8008276:	4b1a      	ldr	r3, [pc, #104]	@ (80082e0 <etharp_find_entry+0x2d8>)
 8008278:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800827c:	491d      	ldr	r1, [pc, #116]	@ (80082f4 <etharp_find_entry+0x2ec>)
 800827e:	481a      	ldr	r0, [pc, #104]	@ (80082e8 <etharp_find_entry+0x2e0>)
 8008280:	f009 fca6 	bl	8011bd0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00b      	beq.n	80082a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800828a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	4812      	ldr	r0, [pc, #72]	@ (80082dc <etharp_find_entry+0x2d4>)
 8008294:	4613      	mov	r3, r2
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	4413      	add	r3, r2
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	4403      	add	r3, r0
 800829e:	3304      	adds	r3, #4
 80082a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80082a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80082a6:	490d      	ldr	r1, [pc, #52]	@ (80082dc <etharp_find_entry+0x2d4>)
 80082a8:	4613      	mov	r3, r2
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	4413      	add	r3, r2
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	440b      	add	r3, r1
 80082b2:	3312      	adds	r3, #18
 80082b4:	2200      	movs	r2, #0
 80082b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80082b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80082bc:	4907      	ldr	r1, [pc, #28]	@ (80082dc <etharp_find_entry+0x2d4>)
 80082be:	4613      	mov	r3, r2
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	4413      	add	r3, r2
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	440b      	add	r3, r1
 80082c8:	3308      	adds	r3, #8
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80082ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3728      	adds	r7, #40	@ 0x28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	24004c28 	.word	0x24004c28
 80082e0:	08012b50 	.word	0x08012b50
 80082e4:	08012bc4 	.word	0x08012bc4
 80082e8:	08012c04 	.word	0x08012c04
 80082ec:	08012c2c 	.word	0x08012c2c
 80082f0:	08012c44 	.word	0x08012c44
 80082f4:	08012c58 	.word	0x08012c58

080082f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800830c:	2b06      	cmp	r3, #6
 800830e:	d006      	beq.n	800831e <etharp_update_arp_entry+0x26>
 8008310:	4b48      	ldr	r3, [pc, #288]	@ (8008434 <etharp_update_arp_entry+0x13c>)
 8008312:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8008316:	4948      	ldr	r1, [pc, #288]	@ (8008438 <etharp_update_arp_entry+0x140>)
 8008318:	4848      	ldr	r0, [pc, #288]	@ (800843c <etharp_update_arp_entry+0x144>)
 800831a:	f009 fc59 	bl	8011bd0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d012      	beq.n	800834a <etharp_update_arp_entry+0x52>
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00e      	beq.n	800834a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68f9      	ldr	r1, [r7, #12]
 8008332:	4618      	mov	r0, r3
 8008334:	f001 facc 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 8008338:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800833a:	2b00      	cmp	r3, #0
 800833c:	d105      	bne.n	800834a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008346:	2be0      	cmp	r3, #224	@ 0xe0
 8008348:	d102      	bne.n	8008350 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800834a:	f06f 030f 	mvn.w	r3, #15
 800834e:	e06c      	b.n	800842a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4619      	mov	r1, r3
 8008356:	68b8      	ldr	r0, [r7, #8]
 8008358:	f7ff fe56 	bl	8008008 <etharp_find_entry>
 800835c:	4603      	mov	r3, r0
 800835e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8008360:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008364:	2b00      	cmp	r3, #0
 8008366:	da02      	bge.n	800836e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8008368:	8afb      	ldrh	r3, [r7, #22]
 800836a:	b25b      	sxtb	r3, r3
 800836c:	e05d      	b.n	800842a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800836e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008372:	4933      	ldr	r1, [pc, #204]	@ (8008440 <etharp_update_arp_entry+0x148>)
 8008374:	4613      	mov	r3, r2
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	4413      	add	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	440b      	add	r3, r1
 800837e:	3314      	adds	r3, #20
 8008380:	2202      	movs	r2, #2
 8008382:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8008384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008388:	492d      	ldr	r1, [pc, #180]	@ (8008440 <etharp_update_arp_entry+0x148>)
 800838a:	4613      	mov	r3, r2
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	4413      	add	r3, r2
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	440b      	add	r3, r1
 8008394:	3308      	adds	r3, #8
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800839a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800839e:	4613      	mov	r3, r2
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	4413      	add	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	3308      	adds	r3, #8
 80083a8:	4a25      	ldr	r2, [pc, #148]	@ (8008440 <etharp_update_arp_entry+0x148>)
 80083aa:	4413      	add	r3, r2
 80083ac:	3304      	adds	r3, #4
 80083ae:	2206      	movs	r2, #6
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f009 fdd9 	bl	8011f6a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80083b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80083bc:	4920      	ldr	r1, [pc, #128]	@ (8008440 <etharp_update_arp_entry+0x148>)
 80083be:	4613      	mov	r3, r2
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	4413      	add	r3, r2
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	440b      	add	r3, r1
 80083c8:	3312      	adds	r3, #18
 80083ca:	2200      	movs	r2, #0
 80083cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80083ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80083d2:	491b      	ldr	r1, [pc, #108]	@ (8008440 <etharp_update_arp_entry+0x148>)
 80083d4:	4613      	mov	r3, r2
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	4413      	add	r3, r2
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	440b      	add	r3, r1
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d021      	beq.n	8008428 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80083e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80083e8:	4915      	ldr	r1, [pc, #84]	@ (8008440 <etharp_update_arp_entry+0x148>)
 80083ea:	4613      	mov	r3, r2
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	4413      	add	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	440b      	add	r3, r1
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80083f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80083fc:	4910      	ldr	r1, [pc, #64]	@ (8008440 <etharp_update_arp_entry+0x148>)
 80083fe:	4613      	mov	r3, r2
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	4413      	add	r3, r2
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	440b      	add	r3, r1
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8008412:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6939      	ldr	r1, [r7, #16]
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 fcf3 	bl	8008e08 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008422:	6938      	ldr	r0, [r7, #16]
 8008424:	f003 fbea 	bl	800bbfc <pbuf_free>
  }
  return ERR_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	08012b50 	.word	0x08012b50
 8008438:	08012c84 	.word	0x08012c84
 800843c:	08012c04 	.word	0x08012c04
 8008440:	24004c28 	.word	0x24004c28

08008444 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	e01e      	b.n	8008490 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008452:	4913      	ldr	r1, [pc, #76]	@ (80084a0 <etharp_cleanup_netif+0x5c>)
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4613      	mov	r3, r2
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	4413      	add	r3, r2
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	440b      	add	r3, r1
 8008460:	3314      	adds	r3, #20
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008466:	7afb      	ldrb	r3, [r7, #11]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00e      	beq.n	800848a <etharp_cleanup_netif+0x46>
 800846c:	490c      	ldr	r1, [pc, #48]	@ (80084a0 <etharp_cleanup_netif+0x5c>)
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	4613      	mov	r3, r2
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	4413      	add	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	440b      	add	r3, r1
 800847a:	3308      	adds	r3, #8
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d102      	bne.n	800848a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7ff fce5 	bl	8007e54 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b09      	cmp	r3, #9
 8008494:	dddd      	ble.n	8008452 <etharp_cleanup_netif+0xe>
    }
  }
}
 8008496:	bf00      	nop
 8008498:	bf00      	nop
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	24004c28 	.word	0x24004c28

080084a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80084a4:	b5b0      	push	{r4, r5, r7, lr}
 80084a6:	b08a      	sub	sp, #40	@ 0x28
 80084a8:	af04      	add	r7, sp, #16
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d107      	bne.n	80084c4 <etharp_input+0x20>
 80084b4:	4b3d      	ldr	r3, [pc, #244]	@ (80085ac <etharp_input+0x108>)
 80084b6:	f240 228a 	movw	r2, #650	@ 0x28a
 80084ba:	493d      	ldr	r1, [pc, #244]	@ (80085b0 <etharp_input+0x10c>)
 80084bc:	483d      	ldr	r0, [pc, #244]	@ (80085b4 <etharp_input+0x110>)
 80084be:	f009 fb87 	bl	8011bd0 <iprintf>
 80084c2:	e06f      	b.n	80085a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084d4:	d10c      	bne.n	80084f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80084da:	2b06      	cmp	r3, #6
 80084dc:	d108      	bne.n	80084f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d104      	bne.n	80084f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	885b      	ldrh	r3, [r3, #2]
 80084ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d003      	beq.n	80084f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f003 fb83 	bl	800bbfc <pbuf_free>
    return;
 80084f6:	e055      	b.n	80085a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	330e      	adds	r3, #14
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	3318      	adds	r3, #24
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	3304      	adds	r3, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <etharp_input+0x74>
    for_us = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	75fb      	strb	r3, [r7, #23]
 8008516:	e009      	b.n	800852c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	3304      	adds	r3, #4
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	bf0c      	ite	eq
 8008524:	2301      	moveq	r3, #1
 8008526:	2300      	movne	r3, #0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f103 0208 	add.w	r2, r3, #8
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <etharp_input+0x98>
 8008538:	2301      	movs	r3, #1
 800853a:	e000      	b.n	800853e <etharp_input+0x9a>
 800853c:	2302      	movs	r3, #2
 800853e:	f107 010c 	add.w	r1, r7, #12
 8008542:	6838      	ldr	r0, [r7, #0]
 8008544:	f7ff fed8 	bl	80082f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	88db      	ldrh	r3, [r3, #6]
 800854c:	b29b      	uxth	r3, r3
 800854e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008552:	d003      	beq.n	800855c <etharp_input+0xb8>
 8008554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008558:	d01e      	beq.n	8008598 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800855a:	e020      	b.n	800859e <etharp_input+0xfa>
      if (for_us) {
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d01c      	beq.n	800859c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800857c:	2102      	movs	r1, #2
 800857e:	9103      	str	r1, [sp, #12]
 8008580:	f107 010c 	add.w	r1, r7, #12
 8008584:	9102      	str	r1, [sp, #8]
 8008586:	9201      	str	r2, [sp, #4]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	462b      	mov	r3, r5
 800858c:	4622      	mov	r2, r4
 800858e:	4601      	mov	r1, r0
 8008590:	6838      	ldr	r0, [r7, #0]
 8008592:	f000 faeb 	bl	8008b6c <etharp_raw>
      break;
 8008596:	e001      	b.n	800859c <etharp_input+0xf8>
      break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <etharp_input+0xfa>
      break;
 800859c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f003 fb2c 	bl	800bbfc <pbuf_free>
}
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bdb0      	pop	{r4, r5, r7, pc}
 80085aa:	bf00      	nop
 80085ac:	08012b50 	.word	0x08012b50
 80085b0:	08012cdc 	.word	0x08012cdc
 80085b4:	08012c04 	.word	0x08012c04

080085b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af02      	add	r7, sp, #8
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80085c6:	79fa      	ldrb	r2, [r7, #7]
 80085c8:	4944      	ldr	r1, [pc, #272]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 80085ca:	4613      	mov	r3, r2
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	4413      	add	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	440b      	add	r3, r1
 80085d4:	3314      	adds	r3, #20
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d806      	bhi.n	80085ea <etharp_output_to_arp_index+0x32>
 80085dc:	4b40      	ldr	r3, [pc, #256]	@ (80086e0 <etharp_output_to_arp_index+0x128>)
 80085de:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80085e2:	4940      	ldr	r1, [pc, #256]	@ (80086e4 <etharp_output_to_arp_index+0x12c>)
 80085e4:	4840      	ldr	r0, [pc, #256]	@ (80086e8 <etharp_output_to_arp_index+0x130>)
 80085e6:	f009 faf3 	bl	8011bd0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80085ea:	79fa      	ldrb	r2, [r7, #7]
 80085ec:	493b      	ldr	r1, [pc, #236]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 80085ee:	4613      	mov	r3, r2
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	4413      	add	r3, r2
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	440b      	add	r3, r1
 80085f8:	3314      	adds	r3, #20
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d153      	bne.n	80086a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008600:	79fa      	ldrb	r2, [r7, #7]
 8008602:	4936      	ldr	r1, [pc, #216]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 8008604:	4613      	mov	r3, r2
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	4413      	add	r3, r2
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	440b      	add	r3, r1
 800860e:	3312      	adds	r3, #18
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8008616:	d919      	bls.n	800864c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008618:	79fa      	ldrb	r2, [r7, #7]
 800861a:	4613      	mov	r3, r2
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	4413      	add	r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4a2e      	ldr	r2, [pc, #184]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 8008624:	4413      	add	r3, r2
 8008626:	3304      	adds	r3, #4
 8008628:	4619      	mov	r1, r3
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fb4c 	bl	8008cc8 <etharp_request>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d138      	bne.n	80086a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008636:	79fa      	ldrb	r2, [r7, #7]
 8008638:	4928      	ldr	r1, [pc, #160]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 800863a:	4613      	mov	r3, r2
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	4413      	add	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	440b      	add	r3, r1
 8008644:	3314      	adds	r3, #20
 8008646:	2203      	movs	r2, #3
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	e02d      	b.n	80086a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800864c:	79fa      	ldrb	r2, [r7, #7]
 800864e:	4923      	ldr	r1, [pc, #140]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 8008650:	4613      	mov	r3, r2
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	4413      	add	r3, r2
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	440b      	add	r3, r1
 800865a:	3312      	adds	r3, #18
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8008662:	d321      	bcc.n	80086a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008664:	79fa      	ldrb	r2, [r7, #7]
 8008666:	4613      	mov	r3, r2
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4413      	add	r3, r2
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	4a1b      	ldr	r2, [pc, #108]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 8008670:	4413      	add	r3, r2
 8008672:	1d19      	adds	r1, r3, #4
 8008674:	79fa      	ldrb	r2, [r7, #7]
 8008676:	4613      	mov	r3, r2
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4413      	add	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	3308      	adds	r3, #8
 8008680:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 8008682:	4413      	add	r3, r2
 8008684:	3304      	adds	r3, #4
 8008686:	461a      	mov	r2, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fafb 	bl	8008c84 <etharp_request_dst>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008694:	79fa      	ldrb	r2, [r7, #7]
 8008696:	4911      	ldr	r1, [pc, #68]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 8008698:	4613      	mov	r3, r2
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	4413      	add	r3, r2
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	440b      	add	r3, r1
 80086a2:	3314      	adds	r3, #20
 80086a4:	2203      	movs	r2, #3
 80086a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80086ae:	79fa      	ldrb	r2, [r7, #7]
 80086b0:	4613      	mov	r3, r2
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	4413      	add	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	3308      	adds	r3, #8
 80086ba:	4a08      	ldr	r2, [pc, #32]	@ (80086dc <etharp_output_to_arp_index+0x124>)
 80086bc:	4413      	add	r3, r2
 80086be:	3304      	adds	r3, #4
 80086c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086c4:	9200      	str	r2, [sp, #0]
 80086c6:	460a      	mov	r2, r1
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 fb9c 	bl	8008e08 <ethernet_output>
 80086d0:	4603      	mov	r3, r0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	24004c28 	.word	0x24004c28
 80086e0:	08012b50 	.word	0x08012b50
 80086e4:	08012cfc 	.word	0x08012cfc
 80086e8:	08012c04 	.word	0x08012c04

080086ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	@ 0x28
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <etharp_output+0x24>
 8008702:	4b73      	ldr	r3, [pc, #460]	@ (80088d0 <etharp_output+0x1e4>)
 8008704:	f240 321e 	movw	r2, #798	@ 0x31e
 8008708:	4972      	ldr	r1, [pc, #456]	@ (80088d4 <etharp_output+0x1e8>)
 800870a:	4873      	ldr	r0, [pc, #460]	@ (80088d8 <etharp_output+0x1ec>)
 800870c:	f009 fa60 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d106      	bne.n	8008724 <etharp_output+0x38>
 8008716:	4b6e      	ldr	r3, [pc, #440]	@ (80088d0 <etharp_output+0x1e4>)
 8008718:	f240 321f 	movw	r2, #799	@ 0x31f
 800871c:	496f      	ldr	r1, [pc, #444]	@ (80088dc <etharp_output+0x1f0>)
 800871e:	486e      	ldr	r0, [pc, #440]	@ (80088d8 <etharp_output+0x1ec>)
 8008720:	f009 fa56 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <etharp_output+0x4c>
 800872a:	4b69      	ldr	r3, [pc, #420]	@ (80088d0 <etharp_output+0x1e4>)
 800872c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8008730:	496b      	ldr	r1, [pc, #428]	@ (80088e0 <etharp_output+0x1f4>)
 8008732:	4869      	ldr	r0, [pc, #420]	@ (80088d8 <etharp_output+0x1ec>)
 8008734:	f009 fa4c 	bl	8011bd0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68f9      	ldr	r1, [r7, #12]
 800873e:	4618      	mov	r0, r3
 8008740:	f001 f8c6 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800874a:	4b66      	ldr	r3, [pc, #408]	@ (80088e4 <etharp_output+0x1f8>)
 800874c:	61fb      	str	r3, [r7, #28]
 800874e:	e0af      	b.n	80088b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008758:	2be0      	cmp	r3, #224	@ 0xe0
 800875a:	d118      	bne.n	800878e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800875c:	2301      	movs	r3, #1
 800875e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008760:	2300      	movs	r3, #0
 8008762:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008764:	235e      	movs	r3, #94	@ 0x5e
 8008766:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3301      	adds	r3, #1
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008772:	b2db      	uxtb	r3, r3
 8008774:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3302      	adds	r3, #2
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3303      	adds	r3, #3
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008786:	f107 0310 	add.w	r3, r7, #16
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	e090      	b.n	80088b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3304      	adds	r3, #4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	405a      	eors	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3308      	adds	r3, #8
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4013      	ands	r3, r2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d012      	beq.n	80087cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80087ac:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00b      	beq.n	80087cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	330c      	adds	r3, #12
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	330c      	adds	r3, #12
 80087c2:	61bb      	str	r3, [r7, #24]
 80087c4:	e002      	b.n	80087cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80087c6:	f06f 0303 	mvn.w	r3, #3
 80087ca:	e07d      	b.n	80088c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80087cc:	4b46      	ldr	r3, [pc, #280]	@ (80088e8 <etharp_output+0x1fc>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	4619      	mov	r1, r3
 80087d2:	4a46      	ldr	r2, [pc, #280]	@ (80088ec <etharp_output+0x200>)
 80087d4:	460b      	mov	r3, r1
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	440b      	add	r3, r1
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	3314      	adds	r3, #20
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d925      	bls.n	8008832 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80087e6:	4b40      	ldr	r3, [pc, #256]	@ (80088e8 <etharp_output+0x1fc>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	4a3f      	ldr	r2, [pc, #252]	@ (80088ec <etharp_output+0x200>)
 80087ee:	460b      	mov	r3, r1
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	440b      	add	r3, r1
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	4413      	add	r3, r2
 80087f8:	3308      	adds	r3, #8
 80087fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d117      	bne.n	8008832 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	4b38      	ldr	r3, [pc, #224]	@ (80088e8 <etharp_output+0x1fc>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	4937      	ldr	r1, [pc, #220]	@ (80088ec <etharp_output+0x200>)
 800880e:	4603      	mov	r3, r0
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	4403      	add	r3, r0
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	440b      	add	r3, r1
 8008818:	3304      	adds	r3, #4
 800881a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800881c:	429a      	cmp	r2, r3
 800881e:	d108      	bne.n	8008832 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008820:	4b31      	ldr	r3, [pc, #196]	@ (80088e8 <etharp_output+0x1fc>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff fec5 	bl	80085b8 <etharp_output_to_arp_index>
 800882e:	4603      	mov	r3, r0
 8008830:	e04a      	b.n	80088c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008832:	2300      	movs	r3, #0
 8008834:	75fb      	strb	r3, [r7, #23]
 8008836:	e031      	b.n	800889c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008838:	7dfa      	ldrb	r2, [r7, #23]
 800883a:	492c      	ldr	r1, [pc, #176]	@ (80088ec <etharp_output+0x200>)
 800883c:	4613      	mov	r3, r2
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	4413      	add	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	440b      	add	r3, r1
 8008846:	3314      	adds	r3, #20
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d923      	bls.n	8008896 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800884e:	7dfa      	ldrb	r2, [r7, #23]
 8008850:	4926      	ldr	r1, [pc, #152]	@ (80088ec <etharp_output+0x200>)
 8008852:	4613      	mov	r3, r2
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	4413      	add	r3, r2
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	440b      	add	r3, r1
 800885c:	3308      	adds	r3, #8
 800885e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	429a      	cmp	r2, r3
 8008864:	d117      	bne.n	8008896 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	6819      	ldr	r1, [r3, #0]
 800886a:	7dfa      	ldrb	r2, [r7, #23]
 800886c:	481f      	ldr	r0, [pc, #124]	@ (80088ec <etharp_output+0x200>)
 800886e:	4613      	mov	r3, r2
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	4413      	add	r3, r2
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	4403      	add	r3, r0
 8008878:	3304      	adds	r3, #4
 800887a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800887c:	4299      	cmp	r1, r3
 800887e:	d10a      	bne.n	8008896 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008880:	4a19      	ldr	r2, [pc, #100]	@ (80088e8 <etharp_output+0x1fc>)
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	461a      	mov	r2, r3
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7ff fe93 	bl	80085b8 <etharp_output_to_arp_index>
 8008892:	4603      	mov	r3, r0
 8008894:	e018      	b.n	80088c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	3301      	adds	r3, #1
 800889a:	75fb      	strb	r3, [r7, #23]
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	2b09      	cmp	r3, #9
 80088a0:	d9ca      	bls.n	8008838 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	69b9      	ldr	r1, [r7, #24]
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 f822 	bl	80088f0 <etharp_query>
 80088ac:	4603      	mov	r3, r0
 80088ae:	e00b      	b.n	80088c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80088b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 faa1 	bl	8008e08 <ethernet_output>
 80088c6:	4603      	mov	r3, r0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3720      	adds	r7, #32
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	08012b50 	.word	0x08012b50
 80088d4:	08012cdc 	.word	0x08012cdc
 80088d8:	08012c04 	.word	0x08012c04
 80088dc:	08012d2c 	.word	0x08012d2c
 80088e0:	08012ccc 	.word	0x08012ccc
 80088e4:	08015858 	.word	0x08015858
 80088e8:	24004d18 	.word	0x24004d18
 80088ec:	24004c28 	.word	0x24004c28

080088f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08c      	sub	sp, #48	@ 0x30
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3326      	adds	r3, #38	@ 0x26
 8008900:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008902:	23ff      	movs	r3, #255	@ 0xff
 8008904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68f9      	ldr	r1, [r7, #12]
 8008912:	4618      	mov	r0, r3
 8008914:	f000 ffdc 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10c      	bne.n	8008938 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008926:	2be0      	cmp	r3, #224	@ 0xe0
 8008928:	d006      	beq.n	8008938 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008938:	f06f 030f 	mvn.w	r3, #15
 800893c:	e101      	b.n	8008b42 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	2101      	movs	r1, #1
 8008942:	68b8      	ldr	r0, [r7, #8]
 8008944:	f7ff fb60 	bl	8008008 <etharp_find_entry>
 8008948:	4603      	mov	r3, r0
 800894a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800894c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da02      	bge.n	800895a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008954:	8a7b      	ldrh	r3, [r7, #18]
 8008956:	b25b      	sxtb	r3, r3
 8008958:	e0f3      	b.n	8008b42 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800895a:	8a7b      	ldrh	r3, [r7, #18]
 800895c:	2b7e      	cmp	r3, #126	@ 0x7e
 800895e:	d906      	bls.n	800896e <etharp_query+0x7e>
 8008960:	4b7a      	ldr	r3, [pc, #488]	@ (8008b4c <etharp_query+0x25c>)
 8008962:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8008966:	497a      	ldr	r1, [pc, #488]	@ (8008b50 <etharp_query+0x260>)
 8008968:	487a      	ldr	r0, [pc, #488]	@ (8008b54 <etharp_query+0x264>)
 800896a:	f009 f931 	bl	8011bd0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800896e:	8a7b      	ldrh	r3, [r7, #18]
 8008970:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008972:	7c7a      	ldrb	r2, [r7, #17]
 8008974:	4978      	ldr	r1, [pc, #480]	@ (8008b58 <etharp_query+0x268>)
 8008976:	4613      	mov	r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4413      	add	r3, r2
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	440b      	add	r3, r1
 8008980:	3314      	adds	r3, #20
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d115      	bne.n	80089b4 <etharp_query+0xc4>
    is_new_entry = 1;
 8008988:	2301      	movs	r3, #1
 800898a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800898c:	7c7a      	ldrb	r2, [r7, #17]
 800898e:	4972      	ldr	r1, [pc, #456]	@ (8008b58 <etharp_query+0x268>)
 8008990:	4613      	mov	r3, r2
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	4413      	add	r3, r2
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	440b      	add	r3, r1
 800899a:	3314      	adds	r3, #20
 800899c:	2201      	movs	r2, #1
 800899e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80089a0:	7c7a      	ldrb	r2, [r7, #17]
 80089a2:	496d      	ldr	r1, [pc, #436]	@ (8008b58 <etharp_query+0x268>)
 80089a4:	4613      	mov	r3, r2
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	4413      	add	r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	440b      	add	r3, r1
 80089ae:	3308      	adds	r3, #8
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80089b4:	7c7a      	ldrb	r2, [r7, #17]
 80089b6:	4968      	ldr	r1, [pc, #416]	@ (8008b58 <etharp_query+0x268>)
 80089b8:	4613      	mov	r3, r2
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	4413      	add	r3, r2
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	440b      	add	r3, r1
 80089c2:	3314      	adds	r3, #20
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d011      	beq.n	80089ee <etharp_query+0xfe>
 80089ca:	7c7a      	ldrb	r2, [r7, #17]
 80089cc:	4962      	ldr	r1, [pc, #392]	@ (8008b58 <etharp_query+0x268>)
 80089ce:	4613      	mov	r3, r2
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	4413      	add	r3, r2
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	440b      	add	r3, r1
 80089d8:	3314      	adds	r3, #20
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d806      	bhi.n	80089ee <etharp_query+0xfe>
 80089e0:	4b5a      	ldr	r3, [pc, #360]	@ (8008b4c <etharp_query+0x25c>)
 80089e2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80089e6:	495d      	ldr	r1, [pc, #372]	@ (8008b5c <etharp_query+0x26c>)
 80089e8:	485a      	ldr	r0, [pc, #360]	@ (8008b54 <etharp_query+0x264>)
 80089ea:	f009 f8f1 	bl	8011bd0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d102      	bne.n	80089fa <etharp_query+0x10a>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10c      	bne.n	8008a14 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f963 	bl	8008cc8 <etharp_request>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <etharp_query+0x124>
      return result;
 8008a0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008a12:	e096      	b.n	8008b42 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <etharp_query+0x138>
 8008a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8008b4c <etharp_query+0x25c>)
 8008a1c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8008a20:	494f      	ldr	r1, [pc, #316]	@ (8008b60 <etharp_query+0x270>)
 8008a22:	484c      	ldr	r0, [pc, #304]	@ (8008b54 <etharp_query+0x264>)
 8008a24:	f009 f8d4 	bl	8011bd0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008a28:	7c7a      	ldrb	r2, [r7, #17]
 8008a2a:	494b      	ldr	r1, [pc, #300]	@ (8008b58 <etharp_query+0x268>)
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	4413      	add	r3, r2
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	440b      	add	r3, r1
 8008a36:	3314      	adds	r3, #20
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d917      	bls.n	8008a6e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8008a3e:	4a49      	ldr	r2, [pc, #292]	@ (8008b64 <etharp_query+0x274>)
 8008a40:	7c7b      	ldrb	r3, [r7, #17]
 8008a42:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008a44:	7c7a      	ldrb	r2, [r7, #17]
 8008a46:	4613      	mov	r3, r2
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	4413      	add	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	3308      	adds	r3, #8
 8008a50:	4a41      	ldr	r2, [pc, #260]	@ (8008b58 <etharp_query+0x268>)
 8008a52:	4413      	add	r3, r2
 8008a54:	3304      	adds	r3, #4
 8008a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a5a:	9200      	str	r2, [sp, #0]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f9d1 	bl	8008e08 <ethernet_output>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a6c:	e067      	b.n	8008b3e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008a6e:	7c7a      	ldrb	r2, [r7, #17]
 8008a70:	4939      	ldr	r1, [pc, #228]	@ (8008b58 <etharp_query+0x268>)
 8008a72:	4613      	mov	r3, r2
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	4413      	add	r3, r2
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3314      	adds	r3, #20
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d15c      	bne.n	8008b3e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008a8c:	e01c      	b.n	8008ac8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	895a      	ldrh	r2, [r3, #10]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	891b      	ldrh	r3, [r3, #8]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d10a      	bne.n	8008ab0 <etharp_query+0x1c0>
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d006      	beq.n	8008ab0 <etharp_query+0x1c0>
 8008aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8008b4c <etharp_query+0x25c>)
 8008aa4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8008aa8:	492f      	ldr	r1, [pc, #188]	@ (8008b68 <etharp_query+0x278>)
 8008aaa:	482a      	ldr	r0, [pc, #168]	@ (8008b54 <etharp_query+0x264>)
 8008aac:	f009 f890 	bl	8011bd0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	7b1b      	ldrb	r3, [r3, #12]
 8008ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <etharp_query+0x1d2>
        copy_needed = 1;
 8008abc:	2301      	movs	r3, #1
 8008abe:	61bb      	str	r3, [r7, #24]
        break;
 8008ac0:	e005      	b.n	8008ace <etharp_query+0x1de>
      }
      p = p->next;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1df      	bne.n	8008a8e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d007      	beq.n	8008ae4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8008ada:	200e      	movs	r0, #14
 8008adc:	f003 faea 	bl	800c0b4 <pbuf_clone>
 8008ae0:	61f8      	str	r0, [r7, #28]
 8008ae2:	e004      	b.n	8008aee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8008ae8:	69f8      	ldr	r0, [r7, #28]
 8008aea:	f003 f927 	bl	800bd3c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d021      	beq.n	8008b38 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8008af4:	7c7a      	ldrb	r2, [r7, #17]
 8008af6:	4918      	ldr	r1, [pc, #96]	@ (8008b58 <etharp_query+0x268>)
 8008af8:	4613      	mov	r3, r2
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	4413      	add	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	440b      	add	r3, r1
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8008b08:	7c7a      	ldrb	r2, [r7, #17]
 8008b0a:	4913      	ldr	r1, [pc, #76]	@ (8008b58 <etharp_query+0x268>)
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	4413      	add	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	440b      	add	r3, r1
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f003 f86f 	bl	800bbfc <pbuf_free>
      }
      arp_table[i].q = p;
 8008b1e:	7c7a      	ldrb	r2, [r7, #17]
 8008b20:	490d      	ldr	r1, [pc, #52]	@ (8008b58 <etharp_query+0x268>)
 8008b22:	4613      	mov	r3, r2
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	4413      	add	r3, r2
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	440b      	add	r3, r1
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b36:	e002      	b.n	8008b3e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8008b38:	23ff      	movs	r3, #255	@ 0xff
 8008b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8008b3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3728      	adds	r7, #40	@ 0x28
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	08012b50 	.word	0x08012b50
 8008b50:	08012d38 	.word	0x08012d38
 8008b54:	08012c04 	.word	0x08012c04
 8008b58:	24004c28 	.word	0x24004c28
 8008b5c:	08012d48 	.word	0x08012d48
 8008b60:	08012d2c 	.word	0x08012d2c
 8008b64:	24004d18 	.word	0x24004d18
 8008b68:	08012d70 	.word	0x08012d70

08008b6c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08a      	sub	sp, #40	@ 0x28
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d106      	bne.n	8008b92 <etharp_raw+0x26>
 8008b84:	4b3a      	ldr	r3, [pc, #232]	@ (8008c70 <etharp_raw+0x104>)
 8008b86:	f240 4257 	movw	r2, #1111	@ 0x457
 8008b8a:	493a      	ldr	r1, [pc, #232]	@ (8008c74 <etharp_raw+0x108>)
 8008b8c:	483a      	ldr	r0, [pc, #232]	@ (8008c78 <etharp_raw+0x10c>)
 8008b8e:	f009 f81f 	bl	8011bd0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008b92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8008b96:	211c      	movs	r1, #28
 8008b98:	200e      	movs	r0, #14
 8008b9a:	f002 fd4b 	bl	800b634 <pbuf_alloc>
 8008b9e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8008ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008baa:	e05d      	b.n	8008c68 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	895b      	ldrh	r3, [r3, #10]
 8008bb0:	2b1b      	cmp	r3, #27
 8008bb2:	d806      	bhi.n	8008bc2 <etharp_raw+0x56>
 8008bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8008c70 <etharp_raw+0x104>)
 8008bb6:	f240 4262 	movw	r2, #1122	@ 0x462
 8008bba:	4930      	ldr	r1, [pc, #192]	@ (8008c7c <etharp_raw+0x110>)
 8008bbc:	482e      	ldr	r0, [pc, #184]	@ (8008c78 <etharp_raw+0x10c>)
 8008bbe:	f009 f807 	bl	8011bd0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008bc8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff f914 	bl	8007df8 <lwip_htons>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008bde:	2b06      	cmp	r3, #6
 8008be0:	d006      	beq.n	8008bf0 <etharp_raw+0x84>
 8008be2:	4b23      	ldr	r3, [pc, #140]	@ (8008c70 <etharp_raw+0x104>)
 8008be4:	f240 4269 	movw	r2, #1129	@ 0x469
 8008be8:	4925      	ldr	r1, [pc, #148]	@ (8008c80 <etharp_raw+0x114>)
 8008bea:	4823      	ldr	r0, [pc, #140]	@ (8008c78 <etharp_raw+0x10c>)
 8008bec:	f008 fff0 	bl	8011bd0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	2206      	movs	r2, #6
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f009 f9b6 	bl	8011f6a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	3312      	adds	r3, #18
 8008c02:	2206      	movs	r2, #6
 8008c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c06:	4618      	mov	r0, r3
 8008c08:	f009 f9af 	bl	8011f6a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	330e      	adds	r3, #14
 8008c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c12:	6812      	ldr	r2, [r2, #0]
 8008c14:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	3318      	adds	r3, #24
 8008c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1c:	6812      	ldr	r2, [r2, #0]
 8008c1e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f042 0201 	orr.w	r2, r2, #1
 8008c2c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f042 0208 	orr.w	r2, r2, #8
 8008c36:	709a      	strb	r2, [r3, #2]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2206      	movs	r2, #6
 8008c40:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2204      	movs	r2, #4
 8008c46:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008c48:	f640 0306 	movw	r3, #2054	@ 0x806
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	69b9      	ldr	r1, [r7, #24]
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 f8d7 	bl	8008e08 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8008c5a:	69b8      	ldr	r0, [r7, #24]
 8008c5c:	f002 ffce 	bl	800bbfc <pbuf_free>
  p = NULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8008c64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3720      	adds	r7, #32
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	08012b50 	.word	0x08012b50
 8008c74:	08012cdc 	.word	0x08012cdc
 8008c78:	08012c04 	.word	0x08012c04
 8008c7c:	08012d8c 	.word	0x08012d8c
 8008c80:	08012dc0 	.word	0x08012dc0

08008c84 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af04      	add	r7, sp, #16
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	9203      	str	r2, [sp, #12]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	9202      	str	r2, [sp, #8]
 8008ca8:	4a06      	ldr	r2, [pc, #24]	@ (8008cc4 <etharp_request_dst+0x40>)
 8008caa:	9201      	str	r2, [sp, #4]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	4603      	mov	r3, r0
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff ff5a 	bl	8008b6c <etharp_raw>
 8008cb8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08015860 	.word	0x08015860

08008cc8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8008cd2:	4a05      	ldr	r2, [pc, #20]	@ (8008ce8 <etharp_request+0x20>)
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff ffd4 	bl	8008c84 <etharp_request_dst>
 8008cdc:	4603      	mov	r3, r0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	08015858 	.word	0x08015858

08008cec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8008cf6:	230e      	movs	r3, #14
 8008cf8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	895b      	ldrh	r3, [r3, #10]
 8008cfe:	2b0e      	cmp	r3, #14
 8008d00:	d96e      	bls.n	8008de0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	7bdb      	ldrb	r3, [r3, #15]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d10:	3301      	adds	r3, #1
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	7b1a      	ldrb	r2, [r3, #12]
 8008d22:	7b5b      	ldrb	r3, [r3, #13]
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	4313      	orrs	r3, r2
 8008d28:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d023      	beq.n	8008d7e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d10f      	bne.n	8008d5e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	785b      	ldrb	r3, [r3, #1]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d11b      	bne.n	8008d7e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8008d4a:	2b5e      	cmp	r3, #94	@ 0x5e
 8008d4c:	d117      	bne.n	8008d7e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	7b5b      	ldrb	r3, [r3, #13]
 8008d52:	f043 0310 	orr.w	r3, r3, #16
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	735a      	strb	r2, [r3, #13]
 8008d5c:	e00f      	b.n	8008d7e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	2206      	movs	r2, #6
 8008d62:	4928      	ldr	r1, [pc, #160]	@ (8008e04 <ethernet_input+0x118>)
 8008d64:	4618      	mov	r0, r3
 8008d66:	f009 f87b 	bl	8011e60 <memcmp>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d106      	bne.n	8008d7e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	7b5b      	ldrb	r3, [r3, #13]
 8008d74:	f043 0308 	orr.w	r3, r3, #8
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8008d7e:	89fb      	ldrh	r3, [r7, #14]
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d003      	beq.n	8008d8c <ethernet_input+0xa0>
 8008d84:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8008d88:	d014      	beq.n	8008db4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8008d8a:	e032      	b.n	8008df2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008d92:	f003 0308 	and.w	r3, r3, #8
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d024      	beq.n	8008de4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8008d9a:	8afb      	ldrh	r3, [r7, #22]
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f002 fea6 	bl	800baf0 <pbuf_remove_header>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d11e      	bne.n	8008de8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fb93 	bl	80094d8 <ip4_input>
      break;
 8008db2:	e013      	b.n	8008ddc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d014      	beq.n	8008dec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8008dc2:	8afb      	ldrh	r3, [r7, #22]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f002 fe92 	bl	800baf0 <pbuf_remove_header>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10e      	bne.n	8008df0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff fb65 	bl	80084a4 <etharp_input>
      break;
 8008dda:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	e00c      	b.n	8008dfa <ethernet_input+0x10e>
    goto free_and_return;
 8008de0:	bf00      	nop
 8008de2:	e006      	b.n	8008df2 <ethernet_input+0x106>
        goto free_and_return;
 8008de4:	bf00      	nop
 8008de6:	e004      	b.n	8008df2 <ethernet_input+0x106>
        goto free_and_return;
 8008de8:	bf00      	nop
 8008dea:	e002      	b.n	8008df2 <ethernet_input+0x106>
        goto free_and_return;
 8008dec:	bf00      	nop
 8008dee:	e000      	b.n	8008df2 <ethernet_input+0x106>
        goto free_and_return;
 8008df0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f002 ff02 	bl	800bbfc <pbuf_free>
  return ERR_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	08015858 	.word	0x08015858

08008e08 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8008e16:	8c3b      	ldrh	r3, [r7, #32]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe ffed 	bl	8007df8 <lwip_htons>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8008e22:	210e      	movs	r1, #14
 8008e24:	68b8      	ldr	r0, [r7, #8]
 8008e26:	f002 fe53 	bl	800bad0 <pbuf_add_header>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d125      	bne.n	8008e7c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	8afa      	ldrh	r2, [r7, #22]
 8008e3a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2206      	movs	r2, #6
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f009 f891 	bl	8011f6a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	3306      	adds	r3, #6
 8008e4c:	2206      	movs	r2, #6
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f009 f88a 	bl	8011f6a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e5c:	2b06      	cmp	r3, #6
 8008e5e:	d006      	beq.n	8008e6e <ethernet_output+0x66>
 8008e60:	4b0a      	ldr	r3, [pc, #40]	@ (8008e8c <ethernet_output+0x84>)
 8008e62:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8008e66:	490a      	ldr	r1, [pc, #40]	@ (8008e90 <ethernet_output+0x88>)
 8008e68:	480a      	ldr	r0, [pc, #40]	@ (8008e94 <ethernet_output+0x8c>)
 8008e6a:	f008 feb1 	bl	8011bd0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	68b9      	ldr	r1, [r7, #8]
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	4798      	blx	r3
 8008e78:	4603      	mov	r3, r0
 8008e7a:	e002      	b.n	8008e82 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8008e7c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8008e7e:	f06f 0301 	mvn.w	r3, #1
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	08012e04 	.word	0x08012e04
 8008e90:	08012e74 	.word	0x08012e74
 8008e94:	08012ea8 	.word	0x08012ea8

08008e98 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08e      	sub	sp, #56	@ 0x38
 8008e9c:	af04      	add	r7, sp, #16
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8008ea2:	4b87      	ldr	r3, [pc, #540]	@ (80090c0 <icmp_input+0x228>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 030f 	and.w	r3, r3, #15
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8008eb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008eba:	2b13      	cmp	r3, #19
 8008ebc:	f240 80e8 	bls.w	8009090 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	895b      	ldrh	r3, [r3, #10]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	f240 80e5 	bls.w	8009094 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8008ed4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80d2 	beq.w	8009082 <icmp_input+0x1ea>
 8008ede:	2b08      	cmp	r3, #8
 8008ee0:	f040 80d2 	bne.w	8009088 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8008ee4:	4b77      	ldr	r3, [pc, #476]	@ (80090c4 <icmp_input+0x22c>)
 8008ee6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ee8:	4b75      	ldr	r3, [pc, #468]	@ (80090c0 <icmp_input+0x228>)
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ef0:	2be0      	cmp	r3, #224	@ 0xe0
 8008ef2:	f000 80d6 	beq.w	80090a2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8008ef6:	4b72      	ldr	r3, [pc, #456]	@ (80090c0 <icmp_input+0x228>)
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	4a71      	ldr	r2, [pc, #452]	@ (80090c0 <icmp_input+0x228>)
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fce5 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f040 80cc 	bne.w	80090a6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	891b      	ldrh	r3, [r3, #8]
 8008f12:	2b07      	cmp	r3, #7
 8008f14:	f240 80c0 	bls.w	8009098 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f9e0 	bl	80092de <inet_chksum_pbuf>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f002 fe69 	bl	800bbfc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8008f2a:	e0c5      	b.n	80090b8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008f2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f2e:	330e      	adds	r3, #14
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f002 fdcc 	bl	800bad0 <pbuf_add_header>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d04b      	beq.n	8008fd6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	891a      	ldrh	r2, [r3, #8]
 8008f42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f44:	4413      	add	r3, r2
 8008f46:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	891b      	ldrh	r3, [r3, #8]
 8008f4c:	8b7a      	ldrh	r2, [r7, #26]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	f0c0 80ab 	bcc.w	80090aa <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8008f54:	8b7b      	ldrh	r3, [r7, #26]
 8008f56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	200e      	movs	r0, #14
 8008f5e:	f002 fb69 	bl	800b634 <pbuf_alloc>
 8008f62:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 80a1 	beq.w	80090ae <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	895b      	ldrh	r3, [r3, #10]
 8008f70:	461a      	mov	r2, r3
 8008f72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f74:	3308      	adds	r3, #8
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d203      	bcs.n	8008f82 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8008f7a:	6978      	ldr	r0, [r7, #20]
 8008f7c:	f002 fe3e 	bl	800bbfc <pbuf_free>
          goto icmperr;
 8008f80:	e096      	b.n	80090b0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008f88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f008 ffed 	bl	8011f6a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8008f90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f92:	4619      	mov	r1, r3
 8008f94:	6978      	ldr	r0, [r7, #20]
 8008f96:	f002 fdab 	bl	800baf0 <pbuf_remove_header>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d009      	beq.n	8008fb4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008fa0:	4b49      	ldr	r3, [pc, #292]	@ (80090c8 <icmp_input+0x230>)
 8008fa2:	22b6      	movs	r2, #182	@ 0xb6
 8008fa4:	4949      	ldr	r1, [pc, #292]	@ (80090cc <icmp_input+0x234>)
 8008fa6:	484a      	ldr	r0, [pc, #296]	@ (80090d0 <icmp_input+0x238>)
 8008fa8:	f008 fe12 	bl	8011bd0 <iprintf>
          pbuf_free(r);
 8008fac:	6978      	ldr	r0, [r7, #20]
 8008fae:	f002 fe25 	bl	800bbfc <pbuf_free>
          goto icmperr;
 8008fb2:	e07d      	b.n	80090b0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	6978      	ldr	r0, [r7, #20]
 8008fb8:	f002 ff38 	bl	800be2c <pbuf_copy>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8008fc2:	6978      	ldr	r0, [r7, #20]
 8008fc4:	f002 fe1a 	bl	800bbfc <pbuf_free>
          goto icmperr;
 8008fc8:	e072      	b.n	80090b0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f002 fe16 	bl	800bbfc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	607b      	str	r3, [r7, #4]
 8008fd4:	e00f      	b.n	8008ff6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008fd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008fd8:	330e      	adds	r3, #14
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f002 fd87 	bl	800baf0 <pbuf_remove_header>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d006      	beq.n	8008ff6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8008fe8:	4b37      	ldr	r3, [pc, #220]	@ (80090c8 <icmp_input+0x230>)
 8008fea:	22c7      	movs	r2, #199	@ 0xc7
 8008fec:	4939      	ldr	r1, [pc, #228]	@ (80090d4 <icmp_input+0x23c>)
 8008fee:	4838      	ldr	r0, [pc, #224]	@ (80090d0 <icmp_input+0x238>)
 8008ff0:	f008 fdee 	bl	8011bd0 <iprintf>
          goto icmperr;
 8008ff4:	e05c      	b.n	80090b0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8008ffc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f002 fd65 	bl	800bad0 <pbuf_add_header>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d13c      	bne.n	8009086 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800901a:	4b29      	ldr	r3, [pc, #164]	@ (80090c0 <icmp_input+0x228>)
 800901c:	691a      	ldr	r2, [r3, #16]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	885b      	ldrh	r3, [r3, #2]
 800902c:	b29b      	uxth	r3, r3
 800902e:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8009032:	4293      	cmp	r3, r2
 8009034:	d907      	bls.n	8009046 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	885b      	ldrh	r3, [r3, #2]
 800903a:	b29b      	uxth	r3, r3
 800903c:	3309      	adds	r3, #9
 800903e:	b29a      	uxth	r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	805a      	strh	r2, [r3, #2]
 8009044:	e006      	b.n	8009054 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	885b      	ldrh	r3, [r3, #2]
 800904a:	b29b      	uxth	r3, r3
 800904c:	3308      	adds	r3, #8
 800904e:	b29a      	uxth	r2, r3
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	22ff      	movs	r2, #255	@ 0xff
 8009058:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	729a      	strb	r2, [r3, #10]
 8009060:	2200      	movs	r2, #0
 8009062:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	9302      	str	r3, [sp, #8]
 8009068:	2301      	movs	r3, #1
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	2300      	movs	r3, #0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	23ff      	movs	r3, #255	@ 0xff
 8009072:	2200      	movs	r2, #0
 8009074:	69f9      	ldr	r1, [r7, #28]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fb52 	bl	8009720 <ip4_output_if>
 800907c:	4603      	mov	r3, r0
 800907e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8009080:	e001      	b.n	8009086 <icmp_input+0x1ee>
      break;
 8009082:	bf00      	nop
 8009084:	e000      	b.n	8009088 <icmp_input+0x1f0>
      break;
 8009086:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f002 fdb7 	bl	800bbfc <pbuf_free>
  return;
 800908e:	e013      	b.n	80090b8 <icmp_input+0x220>
    goto lenerr;
 8009090:	bf00      	nop
 8009092:	e002      	b.n	800909a <icmp_input+0x202>
    goto lenerr;
 8009094:	bf00      	nop
 8009096:	e000      	b.n	800909a <icmp_input+0x202>
        goto lenerr;
 8009098:	bf00      	nop
lenerr:
  pbuf_free(p);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f002 fdae 	bl	800bbfc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80090a0:	e00a      	b.n	80090b8 <icmp_input+0x220>
        goto icmperr;
 80090a2:	bf00      	nop
 80090a4:	e004      	b.n	80090b0 <icmp_input+0x218>
        goto icmperr;
 80090a6:	bf00      	nop
 80090a8:	e002      	b.n	80090b0 <icmp_input+0x218>
          goto icmperr;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <icmp_input+0x218>
          goto icmperr;
 80090ae:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f002 fda3 	bl	800bbfc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80090b6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80090b8:	3728      	adds	r7, #40	@ 0x28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	24004d1c 	.word	0x24004d1c
 80090c4:	24004d30 	.word	0x24004d30
 80090c8:	08012ed0 	.word	0x08012ed0
 80090cc:	08012f40 	.word	0x08012f40
 80090d0:	08012f78 	.word	0x08012f78
 80090d4:	08012fa0 	.word	0x08012fa0

080090d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	461a      	mov	r2, r3
 80090e8:	2103      	movs	r1, #3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f814 	bl	8009118 <icmp_send_response>
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	461a      	mov	r2, r3
 8009108:	210b      	movs	r1, #11
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f804 	bl	8009118 <icmp_send_response>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08c      	sub	sp, #48	@ 0x30
 800911c:	af04      	add	r7, sp, #16
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
 8009124:	4613      	mov	r3, r2
 8009126:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009128:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800912c:	2124      	movs	r1, #36	@ 0x24
 800912e:	2022      	movs	r0, #34	@ 0x22
 8009130:	f002 fa80 	bl	800b634 <pbuf_alloc>
 8009134:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d056      	beq.n	80091ea <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	895b      	ldrh	r3, [r3, #10]
 8009140:	2b23      	cmp	r3, #35	@ 0x23
 8009142:	d806      	bhi.n	8009152 <icmp_send_response+0x3a>
 8009144:	4b2b      	ldr	r3, [pc, #172]	@ (80091f4 <icmp_send_response+0xdc>)
 8009146:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800914a:	492b      	ldr	r1, [pc, #172]	@ (80091f8 <icmp_send_response+0xe0>)
 800914c:	482b      	ldr	r0, [pc, #172]	@ (80091fc <icmp_send_response+0xe4>)
 800914e:	f008 fd3f 	bl	8011bd0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	78ba      	ldrb	r2, [r7, #2]
 8009168:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2200      	movs	r2, #0
 800916e:	711a      	strb	r2, [r3, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2200      	movs	r2, #0
 8009178:	719a      	strb	r2, [r3, #6]
 800917a:	2200      	movs	r2, #0
 800917c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f103 0008 	add.w	r0, r3, #8
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	221c      	movs	r2, #28
 800918c:	4619      	mov	r1, r3
 800918e:	f008 feec 	bl	8011f6a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009198:	f107 030c 	add.w	r3, r7, #12
 800919c:	4618      	mov	r0, r3
 800919e:	f000 f901 	bl	80093a4 <ip4_route>
 80091a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d01b      	beq.n	80091e2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	709a      	strb	r2, [r3, #2]
 80091b0:	2200      	movs	r2, #0
 80091b2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	895b      	ldrh	r3, [r3, #10]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6978      	ldr	r0, [r7, #20]
 80091bc:	f000 f87d 	bl	80092ba <inet_chksum>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80091c8:	f107 020c 	add.w	r2, r7, #12
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	9302      	str	r3, [sp, #8]
 80091d0:	2301      	movs	r3, #1
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	2300      	movs	r3, #0
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	23ff      	movs	r3, #255	@ 0xff
 80091da:	2100      	movs	r1, #0
 80091dc:	69f8      	ldr	r0, [r7, #28]
 80091de:	f000 fa9f 	bl	8009720 <ip4_output_if>
  }
  pbuf_free(q);
 80091e2:	69f8      	ldr	r0, [r7, #28]
 80091e4:	f002 fd0a 	bl	800bbfc <pbuf_free>
 80091e8:	e000      	b.n	80091ec <icmp_send_response+0xd4>
    return;
 80091ea:	bf00      	nop
}
 80091ec:	3720      	adds	r7, #32
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	08012ed0 	.word	0x08012ed0
 80091f8:	08012fd4 	.word	0x08012fd4
 80091fc:	08012f78 	.word	0x08012f78

08009200 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009200:	b480      	push	{r7}
 8009202:	b089      	sub	sp, #36	@ 0x24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00d      	beq.n	8009240 <lwip_standard_chksum+0x40>
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	dd0a      	ble.n	8009240 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800922a:	69fa      	ldr	r2, [r7, #28]
 800922c:	1c53      	adds	r3, r2, #1
 800922e:	61fb      	str	r3, [r7, #28]
 8009230:	f107 030e 	add.w	r3, r7, #14
 8009234:	3301      	adds	r3, #1
 8009236:	7812      	ldrb	r2, [r2, #0]
 8009238:	701a      	strb	r2, [r3, #0]
    len--;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	3b01      	subs	r3, #1
 800923e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009244:	e00a      	b.n	800925c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	1c9a      	adds	r2, r3, #2
 800924a:	61ba      	str	r2, [r7, #24]
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	4413      	add	r3, r2
 8009254:	617b      	str	r3, [r7, #20]
    len -= 2;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	3b02      	subs	r3, #2
 800925a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b01      	cmp	r3, #1
 8009260:	dcf1      	bgt.n	8009246 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd04      	ble.n	8009272 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009268:	f107 030e 	add.w	r3, r7, #14
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	7812      	ldrb	r2, [r2, #0]
 8009270:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8009272:	89fb      	ldrh	r3, [r7, #14]
 8009274:	461a      	mov	r2, r3
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	4413      	add	r3, r2
 800927a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	0c1a      	lsrs	r2, r3, #16
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	b29b      	uxth	r3, r3
 8009284:	4413      	add	r3, r2
 8009286:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	0c1a      	lsrs	r2, r3, #16
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	b29b      	uxth	r3, r3
 8009290:	4413      	add	r3, r2
 8009292:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d007      	beq.n	80092aa <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	b29a      	uxth	r2, r3
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	0a1b      	lsrs	r3, r3, #8
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	b29b      	uxth	r3, r3
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3724      	adds	r7, #36	@ 0x24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80092c6:	887b      	ldrh	r3, [r7, #2]
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff ff98 	bl	8009200 <lwip_standard_chksum>
 80092d0:	4603      	mov	r3, r0
 80092d2:	43db      	mvns	r3, r3
 80092d4:	b29b      	uxth	r3, r3
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	e02b      	b.n	800934c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	895b      	ldrh	r3, [r3, #10]
 80092fc:	4619      	mov	r1, r3
 80092fe:	4610      	mov	r0, r2
 8009300:	f7ff ff7e 	bl	8009200 <lwip_standard_chksum>
 8009304:	4603      	mov	r3, r0
 8009306:	461a      	mov	r2, r3
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	4413      	add	r3, r2
 800930c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	0c1a      	lsrs	r2, r3, #16
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	b29b      	uxth	r3, r3
 8009316:	4413      	add	r3, r2
 8009318:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	895b      	ldrh	r3, [r3, #10]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	b29b      	uxth	r3, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00e      	beq.n	8009346 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	bf0c      	ite	eq
 800932e:	2301      	moveq	r3, #1
 8009330:	2300      	movne	r3, #0
 8009332:	b2db      	uxtb	r3, r3
 8009334:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	021b      	lsls	r3, r3, #8
 800933a:	b29a      	uxth	r2, r3
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	0a1b      	lsrs	r3, r3, #8
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1d0      	bne.n	80092f4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d007      	beq.n	8009368 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	021b      	lsls	r3, r3, #8
 800935c:	b29a      	uxth	r2, r3
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	0a1b      	lsrs	r3, r3, #8
 8009362:	b2db      	uxtb	r3, r3
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	b29b      	uxth	r3, r3
 800936c:	43db      	mvns	r3, r3
 800936e:	b29b      	uxth	r3, r3
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009382:	f001 f9eb 	bl	800a75c <mem_init>
  memp_init();
 8009386:	f001 fced 	bl	800ad64 <memp_init>
  pbuf_init();
  netif_init();
 800938a:	f001 fdeb 	bl	800af64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800938e:	f008 f965 	bl	801165c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009392:	f002 fec1 	bl	800c118 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009396:	f008 f8d7 	bl	8011548 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80093ac:	4b33      	ldr	r3, [pc, #204]	@ (800947c <ip4_route+0xd8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	e036      	b.n	8009422 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d02b      	beq.n	800941c <ip4_route+0x78>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80093ca:	089b      	lsrs	r3, r3, #2
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d022      	beq.n	800941c <ip4_route+0x78>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3304      	adds	r3, #4
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01d      	beq.n	800941c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3304      	adds	r3, #4
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	405a      	eors	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3308      	adds	r3, #8
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4013      	ands	r3, r2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	e038      	b.n	800946e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d108      	bne.n	800941c <ip4_route+0x78>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	330c      	adds	r3, #12
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	429a      	cmp	r2, r3
 8009416:	d101      	bne.n	800941c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	e028      	b.n	800946e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1c5      	bne.n	80093b4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009428:	4b15      	ldr	r3, [pc, #84]	@ (8009480 <ip4_route+0xdc>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01a      	beq.n	8009466 <ip4_route+0xc2>
 8009430:	4b13      	ldr	r3, [pc, #76]	@ (8009480 <ip4_route+0xdc>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d012      	beq.n	8009466 <ip4_route+0xc2>
 8009440:	4b0f      	ldr	r3, [pc, #60]	@ (8009480 <ip4_route+0xdc>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009450:	4b0b      	ldr	r3, [pc, #44]	@ (8009480 <ip4_route+0xdc>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3304      	adds	r3, #4
 8009456:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b7f      	cmp	r3, #127	@ 0x7f
 8009464:	d101      	bne.n	800946a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	e001      	b.n	800946e <ip4_route+0xca>
  }

  return netif_default;
 800946a:	4b05      	ldr	r3, [pc, #20]	@ (8009480 <ip4_route+0xdc>)
 800946c:	681b      	ldr	r3, [r3, #0]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	24007c38 	.word	0x24007c38
 8009480:	24007c3c 	.word	0x24007c3c

08009484 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d016      	beq.n	80094ca <ip4_input_accept+0x46>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3304      	adds	r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d011      	beq.n	80094ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80094a6:	4b0b      	ldr	r3, [pc, #44]	@ (80094d4 <ip4_input_accept+0x50>)
 80094a8:	695a      	ldr	r2, [r3, #20]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	3304      	adds	r3, #4
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d008      	beq.n	80094c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80094b4:	4b07      	ldr	r3, [pc, #28]	@ (80094d4 <ip4_input_accept+0x50>)
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fa08 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 80094c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	24004d1c 	.word	0x24004d1c

080094d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	091b      	lsrs	r3, r3, #4
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d004      	beq.n	80094fe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f002 fb81 	bl	800bbfc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	e107      	b.n	800970e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	f003 030f 	and.w	r3, r3, #15
 8009506:	b2db      	uxtb	r3, r3
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	b2db      	uxtb	r3, r3
 800950c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	885b      	ldrh	r3, [r3, #2]
 8009512:	b29b      	uxth	r3, r3
 8009514:	4618      	mov	r0, r3
 8009516:	f7fe fc6f 	bl	8007df8 <lwip_htons>
 800951a:	4603      	mov	r3, r0
 800951c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	891b      	ldrh	r3, [r3, #8]
 8009522:	89ba      	ldrh	r2, [r7, #12]
 8009524:	429a      	cmp	r2, r3
 8009526:	d204      	bcs.n	8009532 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009528:	89bb      	ldrh	r3, [r7, #12]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f002 f9df 	bl	800b8f0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	895b      	ldrh	r3, [r3, #10]
 8009536:	89fa      	ldrh	r2, [r7, #14]
 8009538:	429a      	cmp	r2, r3
 800953a:	d807      	bhi.n	800954c <ip4_input+0x74>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	891b      	ldrh	r3, [r3, #8]
 8009540:	89ba      	ldrh	r2, [r7, #12]
 8009542:	429a      	cmp	r2, r3
 8009544:	d802      	bhi.n	800954c <ip4_input+0x74>
 8009546:	89fb      	ldrh	r3, [r7, #14]
 8009548:	2b13      	cmp	r3, #19
 800954a:	d804      	bhi.n	8009556 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f002 fb55 	bl	800bbfc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	e0db      	b.n	800970e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	4a6f      	ldr	r2, [pc, #444]	@ (8009718 <ip4_input+0x240>)
 800955c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	4a6d      	ldr	r2, [pc, #436]	@ (8009718 <ip4_input+0x240>)
 8009564:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009566:	4b6c      	ldr	r3, [pc, #432]	@ (8009718 <ip4_input+0x240>)
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800956e:	2be0      	cmp	r3, #224	@ 0xe0
 8009570:	d112      	bne.n	8009598 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d007      	beq.n	8009592 <ip4_input+0xba>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	3304      	adds	r3, #4
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <ip4_input+0xba>
      netif = inp;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	e02a      	b.n	80095e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	e027      	b.n	80095e8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009598:	6838      	ldr	r0, [r7, #0]
 800959a:	f7ff ff73 	bl	8009484 <ip4_input_accept>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <ip4_input+0xd2>
      netif = inp;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	613b      	str	r3, [r7, #16]
 80095a8:	e01e      	b.n	80095e8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80095ae:	4b5a      	ldr	r3, [pc, #360]	@ (8009718 <ip4_input+0x240>)
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80095b6:	d017      	beq.n	80095e8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80095b8:	4b58      	ldr	r3, [pc, #352]	@ (800971c <ip4_input+0x244>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	613b      	str	r3, [r7, #16]
 80095be:	e00e      	b.n	80095de <ip4_input+0x106>
          if (netif == inp) {
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d006      	beq.n	80095d6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80095c8:	6938      	ldr	r0, [r7, #16]
 80095ca:	f7ff ff5b 	bl	8009484 <ip4_input_accept>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d108      	bne.n	80095e6 <ip4_input+0x10e>
 80095d4:	e000      	b.n	80095d8 <ip4_input+0x100>
            continue;
 80095d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1ed      	bne.n	80095c0 <ip4_input+0xe8>
 80095e4:	e000      	b.n	80095e8 <ip4_input+0x110>
            break;
 80095e6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80095e8:	4b4b      	ldr	r3, [pc, #300]	@ (8009718 <ip4_input+0x240>)
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 f96e 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80095fa:	4b47      	ldr	r3, [pc, #284]	@ (8009718 <ip4_input+0x240>)
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009602:	2be0      	cmp	r3, #224	@ 0xe0
 8009604:	d104      	bne.n	8009610 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f002 faf8 	bl	800bbfc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	e07e      	b.n	800970e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f002 faf0 	bl	800bbfc <pbuf_free>
    return ERR_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	e076      	b.n	800970e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	88db      	ldrh	r3, [r3, #6]
 8009624:	b29b      	uxth	r3, r3
 8009626:	461a      	mov	r2, r3
 8009628:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800962c:	4013      	ands	r3, r2
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fc92 	bl	8009f5c <ip4_reass>
 8009638:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <ip4_input+0x16c>
      return ERR_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	e064      	b.n	800970e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800964a:	4a33      	ldr	r2, [pc, #204]	@ (8009718 <ip4_input+0x240>)
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009650:	4a31      	ldr	r2, [pc, #196]	@ (8009718 <ip4_input+0x240>)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009656:	4a30      	ldr	r2, [pc, #192]	@ (8009718 <ip4_input+0x240>)
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	b2db      	uxtb	r3, r3
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	b2db      	uxtb	r3, r3
 800966a:	461a      	mov	r2, r3
 800966c:	4b2a      	ldr	r3, [pc, #168]	@ (8009718 <ip4_input+0x240>)
 800966e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009670:	89fb      	ldrh	r3, [r7, #14]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f002 fa3b 	bl	800baf0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	7a5b      	ldrb	r3, [r3, #9]
 800967e:	2b11      	cmp	r3, #17
 8009680:	d006      	beq.n	8009690 <ip4_input+0x1b8>
 8009682:	2b11      	cmp	r3, #17
 8009684:	dc13      	bgt.n	80096ae <ip4_input+0x1d6>
 8009686:	2b01      	cmp	r3, #1
 8009688:	d00c      	beq.n	80096a4 <ip4_input+0x1cc>
 800968a:	2b06      	cmp	r3, #6
 800968c:	d005      	beq.n	800969a <ip4_input+0x1c2>
 800968e:	e00e      	b.n	80096ae <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f008 f858 	bl	8011748 <udp_input>
        break;
 8009698:	e026      	b.n	80096e8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f004 f8d7 	bl	800d850 <tcp_input>
        break;
 80096a2:	e021      	b.n	80096e8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7ff fbf6 	bl	8008e98 <icmp_input>
        break;
 80096ac:	e01c      	b.n	80096e8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80096ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009718 <ip4_input+0x240>)
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	6939      	ldr	r1, [r7, #16]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f90b 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10f      	bne.n	80096e0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80096c0:	4b15      	ldr	r3, [pc, #84]	@ (8009718 <ip4_input+0x240>)
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80096c8:	2be0      	cmp	r3, #224	@ 0xe0
 80096ca:	d009      	beq.n	80096e0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80096cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f002 fa7f 	bl	800bbd6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80096d8:	2102      	movs	r1, #2
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff fcfc 	bl	80090d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f002 fa8b 	bl	800bbfc <pbuf_free>
        break;
 80096e6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80096e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009718 <ip4_input+0x240>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80096ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009718 <ip4_input+0x240>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80096f4:	4b08      	ldr	r3, [pc, #32]	@ (8009718 <ip4_input+0x240>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80096fa:	4b07      	ldr	r3, [pc, #28]	@ (8009718 <ip4_input+0x240>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009700:	4b05      	ldr	r3, [pc, #20]	@ (8009718 <ip4_input+0x240>)
 8009702:	2200      	movs	r2, #0
 8009704:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009706:	4b04      	ldr	r3, [pc, #16]	@ (8009718 <ip4_input+0x240>)
 8009708:	2200      	movs	r2, #0
 800970a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	24004d1c 	.word	0x24004d1c
 800971c:	24007c38 	.word	0x24007c38

08009720 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af04      	add	r7, sp, #16
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d009      	beq.n	800974c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <ip4_output_if+0x26>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009748:	3304      	adds	r3, #4
 800974a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009750:	9302      	str	r3, [sp, #8]
 8009752:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	f897 3020 	ldrb.w	r3, [r7, #32]
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	4613      	mov	r3, r2
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	6979      	ldr	r1, [r7, #20]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f805 	bl	8009774 <ip4_output_if_src>
 800976a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	7b9b      	ldrb	r3, [r3, #14]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d006      	beq.n	8009798 <ip4_output_if_src+0x24>
 800978a:	4b4b      	ldr	r3, [pc, #300]	@ (80098b8 <ip4_output_if_src+0x144>)
 800978c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8009790:	494a      	ldr	r1, [pc, #296]	@ (80098bc <ip4_output_if_src+0x148>)
 8009792:	484b      	ldr	r0, [pc, #300]	@ (80098c0 <ip4_output_if_src+0x14c>)
 8009794:	f008 fa1c 	bl	8011bd0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d060      	beq.n	8009860 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800979e:	2314      	movs	r3, #20
 80097a0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80097a2:	2114      	movs	r1, #20
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f002 f993 	bl	800bad0 <pbuf_add_header>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80097b0:	f06f 0301 	mvn.w	r3, #1
 80097b4:	e07c      	b.n	80098b0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	895b      	ldrh	r3, [r3, #10]
 80097c0:	2b13      	cmp	r3, #19
 80097c2:	d806      	bhi.n	80097d2 <ip4_output_if_src+0x5e>
 80097c4:	4b3c      	ldr	r3, [pc, #240]	@ (80098b8 <ip4_output_if_src+0x144>)
 80097c6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80097ca:	493e      	ldr	r1, [pc, #248]	@ (80098c4 <ip4_output_if_src+0x150>)
 80097cc:	483c      	ldr	r0, [pc, #240]	@ (80098c0 <ip4_output_if_src+0x14c>)
 80097ce:	f008 f9ff 	bl	8011bd0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	78fa      	ldrb	r2, [r7, #3]
 80097d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80097de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80097e8:	8b7b      	ldrh	r3, [r7, #26]
 80097ea:	089b      	lsrs	r3, r3, #2
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009800:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	891b      	ldrh	r3, [r3, #8]
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe faf6 	bl	8007df8 <lwip_htons>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	2200      	movs	r2, #0
 8009818:	719a      	strb	r2, [r3, #6]
 800981a:	2200      	movs	r2, #0
 800981c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800981e:	4b2a      	ldr	r3, [pc, #168]	@ (80098c8 <ip4_output_if_src+0x154>)
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fae8 	bl	8007df8 <lwip_htons>
 8009828:	4603      	mov	r3, r0
 800982a:	461a      	mov	r2, r3
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009830:	4b25      	ldr	r3, [pc, #148]	@ (80098c8 <ip4_output_if_src+0x154>)
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	3301      	adds	r3, #1
 8009836:	b29a      	uxth	r2, r3
 8009838:	4b23      	ldr	r3, [pc, #140]	@ (80098c8 <ip4_output_if_src+0x154>)
 800983a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009842:	4b22      	ldr	r3, [pc, #136]	@ (80098cc <ip4_output_if_src+0x158>)
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	60da      	str	r2, [r3, #12]
 800984a:	e003      	b.n	8009854 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	2200      	movs	r2, #0
 8009858:	729a      	strb	r2, [r3, #10]
 800985a:	2200      	movs	r2, #0
 800985c:	72da      	strb	r2, [r3, #11]
 800985e:	e00f      	b.n	8009880 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	895b      	ldrh	r3, [r3, #10]
 8009864:	2b13      	cmp	r3, #19
 8009866:	d802      	bhi.n	800986e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009868:	f06f 0301 	mvn.w	r3, #1
 800986c:	e020      	b.n	80098b0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800987a:	f107 0314 	add.w	r3, r7, #20
 800987e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009882:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00c      	beq.n	80098a2 <ip4_output_if_src+0x12e>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	891a      	ldrh	r2, [r3, #8]
 800988c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009890:	429a      	cmp	r2, r3
 8009892:	d906      	bls.n	80098a2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 fd53 	bl	800a344 <ip4_frag>
 800989e:	4603      	mov	r3, r0
 80098a0:	e006      	b.n	80098b0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	68f9      	ldr	r1, [r7, #12]
 80098aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098ac:	4798      	blx	r3
 80098ae:	4603      	mov	r3, r0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3720      	adds	r7, #32
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	08013000 	.word	0x08013000
 80098bc:	08013070 	.word	0x08013070
 80098c0:	0801307c 	.word	0x0801307c
 80098c4:	080130a4 	.word	0x080130a4
 80098c8:	24004d34 	.word	0x24004d34
 80098cc:	08015868 	.word	0x08015868

080098d0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098e4:	d002      	beq.n	80098ec <ip4_addr_isbroadcast_u32+0x1c>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e02a      	b.n	8009946 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	e021      	b.n	8009946 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	3304      	adds	r3, #4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	429a      	cmp	r2, r3
 800990c:	d101      	bne.n	8009912 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800990e:	2300      	movs	r3, #0
 8009910:	e019      	b.n	8009946 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	3304      	adds	r3, #4
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	405a      	eors	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4013      	ands	r3, r2
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10d      	bne.n	8009944 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	3308      	adds	r3, #8
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	43da      	mvns	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800993c:	429a      	cmp	r2, r3
 800993e:	d101      	bne.n	8009944 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009940:	2301      	movs	r3, #1
 8009942:	e000      	b.n	8009946 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009944:	2300      	movs	r3, #0
  }
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800995e:	4b12      	ldr	r3, [pc, #72]	@ (80099a8 <ip_reass_tmr+0x54>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009964:	e018      	b.n	8009998 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	7fdb      	ldrb	r3, [r3, #31]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <ip_reass_tmr+0x32>
      r->timer--;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	7fdb      	ldrb	r3, [r3, #31]
 8009972:	3b01      	subs	r3, #1
 8009974:	b2da      	uxtb	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	e008      	b.n	8009998 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f80a 	bl	80099ac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e3      	bne.n	8009966 <ip_reass_tmr+0x12>
    }
  }
}
 800999e:	bf00      	nop
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	24004d38 	.word	0x24004d38

080099ac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d105      	bne.n	80099ce <ip_reass_free_complete_datagram+0x22>
 80099c2:	4b45      	ldr	r3, [pc, #276]	@ (8009ad8 <ip_reass_free_complete_datagram+0x12c>)
 80099c4:	22ab      	movs	r2, #171	@ 0xab
 80099c6:	4945      	ldr	r1, [pc, #276]	@ (8009adc <ip_reass_free_complete_datagram+0x130>)
 80099c8:	4845      	ldr	r0, [pc, #276]	@ (8009ae0 <ip_reass_free_complete_datagram+0x134>)
 80099ca:	f008 f901 	bl	8011bd0 <iprintf>
  if (prev != NULL) {
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00a      	beq.n	80099ea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d005      	beq.n	80099ea <ip_reass_free_complete_datagram+0x3e>
 80099de:	4b3e      	ldr	r3, [pc, #248]	@ (8009ad8 <ip_reass_free_complete_datagram+0x12c>)
 80099e0:	22ad      	movs	r2, #173	@ 0xad
 80099e2:	4940      	ldr	r1, [pc, #256]	@ (8009ae4 <ip_reass_free_complete_datagram+0x138>)
 80099e4:	483e      	ldr	r0, [pc, #248]	@ (8009ae0 <ip_reass_free_complete_datagram+0x134>)
 80099e6:	f008 f8f3 	bl	8011bd0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	889b      	ldrh	r3, [r3, #4]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d12a      	bne.n	8009a52 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	6858      	ldr	r0, [r3, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3308      	adds	r3, #8
 8009a12:	2214      	movs	r2, #20
 8009a14:	4619      	mov	r1, r3
 8009a16:	f008 faa8 	bl	8011f6a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	69b8      	ldr	r0, [r7, #24]
 8009a1e:	f7ff fb6b 	bl	80090f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009a22:	69b8      	ldr	r0, [r7, #24]
 8009a24:	f002 f972 	bl	800bd0c <pbuf_clen>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009a2c:	8bfa      	ldrh	r2, [r7, #30]
 8009a2e:	8a7b      	ldrh	r3, [r7, #18]
 8009a30:	4413      	add	r3, r2
 8009a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a36:	db05      	blt.n	8009a44 <ip_reass_free_complete_datagram+0x98>
 8009a38:	4b27      	ldr	r3, [pc, #156]	@ (8009ad8 <ip_reass_free_complete_datagram+0x12c>)
 8009a3a:	22bc      	movs	r2, #188	@ 0xbc
 8009a3c:	492a      	ldr	r1, [pc, #168]	@ (8009ae8 <ip_reass_free_complete_datagram+0x13c>)
 8009a3e:	4828      	ldr	r0, [pc, #160]	@ (8009ae0 <ip_reass_free_complete_datagram+0x134>)
 8009a40:	f008 f8c6 	bl	8011bd0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009a44:	8bfa      	ldrh	r2, [r7, #30]
 8009a46:	8a7b      	ldrh	r3, [r7, #18]
 8009a48:	4413      	add	r3, r2
 8009a4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8009a4c:	69b8      	ldr	r0, [r7, #24]
 8009a4e:	f002 f8d5 	bl	800bbfc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8009a58:	e01f      	b.n	8009a9a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f002 f94e 	bl	800bd0c <pbuf_clen>
 8009a70:	4603      	mov	r3, r0
 8009a72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009a74:	8bfa      	ldrh	r2, [r7, #30]
 8009a76:	8a7b      	ldrh	r3, [r7, #18]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a7e:	db05      	blt.n	8009a8c <ip_reass_free_complete_datagram+0xe0>
 8009a80:	4b15      	ldr	r3, [pc, #84]	@ (8009ad8 <ip_reass_free_complete_datagram+0x12c>)
 8009a82:	22cc      	movs	r2, #204	@ 0xcc
 8009a84:	4918      	ldr	r1, [pc, #96]	@ (8009ae8 <ip_reass_free_complete_datagram+0x13c>)
 8009a86:	4816      	ldr	r0, [pc, #88]	@ (8009ae0 <ip_reass_free_complete_datagram+0x134>)
 8009a88:	f008 f8a2 	bl	8011bd0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009a8c:	8bfa      	ldrh	r2, [r7, #30]
 8009a8e:	8a7b      	ldrh	r3, [r7, #18]
 8009a90:	4413      	add	r3, r2
 8009a92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f002 f8b1 	bl	800bbfc <pbuf_free>
  while (p != NULL) {
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1dc      	bne.n	8009a5a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f8c2 	bl	8009c2c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009aa8:	4b10      	ldr	r3, [pc, #64]	@ (8009aec <ip_reass_free_complete_datagram+0x140>)
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	8bfa      	ldrh	r2, [r7, #30]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d905      	bls.n	8009abe <ip_reass_free_complete_datagram+0x112>
 8009ab2:	4b09      	ldr	r3, [pc, #36]	@ (8009ad8 <ip_reass_free_complete_datagram+0x12c>)
 8009ab4:	22d2      	movs	r2, #210	@ 0xd2
 8009ab6:	490e      	ldr	r1, [pc, #56]	@ (8009af0 <ip_reass_free_complete_datagram+0x144>)
 8009ab8:	4809      	ldr	r0, [pc, #36]	@ (8009ae0 <ip_reass_free_complete_datagram+0x134>)
 8009aba:	f008 f889 	bl	8011bd0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009abe:	4b0b      	ldr	r3, [pc, #44]	@ (8009aec <ip_reass_free_complete_datagram+0x140>)
 8009ac0:	881a      	ldrh	r2, [r3, #0]
 8009ac2:	8bfb      	ldrh	r3, [r7, #30]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	4b08      	ldr	r3, [pc, #32]	@ (8009aec <ip_reass_free_complete_datagram+0x140>)
 8009aca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8009acc:	8bfb      	ldrh	r3, [r7, #30]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	080130d4 	.word	0x080130d4
 8009adc:	08013148 	.word	0x08013148
 8009ae0:	08013154 	.word	0x08013154
 8009ae4:	0801317c 	.word	0x0801317c
 8009ae8:	08013190 	.word	0x08013190
 8009aec:	24004d3c 	.word	0x24004d3c
 8009af0:	080131b0 	.word	0x080131b0

08009af4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08a      	sub	sp, #40	@ 0x28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8009b12:	4b28      	ldr	r3, [pc, #160]	@ (8009bb4 <ip_reass_remove_oldest_datagram+0xc0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8009b18:	e030      	b.n	8009b7c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1c:	695a      	ldr	r2, [r3, #20]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d10c      	bne.n	8009b40 <ip_reass_remove_oldest_datagram+0x4c>
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	699a      	ldr	r2, [r3, #24]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d106      	bne.n	8009b40 <ip_reass_remove_oldest_datagram+0x4c>
 8009b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b34:	899a      	ldrh	r2, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	889b      	ldrh	r3, [r3, #4]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d014      	beq.n	8009b6a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	3301      	adds	r3, #1
 8009b44:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	61bb      	str	r3, [r7, #24]
 8009b54:	e009      	b.n	8009b6a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	7fda      	ldrb	r2, [r3, #31]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	7fdb      	ldrb	r3, [r3, #31]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d803      	bhi.n	8009b6a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1cb      	bne.n	8009b1a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d008      	beq.n	8009b9a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8009b88:	69b9      	ldr	r1, [r7, #24]
 8009b8a:	6a38      	ldr	r0, [r7, #32]
 8009b8c:	f7ff ff0e 	bl	80099ac <ip_reass_free_complete_datagram>
 8009b90:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	da02      	bge.n	8009ba8 <ip_reass_remove_oldest_datagram+0xb4>
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	dcac      	bgt.n	8009b02 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8009ba8:	697b      	ldr	r3, [r7, #20]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3728      	adds	r7, #40	@ 0x28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	24004d38 	.word	0x24004d38

08009bb8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009bc2:	2004      	movs	r0, #4
 8009bc4:	f001 f934 	bl	800ae30 <memp_malloc>
 8009bc8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d110      	bne.n	8009bf2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff ff8e 	bl	8009af4 <ip_reass_remove_oldest_datagram>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	dc03      	bgt.n	8009be8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009be0:	2004      	movs	r0, #4
 8009be2:	f001 f925 	bl	800ae30 <memp_malloc>
 8009be6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e016      	b.n	8009c20 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f008 f942 	bl	8011e80 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	220f      	movs	r2, #15
 8009c00:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8009c02:	4b09      	ldr	r3, [pc, #36]	@ (8009c28 <ip_reass_enqueue_new_datagram+0x70>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8009c0a:	4a07      	ldr	r2, [pc, #28]	@ (8009c28 <ip_reass_enqueue_new_datagram+0x70>)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3308      	adds	r3, #8
 8009c14:	2214      	movs	r2, #20
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f008 f9a6 	bl	8011f6a <memcpy>
  return ipr;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	24004d38 	.word	0x24004d38

08009c2c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8009c36:	4b10      	ldr	r3, [pc, #64]	@ (8009c78 <ip_reass_dequeue_datagram+0x4c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d104      	bne.n	8009c4a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a0c      	ldr	r2, [pc, #48]	@ (8009c78 <ip_reass_dequeue_datagram+0x4c>)
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	e00d      	b.n	8009c66 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <ip_reass_dequeue_datagram+0x32>
 8009c50:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <ip_reass_dequeue_datagram+0x50>)
 8009c52:	f240 1245 	movw	r2, #325	@ 0x145
 8009c56:	490a      	ldr	r1, [pc, #40]	@ (8009c80 <ip_reass_dequeue_datagram+0x54>)
 8009c58:	480a      	ldr	r0, [pc, #40]	@ (8009c84 <ip_reass_dequeue_datagram+0x58>)
 8009c5a:	f007 ffb9 	bl	8011bd0 <iprintf>
    prev->next = ipr->next;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009c66:	6879      	ldr	r1, [r7, #4]
 8009c68:	2004      	movs	r0, #4
 8009c6a:	f001 f951 	bl	800af10 <memp_free>
}
 8009c6e:	bf00      	nop
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	24004d38 	.word	0x24004d38
 8009c7c:	080130d4 	.word	0x080130d4
 8009c80:	080131d4 	.word	0x080131d4
 8009c84:	08013154 	.word	0x08013154

08009c88 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08c      	sub	sp, #48	@ 0x30
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe f8a5 	bl	8007df8 <lwip_htons>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	f003 030f 	and.w	r3, r3, #15
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8009cc0:	7e7b      	ldrb	r3, [r7, #25]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	8b7a      	ldrh	r2, [r7, #26]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d202      	bcs.n	8009cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cce:	e135      	b.n	8009f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8009cd0:	7e7b      	ldrb	r3, [r7, #25]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	8b7a      	ldrh	r2, [r7, #26]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	88db      	ldrh	r3, [r3, #6]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe f889 	bl	8007df8 <lwip_htons>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8009cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	705a      	strb	r2, [r3, #1]
 8009d02:	2200      	movs	r2, #0
 8009d04:	709a      	strb	r2, [r3, #2]
 8009d06:	2200      	movs	r2, #0
 8009d08:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8009d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0c:	8afa      	ldrh	r2, [r7, #22]
 8009d0e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8009d10:	8afa      	ldrh	r2, [r7, #22]
 8009d12:	8b7b      	ldrh	r3, [r7, #26]
 8009d14:	4413      	add	r3, r2
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8009d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1e:	88db      	ldrh	r3, [r3, #6]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	8afa      	ldrh	r2, [r7, #22]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d902      	bls.n	8009d2e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009d28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d2c:	e106      	b.n	8009f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d34:	e068      	b.n	8009e08 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8009d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3e:	889b      	ldrh	r3, [r3, #4]
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	889b      	ldrh	r3, [r3, #4]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d235      	bcs.n	8009db8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8009d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d50:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8009d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d020      	beq.n	8009d9a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8009d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5a:	889b      	ldrh	r3, [r3, #4]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d60:	88db      	ldrh	r3, [r3, #6]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d307      	bcc.n	8009d78 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8009d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6a:	88db      	ldrh	r3, [r3, #6]
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	889b      	ldrh	r3, [r3, #4]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d902      	bls.n	8009d7e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d7c:	e0de      	b.n	8009f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8009d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8009d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d86:	88db      	ldrh	r3, [r3, #6]
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8c:	889b      	ldrh	r3, [r3, #4]
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d03d      	beq.n	8009e10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8009d98:	e03a      	b.n	8009e10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8009d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9c:	88db      	ldrh	r3, [r3, #6]
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	889b      	ldrh	r3, [r3, #4]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d902      	bls.n	8009db0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dae:	e0c5      	b.n	8009f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	605a      	str	r2, [r3, #4]
      break;
 8009db6:	e02b      	b.n	8009e10 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8009db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dba:	889b      	ldrh	r3, [r3, #4]
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	889b      	ldrh	r3, [r3, #4]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d102      	bne.n	8009dce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dcc:	e0b6      	b.n	8009f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8009dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd0:	889b      	ldrh	r3, [r3, #4]
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	88db      	ldrh	r3, [r3, #6]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d202      	bcs.n	8009de4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009de2:	e0ab      	b.n	8009f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d009      	beq.n	8009dfe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8009dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	889b      	ldrh	r3, [r3, #4]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d001      	beq.n	8009dfe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8009e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d193      	bne.n	8009d36 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8009e0e:	e000      	b.n	8009e12 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8009e10:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d12d      	bne.n	8009e74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01c      	beq.n	8009e58 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8009e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e20:	88db      	ldrh	r3, [r3, #6]
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e26:	889b      	ldrh	r3, [r3, #4]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d906      	bls.n	8009e3c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8009e2e:	4b45      	ldr	r3, [pc, #276]	@ (8009f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009e30:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8009e34:	4944      	ldr	r1, [pc, #272]	@ (8009f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8009e36:	4845      	ldr	r0, [pc, #276]	@ (8009f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009e38:	f007 feca 	bl	8011bd0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8009e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8009e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e44:	88db      	ldrh	r3, [r3, #6]
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4a:	889b      	ldrh	r3, [r3, #4]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d010      	beq.n	8009e74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	623b      	str	r3, [r7, #32]
 8009e56:	e00d      	b.n	8009e74 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8009e60:	4b38      	ldr	r3, [pc, #224]	@ (8009f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009e62:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8009e66:	493a      	ldr	r1, [pc, #232]	@ (8009f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8009e68:	4838      	ldr	r0, [pc, #224]	@ (8009f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009e6a:	f007 feb1 	bl	8011bd0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d105      	bne.n	8009e86 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	7f9b      	ldrb	r3, [r3, #30]
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d059      	beq.n	8009f3a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d04f      	beq.n	8009f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	889b      	ldrh	r3, [r3, #4]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d002      	beq.n	8009ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	623b      	str	r3, [r7, #32]
 8009ea6:	e041      	b.n	8009f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8009ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8009eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8009eb2:	e012      	b.n	8009eda <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	88db      	ldrh	r3, [r3, #6]
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec2:	889b      	ldrh	r3, [r3, #4]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d002      	beq.n	8009ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	623b      	str	r3, [r7, #32]
            break;
 8009ece:	e007      	b.n	8009ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8009ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8009eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e9      	bne.n	8009eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d022      	beq.n	8009f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8009eee:	4b15      	ldr	r3, [pc, #84]	@ (8009f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009ef0:	f240 12df 	movw	r2, #479	@ 0x1df
 8009ef4:	4917      	ldr	r1, [pc, #92]	@ (8009f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8009ef6:	4815      	ldr	r0, [pc, #84]	@ (8009f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009ef8:	f007 fe6a 	bl	8011bd0 <iprintf>
          LWIP_ASSERT("sanity check",
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d106      	bne.n	8009f16 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8009f08:	4b0e      	ldr	r3, [pc, #56]	@ (8009f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009f0a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009f0e:	4911      	ldr	r1, [pc, #68]	@ (8009f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8009f10:	480e      	ldr	r0, [pc, #56]	@ (8009f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009f12:	f007 fe5d 	bl	8011bd0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8009f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d006      	beq.n	8009f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8009f1e:	4b09      	ldr	r3, [pc, #36]	@ (8009f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009f20:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8009f24:	490c      	ldr	r1, [pc, #48]	@ (8009f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8009f26:	4809      	ldr	r0, [pc, #36]	@ (8009f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009f28:	f007 fe52 	bl	8011bd0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	bf14      	ite	ne
 8009f32:	2301      	movne	r3, #1
 8009f34:	2300      	moveq	r3, #0
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	e000      	b.n	8009f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3730      	adds	r7, #48	@ 0x30
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	080130d4 	.word	0x080130d4
 8009f48:	080131f0 	.word	0x080131f0
 8009f4c:	08013154 	.word	0x08013154
 8009f50:	08013210 	.word	0x08013210
 8009f54:	08013248 	.word	0x08013248
 8009f58:	08013258 	.word	0x08013258

08009f5c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08e      	sub	sp, #56	@ 0x38
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8009f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	f003 030f 	and.w	r3, r3, #15
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b14      	cmp	r3, #20
 8009f7a:	f040 8171 	bne.w	800a260 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8009f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f80:	88db      	ldrh	r3, [r3, #6]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fd ff37 	bl	8007df8 <lwip_htons>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	00db      	lsls	r3, r3, #3
 8009f94:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f98:	885b      	ldrh	r3, [r3, #2]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fd ff2b 	bl	8007df8 <lwip_htons>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8009fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	f0c0 8150 	bcc.w	800a264 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8009fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 fe9b 	bl	800bd0c <pbuf_clen>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009fda:	4b8c      	ldr	r3, [pc, #560]	@ (800a20c <ip4_reass+0x2b0>)
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	8c3b      	ldrh	r3, [r7, #32]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	2b0a      	cmp	r3, #10
 8009fe6:	dd10      	ble.n	800a00a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009fe8:	8c3b      	ldrh	r3, [r7, #32]
 8009fea:	4619      	mov	r1, r3
 8009fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fee:	f7ff fd81 	bl	8009af4 <ip_reass_remove_oldest_datagram>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 8137 	beq.w	800a268 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8009ffa:	4b84      	ldr	r3, [pc, #528]	@ (800a20c <ip4_reass+0x2b0>)
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	8c3b      	ldrh	r3, [r7, #32]
 800a002:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a004:	2b0a      	cmp	r3, #10
 800a006:	f300 812f 	bgt.w	800a268 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a00a:	4b81      	ldr	r3, [pc, #516]	@ (800a210 <ip4_reass+0x2b4>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a010:	e015      	b.n	800a03e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	695a      	ldr	r2, [r3, #20]
 800a016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d10c      	bne.n	800a038 <ip4_reass+0xdc>
 800a01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a020:	699a      	ldr	r2, [r3, #24]
 800a022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	429a      	cmp	r2, r3
 800a028:	d106      	bne.n	800a038 <ip4_reass+0xdc>
 800a02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02c:	899a      	ldrh	r2, [r3, #12]
 800a02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a030:	889b      	ldrh	r3, [r3, #4]
 800a032:	b29b      	uxth	r3, r3
 800a034:	429a      	cmp	r2, r3
 800a036:	d006      	beq.n	800a046 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e6      	bne.n	800a012 <ip4_reass+0xb6>
 800a044:	e000      	b.n	800a048 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800a046:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800a04e:	8c3b      	ldrh	r3, [r7, #32]
 800a050:	4619      	mov	r1, r3
 800a052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a054:	f7ff fdb0 	bl	8009bb8 <ip_reass_enqueue_new_datagram>
 800a058:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d11c      	bne.n	800a09a <ip4_reass+0x13e>
      goto nullreturn;
 800a060:	e105      	b.n	800a26e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a064:	88db      	ldrh	r3, [r3, #6]
 800a066:	b29b      	uxth	r3, r3
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fd fec5 	bl	8007df8 <lwip_htons>
 800a06e:	4603      	mov	r3, r0
 800a070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a074:	2b00      	cmp	r3, #0
 800a076:	d110      	bne.n	800a09a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07a:	89db      	ldrh	r3, [r3, #14]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fd febb 	bl	8007df8 <lwip_htons>
 800a082:	4603      	mov	r3, r0
 800a084:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d006      	beq.n	800a09a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08e:	3308      	adds	r3, #8
 800a090:	2214      	movs	r2, #20
 800a092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a094:	4618      	mov	r0, r3
 800a096:	f007 ff68 	bl	8011f6a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09c:	88db      	ldrh	r3, [r3, #6]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	f003 0320 	and.w	r3, r3, #32
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bf0c      	ite	eq
 800a0a8:	2301      	moveq	r3, #1
 800a0aa:	2300      	movne	r3, #0
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00e      	beq.n	800a0d4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a0b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a0b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0ba:	4413      	add	r3, r2
 800a0bc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a0be:	8b7a      	ldrh	r2, [r7, #26]
 800a0c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	f0c0 80a0 	bcc.w	800a208 <ip4_reass+0x2ac>
 800a0c8:	8b7b      	ldrh	r3, [r7, #26]
 800a0ca:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	f200 809a 	bhi.w	800a208 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0da:	f7ff fdd5 	bl	8009c88 <ip_reass_chain_frag_into_datagram_and_validate>
 800a0de:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0e6:	f000 809b 	beq.w	800a220 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a0ea:	4b48      	ldr	r3, [pc, #288]	@ (800a20c <ip4_reass+0x2b0>)
 800a0ec:	881a      	ldrh	r2, [r3, #0]
 800a0ee:	8c3b      	ldrh	r3, [r7, #32]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	4b45      	ldr	r3, [pc, #276]	@ (800a20c <ip4_reass+0x2b0>)
 800a0f6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00d      	beq.n	800a11a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a0fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a102:	4413      	add	r3, r2
 800a104:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	8a7a      	ldrh	r2, [r7, #18]
 800a10a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10e:	7f9b      	ldrb	r3, [r3, #30]
 800a110:	f043 0301 	orr.w	r3, r3, #1
 800a114:	b2da      	uxtb	r2, r3
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d171      	bne.n	800a204 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a122:	8b9b      	ldrh	r3, [r3, #28]
 800a124:	3314      	adds	r3, #20
 800a126:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	3308      	adds	r3, #8
 800a13e:	2214      	movs	r2, #20
 800a140:	4619      	mov	r1, r3
 800a142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a144:	f007 ff11 	bl	8011f6a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a148:	8a3b      	ldrh	r3, [r7, #16]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd fe54 	bl	8007df8 <lwip_htons>
 800a150:	4603      	mov	r3, r0
 800a152:	461a      	mov	r2, r3
 800a154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a156:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15a:	2200      	movs	r2, #0
 800a15c:	719a      	strb	r2, [r3, #6]
 800a15e:	2200      	movs	r2, #0
 800a160:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a164:	2200      	movs	r2, #0
 800a166:	729a      	strb	r2, [r3, #10]
 800a168:	2200      	movs	r2, #0
 800a16a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a172:	e00d      	b.n	800a190 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800a174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a17a:	2114      	movs	r1, #20
 800a17c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a17e:	f001 fcb7 	bl	800baf0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a182:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f001 fdfb 	bl	800bd80 <pbuf_cat>
      r = iprh->next_pbuf;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800a190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1ee      	bne.n	800a174 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a196:	4b1e      	ldr	r3, [pc, #120]	@ (800a210 <ip4_reass+0x2b4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d102      	bne.n	800a1a6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1a4:	e010      	b.n	800a1c8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a1a6:	4b1a      	ldr	r3, [pc, #104]	@ (800a210 <ip4_reass+0x2b4>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1ac:	e007      	b.n	800a1be <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800a1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d006      	beq.n	800a1c6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1f4      	bne.n	800a1ae <ip4_reass+0x252>
 800a1c4:	e000      	b.n	800a1c8 <ip4_reass+0x26c>
          break;
 800a1c6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a1c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1cc:	f7ff fd2e 	bl	8009c2c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 fd9b 	bl	800bd0c <pbuf_clen>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a1da:	4b0c      	ldr	r3, [pc, #48]	@ (800a20c <ip4_reass+0x2b0>)
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	8c3a      	ldrh	r2, [r7, #32]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d906      	bls.n	800a1f2 <ip4_reass+0x296>
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <ip4_reass+0x2b8>)
 800a1e6:	f240 229b 	movw	r2, #667	@ 0x29b
 800a1ea:	490b      	ldr	r1, [pc, #44]	@ (800a218 <ip4_reass+0x2bc>)
 800a1ec:	480b      	ldr	r0, [pc, #44]	@ (800a21c <ip4_reass+0x2c0>)
 800a1ee:	f007 fcef 	bl	8011bd0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a1f2:	4b06      	ldr	r3, [pc, #24]	@ (800a20c <ip4_reass+0x2b0>)
 800a1f4:	881a      	ldrh	r2, [r3, #0]
 800a1f6:	8c3b      	ldrh	r3, [r7, #32]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	4b03      	ldr	r3, [pc, #12]	@ (800a20c <ip4_reass+0x2b0>)
 800a1fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	e038      	b.n	800a276 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a204:	2300      	movs	r3, #0
 800a206:	e036      	b.n	800a276 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800a208:	bf00      	nop
 800a20a:	e00a      	b.n	800a222 <ip4_reass+0x2c6>
 800a20c:	24004d3c 	.word	0x24004d3c
 800a210:	24004d38 	.word	0x24004d38
 800a214:	080130d4 	.word	0x080130d4
 800a218:	0801327c 	.word	0x0801327c
 800a21c:	08013154 	.word	0x08013154
    goto nullreturn_ipr;
 800a220:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a224:	2b00      	cmp	r3, #0
 800a226:	d106      	bne.n	800a236 <ip4_reass+0x2da>
 800a228:	4b15      	ldr	r3, [pc, #84]	@ (800a280 <ip4_reass+0x324>)
 800a22a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800a22e:	4915      	ldr	r1, [pc, #84]	@ (800a284 <ip4_reass+0x328>)
 800a230:	4815      	ldr	r0, [pc, #84]	@ (800a288 <ip4_reass+0x32c>)
 800a232:	f007 fccd 	bl	8011bd0 <iprintf>
  if (ipr->p == NULL) {
 800a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d116      	bne.n	800a26c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a23e:	4b13      	ldr	r3, [pc, #76]	@ (800a28c <ip4_reass+0x330>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a244:	429a      	cmp	r2, r3
 800a246:	d006      	beq.n	800a256 <ip4_reass+0x2fa>
 800a248:	4b0d      	ldr	r3, [pc, #52]	@ (800a280 <ip4_reass+0x324>)
 800a24a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800a24e:	4910      	ldr	r1, [pc, #64]	@ (800a290 <ip4_reass+0x334>)
 800a250:	480d      	ldr	r0, [pc, #52]	@ (800a288 <ip4_reass+0x32c>)
 800a252:	f007 fcbd 	bl	8011bd0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a256:	2100      	movs	r1, #0
 800a258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a25a:	f7ff fce7 	bl	8009c2c <ip_reass_dequeue_datagram>
 800a25e:	e006      	b.n	800a26e <ip4_reass+0x312>
    goto nullreturn;
 800a260:	bf00      	nop
 800a262:	e004      	b.n	800a26e <ip4_reass+0x312>
    goto nullreturn;
 800a264:	bf00      	nop
 800a266:	e002      	b.n	800a26e <ip4_reass+0x312>
      goto nullreturn;
 800a268:	bf00      	nop
 800a26a:	e000      	b.n	800a26e <ip4_reass+0x312>
  }

nullreturn:
 800a26c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f001 fcc4 	bl	800bbfc <pbuf_free>
  return NULL;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3738      	adds	r7, #56	@ 0x38
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	080130d4 	.word	0x080130d4
 800a284:	08013298 	.word	0x08013298
 800a288:	08013154 	.word	0x08013154
 800a28c:	24004d38 	.word	0x24004d38
 800a290:	080132a4 	.word	0x080132a4

0800a294 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a298:	2005      	movs	r0, #5
 800a29a:	f000 fdc9 	bl	800ae30 <memp_malloc>
 800a29e:	4603      	mov	r3, r0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d106      	bne.n	800a2c0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800a2b2:	4b07      	ldr	r3, [pc, #28]	@ (800a2d0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800a2b4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800a2b8:	4906      	ldr	r1, [pc, #24]	@ (800a2d4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800a2ba:	4807      	ldr	r0, [pc, #28]	@ (800a2d8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800a2bc:	f007 fc88 	bl	8011bd0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a2c0:	6879      	ldr	r1, [r7, #4]
 800a2c2:	2005      	movs	r0, #5
 800a2c4:	f000 fe24 	bl	800af10 <memp_free>
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	080130d4 	.word	0x080130d4
 800a2d4:	080132c4 	.word	0x080132c4
 800a2d8:	08013154 	.word	0x08013154

0800a2dc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <ipfrag_free_pbuf_custom+0x20>
 800a2ee:	4b11      	ldr	r3, [pc, #68]	@ (800a334 <ipfrag_free_pbuf_custom+0x58>)
 800a2f0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800a2f4:	4910      	ldr	r1, [pc, #64]	@ (800a338 <ipfrag_free_pbuf_custom+0x5c>)
 800a2f6:	4811      	ldr	r0, [pc, #68]	@ (800a33c <ipfrag_free_pbuf_custom+0x60>)
 800a2f8:	f007 fc6a 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d006      	beq.n	800a312 <ipfrag_free_pbuf_custom+0x36>
 800a304:	4b0b      	ldr	r3, [pc, #44]	@ (800a334 <ipfrag_free_pbuf_custom+0x58>)
 800a306:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800a30a:	490d      	ldr	r1, [pc, #52]	@ (800a340 <ipfrag_free_pbuf_custom+0x64>)
 800a30c:	480b      	ldr	r0, [pc, #44]	@ (800a33c <ipfrag_free_pbuf_custom+0x60>)
 800a30e:	f007 fc5f 	bl	8011bd0 <iprintf>
  if (pcr->original != NULL) {
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	4618      	mov	r0, r3
 800a320:	f001 fc6c 	bl	800bbfc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff ffbd 	bl	800a2a4 <ip_frag_free_pbuf_custom_ref>
}
 800a32a:	bf00      	nop
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	080130d4 	.word	0x080130d4
 800a338:	080132d0 	.word	0x080132d0
 800a33c:	08013154 	.word	0x08013154
 800a340:	080132dc 	.word	0x080132dc

0800a344 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b094      	sub	sp, #80	@ 0x50
 800a348:	af02      	add	r7, sp, #8
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a35a:	3b14      	subs	r3, #20
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	da00      	bge.n	800a362 <ip4_frag+0x1e>
 800a360:	3307      	adds	r3, #7
 800a362:	10db      	asrs	r3, r3, #3
 800a364:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a366:	2314      	movs	r3, #20
 800a368:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800a370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a372:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f003 030f 	and.w	r3, r3, #15
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b14      	cmp	r3, #20
 800a384:	d002      	beq.n	800a38c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800a386:	f06f 0305 	mvn.w	r3, #5
 800a38a:	e110      	b.n	800a5ae <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	895b      	ldrh	r3, [r3, #10]
 800a390:	2b13      	cmp	r3, #19
 800a392:	d809      	bhi.n	800a3a8 <ip4_frag+0x64>
 800a394:	4b88      	ldr	r3, [pc, #544]	@ (800a5b8 <ip4_frag+0x274>)
 800a396:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800a39a:	4988      	ldr	r1, [pc, #544]	@ (800a5bc <ip4_frag+0x278>)
 800a39c:	4888      	ldr	r0, [pc, #544]	@ (800a5c0 <ip4_frag+0x27c>)
 800a39e:	f007 fc17 	bl	8011bd0 <iprintf>
 800a3a2:	f06f 0305 	mvn.w	r3, #5
 800a3a6:	e102      	b.n	800a5ae <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3aa:	88db      	ldrh	r3, [r3, #6]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fd fd22 	bl	8007df8 <lwip_htons>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800a3b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a3ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a3c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a3c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	891b      	ldrh	r3, [r3, #8]
 800a3ce:	3b14      	subs	r3, #20
 800a3d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800a3d4:	e0e1      	b.n	800a59a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a3d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3d8:	00db      	lsls	r3, r3, #3
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	bf28      	it	cs
 800a3e4:	4613      	movcs	r3, r2
 800a3e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a3e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a3ec:	2114      	movs	r1, #20
 800a3ee:	200e      	movs	r0, #14
 800a3f0:	f001 f920 	bl	800b634 <pbuf_alloc>
 800a3f4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 80d5 	beq.w	800a5a8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a400:	895b      	ldrh	r3, [r3, #10]
 800a402:	2b13      	cmp	r3, #19
 800a404:	d806      	bhi.n	800a414 <ip4_frag+0xd0>
 800a406:	4b6c      	ldr	r3, [pc, #432]	@ (800a5b8 <ip4_frag+0x274>)
 800a408:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800a40c:	496d      	ldr	r1, [pc, #436]	@ (800a5c4 <ip4_frag+0x280>)
 800a40e:	486c      	ldr	r0, [pc, #432]	@ (800a5c0 <ip4_frag+0x27c>)
 800a410:	f007 fbde 	bl	8011bd0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	2214      	movs	r2, #20
 800a41a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a41c:	4618      	mov	r0, r3
 800a41e:	f007 fda4 	bl	8011f6a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800a428:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a42a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800a42e:	e064      	b.n	800a4fa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	895a      	ldrh	r2, [r3, #10]
 800a434:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	895b      	ldrh	r3, [r3, #10]
 800a43e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a440:	429a      	cmp	r2, r3
 800a442:	d906      	bls.n	800a452 <ip4_frag+0x10e>
 800a444:	4b5c      	ldr	r3, [pc, #368]	@ (800a5b8 <ip4_frag+0x274>)
 800a446:	f240 322d 	movw	r2, #813	@ 0x32d
 800a44a:	495f      	ldr	r1, [pc, #380]	@ (800a5c8 <ip4_frag+0x284>)
 800a44c:	485c      	ldr	r0, [pc, #368]	@ (800a5c0 <ip4_frag+0x27c>)
 800a44e:	f007 fbbf 	bl	8011bd0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a452:	8bfa      	ldrh	r2, [r7, #30]
 800a454:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a458:	4293      	cmp	r3, r2
 800a45a:	bf28      	it	cs
 800a45c:	4613      	movcs	r3, r2
 800a45e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800a462:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a466:	2b00      	cmp	r3, #0
 800a468:	d105      	bne.n	800a476 <ip4_frag+0x132>
        poff = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	60fb      	str	r3, [r7, #12]
        continue;
 800a474:	e041      	b.n	800a4fa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800a476:	f7ff ff0d 	bl	800a294 <ip_frag_alloc_pbuf_custom_ref>
 800a47a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d103      	bne.n	800a48a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800a482:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a484:	f001 fbba 	bl	800bbfc <pbuf_free>
        goto memerr;
 800a488:	e08f      	b.n	800a5aa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a48a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a490:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a492:	4413      	add	r3, r2
 800a494:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800a498:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a49c:	9201      	str	r2, [sp, #4]
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2241      	movs	r2, #65	@ 0x41
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f001 f9ef 	bl	800b888 <pbuf_alloced_custom>
 800a4aa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d106      	bne.n	800a4c0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800a4b2:	69b8      	ldr	r0, [r7, #24]
 800a4b4:	f7ff fef6 	bl	800a2a4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800a4b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a4ba:	f001 fb9f 	bl	800bbfc <pbuf_free>
        goto memerr;
 800a4be:	e074      	b.n	800a5aa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f001 fc3b 	bl	800bd3c <pbuf_ref>
      pcr->original = p;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	4a3f      	ldr	r2, [pc, #252]	@ (800a5cc <ip4_frag+0x288>)
 800a4d0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800a4d2:	6979      	ldr	r1, [r7, #20]
 800a4d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a4d6:	f001 fc53 	bl	800bd80 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a4da:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800a4de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800a4e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <ip4_frag+0x1b6>
        poff = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800a4fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d196      	bne.n	800a430 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800a502:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a504:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a508:	4413      	add	r3, r2
 800a50a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a510:	f1a3 0213 	sub.w	r2, r3, #19
 800a514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a518:	429a      	cmp	r2, r3
 800a51a:	bfcc      	ite	gt
 800a51c:	2301      	movgt	r3, #1
 800a51e:	2300      	movle	r3, #0
 800a520:	b2db      	uxtb	r3, r3
 800a522:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800a524:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a52c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <ip4_frag+0x1f6>
 800a534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800a53a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a53c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a540:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a542:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a544:	4618      	mov	r0, r3
 800a546:	f7fd fc57 	bl	8007df8 <lwip_htons>
 800a54a:	4603      	mov	r3, r0
 800a54c:	461a      	mov	r2, r3
 800a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a550:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a552:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a554:	3314      	adds	r3, #20
 800a556:	b29b      	uxth	r3, r3
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fd fc4d 	bl	8007df8 <lwip_htons>
 800a55e:	4603      	mov	r3, r0
 800a560:	461a      	mov	r2, r3
 800a562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a564:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800a566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a568:	2200      	movs	r2, #0
 800a56a:	729a      	strb	r2, [r3, #10]
 800a56c:	2200      	movs	r2, #0
 800a56e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a578:	68b8      	ldr	r0, [r7, #8]
 800a57a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800a57c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a57e:	f001 fb3d 	bl	800bbfc <pbuf_free>
    left = (u16_t)(left - fragsize);
 800a582:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a586:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800a58e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a592:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a594:	4413      	add	r3, r2
 800a596:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800a59a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f47f af19 	bne.w	800a3d6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	e002      	b.n	800a5ae <ip4_frag+0x26a>
      goto memerr;
 800a5a8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800a5aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3748      	adds	r7, #72	@ 0x48
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	080130d4 	.word	0x080130d4
 800a5bc:	080132e8 	.word	0x080132e8
 800a5c0:	08013154 	.word	0x08013154
 800a5c4:	08013304 	.word	0x08013304
 800a5c8:	08013324 	.word	0x08013324
 800a5cc:	0800a2dd 	.word	0x0800a2dd

0800a5d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a5da:	4b05      	ldr	r3, [pc, #20]	@ (800a5f0 <ptr_to_mem+0x20>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	88fb      	ldrh	r3, [r7, #6]
 800a5e0:	4413      	add	r3, r2
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	24004d40 	.word	0x24004d40

0800a5f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a5fc:	4b05      	ldr	r3, [pc, #20]	@ (800a614 <mem_to_ptr+0x20>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	b29b      	uxth	r3, r3
}
 800a606:	4618      	mov	r0, r3
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	24004d40 	.word	0x24004d40

0800a618 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a620:	4b45      	ldr	r3, [pc, #276]	@ (800a738 <plug_holes+0x120>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	429a      	cmp	r2, r3
 800a628:	d206      	bcs.n	800a638 <plug_holes+0x20>
 800a62a:	4b44      	ldr	r3, [pc, #272]	@ (800a73c <plug_holes+0x124>)
 800a62c:	f240 12df 	movw	r2, #479	@ 0x1df
 800a630:	4943      	ldr	r1, [pc, #268]	@ (800a740 <plug_holes+0x128>)
 800a632:	4844      	ldr	r0, [pc, #272]	@ (800a744 <plug_holes+0x12c>)
 800a634:	f007 facc 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a638:	4b43      	ldr	r3, [pc, #268]	@ (800a748 <plug_holes+0x130>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d306      	bcc.n	800a650 <plug_holes+0x38>
 800a642:	4b3e      	ldr	r3, [pc, #248]	@ (800a73c <plug_holes+0x124>)
 800a644:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a648:	4940      	ldr	r1, [pc, #256]	@ (800a74c <plug_holes+0x134>)
 800a64a:	483e      	ldr	r0, [pc, #248]	@ (800a744 <plug_holes+0x12c>)
 800a64c:	f007 fac0 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	791b      	ldrb	r3, [r3, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d006      	beq.n	800a666 <plug_holes+0x4e>
 800a658:	4b38      	ldr	r3, [pc, #224]	@ (800a73c <plug_holes+0x124>)
 800a65a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a65e:	493c      	ldr	r1, [pc, #240]	@ (800a750 <plug_holes+0x138>)
 800a660:	4838      	ldr	r0, [pc, #224]	@ (800a744 <plug_holes+0x12c>)
 800a662:	f007 fab5 	bl	8011bd0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a66e:	d906      	bls.n	800a67e <plug_holes+0x66>
 800a670:	4b32      	ldr	r3, [pc, #200]	@ (800a73c <plug_holes+0x124>)
 800a672:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a676:	4937      	ldr	r1, [pc, #220]	@ (800a754 <plug_holes+0x13c>)
 800a678:	4832      	ldr	r0, [pc, #200]	@ (800a744 <plug_holes+0x12c>)
 800a67a:	f007 faa9 	bl	8011bd0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	4618      	mov	r0, r3
 800a684:	f7ff ffa4 	bl	800a5d0 <ptr_to_mem>
 800a688:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d024      	beq.n	800a6dc <plug_holes+0xc4>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	791b      	ldrb	r3, [r3, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d120      	bne.n	800a6dc <plug_holes+0xc4>
 800a69a:	4b2b      	ldr	r3, [pc, #172]	@ (800a748 <plug_holes+0x130>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d01b      	beq.n	800a6dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a6a4:	4b2c      	ldr	r3, [pc, #176]	@ (800a758 <plug_holes+0x140>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d102      	bne.n	800a6b4 <plug_holes+0x9c>
      lfree = mem;
 800a6ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a758 <plug_holes+0x140>)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	881a      	ldrh	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	881b      	ldrh	r3, [r3, #0]
 800a6c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a6c4:	d00a      	beq.n	800a6dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff ff80 	bl	800a5d0 <ptr_to_mem>
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff ff8e 	bl	800a5f4 <mem_to_ptr>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	885b      	ldrh	r3, [r3, #2]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff ff75 	bl	800a5d0 <ptr_to_mem>
 800a6e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d01f      	beq.n	800a730 <plug_holes+0x118>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	791b      	ldrb	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d11b      	bne.n	800a730 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a6f8:	4b17      	ldr	r3, [pc, #92]	@ (800a758 <plug_holes+0x140>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d102      	bne.n	800a708 <plug_holes+0xf0>
      lfree = pmem;
 800a702:	4a15      	ldr	r2, [pc, #84]	@ (800a758 <plug_holes+0x140>)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	881a      	ldrh	r2, [r3, #0]
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a718:	d00a      	beq.n	800a730 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff ff56 	bl	800a5d0 <ptr_to_mem>
 800a724:	4604      	mov	r4, r0
 800a726:	68b8      	ldr	r0, [r7, #8]
 800a728:	f7ff ff64 	bl	800a5f4 <mem_to_ptr>
 800a72c:	4603      	mov	r3, r0
 800a72e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a730:	bf00      	nop
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	bd90      	pop	{r4, r7, pc}
 800a738:	24004d40 	.word	0x24004d40
 800a73c:	08013334 	.word	0x08013334
 800a740:	080133a0 	.word	0x080133a0
 800a744:	080133b8 	.word	0x080133b8
 800a748:	24004d44 	.word	0x24004d44
 800a74c:	080133e0 	.word	0x080133e0
 800a750:	080133fc 	.word	0x080133fc
 800a754:	08013418 	.word	0x08013418
 800a758:	24004d48 	.word	0x24004d48

0800a75c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a762:	4b16      	ldr	r3, [pc, #88]	@ (800a7bc <mem_init+0x60>)
 800a764:	4a16      	ldr	r2, [pc, #88]	@ (800a7c0 <mem_init+0x64>)
 800a766:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a768:	4b14      	ldr	r3, [pc, #80]	@ (800a7bc <mem_init+0x60>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a774:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a782:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a786:	f7ff ff23 	bl	800a5d0 <ptr_to_mem>
 800a78a:	4603      	mov	r3, r0
 800a78c:	4a0d      	ldr	r2, [pc, #52]	@ (800a7c4 <mem_init+0x68>)
 800a78e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a790:	4b0c      	ldr	r3, [pc, #48]	@ (800a7c4 <mem_init+0x68>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2201      	movs	r2, #1
 800a796:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a798:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <mem_init+0x68>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a7a0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a7a2:	4b08      	ldr	r3, [pc, #32]	@ (800a7c4 <mem_init+0x68>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a7aa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a7ac:	4b03      	ldr	r3, [pc, #12]	@ (800a7bc <mem_init+0x60>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a05      	ldr	r2, [pc, #20]	@ (800a7c8 <mem_init+0x6c>)
 800a7b2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	24004d40 	.word	0x24004d40
 800a7c0:	30044000 	.word	0x30044000
 800a7c4:	24004d44 	.word	0x24004d44
 800a7c8:	24004d48 	.word	0x24004d48

0800a7cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff ff0d 	bl	800a5f4 <mem_to_ptr>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff fef4 	bl	800a5d0 <ptr_to_mem>
 800a7e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	885b      	ldrh	r3, [r3, #2]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff feee 	bl	800a5d0 <ptr_to_mem>
 800a7f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a7fe:	d818      	bhi.n	800a832 <mem_link_valid+0x66>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	885b      	ldrh	r3, [r3, #2]
 800a804:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a808:	d813      	bhi.n	800a832 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a80e:	8afa      	ldrh	r2, [r7, #22]
 800a810:	429a      	cmp	r2, r3
 800a812:	d004      	beq.n	800a81e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	8afa      	ldrh	r2, [r7, #22]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d109      	bne.n	800a832 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a81e:	4b08      	ldr	r3, [pc, #32]	@ (800a840 <mem_link_valid+0x74>)
 800a820:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	429a      	cmp	r2, r3
 800a826:	d006      	beq.n	800a836 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	885b      	ldrh	r3, [r3, #2]
 800a82c:	8afa      	ldrh	r2, [r7, #22]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d001      	beq.n	800a836 <mem_link_valid+0x6a>
    return 0;
 800a832:	2300      	movs	r3, #0
 800a834:	e000      	b.n	800a838 <mem_link_valid+0x6c>
  }
  return 1;
 800a836:	2301      	movs	r3, #1
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	24004d44 	.word	0x24004d44

0800a844 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d04c      	beq.n	800a8ec <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f003 0303 	and.w	r3, r3, #3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d007      	beq.n	800a86c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a85c:	4b25      	ldr	r3, [pc, #148]	@ (800a8f4 <mem_free+0xb0>)
 800a85e:	f240 2273 	movw	r2, #627	@ 0x273
 800a862:	4925      	ldr	r1, [pc, #148]	@ (800a8f8 <mem_free+0xb4>)
 800a864:	4825      	ldr	r0, [pc, #148]	@ (800a8fc <mem_free+0xb8>)
 800a866:	f007 f9b3 	bl	8011bd0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a86a:	e040      	b.n	800a8ee <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3b08      	subs	r3, #8
 800a870:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a872:	4b23      	ldr	r3, [pc, #140]	@ (800a900 <mem_free+0xbc>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d306      	bcc.n	800a88a <mem_free+0x46>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f103 020c 	add.w	r2, r3, #12
 800a882:	4b20      	ldr	r3, [pc, #128]	@ (800a904 <mem_free+0xc0>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	429a      	cmp	r2, r3
 800a888:	d907      	bls.n	800a89a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a88a:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f4 <mem_free+0xb0>)
 800a88c:	f240 227f 	movw	r2, #639	@ 0x27f
 800a890:	491d      	ldr	r1, [pc, #116]	@ (800a908 <mem_free+0xc4>)
 800a892:	481a      	ldr	r0, [pc, #104]	@ (800a8fc <mem_free+0xb8>)
 800a894:	f007 f99c 	bl	8011bd0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a898:	e029      	b.n	800a8ee <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d107      	bne.n	800a8b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a8a2:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <mem_free+0xb0>)
 800a8a4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a8a8:	4918      	ldr	r1, [pc, #96]	@ (800a90c <mem_free+0xc8>)
 800a8aa:	4814      	ldr	r0, [pc, #80]	@ (800a8fc <mem_free+0xb8>)
 800a8ac:	f007 f990 	bl	8011bd0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a8b0:	e01d      	b.n	800a8ee <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff ff8a 	bl	800a7cc <mem_link_valid>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d107      	bne.n	800a8ce <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a8be:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f4 <mem_free+0xb0>)
 800a8c0:	f240 2295 	movw	r2, #661	@ 0x295
 800a8c4:	4912      	ldr	r1, [pc, #72]	@ (800a910 <mem_free+0xcc>)
 800a8c6:	480d      	ldr	r0, [pc, #52]	@ (800a8fc <mem_free+0xb8>)
 800a8c8:	f007 f982 	bl	8011bd0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a8cc:	e00f      	b.n	800a8ee <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a914 <mem_free+0xd0>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d202      	bcs.n	800a8e4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a8de:	4a0d      	ldr	r2, [pc, #52]	@ (800a914 <mem_free+0xd0>)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7ff fe97 	bl	800a618 <plug_holes>
 800a8ea:	e000      	b.n	800a8ee <mem_free+0xaa>
    return;
 800a8ec:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	08013334 	.word	0x08013334
 800a8f8:	08013444 	.word	0x08013444
 800a8fc:	080133b8 	.word	0x080133b8
 800a900:	24004d40 	.word	0x24004d40
 800a904:	24004d44 	.word	0x24004d44
 800a908:	08013468 	.word	0x08013468
 800a90c:	08013484 	.word	0x08013484
 800a910:	080134ac 	.word	0x080134ac
 800a914:	24004d48 	.word	0x24004d48

0800a918 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b088      	sub	sp, #32
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a924:	887b      	ldrh	r3, [r7, #2]
 800a926:	3303      	adds	r3, #3
 800a928:	b29b      	uxth	r3, r3
 800a92a:	f023 0303 	bic.w	r3, r3, #3
 800a92e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a930:	8bfb      	ldrh	r3, [r7, #30]
 800a932:	2b0b      	cmp	r3, #11
 800a934:	d801      	bhi.n	800a93a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a936:	230c      	movs	r3, #12
 800a938:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a93a:	8bfb      	ldrh	r3, [r7, #30]
 800a93c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a940:	d803      	bhi.n	800a94a <mem_trim+0x32>
 800a942:	8bfa      	ldrh	r2, [r7, #30]
 800a944:	887b      	ldrh	r3, [r7, #2]
 800a946:	429a      	cmp	r2, r3
 800a948:	d201      	bcs.n	800a94e <mem_trim+0x36>
    return NULL;
 800a94a:	2300      	movs	r3, #0
 800a94c:	e0cc      	b.n	800aae8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a94e:	4b68      	ldr	r3, [pc, #416]	@ (800aaf0 <mem_trim+0x1d8>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	429a      	cmp	r2, r3
 800a956:	d304      	bcc.n	800a962 <mem_trim+0x4a>
 800a958:	4b66      	ldr	r3, [pc, #408]	@ (800aaf4 <mem_trim+0x1dc>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d306      	bcc.n	800a970 <mem_trim+0x58>
 800a962:	4b65      	ldr	r3, [pc, #404]	@ (800aaf8 <mem_trim+0x1e0>)
 800a964:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a968:	4964      	ldr	r1, [pc, #400]	@ (800aafc <mem_trim+0x1e4>)
 800a96a:	4865      	ldr	r0, [pc, #404]	@ (800ab00 <mem_trim+0x1e8>)
 800a96c:	f007 f930 	bl	8011bd0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a970:	4b5f      	ldr	r3, [pc, #380]	@ (800aaf0 <mem_trim+0x1d8>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	429a      	cmp	r2, r3
 800a978:	d304      	bcc.n	800a984 <mem_trim+0x6c>
 800a97a:	4b5e      	ldr	r3, [pc, #376]	@ (800aaf4 <mem_trim+0x1dc>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	429a      	cmp	r2, r3
 800a982:	d301      	bcc.n	800a988 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	e0af      	b.n	800aae8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3b08      	subs	r3, #8
 800a98c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a98e:	69b8      	ldr	r0, [r7, #24]
 800a990:	f7ff fe30 	bl	800a5f4 <mem_to_ptr>
 800a994:	4603      	mov	r3, r0
 800a996:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	881a      	ldrh	r2, [r3, #0]
 800a99c:	8afb      	ldrh	r3, [r7, #22]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	3b08      	subs	r3, #8
 800a9a4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a9a6:	8bfa      	ldrh	r2, [r7, #30]
 800a9a8:	8abb      	ldrh	r3, [r7, #20]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d906      	bls.n	800a9bc <mem_trim+0xa4>
 800a9ae:	4b52      	ldr	r3, [pc, #328]	@ (800aaf8 <mem_trim+0x1e0>)
 800a9b0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a9b4:	4953      	ldr	r1, [pc, #332]	@ (800ab04 <mem_trim+0x1ec>)
 800a9b6:	4852      	ldr	r0, [pc, #328]	@ (800ab00 <mem_trim+0x1e8>)
 800a9b8:	f007 f90a 	bl	8011bd0 <iprintf>
  if (newsize > size) {
 800a9bc:	8bfa      	ldrh	r2, [r7, #30]
 800a9be:	8abb      	ldrh	r3, [r7, #20]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d901      	bls.n	800a9c8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e08f      	b.n	800aae8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a9c8:	8bfa      	ldrh	r2, [r7, #30]
 800a9ca:	8abb      	ldrh	r3, [r7, #20]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d101      	bne.n	800a9d4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	e089      	b.n	800aae8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff fdf9 	bl	800a5d0 <ptr_to_mem>
 800a9de:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	791b      	ldrb	r3, [r3, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d13f      	bne.n	800aa68 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a9f0:	d106      	bne.n	800aa00 <mem_trim+0xe8>
 800a9f2:	4b41      	ldr	r3, [pc, #260]	@ (800aaf8 <mem_trim+0x1e0>)
 800a9f4:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a9f8:	4943      	ldr	r1, [pc, #268]	@ (800ab08 <mem_trim+0x1f0>)
 800a9fa:	4841      	ldr	r0, [pc, #260]	@ (800ab00 <mem_trim+0x1e8>)
 800a9fc:	f007 f8e8 	bl	8011bd0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aa06:	8afa      	ldrh	r2, [r7, #22]
 800aa08:	8bfb      	ldrh	r3, [r7, #30]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3308      	adds	r3, #8
 800aa10:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800aa12:	4b3e      	ldr	r3, [pc, #248]	@ (800ab0c <mem_trim+0x1f4>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d106      	bne.n	800aa2a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800aa1c:	89fb      	ldrh	r3, [r7, #14]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff fdd6 	bl	800a5d0 <ptr_to_mem>
 800aa24:	4603      	mov	r3, r0
 800aa26:	4a39      	ldr	r2, [pc, #228]	@ (800ab0c <mem_trim+0x1f4>)
 800aa28:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800aa2a:	89fb      	ldrh	r3, [r7, #14]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff fdcf 	bl	800a5d0 <ptr_to_mem>
 800aa32:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2200      	movs	r2, #0
 800aa38:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	89ba      	ldrh	r2, [r7, #12]
 800aa3e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	8afa      	ldrh	r2, [r7, #22]
 800aa44:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	89fa      	ldrh	r2, [r7, #14]
 800aa4a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aa54:	d047      	beq.n	800aae6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff fdb8 	bl	800a5d0 <ptr_to_mem>
 800aa60:	4602      	mov	r2, r0
 800aa62:	89fb      	ldrh	r3, [r7, #14]
 800aa64:	8053      	strh	r3, [r2, #2]
 800aa66:	e03e      	b.n	800aae6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aa68:	8bfb      	ldrh	r3, [r7, #30]
 800aa6a:	f103 0214 	add.w	r2, r3, #20
 800aa6e:	8abb      	ldrh	r3, [r7, #20]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d838      	bhi.n	800aae6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aa74:	8afa      	ldrh	r2, [r7, #22]
 800aa76:	8bfb      	ldrh	r3, [r7, #30]
 800aa78:	4413      	add	r3, r2
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	3308      	adds	r3, #8
 800aa7e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aa88:	d106      	bne.n	800aa98 <mem_trim+0x180>
 800aa8a:	4b1b      	ldr	r3, [pc, #108]	@ (800aaf8 <mem_trim+0x1e0>)
 800aa8c:	f240 3216 	movw	r2, #790	@ 0x316
 800aa90:	491d      	ldr	r1, [pc, #116]	@ (800ab08 <mem_trim+0x1f0>)
 800aa92:	481b      	ldr	r0, [pc, #108]	@ (800ab00 <mem_trim+0x1e8>)
 800aa94:	f007 f89c 	bl	8011bd0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800aa98:	89fb      	ldrh	r3, [r7, #14]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff fd98 	bl	800a5d0 <ptr_to_mem>
 800aaa0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aaa2:	4b1a      	ldr	r3, [pc, #104]	@ (800ab0c <mem_trim+0x1f4>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d202      	bcs.n	800aab2 <mem_trim+0x19a>
      lfree = mem2;
 800aaac:	4a17      	ldr	r2, [pc, #92]	@ (800ab0c <mem_trim+0x1f4>)
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	2200      	movs	r2, #0
 800aab6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	881a      	ldrh	r2, [r3, #0]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	8afa      	ldrh	r2, [r7, #22]
 800aac4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	89fa      	ldrh	r2, [r7, #14]
 800aaca:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aad4:	d007      	beq.n	800aae6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fd78 	bl	800a5d0 <ptr_to_mem>
 800aae0:	4602      	mov	r2, r0
 800aae2:	89fb      	ldrh	r3, [r7, #14]
 800aae4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800aae6:	687b      	ldr	r3, [r7, #4]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3720      	adds	r7, #32
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	24004d40 	.word	0x24004d40
 800aaf4:	24004d44 	.word	0x24004d44
 800aaf8:	08013334 	.word	0x08013334
 800aafc:	080134e0 	.word	0x080134e0
 800ab00:	080133b8 	.word	0x080133b8
 800ab04:	080134f8 	.word	0x080134f8
 800ab08:	08013518 	.word	0x08013518
 800ab0c:	24004d48 	.word	0x24004d48

0800ab10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ab1a:	88fb      	ldrh	r3, [r7, #6]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <mem_malloc+0x14>
    return NULL;
 800ab20:	2300      	movs	r3, #0
 800ab22:	e0d9      	b.n	800acd8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	3303      	adds	r3, #3
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	f023 0303 	bic.w	r3, r3, #3
 800ab2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ab30:	8bbb      	ldrh	r3, [r7, #28]
 800ab32:	2b0b      	cmp	r3, #11
 800ab34:	d801      	bhi.n	800ab3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ab36:	230c      	movs	r3, #12
 800ab38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ab3a:	8bbb      	ldrh	r3, [r7, #28]
 800ab3c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ab40:	d803      	bhi.n	800ab4a <mem_malloc+0x3a>
 800ab42:	8bba      	ldrh	r2, [r7, #28]
 800ab44:	88fb      	ldrh	r3, [r7, #6]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d201      	bcs.n	800ab4e <mem_malloc+0x3e>
    return NULL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e0c4      	b.n	800acd8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab4e:	4b64      	ldr	r3, [pc, #400]	@ (800ace0 <mem_malloc+0x1d0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7ff fd4e 	bl	800a5f4 <mem_to_ptr>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	83fb      	strh	r3, [r7, #30]
 800ab5c:	e0b4      	b.n	800acc8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ab5e:	8bfb      	ldrh	r3, [r7, #30]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff fd35 	bl	800a5d0 <ptr_to_mem>
 800ab66:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	791b      	ldrb	r3, [r3, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 80a4 	bne.w	800acba <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	8bfb      	ldrh	r3, [r7, #30]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	f1a3 0208 	sub.w	r2, r3, #8
 800ab80:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ab82:	429a      	cmp	r2, r3
 800ab84:	f0c0 8099 	bcc.w	800acba <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	8bfb      	ldrh	r3, [r7, #30]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	f1a3 0208 	sub.w	r2, r3, #8
 800ab96:	8bbb      	ldrh	r3, [r7, #28]
 800ab98:	3314      	adds	r3, #20
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d333      	bcc.n	800ac06 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ab9e:	8bfa      	ldrh	r2, [r7, #30]
 800aba0:	8bbb      	ldrh	r3, [r7, #28]
 800aba2:	4413      	add	r3, r2
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3308      	adds	r3, #8
 800aba8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800abaa:	8a7b      	ldrh	r3, [r7, #18]
 800abac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800abb0:	d106      	bne.n	800abc0 <mem_malloc+0xb0>
 800abb2:	4b4c      	ldr	r3, [pc, #304]	@ (800ace4 <mem_malloc+0x1d4>)
 800abb4:	f240 3287 	movw	r2, #903	@ 0x387
 800abb8:	494b      	ldr	r1, [pc, #300]	@ (800ace8 <mem_malloc+0x1d8>)
 800abba:	484c      	ldr	r0, [pc, #304]	@ (800acec <mem_malloc+0x1dc>)
 800abbc:	f007 f808 	bl	8011bd0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800abc0:	8a7b      	ldrh	r3, [r7, #18]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff fd04 	bl	800a5d0 <ptr_to_mem>
 800abc8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	881a      	ldrh	r2, [r3, #0]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	8bfa      	ldrh	r2, [r7, #30]
 800abdc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	8a7a      	ldrh	r2, [r7, #18]
 800abe2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2201      	movs	r2, #1
 800abe8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800abf2:	d00b      	beq.n	800ac0c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff fce9 	bl	800a5d0 <ptr_to_mem>
 800abfe:	4602      	mov	r2, r0
 800ac00:	8a7b      	ldrh	r3, [r7, #18]
 800ac02:	8053      	strh	r3, [r2, #2]
 800ac04:	e002      	b.n	800ac0c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ac0c:	4b34      	ldr	r3, [pc, #208]	@ (800ace0 <mem_malloc+0x1d0>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d127      	bne.n	800ac66 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800ac16:	4b32      	ldr	r3, [pc, #200]	@ (800ace0 <mem_malloc+0x1d0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ac1c:	e005      	b.n	800ac2a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff fcd4 	bl	800a5d0 <ptr_to_mem>
 800ac28:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	791b      	ldrb	r3, [r3, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d004      	beq.n	800ac3c <mem_malloc+0x12c>
 800ac32:	4b2f      	ldr	r3, [pc, #188]	@ (800acf0 <mem_malloc+0x1e0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d1f0      	bne.n	800ac1e <mem_malloc+0x10e>
          }
          lfree = cur;
 800ac3c:	4a28      	ldr	r2, [pc, #160]	@ (800ace0 <mem_malloc+0x1d0>)
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ac42:	4b27      	ldr	r3, [pc, #156]	@ (800ace0 <mem_malloc+0x1d0>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	4b2a      	ldr	r3, [pc, #168]	@ (800acf0 <mem_malloc+0x1e0>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d00b      	beq.n	800ac66 <mem_malloc+0x156>
 800ac4e:	4b24      	ldr	r3, [pc, #144]	@ (800ace0 <mem_malloc+0x1d0>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	791b      	ldrb	r3, [r3, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d006      	beq.n	800ac66 <mem_malloc+0x156>
 800ac58:	4b22      	ldr	r3, [pc, #136]	@ (800ace4 <mem_malloc+0x1d4>)
 800ac5a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800ac5e:	4925      	ldr	r1, [pc, #148]	@ (800acf4 <mem_malloc+0x1e4>)
 800ac60:	4822      	ldr	r0, [pc, #136]	@ (800acec <mem_malloc+0x1dc>)
 800ac62:	f006 ffb5 	bl	8011bd0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ac66:	8bba      	ldrh	r2, [r7, #28]
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	4a20      	ldr	r2, [pc, #128]	@ (800acf0 <mem_malloc+0x1e0>)
 800ac70:	6812      	ldr	r2, [r2, #0]
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d906      	bls.n	800ac84 <mem_malloc+0x174>
 800ac76:	4b1b      	ldr	r3, [pc, #108]	@ (800ace4 <mem_malloc+0x1d4>)
 800ac78:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800ac7c:	491e      	ldr	r1, [pc, #120]	@ (800acf8 <mem_malloc+0x1e8>)
 800ac7e:	481b      	ldr	r0, [pc, #108]	@ (800acec <mem_malloc+0x1dc>)
 800ac80:	f006 ffa6 	bl	8011bd0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f003 0303 	and.w	r3, r3, #3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d006      	beq.n	800ac9c <mem_malloc+0x18c>
 800ac8e:	4b15      	ldr	r3, [pc, #84]	@ (800ace4 <mem_malloc+0x1d4>)
 800ac90:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800ac94:	4919      	ldr	r1, [pc, #100]	@ (800acfc <mem_malloc+0x1ec>)
 800ac96:	4815      	ldr	r0, [pc, #84]	@ (800acec <mem_malloc+0x1dc>)
 800ac98:	f006 ff9a 	bl	8011bd0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f003 0303 	and.w	r3, r3, #3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d006      	beq.n	800acb4 <mem_malloc+0x1a4>
 800aca6:	4b0f      	ldr	r3, [pc, #60]	@ (800ace4 <mem_malloc+0x1d4>)
 800aca8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800acac:	4914      	ldr	r1, [pc, #80]	@ (800ad00 <mem_malloc+0x1f0>)
 800acae:	480f      	ldr	r0, [pc, #60]	@ (800acec <mem_malloc+0x1dc>)
 800acb0:	f006 ff8e 	bl	8011bd0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	3308      	adds	r3, #8
 800acb8:	e00e      	b.n	800acd8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800acba:	8bfb      	ldrh	r3, [r7, #30]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fc87 	bl	800a5d0 <ptr_to_mem>
 800acc2:	4603      	mov	r3, r0
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800acc8:	8bfa      	ldrh	r2, [r7, #30]
 800acca:	8bbb      	ldrh	r3, [r7, #28]
 800accc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800acd0:	429a      	cmp	r2, r3
 800acd2:	f4ff af44 	bcc.w	800ab5e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3720      	adds	r7, #32
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	24004d48 	.word	0x24004d48
 800ace4:	08013334 	.word	0x08013334
 800ace8:	08013518 	.word	0x08013518
 800acec:	080133b8 	.word	0x080133b8
 800acf0:	24004d44 	.word	0x24004d44
 800acf4:	0801352c 	.word	0x0801352c
 800acf8:	08013548 	.word	0x08013548
 800acfc:	08013578 	.word	0x08013578
 800ad00:	080135a8 	.word	0x080135a8

0800ad04 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	3303      	adds	r3, #3
 800ad1a:	f023 0303 	bic.w	r3, r3, #3
 800ad1e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ad20:	2300      	movs	r3, #0
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	e011      	b.n	800ad4a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	4413      	add	r3, r2
 800ad42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3301      	adds	r3, #1
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4293      	cmp	r3, r2
 800ad54:	dbe7      	blt.n	800ad26 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ad56:	bf00      	nop
 800ad58:	bf00      	nop
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	80fb      	strh	r3, [r7, #6]
 800ad6e:	e009      	b.n	800ad84 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ad70:	88fb      	ldrh	r3, [r7, #6]
 800ad72:	4a08      	ldr	r2, [pc, #32]	@ (800ad94 <memp_init+0x30>)
 800ad74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff ffc3 	bl	800ad04 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad7e:	88fb      	ldrh	r3, [r7, #6]
 800ad80:	3301      	adds	r3, #1
 800ad82:	80fb      	strh	r3, [r7, #6]
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	d9f2      	bls.n	800ad70 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ad8a:	bf00      	nop
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	080158d8 	.word	0x080158d8

0800ad98 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d012      	beq.n	800add4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	6812      	ldr	r2, [r2, #0]
 800adb6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f003 0303 	and.w	r3, r3, #3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d006      	beq.n	800add0 <do_memp_malloc_pool+0x38>
 800adc2:	4b07      	ldr	r3, [pc, #28]	@ (800ade0 <do_memp_malloc_pool+0x48>)
 800adc4:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800adc8:	4906      	ldr	r1, [pc, #24]	@ (800ade4 <do_memp_malloc_pool+0x4c>)
 800adca:	4807      	ldr	r0, [pc, #28]	@ (800ade8 <do_memp_malloc_pool+0x50>)
 800adcc:	f006 ff00 	bl	8011bd0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	e000      	b.n	800add6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	080135cc 	.word	0x080135cc
 800ade4:	08013638 	.word	0x08013638
 800ade8:	0801365c 	.word	0x0801365c

0800adec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d106      	bne.n	800ae08 <memp_malloc_pool+0x1c>
 800adfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ae24 <memp_malloc_pool+0x38>)
 800adfc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ae00:	4909      	ldr	r1, [pc, #36]	@ (800ae28 <memp_malloc_pool+0x3c>)
 800ae02:	480a      	ldr	r0, [pc, #40]	@ (800ae2c <memp_malloc_pool+0x40>)
 800ae04:	f006 fee4 	bl	8011bd0 <iprintf>
  if (desc == NULL) {
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d101      	bne.n	800ae12 <memp_malloc_pool+0x26>
    return NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e003      	b.n	800ae1a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7ff ffc0 	bl	800ad98 <do_memp_malloc_pool>
 800ae18:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	080135cc 	.word	0x080135cc
 800ae28:	08013684 	.word	0x08013684
 800ae2c:	0801365c 	.word	0x0801365c

0800ae30 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	d908      	bls.n	800ae52 <memp_malloc+0x22>
 800ae40:	4b0a      	ldr	r3, [pc, #40]	@ (800ae6c <memp_malloc+0x3c>)
 800ae42:	f240 1257 	movw	r2, #343	@ 0x157
 800ae46:	490a      	ldr	r1, [pc, #40]	@ (800ae70 <memp_malloc+0x40>)
 800ae48:	480a      	ldr	r0, [pc, #40]	@ (800ae74 <memp_malloc+0x44>)
 800ae4a:	f006 fec1 	bl	8011bd0 <iprintf>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e008      	b.n	800ae64 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ae52:	79fb      	ldrb	r3, [r7, #7]
 800ae54:	4a08      	ldr	r2, [pc, #32]	@ (800ae78 <memp_malloc+0x48>)
 800ae56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff ff9c 	bl	800ad98 <do_memp_malloc_pool>
 800ae60:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ae62:	68fb      	ldr	r3, [r7, #12]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	080135cc 	.word	0x080135cc
 800ae70:	08013698 	.word	0x08013698
 800ae74:	0801365c 	.word	0x0801365c
 800ae78:	080158d8 	.word	0x080158d8

0800ae7c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	f003 0303 	and.w	r3, r3, #3
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d006      	beq.n	800ae9e <do_memp_free_pool+0x22>
 800ae90:	4b0a      	ldr	r3, [pc, #40]	@ (800aebc <do_memp_free_pool+0x40>)
 800ae92:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ae96:	490a      	ldr	r1, [pc, #40]	@ (800aec0 <do_memp_free_pool+0x44>)
 800ae98:	480a      	ldr	r0, [pc, #40]	@ (800aec4 <do_memp_free_pool+0x48>)
 800ae9a:	f006 fe99 	bl	8011bd0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800aeb4:	bf00      	nop
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	080135cc 	.word	0x080135cc
 800aec0:	080136b8 	.word	0x080136b8
 800aec4:	0801365c 	.word	0x0801365c

0800aec8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d106      	bne.n	800aee6 <memp_free_pool+0x1e>
 800aed8:	4b0a      	ldr	r3, [pc, #40]	@ (800af04 <memp_free_pool+0x3c>)
 800aeda:	f240 1295 	movw	r2, #405	@ 0x195
 800aede:	490a      	ldr	r1, [pc, #40]	@ (800af08 <memp_free_pool+0x40>)
 800aee0:	480a      	ldr	r0, [pc, #40]	@ (800af0c <memp_free_pool+0x44>)
 800aee2:	f006 fe75 	bl	8011bd0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d007      	beq.n	800aefc <memp_free_pool+0x34>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d004      	beq.n	800aefc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff ffc1 	bl	800ae7c <do_memp_free_pool>
 800aefa:	e000      	b.n	800aefe <memp_free_pool+0x36>
    return;
 800aefc:	bf00      	nop
}
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	080135cc 	.word	0x080135cc
 800af08:	08013684 	.word	0x08013684
 800af0c:	0801365c 	.word	0x0801365c

0800af10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	6039      	str	r1, [r7, #0]
 800af1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800af1c:	79fb      	ldrb	r3, [r7, #7]
 800af1e:	2b08      	cmp	r3, #8
 800af20:	d907      	bls.n	800af32 <memp_free+0x22>
 800af22:	4b0c      	ldr	r3, [pc, #48]	@ (800af54 <memp_free+0x44>)
 800af24:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800af28:	490b      	ldr	r1, [pc, #44]	@ (800af58 <memp_free+0x48>)
 800af2a:	480c      	ldr	r0, [pc, #48]	@ (800af5c <memp_free+0x4c>)
 800af2c:	f006 fe50 	bl	8011bd0 <iprintf>
 800af30:	e00c      	b.n	800af4c <memp_free+0x3c>

  if (mem == NULL) {
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d008      	beq.n	800af4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800af38:	79fb      	ldrb	r3, [r7, #7]
 800af3a:	4a09      	ldr	r2, [pc, #36]	@ (800af60 <memp_free+0x50>)
 800af3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff ff9a 	bl	800ae7c <do_memp_free_pool>
 800af48:	e000      	b.n	800af4c <memp_free+0x3c>
    return;
 800af4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	080135cc 	.word	0x080135cc
 800af58:	080136d8 	.word	0x080136d8
 800af5c:	0801365c 	.word	0x0801365c
 800af60:	080158d8 	.word	0x080158d8

0800af64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800af68:	bf00      	nop
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
	...

0800af74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d108      	bne.n	800af9a <netif_add+0x26>
 800af88:	4b57      	ldr	r3, [pc, #348]	@ (800b0e8 <netif_add+0x174>)
 800af8a:	f240 1227 	movw	r2, #295	@ 0x127
 800af8e:	4957      	ldr	r1, [pc, #348]	@ (800b0ec <netif_add+0x178>)
 800af90:	4857      	ldr	r0, [pc, #348]	@ (800b0f0 <netif_add+0x17c>)
 800af92:	f006 fe1d 	bl	8011bd0 <iprintf>
 800af96:	2300      	movs	r3, #0
 800af98:	e0a2      	b.n	800b0e0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d108      	bne.n	800afb2 <netif_add+0x3e>
 800afa0:	4b51      	ldr	r3, [pc, #324]	@ (800b0e8 <netif_add+0x174>)
 800afa2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800afa6:	4953      	ldr	r1, [pc, #332]	@ (800b0f4 <netif_add+0x180>)
 800afa8:	4851      	ldr	r0, [pc, #324]	@ (800b0f0 <netif_add+0x17c>)
 800afaa:	f006 fe11 	bl	8011bd0 <iprintf>
 800afae:	2300      	movs	r3, #0
 800afb0:	e096      	b.n	800b0e0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800afb8:	4b4f      	ldr	r3, [pc, #316]	@ (800b0f8 <netif_add+0x184>)
 800afba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800afc2:	4b4d      	ldr	r3, [pc, #308]	@ (800b0f8 <netif_add+0x184>)
 800afc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800afcc:	4b4a      	ldr	r3, [pc, #296]	@ (800b0f8 <netif_add+0x184>)
 800afce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	4a45      	ldr	r2, [pc, #276]	@ (800b0fc <netif_add+0x188>)
 800afe6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6a3a      	ldr	r2, [r7, #32]
 800b000:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b002:	4b3f      	ldr	r3, [pc, #252]	@ (800b100 <netif_add+0x18c>)
 800b004:	781a      	ldrb	r2, [r3, #0]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b010:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 f913 	bl	800b244 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	4798      	blx	r3
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <netif_add+0xba>
    return NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	e058      	b.n	800b0e0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b034:	2bff      	cmp	r3, #255	@ 0xff
 800b036:	d103      	bne.n	800b040 <netif_add+0xcc>
        netif->num = 0;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b044:	4b2f      	ldr	r3, [pc, #188]	@ (800b104 <netif_add+0x190>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	617b      	str	r3, [r7, #20]
 800b04a:	e02b      	b.n	800b0a4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	429a      	cmp	r2, r3
 800b052:	d106      	bne.n	800b062 <netif_add+0xee>
 800b054:	4b24      	ldr	r3, [pc, #144]	@ (800b0e8 <netif_add+0x174>)
 800b056:	f240 128b 	movw	r2, #395	@ 0x18b
 800b05a:	492b      	ldr	r1, [pc, #172]	@ (800b108 <netif_add+0x194>)
 800b05c:	4824      	ldr	r0, [pc, #144]	@ (800b0f0 <netif_add+0x17c>)
 800b05e:	f006 fdb7 	bl	8011bd0 <iprintf>
        num_netifs++;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	3301      	adds	r3, #1
 800b066:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	2bff      	cmp	r3, #255	@ 0xff
 800b06c:	dd06      	ble.n	800b07c <netif_add+0x108>
 800b06e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0e8 <netif_add+0x174>)
 800b070:	f240 128d 	movw	r2, #397	@ 0x18d
 800b074:	4925      	ldr	r1, [pc, #148]	@ (800b10c <netif_add+0x198>)
 800b076:	481e      	ldr	r0, [pc, #120]	@ (800b0f0 <netif_add+0x17c>)
 800b078:	f006 fdaa 	bl	8011bd0 <iprintf>
        if (netif2->num == netif->num) {
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b088:	429a      	cmp	r2, r3
 800b08a:	d108      	bne.n	800b09e <netif_add+0x12a>
          netif->num++;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b092:	3301      	adds	r3, #1
 800b094:	b2da      	uxtb	r2, r3
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b09c:	e005      	b.n	800b0aa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	617b      	str	r3, [r7, #20]
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1d0      	bne.n	800b04c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1be      	bne.n	800b02e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0b6:	2bfe      	cmp	r3, #254	@ 0xfe
 800b0b8:	d103      	bne.n	800b0c2 <netif_add+0x14e>
    netif_num = 0;
 800b0ba:	4b11      	ldr	r3, [pc, #68]	@ (800b100 <netif_add+0x18c>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	701a      	strb	r2, [r3, #0]
 800b0c0:	e006      	b.n	800b0d0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b100 <netif_add+0x18c>)
 800b0ce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b104 <netif_add+0x190>)
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b0d8:	4a0a      	ldr	r2, [pc, #40]	@ (800b104 <netif_add+0x190>)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b0de:	68fb      	ldr	r3, [r7, #12]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3718      	adds	r7, #24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	080136f4 	.word	0x080136f4
 800b0ec:	080137c0 	.word	0x080137c0
 800b0f0:	0801377c 	.word	0x0801377c
 800b0f4:	080137dc 	.word	0x080137dc
 800b0f8:	08015868 	.word	0x08015868
 800b0fc:	0800b51f 	.word	0x0800b51f
 800b100:	24007c40 	.word	0x24007c40
 800b104:	24007c38 	.word	0x24007c38
 800b108:	08013800 	.word	0x08013800
 800b10c:	08013814 	.word	0x08013814

0800b110 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f002 fb45 	bl	800d7ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f006 fc23 	bl	8011970 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <netif_do_set_ipaddr+0x20>
 800b146:	4b1d      	ldr	r3, [pc, #116]	@ (800b1bc <netif_do_set_ipaddr+0x88>)
 800b148:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b14c:	491c      	ldr	r1, [pc, #112]	@ (800b1c0 <netif_do_set_ipaddr+0x8c>)
 800b14e:	481d      	ldr	r0, [pc, #116]	@ (800b1c4 <netif_do_set_ipaddr+0x90>)
 800b150:	f006 fd3e 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d106      	bne.n	800b168 <netif_do_set_ipaddr+0x34>
 800b15a:	4b18      	ldr	r3, [pc, #96]	@ (800b1bc <netif_do_set_ipaddr+0x88>)
 800b15c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b160:	4917      	ldr	r1, [pc, #92]	@ (800b1c0 <netif_do_set_ipaddr+0x8c>)
 800b162:	4818      	ldr	r0, [pc, #96]	@ (800b1c4 <netif_do_set_ipaddr+0x90>)
 800b164:	f006 fd34 	bl	8011bd0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3304      	adds	r3, #4
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d01c      	beq.n	800b1b0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3304      	adds	r3, #4
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b186:	f107 0314 	add.w	r3, r7, #20
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff ffbf 	bl	800b110 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <netif_do_set_ipaddr+0x6a>
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	e000      	b.n	800b1a0 <netif_do_set_ipaddr+0x6c>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 f8d2 	bl	800b350 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e000      	b.n	800b1b2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	080136f4 	.word	0x080136f4
 800b1c0:	08013844 	.word	0x08013844
 800b1c4:	0801377c 	.word	0x0801377c

0800b1c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d00a      	beq.n	800b1f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <netif_do_set_netmask+0x26>
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	e000      	b.n	800b1f0 <netif_do_set_netmask+0x28>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e000      	b.n	800b1fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b206:	b480      	push	{r7}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	60f8      	str	r0, [r7, #12]
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	330c      	adds	r3, #12
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d00a      	beq.n	800b236 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d002      	beq.n	800b22c <netif_do_set_gw+0x26>
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	e000      	b.n	800b22e <netif_do_set_gw+0x28>
 800b22c:	2300      	movs	r3, #0
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b232:	2301      	movs	r3, #1
 800b234:	e000      	b.n	800b238 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
 800b250:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b252:	2300      	movs	r3, #0
 800b254:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b260:	4b1c      	ldr	r3, [pc, #112]	@ (800b2d4 <netif_set_addr+0x90>)
 800b262:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d101      	bne.n	800b26e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b26a:	4b1a      	ldr	r3, [pc, #104]	@ (800b2d4 <netif_set_addr+0x90>)
 800b26c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b274:	4b17      	ldr	r3, [pc, #92]	@ (800b2d4 <netif_set_addr+0x90>)
 800b276:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d003      	beq.n	800b286 <netif_set_addr+0x42>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <netif_set_addr+0x46>
 800b286:	2301      	movs	r3, #1
 800b288:	e000      	b.n	800b28c <netif_set_addr+0x48>
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b294:	f107 0310 	add.w	r3, r7, #16
 800b298:	461a      	mov	r2, r3
 800b29a:	68b9      	ldr	r1, [r7, #8]
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f7ff ff49 	bl	800b134 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b2a2:	69fa      	ldr	r2, [r7, #28]
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f7ff ff8e 	bl	800b1c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f7ff ffa8 	bl	800b206 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d106      	bne.n	800b2ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b2bc:	f107 0310 	add.w	r3, r7, #16
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	68b9      	ldr	r1, [r7, #8]
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff ff35 	bl	800b134 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b2ca:	bf00      	nop
 800b2cc:	3720      	adds	r7, #32
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	08015868 	.word	0x08015868

0800b2d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b2e0:	4a04      	ldr	r2, [pc, #16]	@ (800b2f4 <netif_set_default+0x1c>)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	24007c3c 	.word	0x24007c3c

0800b2f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d107      	bne.n	800b316 <netif_set_up+0x1e>
 800b306:	4b0f      	ldr	r3, [pc, #60]	@ (800b344 <netif_set_up+0x4c>)
 800b308:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b30c:	490e      	ldr	r1, [pc, #56]	@ (800b348 <netif_set_up+0x50>)
 800b30e:	480f      	ldr	r0, [pc, #60]	@ (800b34c <netif_set_up+0x54>)
 800b310:	f006 fc5e 	bl	8011bd0 <iprintf>
 800b314:	e013      	b.n	800b33e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b31c:	f003 0301 	and.w	r3, r3, #1
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10c      	bne.n	800b33e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b32a:	f043 0301 	orr.w	r3, r3, #1
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b336:	2103      	movs	r1, #3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f809 	bl	800b350 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	080136f4 	.word	0x080136f4
 800b348:	080138b4 	.word	0x080138b4
 800b34c:	0801377c 	.word	0x0801377c

0800b350 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <netif_issue_reports+0x20>
 800b362:	4b18      	ldr	r3, [pc, #96]	@ (800b3c4 <netif_issue_reports+0x74>)
 800b364:	f240 326d 	movw	r2, #877	@ 0x36d
 800b368:	4917      	ldr	r1, [pc, #92]	@ (800b3c8 <netif_issue_reports+0x78>)
 800b36a:	4818      	ldr	r0, [pc, #96]	@ (800b3cc <netif_issue_reports+0x7c>)
 800b36c:	f006 fc30 	bl	8011bd0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b376:	f003 0304 	and.w	r3, r3, #4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d01e      	beq.n	800b3bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b384:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d017      	beq.n	800b3bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b38c:	78fb      	ldrb	r3, [r7, #3]
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	d013      	beq.n	800b3be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3304      	adds	r3, #4
 800b39a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00e      	beq.n	800b3be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b3a6:	f003 0308 	and.w	r3, r3, #8
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d007      	beq.n	800b3be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7fd fc87 	bl	8008cc8 <etharp_request>
 800b3ba:	e000      	b.n	800b3be <netif_issue_reports+0x6e>
    return;
 800b3bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	080136f4 	.word	0x080136f4
 800b3c8:	080138d0 	.word	0x080138d0
 800b3cc:	0801377c 	.word	0x0801377c

0800b3d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d107      	bne.n	800b3ee <netif_set_down+0x1e>
 800b3de:	4b12      	ldr	r3, [pc, #72]	@ (800b428 <netif_set_down+0x58>)
 800b3e0:	f240 329b 	movw	r2, #923	@ 0x39b
 800b3e4:	4911      	ldr	r1, [pc, #68]	@ (800b42c <netif_set_down+0x5c>)
 800b3e6:	4812      	ldr	r0, [pc, #72]	@ (800b430 <netif_set_down+0x60>)
 800b3e8:	f006 fbf2 	bl	8011bd0 <iprintf>
 800b3ec:	e019      	b.n	800b422 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d012      	beq.n	800b422 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b402:	f023 0301 	bic.w	r3, r3, #1
 800b406:	b2da      	uxtb	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b414:	f003 0308 	and.w	r3, r3, #8
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fd f811 	bl	8008444 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	080136f4 	.word	0x080136f4
 800b42c:	080138f4 	.word	0x080138f4
 800b430:	0801377c 	.word	0x0801377c

0800b434 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d107      	bne.n	800b452 <netif_set_link_up+0x1e>
 800b442:	4b13      	ldr	r3, [pc, #76]	@ (800b490 <netif_set_link_up+0x5c>)
 800b444:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b448:	4912      	ldr	r1, [pc, #72]	@ (800b494 <netif_set_link_up+0x60>)
 800b44a:	4813      	ldr	r0, [pc, #76]	@ (800b498 <netif_set_link_up+0x64>)
 800b44c:	f006 fbc0 	bl	8011bd0 <iprintf>
 800b450:	e01b      	b.n	800b48a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d114      	bne.n	800b48a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b466:	f043 0304 	orr.w	r3, r3, #4
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b472:	2103      	movs	r1, #3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7ff ff6b 	bl	800b350 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <netif_set_link_up+0x56>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	080136f4 	.word	0x080136f4
 800b494:	08013914 	.word	0x08013914
 800b498:	0801377c 	.word	0x0801377c

0800b49c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d107      	bne.n	800b4ba <netif_set_link_down+0x1e>
 800b4aa:	4b11      	ldr	r3, [pc, #68]	@ (800b4f0 <netif_set_link_down+0x54>)
 800b4ac:	f240 4206 	movw	r2, #1030	@ 0x406
 800b4b0:	4910      	ldr	r1, [pc, #64]	@ (800b4f4 <netif_set_link_down+0x58>)
 800b4b2:	4811      	ldr	r0, [pc, #68]	@ (800b4f8 <netif_set_link_down+0x5c>)
 800b4b4:	f006 fb8c 	bl	8011bd0 <iprintf>
 800b4b8:	e017      	b.n	800b4ea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b4c0:	f003 0304 	and.w	r3, r3, #4
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d010      	beq.n	800b4ea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b4ce:	f023 0304 	bic.w	r3, r3, #4
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <netif_set_link_down+0x4e>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	69db      	ldr	r3, [r3, #28]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	080136f4 	.word	0x080136f4
 800b4f4:	08013938 	.word	0x08013938
 800b4f8:	0801377c 	.word	0x0801377c

0800b4fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	61da      	str	r2, [r3, #28]
  }
}
 800b512:	bf00      	nop
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b51e:	b480      	push	{r7}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b52a:	f06f 030b 	mvn.w	r3, #11
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
	...

0800b53c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b546:	79fb      	ldrb	r3, [r7, #7]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d013      	beq.n	800b574 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b54c:	4b0d      	ldr	r3, [pc, #52]	@ (800b584 <netif_get_by_index+0x48>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	60fb      	str	r3, [r7, #12]
 800b552:	e00c      	b.n	800b56e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b55a:	3301      	adds	r3, #1
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	79fa      	ldrb	r2, [r7, #7]
 800b560:	429a      	cmp	r2, r3
 800b562:	d101      	bne.n	800b568 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	e006      	b.n	800b576 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1ef      	bne.n	800b554 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	24007c38 	.word	0x24007c38

0800b588 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b58e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <pbuf_free_ooseq+0x38>)
 800b590:	2200      	movs	r2, #0
 800b592:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b594:	4b0b      	ldr	r3, [pc, #44]	@ (800b5c4 <pbuf_free_ooseq+0x3c>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	607b      	str	r3, [r7, #4]
 800b59a:	e00a      	b.n	800b5b2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f002 f93f 	bl	800d828 <tcp_free_ooseq>
      return;
 800b5aa:	e005      	b.n	800b5b8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	607b      	str	r3, [r7, #4]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1f1      	bne.n	800b59c <pbuf_free_ooseq+0x14>
    }
  }
}
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	24007c41 	.word	0x24007c41
 800b5c4:	24007c50 	.word	0x24007c50

0800b5c8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b5cc:	4b03      	ldr	r3, [pc, #12]	@ (800b5dc <pbuf_pool_is_empty+0x14>)
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b5d2:	bf00      	nop
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	24007c41 	.word	0x24007c41

0800b5e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	80fb      	strh	r3, [r7, #6]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	88fa      	ldrh	r2, [r7, #6]
 800b606:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	88ba      	ldrh	r2, [r7, #4]
 800b60c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b60e:	8b3b      	ldrh	r3, [r7, #24]
 800b610:	b2da      	uxtb	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	7f3a      	ldrb	r2, [r7, #28]
 800b61a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2201      	movs	r2, #1
 800b620:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	73da      	strb	r2, [r3, #15]
}
 800b628:	bf00      	nop
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08c      	sub	sp, #48	@ 0x30
 800b638:	af02      	add	r7, sp, #8
 800b63a:	4603      	mov	r3, r0
 800b63c:	71fb      	strb	r3, [r7, #7]
 800b63e:	460b      	mov	r3, r1
 800b640:	80bb      	strh	r3, [r7, #4]
 800b642:	4613      	mov	r3, r2
 800b644:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b64a:	887b      	ldrh	r3, [r7, #2]
 800b64c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b650:	d07f      	beq.n	800b752 <pbuf_alloc+0x11e>
 800b652:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b656:	f300 80c8 	bgt.w	800b7ea <pbuf_alloc+0x1b6>
 800b65a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b65e:	d010      	beq.n	800b682 <pbuf_alloc+0x4e>
 800b660:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b664:	f300 80c1 	bgt.w	800b7ea <pbuf_alloc+0x1b6>
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d002      	beq.n	800b672 <pbuf_alloc+0x3e>
 800b66c:	2b41      	cmp	r3, #65	@ 0x41
 800b66e:	f040 80bc 	bne.w	800b7ea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b672:	887a      	ldrh	r2, [r7, #2]
 800b674:	88bb      	ldrh	r3, [r7, #4]
 800b676:	4619      	mov	r1, r3
 800b678:	2000      	movs	r0, #0
 800b67a:	f000 f8d1 	bl	800b820 <pbuf_alloc_reference>
 800b67e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b680:	e0bd      	b.n	800b7fe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b682:	2300      	movs	r3, #0
 800b684:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b686:	2300      	movs	r3, #0
 800b688:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b68a:	88bb      	ldrh	r3, [r7, #4]
 800b68c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b68e:	2008      	movs	r0, #8
 800b690:	f7ff fbce 	bl	800ae30 <memp_malloc>
 800b694:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d109      	bne.n	800b6b0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b69c:	f7ff ff94 	bl	800b5c8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <pbuf_alloc+0x78>
            pbuf_free(p);
 800b6a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b6a8:	f000 faa8 	bl	800bbfc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	e0a7      	b.n	800b800 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b6b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6b2:	3303      	adds	r3, #3
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	f023 0303 	bic.w	r3, r3, #3
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	8b7a      	ldrh	r2, [r7, #26]
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	bf28      	it	cs
 800b6c8:	4613      	movcs	r3, r2
 800b6ca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b6cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6ce:	3310      	adds	r3, #16
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	3303      	adds	r3, #3
 800b6d6:	f023 0303 	bic.w	r3, r3, #3
 800b6da:	4618      	mov	r0, r3
 800b6dc:	89f9      	ldrh	r1, [r7, #14]
 800b6de:	8b7a      	ldrh	r2, [r7, #26]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	887b      	ldrh	r3, [r7, #2]
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	6938      	ldr	r0, [r7, #16]
 800b6ee:	f7ff ff77 	bl	800b5e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f003 0303 	and.w	r3, r3, #3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d006      	beq.n	800b70c <pbuf_alloc+0xd8>
 800b6fe:	4b42      	ldr	r3, [pc, #264]	@ (800b808 <pbuf_alloc+0x1d4>)
 800b700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b704:	4941      	ldr	r1, [pc, #260]	@ (800b80c <pbuf_alloc+0x1d8>)
 800b706:	4842      	ldr	r0, [pc, #264]	@ (800b810 <pbuf_alloc+0x1dc>)
 800b708:	f006 fa62 	bl	8011bd0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b70c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b70e:	3303      	adds	r3, #3
 800b710:	f023 0303 	bic.w	r3, r3, #3
 800b714:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b718:	d106      	bne.n	800b728 <pbuf_alloc+0xf4>
 800b71a:	4b3b      	ldr	r3, [pc, #236]	@ (800b808 <pbuf_alloc+0x1d4>)
 800b71c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b720:	493c      	ldr	r1, [pc, #240]	@ (800b814 <pbuf_alloc+0x1e0>)
 800b722:	483b      	ldr	r0, [pc, #236]	@ (800b810 <pbuf_alloc+0x1dc>)
 800b724:	f006 fa54 	bl	8011bd0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d102      	bne.n	800b734 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	627b      	str	r3, [r7, #36]	@ 0x24
 800b732:	e002      	b.n	800b73a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b73e:	8b7a      	ldrh	r2, [r7, #26]
 800b740:	89fb      	ldrh	r3, [r7, #14]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b74a:	8b7b      	ldrh	r3, [r7, #26]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d19e      	bne.n	800b68e <pbuf_alloc+0x5a>
      break;
 800b750:	e055      	b.n	800b7fe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b752:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b754:	3303      	adds	r3, #3
 800b756:	b29b      	uxth	r3, r3
 800b758:	f023 0303 	bic.w	r3, r3, #3
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	88bb      	ldrh	r3, [r7, #4]
 800b760:	3303      	adds	r3, #3
 800b762:	b29b      	uxth	r3, r3
 800b764:	f023 0303 	bic.w	r3, r3, #3
 800b768:	b29b      	uxth	r3, r3
 800b76a:	4413      	add	r3, r2
 800b76c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b76e:	8b3b      	ldrh	r3, [r7, #24]
 800b770:	3310      	adds	r3, #16
 800b772:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b774:	8b3a      	ldrh	r2, [r7, #24]
 800b776:	88bb      	ldrh	r3, [r7, #4]
 800b778:	3303      	adds	r3, #3
 800b77a:	f023 0303 	bic.w	r3, r3, #3
 800b77e:	429a      	cmp	r2, r3
 800b780:	d306      	bcc.n	800b790 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b782:	8afa      	ldrh	r2, [r7, #22]
 800b784:	88bb      	ldrh	r3, [r7, #4]
 800b786:	3303      	adds	r3, #3
 800b788:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d201      	bcs.n	800b794 <pbuf_alloc+0x160>
        return NULL;
 800b790:	2300      	movs	r3, #0
 800b792:	e035      	b.n	800b800 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b794:	8afb      	ldrh	r3, [r7, #22]
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff f9ba 	bl	800ab10 <mem_malloc>
 800b79c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <pbuf_alloc+0x174>
        return NULL;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	e02b      	b.n	800b800 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b7a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b7aa:	3310      	adds	r3, #16
 800b7ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7ae:	4413      	add	r3, r2
 800b7b0:	3303      	adds	r3, #3
 800b7b2:	f023 0303 	bic.w	r3, r3, #3
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	88b9      	ldrh	r1, [r7, #4]
 800b7ba:	88ba      	ldrh	r2, [r7, #4]
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	887b      	ldrh	r3, [r7, #2]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4601      	mov	r1, r0
 800b7c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7ca:	f7ff ff09 	bl	800b5e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f003 0303 	and.w	r3, r3, #3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d010      	beq.n	800b7fc <pbuf_alloc+0x1c8>
 800b7da:	4b0b      	ldr	r3, [pc, #44]	@ (800b808 <pbuf_alloc+0x1d4>)
 800b7dc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b7e0:	490d      	ldr	r1, [pc, #52]	@ (800b818 <pbuf_alloc+0x1e4>)
 800b7e2:	480b      	ldr	r0, [pc, #44]	@ (800b810 <pbuf_alloc+0x1dc>)
 800b7e4:	f006 f9f4 	bl	8011bd0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b7e8:	e008      	b.n	800b7fc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b7ea:	4b07      	ldr	r3, [pc, #28]	@ (800b808 <pbuf_alloc+0x1d4>)
 800b7ec:	f240 1227 	movw	r2, #295	@ 0x127
 800b7f0:	490a      	ldr	r1, [pc, #40]	@ (800b81c <pbuf_alloc+0x1e8>)
 800b7f2:	4807      	ldr	r0, [pc, #28]	@ (800b810 <pbuf_alloc+0x1dc>)
 800b7f4:	f006 f9ec 	bl	8011bd0 <iprintf>
      return NULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	e001      	b.n	800b800 <pbuf_alloc+0x1cc>
      break;
 800b7fc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b800:	4618      	mov	r0, r3
 800b802:	3728      	adds	r7, #40	@ 0x28
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	0801395c 	.word	0x0801395c
 800b80c:	080139c8 	.word	0x080139c8
 800b810:	080139f8 	.word	0x080139f8
 800b814:	08013a20 	.word	0x08013a20
 800b818:	08013a54 	.word	0x08013a54
 800b81c:	08013a80 	.word	0x08013a80

0800b820 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af02      	add	r7, sp, #8
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	460b      	mov	r3, r1
 800b82a:	807b      	strh	r3, [r7, #2]
 800b82c:	4613      	mov	r3, r2
 800b82e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b830:	883b      	ldrh	r3, [r7, #0]
 800b832:	2b41      	cmp	r3, #65	@ 0x41
 800b834:	d009      	beq.n	800b84a <pbuf_alloc_reference+0x2a>
 800b836:	883b      	ldrh	r3, [r7, #0]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d006      	beq.n	800b84a <pbuf_alloc_reference+0x2a>
 800b83c:	4b0f      	ldr	r3, [pc, #60]	@ (800b87c <pbuf_alloc_reference+0x5c>)
 800b83e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b842:	490f      	ldr	r1, [pc, #60]	@ (800b880 <pbuf_alloc_reference+0x60>)
 800b844:	480f      	ldr	r0, [pc, #60]	@ (800b884 <pbuf_alloc_reference+0x64>)
 800b846:	f006 f9c3 	bl	8011bd0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b84a:	2007      	movs	r0, #7
 800b84c:	f7ff faf0 	bl	800ae30 <memp_malloc>
 800b850:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b858:	2300      	movs	r3, #0
 800b85a:	e00b      	b.n	800b874 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b85c:	8879      	ldrh	r1, [r7, #2]
 800b85e:	887a      	ldrh	r2, [r7, #2]
 800b860:	2300      	movs	r3, #0
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	883b      	ldrh	r3, [r7, #0]
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	460b      	mov	r3, r1
 800b86a:	6879      	ldr	r1, [r7, #4]
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff feb7 	bl	800b5e0 <pbuf_init_alloced_pbuf>
  return p;
 800b872:	68fb      	ldr	r3, [r7, #12]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	0801395c 	.word	0x0801395c
 800b880:	08013a9c 	.word	0x08013a9c
 800b884:	080139f8 	.word	0x080139f8

0800b888 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	607b      	str	r3, [r7, #4]
 800b890:	4603      	mov	r3, r0
 800b892:	73fb      	strb	r3, [r7, #15]
 800b894:	460b      	mov	r3, r1
 800b896:	81bb      	strh	r3, [r7, #12]
 800b898:	4613      	mov	r3, r2
 800b89a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b8a0:	8a7b      	ldrh	r3, [r7, #18]
 800b8a2:	3303      	adds	r3, #3
 800b8a4:	f023 0203 	bic.w	r2, r3, #3
 800b8a8:	89bb      	ldrh	r3, [r7, #12]
 800b8aa:	441a      	add	r2, r3
 800b8ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d901      	bls.n	800b8b6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e018      	b.n	800b8e8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d007      	beq.n	800b8cc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b8bc:	8a7b      	ldrh	r3, [r7, #18]
 800b8be:	3303      	adds	r3, #3
 800b8c0:	f023 0303 	bic.w	r3, r3, #3
 800b8c4:	6a3a      	ldr	r2, [r7, #32]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	617b      	str	r3, [r7, #20]
 800b8ca:	e001      	b.n	800b8d0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	89b9      	ldrh	r1, [r7, #12]
 800b8d4:	89ba      	ldrh	r2, [r7, #12]
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	897b      	ldrh	r3, [r7, #10]
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	6979      	ldr	r1, [r7, #20]
 800b8e2:	f7ff fe7d 	bl	800b5e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b8e6:	687b      	ldr	r3, [r7, #4]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d106      	bne.n	800b910 <pbuf_realloc+0x20>
 800b902:	4b3a      	ldr	r3, [pc, #232]	@ (800b9ec <pbuf_realloc+0xfc>)
 800b904:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b908:	4939      	ldr	r1, [pc, #228]	@ (800b9f0 <pbuf_realloc+0x100>)
 800b90a:	483a      	ldr	r0, [pc, #232]	@ (800b9f4 <pbuf_realloc+0x104>)
 800b90c:	f006 f960 	bl	8011bd0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	891b      	ldrh	r3, [r3, #8]
 800b914:	887a      	ldrh	r2, [r7, #2]
 800b916:	429a      	cmp	r2, r3
 800b918:	d263      	bcs.n	800b9e2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	891a      	ldrh	r2, [r3, #8]
 800b91e:	887b      	ldrh	r3, [r7, #2]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b924:	887b      	ldrh	r3, [r7, #2]
 800b926:	817b      	strh	r3, [r7, #10]
  q = p;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b92c:	e018      	b.n	800b960 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	895b      	ldrh	r3, [r3, #10]
 800b932:	897a      	ldrh	r2, [r7, #10]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	891a      	ldrh	r2, [r3, #8]
 800b93c:	893b      	ldrh	r3, [r7, #8]
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	b29a      	uxth	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <pbuf_realloc+0x70>
 800b952:	4b26      	ldr	r3, [pc, #152]	@ (800b9ec <pbuf_realloc+0xfc>)
 800b954:	f240 12af 	movw	r2, #431	@ 0x1af
 800b958:	4927      	ldr	r1, [pc, #156]	@ (800b9f8 <pbuf_realloc+0x108>)
 800b95a:	4826      	ldr	r0, [pc, #152]	@ (800b9f4 <pbuf_realloc+0x104>)
 800b95c:	f006 f938 	bl	8011bd0 <iprintf>
  while (rem_len > q->len) {
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	895b      	ldrh	r3, [r3, #10]
 800b964:	897a      	ldrh	r2, [r7, #10]
 800b966:	429a      	cmp	r2, r3
 800b968:	d8e1      	bhi.n	800b92e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	7b1b      	ldrb	r3, [r3, #12]
 800b96e:	f003 030f 	and.w	r3, r3, #15
 800b972:	2b00      	cmp	r3, #0
 800b974:	d121      	bne.n	800b9ba <pbuf_realloc+0xca>
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	895b      	ldrh	r3, [r3, #10]
 800b97a:	897a      	ldrh	r2, [r7, #10]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d01c      	beq.n	800b9ba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	7b5b      	ldrb	r3, [r3, #13]
 800b984:	f003 0302 	and.w	r3, r3, #2
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d116      	bne.n	800b9ba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	b29a      	uxth	r2, r3
 800b996:	897b      	ldrh	r3, [r7, #10]
 800b998:	4413      	add	r3, r2
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	4619      	mov	r1, r3
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7fe ffba 	bl	800a918 <mem_trim>
 800b9a4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d106      	bne.n	800b9ba <pbuf_realloc+0xca>
 800b9ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b9ec <pbuf_realloc+0xfc>)
 800b9ae:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b9b2:	4912      	ldr	r1, [pc, #72]	@ (800b9fc <pbuf_realloc+0x10c>)
 800b9b4:	480f      	ldr	r0, [pc, #60]	@ (800b9f4 <pbuf_realloc+0x104>)
 800b9b6:	f006 f90b 	bl	8011bd0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	897a      	ldrh	r2, [r7, #10]
 800b9be:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	895a      	ldrh	r2, [r3, #10]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d004      	beq.n	800b9da <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 f911 	bl	800bbfc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	e000      	b.n	800b9e4 <pbuf_realloc+0xf4>
    return;
 800b9e2:	bf00      	nop

}
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	0801395c 	.word	0x0801395c
 800b9f0:	08013ab0 	.word	0x08013ab0
 800b9f4:	080139f8 	.word	0x080139f8
 800b9f8:	08013ac8 	.word	0x08013ac8
 800b9fc:	08013ae0 	.word	0x08013ae0

0800ba00 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d106      	bne.n	800ba22 <pbuf_add_header_impl+0x22>
 800ba14:	4b2b      	ldr	r3, [pc, #172]	@ (800bac4 <pbuf_add_header_impl+0xc4>)
 800ba16:	f240 12df 	movw	r2, #479	@ 0x1df
 800ba1a:	492b      	ldr	r1, [pc, #172]	@ (800bac8 <pbuf_add_header_impl+0xc8>)
 800ba1c:	482b      	ldr	r0, [pc, #172]	@ (800bacc <pbuf_add_header_impl+0xcc>)
 800ba1e:	f006 f8d7 	bl	8011bd0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d003      	beq.n	800ba30 <pbuf_add_header_impl+0x30>
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba2e:	d301      	bcc.n	800ba34 <pbuf_add_header_impl+0x34>
    return 1;
 800ba30:	2301      	movs	r3, #1
 800ba32:	e043      	b.n	800babc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <pbuf_add_header_impl+0x3e>
    return 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	e03e      	b.n	800babc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	891a      	ldrh	r2, [r3, #8]
 800ba46:	8a7b      	ldrh	r3, [r7, #18]
 800ba48:	4413      	add	r3, r2
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	8a7a      	ldrh	r2, [r7, #18]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d901      	bls.n	800ba56 <pbuf_add_header_impl+0x56>
    return 1;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e032      	b.n	800babc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	7b1b      	ldrb	r3, [r3, #12]
 800ba5a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ba5c:	8a3b      	ldrh	r3, [r7, #16]
 800ba5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00c      	beq.n	800ba80 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	685a      	ldr	r2, [r3, #4]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	425b      	negs	r3, r3
 800ba6e:	4413      	add	r3, r2
 800ba70:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3310      	adds	r3, #16
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d20d      	bcs.n	800ba98 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e01d      	b.n	800babc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ba80:	79fb      	ldrb	r3, [r7, #7]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d006      	beq.n	800ba94 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	685a      	ldr	r2, [r3, #4]
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	425b      	negs	r3, r3
 800ba8e:	4413      	add	r3, r2
 800ba90:	617b      	str	r3, [r7, #20]
 800ba92:	e001      	b.n	800ba98 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ba94:	2301      	movs	r3, #1
 800ba96:	e011      	b.n	800babc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	895a      	ldrh	r2, [r3, #10]
 800baa2:	8a7b      	ldrh	r3, [r7, #18]
 800baa4:	4413      	add	r3, r2
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	891a      	ldrh	r2, [r3, #8]
 800bab0:	8a7b      	ldrh	r3, [r7, #18]
 800bab2:	4413      	add	r3, r2
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	811a      	strh	r2, [r3, #8]


  return 0;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3718      	adds	r7, #24
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	0801395c 	.word	0x0801395c
 800bac8:	08013afc 	.word	0x08013afc
 800bacc:	080139f8 	.word	0x080139f8

0800bad0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bada:	2200      	movs	r2, #0
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7ff ff8e 	bl	800ba00 <pbuf_add_header_impl>
 800bae4:	4603      	mov	r3, r0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
	...

0800baf0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d106      	bne.n	800bb0e <pbuf_remove_header+0x1e>
 800bb00:	4b20      	ldr	r3, [pc, #128]	@ (800bb84 <pbuf_remove_header+0x94>)
 800bb02:	f240 224b 	movw	r2, #587	@ 0x24b
 800bb06:	4920      	ldr	r1, [pc, #128]	@ (800bb88 <pbuf_remove_header+0x98>)
 800bb08:	4820      	ldr	r0, [pc, #128]	@ (800bb8c <pbuf_remove_header+0x9c>)
 800bb0a:	f006 f861 	bl	8011bd0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <pbuf_remove_header+0x2c>
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb1a:	d301      	bcc.n	800bb20 <pbuf_remove_header+0x30>
    return 1;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e02c      	b.n	800bb7a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <pbuf_remove_header+0x3a>
    return 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	e027      	b.n	800bb7a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	895b      	ldrh	r3, [r3, #10]
 800bb32:	89fa      	ldrh	r2, [r7, #14]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d908      	bls.n	800bb4a <pbuf_remove_header+0x5a>
 800bb38:	4b12      	ldr	r3, [pc, #72]	@ (800bb84 <pbuf_remove_header+0x94>)
 800bb3a:	f240 2255 	movw	r2, #597	@ 0x255
 800bb3e:	4914      	ldr	r1, [pc, #80]	@ (800bb90 <pbuf_remove_header+0xa0>)
 800bb40:	4812      	ldr	r0, [pc, #72]	@ (800bb8c <pbuf_remove_header+0x9c>)
 800bb42:	f006 f845 	bl	8011bd0 <iprintf>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e017      	b.n	800bb7a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	441a      	add	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	895a      	ldrh	r2, [r3, #10]
 800bb60:	89fb      	ldrh	r3, [r7, #14]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	891a      	ldrh	r2, [r3, #8]
 800bb6e:	89fb      	ldrh	r3, [r7, #14]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	0801395c 	.word	0x0801395c
 800bb88:	08013afc 	.word	0x08013afc
 800bb8c:	080139f8 	.word	0x080139f8
 800bb90:	08013b08 	.word	0x08013b08

0800bb94 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	807b      	strh	r3, [r7, #2]
 800bba0:	4613      	mov	r3, r2
 800bba2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bba4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	da08      	bge.n	800bbbe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bbac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbb0:	425b      	negs	r3, r3
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7ff ff9b 	bl	800baf0 <pbuf_remove_header>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	e007      	b.n	800bbce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bbbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbc2:	787a      	ldrb	r2, [r7, #1]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff ff1a 	bl	800ba00 <pbuf_add_header_impl>
 800bbcc:	4603      	mov	r3, r0
  }
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b082      	sub	sp, #8
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bbe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff ffd2 	bl	800bb94 <pbuf_header_impl>
 800bbf0:	4603      	mov	r3, r0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
	...

0800bbfc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10b      	bne.n	800bc22 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d106      	bne.n	800bc1e <pbuf_free+0x22>
 800bc10:	4b38      	ldr	r3, [pc, #224]	@ (800bcf4 <pbuf_free+0xf8>)
 800bc12:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800bc16:	4938      	ldr	r1, [pc, #224]	@ (800bcf8 <pbuf_free+0xfc>)
 800bc18:	4838      	ldr	r0, [pc, #224]	@ (800bcfc <pbuf_free+0x100>)
 800bc1a:	f005 ffd9 	bl	8011bd0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e063      	b.n	800bcea <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bc26:	e05c      	b.n	800bce2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	7b9b      	ldrb	r3, [r3, #14]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d106      	bne.n	800bc3e <pbuf_free+0x42>
 800bc30:	4b30      	ldr	r3, [pc, #192]	@ (800bcf4 <pbuf_free+0xf8>)
 800bc32:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bc36:	4932      	ldr	r1, [pc, #200]	@ (800bd00 <pbuf_free+0x104>)
 800bc38:	4830      	ldr	r0, [pc, #192]	@ (800bcfc <pbuf_free+0x100>)
 800bc3a:	f005 ffc9 	bl	8011bd0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7b9b      	ldrb	r3, [r3, #14]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	739a      	strb	r2, [r3, #14]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	7b9b      	ldrb	r3, [r3, #14]
 800bc4e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bc50:	7dbb      	ldrb	r3, [r7, #22]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d143      	bne.n	800bcde <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	7b1b      	ldrb	r3, [r3, #12]
 800bc60:	f003 030f 	and.w	r3, r3, #15
 800bc64:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	7b5b      	ldrb	r3, [r3, #13]
 800bc6a:	f003 0302 	and.w	r3, r3, #2
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d011      	beq.n	800bc96 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d106      	bne.n	800bc8c <pbuf_free+0x90>
 800bc7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf4 <pbuf_free+0xf8>)
 800bc80:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bc84:	491f      	ldr	r1, [pc, #124]	@ (800bd04 <pbuf_free+0x108>)
 800bc86:	481d      	ldr	r0, [pc, #116]	@ (800bcfc <pbuf_free+0x100>)
 800bc88:	f005 ffa2 	bl	8011bd0 <iprintf>
        pc->custom_free_function(p);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	4798      	blx	r3
 800bc94:	e01d      	b.n	800bcd2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d104      	bne.n	800bca6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	2008      	movs	r0, #8
 800bca0:	f7ff f936 	bl	800af10 <memp_free>
 800bca4:	e015      	b.n	800bcd2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d104      	bne.n	800bcb6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800bcac:	6879      	ldr	r1, [r7, #4]
 800bcae:	2007      	movs	r0, #7
 800bcb0:	f7ff f92e 	bl	800af10 <memp_free>
 800bcb4:	e00d      	b.n	800bcd2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d103      	bne.n	800bcc4 <pbuf_free+0xc8>
          mem_free(p);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7fe fdc1 	bl	800a844 <mem_free>
 800bcc2:	e006      	b.n	800bcd2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bcc4:	4b0b      	ldr	r3, [pc, #44]	@ (800bcf4 <pbuf_free+0xf8>)
 800bcc6:	f240 320f 	movw	r2, #783	@ 0x30f
 800bcca:	490f      	ldr	r1, [pc, #60]	@ (800bd08 <pbuf_free+0x10c>)
 800bccc:	480b      	ldr	r0, [pc, #44]	@ (800bcfc <pbuf_free+0x100>)
 800bcce:	f005 ff7f 	bl	8011bd0 <iprintf>
        }
      }
      count++;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	607b      	str	r3, [r7, #4]
 800bcdc:	e001      	b.n	800bce2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d19f      	bne.n	800bc28 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	0801395c 	.word	0x0801395c
 800bcf8:	08013afc 	.word	0x08013afc
 800bcfc:	080139f8 	.word	0x080139f8
 800bd00:	08013b28 	.word	0x08013b28
 800bd04:	08013b40 	.word	0x08013b40
 800bd08:	08013b64 	.word	0x08013b64

0800bd0c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bd14:	2300      	movs	r3, #0
 800bd16:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bd18:	e005      	b.n	800bd26 <pbuf_clen+0x1a>
    ++len;
 800bd1a:	89fb      	ldrh	r3, [r7, #14]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1f6      	bne.n	800bd1a <pbuf_clen+0xe>
  }
  return len;
 800bd2c:	89fb      	ldrh	r3, [r7, #14]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
	...

0800bd3c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d010      	beq.n	800bd6c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	7b9b      	ldrb	r3, [r3, #14]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	7b9b      	ldrb	r3, [r3, #14]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d106      	bne.n	800bd6c <pbuf_ref+0x30>
 800bd5e:	4b05      	ldr	r3, [pc, #20]	@ (800bd74 <pbuf_ref+0x38>)
 800bd60:	f240 3242 	movw	r2, #834	@ 0x342
 800bd64:	4904      	ldr	r1, [pc, #16]	@ (800bd78 <pbuf_ref+0x3c>)
 800bd66:	4805      	ldr	r0, [pc, #20]	@ (800bd7c <pbuf_ref+0x40>)
 800bd68:	f005 ff32 	bl	8011bd0 <iprintf>
  }
}
 800bd6c:	bf00      	nop
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	0801395c 	.word	0x0801395c
 800bd78:	08013b78 	.word	0x08013b78
 800bd7c:	080139f8 	.word	0x080139f8

0800bd80 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d002      	beq.n	800bd96 <pbuf_cat+0x16>
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d107      	bne.n	800bda6 <pbuf_cat+0x26>
 800bd96:	4b20      	ldr	r3, [pc, #128]	@ (800be18 <pbuf_cat+0x98>)
 800bd98:	f240 3259 	movw	r2, #857	@ 0x359
 800bd9c:	491f      	ldr	r1, [pc, #124]	@ (800be1c <pbuf_cat+0x9c>)
 800bd9e:	4820      	ldr	r0, [pc, #128]	@ (800be20 <pbuf_cat+0xa0>)
 800bda0:	f005 ff16 	bl	8011bd0 <iprintf>
 800bda4:	e034      	b.n	800be10 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	e00a      	b.n	800bdc2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	891a      	ldrh	r2, [r3, #8]
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	891b      	ldrh	r3, [r3, #8]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	60fb      	str	r3, [r7, #12]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1f0      	bne.n	800bdac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	891a      	ldrh	r2, [r3, #8]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	895b      	ldrh	r3, [r3, #10]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d006      	beq.n	800bde4 <pbuf_cat+0x64>
 800bdd6:	4b10      	ldr	r3, [pc, #64]	@ (800be18 <pbuf_cat+0x98>)
 800bdd8:	f240 3262 	movw	r2, #866	@ 0x362
 800bddc:	4911      	ldr	r1, [pc, #68]	@ (800be24 <pbuf_cat+0xa4>)
 800bdde:	4810      	ldr	r0, [pc, #64]	@ (800be20 <pbuf_cat+0xa0>)
 800bde0:	f005 fef6 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d006      	beq.n	800bdfa <pbuf_cat+0x7a>
 800bdec:	4b0a      	ldr	r3, [pc, #40]	@ (800be18 <pbuf_cat+0x98>)
 800bdee:	f240 3263 	movw	r2, #867	@ 0x363
 800bdf2:	490d      	ldr	r1, [pc, #52]	@ (800be28 <pbuf_cat+0xa8>)
 800bdf4:	480a      	ldr	r0, [pc, #40]	@ (800be20 <pbuf_cat+0xa0>)
 800bdf6:	f005 feeb 	bl	8011bd0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	891a      	ldrh	r2, [r3, #8]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	891b      	ldrh	r3, [r3, #8]
 800be02:	4413      	add	r3, r2
 800be04:	b29a      	uxth	r2, r3
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	0801395c 	.word	0x0801395c
 800be1c:	08013b8c 	.word	0x08013b8c
 800be20:	080139f8 	.word	0x080139f8
 800be24:	08013bc4 	.word	0x08013bc4
 800be28:	08013bf4 	.word	0x08013bf4

0800be2c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	2300      	movs	r3, #0
 800be3c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d008      	beq.n	800be56 <pbuf_copy+0x2a>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d005      	beq.n	800be56 <pbuf_copy+0x2a>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	891a      	ldrh	r2, [r3, #8]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	891b      	ldrh	r3, [r3, #8]
 800be52:	429a      	cmp	r2, r3
 800be54:	d209      	bcs.n	800be6a <pbuf_copy+0x3e>
 800be56:	4b57      	ldr	r3, [pc, #348]	@ (800bfb4 <pbuf_copy+0x188>)
 800be58:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800be5c:	4956      	ldr	r1, [pc, #344]	@ (800bfb8 <pbuf_copy+0x18c>)
 800be5e:	4857      	ldr	r0, [pc, #348]	@ (800bfbc <pbuf_copy+0x190>)
 800be60:	f005 feb6 	bl	8011bd0 <iprintf>
 800be64:	f06f 030f 	mvn.w	r3, #15
 800be68:	e09f      	b.n	800bfaa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	895b      	ldrh	r3, [r3, #10]
 800be6e:	461a      	mov	r2, r3
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	1ad2      	subs	r2, r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	895b      	ldrh	r3, [r3, #10]
 800be78:	4619      	mov	r1, r3
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	1acb      	subs	r3, r1, r3
 800be7e:	429a      	cmp	r2, r3
 800be80:	d306      	bcc.n	800be90 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	895b      	ldrh	r3, [r3, #10]
 800be86:	461a      	mov	r2, r3
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	60fb      	str	r3, [r7, #12]
 800be8e:	e005      	b.n	800be9c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	895b      	ldrh	r3, [r3, #10]
 800be94:	461a      	mov	r2, r3
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	18d0      	adds	r0, r2, r3
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	4413      	add	r3, r2
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	4619      	mov	r1, r3
 800beb0:	f006 f85b 	bl	8011f6a <memcpy>
    offset_to += len;
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	4413      	add	r3, r2
 800beba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	4413      	add	r3, r2
 800bec2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	895b      	ldrh	r3, [r3, #10]
 800bec8:	461a      	mov	r2, r3
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	4293      	cmp	r3, r2
 800bece:	d906      	bls.n	800bede <pbuf_copy+0xb2>
 800bed0:	4b38      	ldr	r3, [pc, #224]	@ (800bfb4 <pbuf_copy+0x188>)
 800bed2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800bed6:	493a      	ldr	r1, [pc, #232]	@ (800bfc0 <pbuf_copy+0x194>)
 800bed8:	4838      	ldr	r0, [pc, #224]	@ (800bfbc <pbuf_copy+0x190>)
 800beda:	f005 fe79 	bl	8011bd0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	895b      	ldrh	r3, [r3, #10]
 800bee2:	461a      	mov	r2, r3
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d906      	bls.n	800bef8 <pbuf_copy+0xcc>
 800beea:	4b32      	ldr	r3, [pc, #200]	@ (800bfb4 <pbuf_copy+0x188>)
 800beec:	f240 32da 	movw	r2, #986	@ 0x3da
 800bef0:	4934      	ldr	r1, [pc, #208]	@ (800bfc4 <pbuf_copy+0x198>)
 800bef2:	4832      	ldr	r0, [pc, #200]	@ (800bfbc <pbuf_copy+0x190>)
 800bef4:	f005 fe6c 	bl	8011bd0 <iprintf>
    if (offset_from >= p_from->len) {
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	895b      	ldrh	r3, [r3, #10]
 800befc:	461a      	mov	r2, r3
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d304      	bcc.n	800bf0e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bf04:	2300      	movs	r3, #0
 800bf06:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	895b      	ldrh	r3, [r3, #10]
 800bf12:	461a      	mov	r2, r3
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d114      	bne.n	800bf44 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10c      	bne.n	800bf44 <pbuf_copy+0x118>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d009      	beq.n	800bf44 <pbuf_copy+0x118>
 800bf30:	4b20      	ldr	r3, [pc, #128]	@ (800bfb4 <pbuf_copy+0x188>)
 800bf32:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bf36:	4924      	ldr	r1, [pc, #144]	@ (800bfc8 <pbuf_copy+0x19c>)
 800bf38:	4820      	ldr	r0, [pc, #128]	@ (800bfbc <pbuf_copy+0x190>)
 800bf3a:	f005 fe49 	bl	8011bd0 <iprintf>
 800bf3e:	f06f 030f 	mvn.w	r3, #15
 800bf42:	e032      	b.n	800bfaa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d013      	beq.n	800bf72 <pbuf_copy+0x146>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	895a      	ldrh	r2, [r3, #10]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	891b      	ldrh	r3, [r3, #8]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d10d      	bne.n	800bf72 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d009      	beq.n	800bf72 <pbuf_copy+0x146>
 800bf5e:	4b15      	ldr	r3, [pc, #84]	@ (800bfb4 <pbuf_copy+0x188>)
 800bf60:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bf64:	4919      	ldr	r1, [pc, #100]	@ (800bfcc <pbuf_copy+0x1a0>)
 800bf66:	4815      	ldr	r0, [pc, #84]	@ (800bfbc <pbuf_copy+0x190>)
 800bf68:	f005 fe32 	bl	8011bd0 <iprintf>
 800bf6c:	f06f 0305 	mvn.w	r3, #5
 800bf70:	e01b      	b.n	800bfaa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d013      	beq.n	800bfa0 <pbuf_copy+0x174>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	895a      	ldrh	r2, [r3, #10]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	891b      	ldrh	r3, [r3, #8]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d10d      	bne.n	800bfa0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d009      	beq.n	800bfa0 <pbuf_copy+0x174>
 800bf8c:	4b09      	ldr	r3, [pc, #36]	@ (800bfb4 <pbuf_copy+0x188>)
 800bf8e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bf92:	490e      	ldr	r1, [pc, #56]	@ (800bfcc <pbuf_copy+0x1a0>)
 800bf94:	4809      	ldr	r0, [pc, #36]	@ (800bfbc <pbuf_copy+0x190>)
 800bf96:	f005 fe1b 	bl	8011bd0 <iprintf>
 800bf9a:	f06f 0305 	mvn.w	r3, #5
 800bf9e:	e004      	b.n	800bfaa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f47f af61 	bne.w	800be6a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	0801395c 	.word	0x0801395c
 800bfb8:	08013c40 	.word	0x08013c40
 800bfbc:	080139f8 	.word	0x080139f8
 800bfc0:	08013c70 	.word	0x08013c70
 800bfc4:	08013c88 	.word	0x08013c88
 800bfc8:	08013ca4 	.word	0x08013ca4
 800bfcc:	08013cb4 	.word	0x08013cb4

0800bfd0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b088      	sub	sp, #32
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	4611      	mov	r1, r2
 800bfdc:	461a      	mov	r2, r3
 800bfde:	460b      	mov	r3, r1
 800bfe0:	80fb      	strh	r3, [r7, #6]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d108      	bne.n	800c006 <pbuf_copy_partial+0x36>
 800bff4:	4b2b      	ldr	r3, [pc, #172]	@ (800c0a4 <pbuf_copy_partial+0xd4>)
 800bff6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bffa:	492b      	ldr	r1, [pc, #172]	@ (800c0a8 <pbuf_copy_partial+0xd8>)
 800bffc:	482b      	ldr	r0, [pc, #172]	@ (800c0ac <pbuf_copy_partial+0xdc>)
 800bffe:	f005 fde7 	bl	8011bd0 <iprintf>
 800c002:	2300      	movs	r3, #0
 800c004:	e04a      	b.n	800c09c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d108      	bne.n	800c01e <pbuf_copy_partial+0x4e>
 800c00c:	4b25      	ldr	r3, [pc, #148]	@ (800c0a4 <pbuf_copy_partial+0xd4>)
 800c00e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c012:	4927      	ldr	r1, [pc, #156]	@ (800c0b0 <pbuf_copy_partial+0xe0>)
 800c014:	4825      	ldr	r0, [pc, #148]	@ (800c0ac <pbuf_copy_partial+0xdc>)
 800c016:	f005 fddb 	bl	8011bd0 <iprintf>
 800c01a:	2300      	movs	r3, #0
 800c01c:	e03e      	b.n	800c09c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	61fb      	str	r3, [r7, #28]
 800c022:	e034      	b.n	800c08e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c024:	88bb      	ldrh	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <pbuf_copy_partial+0x70>
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	895b      	ldrh	r3, [r3, #10]
 800c02e:	88ba      	ldrh	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d305      	bcc.n	800c040 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	895b      	ldrh	r3, [r3, #10]
 800c038:	88ba      	ldrh	r2, [r7, #4]
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	80bb      	strh	r3, [r7, #4]
 800c03e:	e023      	b.n	800c088 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	895a      	ldrh	r2, [r3, #10]
 800c044:	88bb      	ldrh	r3, [r7, #4]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c04a:	8b3a      	ldrh	r2, [r7, #24]
 800c04c:	88fb      	ldrh	r3, [r7, #6]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d901      	bls.n	800c056 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c052:	88fb      	ldrh	r3, [r7, #6]
 800c054:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c056:	8b7b      	ldrh	r3, [r7, #26]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	18d0      	adds	r0, r2, r3
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	685a      	ldr	r2, [r3, #4]
 800c060:	88bb      	ldrh	r3, [r7, #4]
 800c062:	4413      	add	r3, r2
 800c064:	8b3a      	ldrh	r2, [r7, #24]
 800c066:	4619      	mov	r1, r3
 800c068:	f005 ff7f 	bl	8011f6a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c06c:	8afa      	ldrh	r2, [r7, #22]
 800c06e:	8b3b      	ldrh	r3, [r7, #24]
 800c070:	4413      	add	r3, r2
 800c072:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c074:	8b7a      	ldrh	r2, [r7, #26]
 800c076:	8b3b      	ldrh	r3, [r7, #24]
 800c078:	4413      	add	r3, r2
 800c07a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c07c:	88fa      	ldrh	r2, [r7, #6]
 800c07e:	8b3b      	ldrh	r3, [r7, #24]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c084:	2300      	movs	r3, #0
 800c086:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	61fb      	str	r3, [r7, #28]
 800c08e:	88fb      	ldrh	r3, [r7, #6]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <pbuf_copy_partial+0xca>
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1c4      	bne.n	800c024 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c09a:	8afb      	ldrh	r3, [r7, #22]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3720      	adds	r7, #32
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	0801395c 	.word	0x0801395c
 800c0a8:	08013ce0 	.word	0x08013ce0
 800c0ac:	080139f8 	.word	0x080139f8
 800c0b0:	08013d00 	.word	0x08013d00

0800c0b4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	603a      	str	r2, [r7, #0]
 800c0be:	71fb      	strb	r3, [r7, #7]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	8919      	ldrh	r1, [r3, #8]
 800c0c8:	88ba      	ldrh	r2, [r7, #4]
 800c0ca:	79fb      	ldrb	r3, [r7, #7]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff fab1 	bl	800b634 <pbuf_alloc>
 800c0d2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <pbuf_clone+0x2a>
    return NULL;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e011      	b.n	800c102 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f7ff fea3 	bl	800be2c <pbuf_copy>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c0ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d006      	beq.n	800c100 <pbuf_clone+0x4c>
 800c0f2:	4b06      	ldr	r3, [pc, #24]	@ (800c10c <pbuf_clone+0x58>)
 800c0f4:	f240 5224 	movw	r2, #1316	@ 0x524
 800c0f8:	4905      	ldr	r1, [pc, #20]	@ (800c110 <pbuf_clone+0x5c>)
 800c0fa:	4806      	ldr	r0, [pc, #24]	@ (800c114 <pbuf_clone+0x60>)
 800c0fc:	f005 fd68 	bl	8011bd0 <iprintf>
  return q;
 800c100:	68fb      	ldr	r3, [r7, #12]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	0801395c 	.word	0x0801395c
 800c110:	08013e0c 	.word	0x08013e0c
 800c114:	080139f8 	.word	0x080139f8

0800c118 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c11c:	f005 fc58 	bl	80119d0 <rand>
 800c120:	4603      	mov	r3, r0
 800c122:	b29b      	uxth	r3, r3
 800c124:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c128:	b29b      	uxth	r3, r3
 800c12a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c12e:	b29a      	uxth	r2, r3
 800c130:	4b01      	ldr	r3, [pc, #4]	@ (800c138 <tcp_init+0x20>)
 800c132:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c134:	bf00      	nop
 800c136:	bd80      	pop	{r7, pc}
 800c138:	24000024 	.word	0x24000024

0800c13c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	7d1b      	ldrb	r3, [r3, #20]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d105      	bne.n	800c158 <tcp_free+0x1c>
 800c14c:	4b06      	ldr	r3, [pc, #24]	@ (800c168 <tcp_free+0x2c>)
 800c14e:	22d4      	movs	r2, #212	@ 0xd4
 800c150:	4906      	ldr	r1, [pc, #24]	@ (800c16c <tcp_free+0x30>)
 800c152:	4807      	ldr	r0, [pc, #28]	@ (800c170 <tcp_free+0x34>)
 800c154:	f005 fd3c 	bl	8011bd0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c158:	6879      	ldr	r1, [r7, #4]
 800c15a:	2001      	movs	r0, #1
 800c15c:	f7fe fed8 	bl	800af10 <memp_free>
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	08013e98 	.word	0x08013e98
 800c16c:	08013f04 	.word	0x08013f04
 800c170:	08013f18 	.word	0x08013f18

0800c174 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7d1b      	ldrb	r3, [r3, #20]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d105      	bne.n	800c190 <tcp_free_listen+0x1c>
 800c184:	4b06      	ldr	r3, [pc, #24]	@ (800c1a0 <tcp_free_listen+0x2c>)
 800c186:	22df      	movs	r2, #223	@ 0xdf
 800c188:	4906      	ldr	r1, [pc, #24]	@ (800c1a4 <tcp_free_listen+0x30>)
 800c18a:	4807      	ldr	r0, [pc, #28]	@ (800c1a8 <tcp_free_listen+0x34>)
 800c18c:	f005 fd20 	bl	8011bd0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	2002      	movs	r0, #2
 800c194:	f7fe febc 	bl	800af10 <memp_free>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	08013e98 	.word	0x08013e98
 800c1a4:	08013f40 	.word	0x08013f40
 800c1a8:	08013f18 	.word	0x08013f18

0800c1ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c1b0:	f000 fea4 	bl	800cefc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c1b4:	4b07      	ldr	r3, [pc, #28]	@ (800c1d4 <tcp_tmr+0x28>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	4b05      	ldr	r3, [pc, #20]	@ (800c1d4 <tcp_tmr+0x28>)
 800c1be:	701a      	strb	r2, [r3, #0]
 800c1c0:	4b04      	ldr	r3, [pc, #16]	@ (800c1d4 <tcp_tmr+0x28>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	f003 0301 	and.w	r3, r3, #1
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c1cc:	f000 fb54 	bl	800c878 <tcp_slowtmr>
  }
}
 800c1d0:	bf00      	nop
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	24007c59 	.word	0x24007c59

0800c1d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d105      	bne.n	800c1f4 <tcp_remove_listener+0x1c>
 800c1e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c220 <tcp_remove_listener+0x48>)
 800c1ea:	22ff      	movs	r2, #255	@ 0xff
 800c1ec:	490d      	ldr	r1, [pc, #52]	@ (800c224 <tcp_remove_listener+0x4c>)
 800c1ee:	480e      	ldr	r0, [pc, #56]	@ (800c228 <tcp_remove_listener+0x50>)
 800c1f0:	f005 fcee 	bl	8011bd0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	60fb      	str	r3, [r7, #12]
 800c1f8:	e00a      	b.n	800c210 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	429a      	cmp	r2, r3
 800c202:	d102      	bne.n	800c20a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1f1      	bne.n	800c1fa <tcp_remove_listener+0x22>
    }
  }
}
 800c216:	bf00      	nop
 800c218:	bf00      	nop
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	08013e98 	.word	0x08013e98
 800c224:	08013f5c 	.word	0x08013f5c
 800c228:	08013f18 	.word	0x08013f18

0800c22c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <tcp_listen_closed+0x1c>
 800c23a:	4b14      	ldr	r3, [pc, #80]	@ (800c28c <tcp_listen_closed+0x60>)
 800c23c:	f240 1211 	movw	r2, #273	@ 0x111
 800c240:	4913      	ldr	r1, [pc, #76]	@ (800c290 <tcp_listen_closed+0x64>)
 800c242:	4814      	ldr	r0, [pc, #80]	@ (800c294 <tcp_listen_closed+0x68>)
 800c244:	f005 fcc4 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7d1b      	ldrb	r3, [r3, #20]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d006      	beq.n	800c25e <tcp_listen_closed+0x32>
 800c250:	4b0e      	ldr	r3, [pc, #56]	@ (800c28c <tcp_listen_closed+0x60>)
 800c252:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c256:	4910      	ldr	r1, [pc, #64]	@ (800c298 <tcp_listen_closed+0x6c>)
 800c258:	480e      	ldr	r0, [pc, #56]	@ (800c294 <tcp_listen_closed+0x68>)
 800c25a:	f005 fcb9 	bl	8011bd0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c25e:	2301      	movs	r3, #1
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	e00b      	b.n	800c27c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c264:	4a0d      	ldr	r2, [pc, #52]	@ (800c29c <tcp_listen_closed+0x70>)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff ffb1 	bl	800c1d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3301      	adds	r3, #1
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d9f0      	bls.n	800c264 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	08013e98 	.word	0x08013e98
 800c290:	08013f84 	.word	0x08013f84
 800c294:	08013f18 	.word	0x08013f18
 800c298:	08013f90 	.word	0x08013f90
 800c29c:	08015914 	.word	0x08015914

0800c2a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c2a0:	b5b0      	push	{r4, r5, r7, lr}
 800c2a2:	b088      	sub	sp, #32
 800c2a4:	af04      	add	r7, sp, #16
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <tcp_close_shutdown+0x20>
 800c2b2:	4b63      	ldr	r3, [pc, #396]	@ (800c440 <tcp_close_shutdown+0x1a0>)
 800c2b4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c2b8:	4962      	ldr	r1, [pc, #392]	@ (800c444 <tcp_close_shutdown+0x1a4>)
 800c2ba:	4863      	ldr	r0, [pc, #396]	@ (800c448 <tcp_close_shutdown+0x1a8>)
 800c2bc:	f005 fc88 	bl	8011bd0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d066      	beq.n	800c394 <tcp_close_shutdown+0xf4>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	7d1b      	ldrb	r3, [r3, #20]
 800c2ca:	2b04      	cmp	r3, #4
 800c2cc:	d003      	beq.n	800c2d6 <tcp_close_shutdown+0x36>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	7d1b      	ldrb	r3, [r3, #20]
 800c2d2:	2b07      	cmp	r3, #7
 800c2d4:	d15e      	bne.n	800c394 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d104      	bne.n	800c2e8 <tcp_close_shutdown+0x48>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2e2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c2e6:	d055      	beq.n	800c394 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	8b5b      	ldrh	r3, [r3, #26]
 800c2ec:	f003 0310 	and.w	r3, r3, #16
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d106      	bne.n	800c302 <tcp_close_shutdown+0x62>
 800c2f4:	4b52      	ldr	r3, [pc, #328]	@ (800c440 <tcp_close_shutdown+0x1a0>)
 800c2f6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c2fa:	4954      	ldr	r1, [pc, #336]	@ (800c44c <tcp_close_shutdown+0x1ac>)
 800c2fc:	4852      	ldr	r0, [pc, #328]	@ (800c448 <tcp_close_shutdown+0x1a8>)
 800c2fe:	f005 fc67 	bl	8011bd0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c30a:	687d      	ldr	r5, [r7, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	3304      	adds	r3, #4
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	8ad2      	ldrh	r2, [r2, #22]
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	8b09      	ldrh	r1, [r1, #24]
 800c318:	9102      	str	r1, [sp, #8]
 800c31a:	9201      	str	r2, [sp, #4]
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	462b      	mov	r3, r5
 800c320:	4622      	mov	r2, r4
 800c322:	4601      	mov	r1, r0
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f004 fe8d 	bl	8011044 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f001 f8c8 	bl	800d4c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c330:	4b47      	ldr	r3, [pc, #284]	@ (800c450 <tcp_close_shutdown+0x1b0>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	429a      	cmp	r2, r3
 800c338:	d105      	bne.n	800c346 <tcp_close_shutdown+0xa6>
 800c33a:	4b45      	ldr	r3, [pc, #276]	@ (800c450 <tcp_close_shutdown+0x1b0>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	4a43      	ldr	r2, [pc, #268]	@ (800c450 <tcp_close_shutdown+0x1b0>)
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	e013      	b.n	800c36e <tcp_close_shutdown+0xce>
 800c346:	4b42      	ldr	r3, [pc, #264]	@ (800c450 <tcp_close_shutdown+0x1b0>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	e00c      	b.n	800c368 <tcp_close_shutdown+0xc8>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d104      	bne.n	800c362 <tcp_close_shutdown+0xc2>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	68da      	ldr	r2, [r3, #12]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	60da      	str	r2, [r3, #12]
 800c360:	e005      	b.n	800c36e <tcp_close_shutdown+0xce>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1ef      	bne.n	800c34e <tcp_close_shutdown+0xae>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	60da      	str	r2, [r3, #12]
 800c374:	4b37      	ldr	r3, [pc, #220]	@ (800c454 <tcp_close_shutdown+0x1b4>)
 800c376:	2201      	movs	r2, #1
 800c378:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c37a:	4b37      	ldr	r3, [pc, #220]	@ (800c458 <tcp_close_shutdown+0x1b8>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	429a      	cmp	r2, r3
 800c382:	d102      	bne.n	800c38a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c384:	f003 fd5c 	bl	800fe40 <tcp_trigger_input_pcb_close>
 800c388:	e002      	b.n	800c390 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff fed6 	bl	800c13c <tcp_free>
      }
      return ERR_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	e050      	b.n	800c436 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	7d1b      	ldrb	r3, [r3, #20]
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d03b      	beq.n	800c414 <tcp_close_shutdown+0x174>
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	dc44      	bgt.n	800c42a <tcp_close_shutdown+0x18a>
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <tcp_close_shutdown+0x10a>
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d02a      	beq.n	800c3fe <tcp_close_shutdown+0x15e>
 800c3a8:	e03f      	b.n	800c42a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	8adb      	ldrh	r3, [r3, #22]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d021      	beq.n	800c3f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c3b2:	4b2a      	ldr	r3, [pc, #168]	@ (800c45c <tcp_close_shutdown+0x1bc>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d105      	bne.n	800c3c8 <tcp_close_shutdown+0x128>
 800c3bc:	4b27      	ldr	r3, [pc, #156]	@ (800c45c <tcp_close_shutdown+0x1bc>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	4a26      	ldr	r2, [pc, #152]	@ (800c45c <tcp_close_shutdown+0x1bc>)
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	e013      	b.n	800c3f0 <tcp_close_shutdown+0x150>
 800c3c8:	4b24      	ldr	r3, [pc, #144]	@ (800c45c <tcp_close_shutdown+0x1bc>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	60bb      	str	r3, [r7, #8]
 800c3ce:	e00c      	b.n	800c3ea <tcp_close_shutdown+0x14a>
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d104      	bne.n	800c3e4 <tcp_close_shutdown+0x144>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	60da      	str	r2, [r3, #12]
 800c3e2:	e005      	b.n	800c3f0 <tcp_close_shutdown+0x150>
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	60bb      	str	r3, [r7, #8]
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1ef      	bne.n	800c3d0 <tcp_close_shutdown+0x130>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7ff fea0 	bl	800c13c <tcp_free>
      break;
 800c3fc:	e01a      	b.n	800c434 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff ff14 	bl	800c22c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c404:	6879      	ldr	r1, [r7, #4]
 800c406:	4816      	ldr	r0, [pc, #88]	@ (800c460 <tcp_close_shutdown+0x1c0>)
 800c408:	f001 f8aa 	bl	800d560 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff feb1 	bl	800c174 <tcp_free_listen>
      break;
 800c412:	e00f      	b.n	800c434 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c414:	6879      	ldr	r1, [r7, #4]
 800c416:	480e      	ldr	r0, [pc, #56]	@ (800c450 <tcp_close_shutdown+0x1b0>)
 800c418:	f001 f8a2 	bl	800d560 <tcp_pcb_remove>
 800c41c:	4b0d      	ldr	r3, [pc, #52]	@ (800c454 <tcp_close_shutdown+0x1b4>)
 800c41e:	2201      	movs	r2, #1
 800c420:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff fe8a 	bl	800c13c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c428:	e004      	b.n	800c434 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f81a 	bl	800c464 <tcp_close_shutdown_fin>
 800c430:	4603      	mov	r3, r0
 800c432:	e000      	b.n	800c436 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bdb0      	pop	{r4, r5, r7, pc}
 800c43e:	bf00      	nop
 800c440:	08013e98 	.word	0x08013e98
 800c444:	08013fa8 	.word	0x08013fa8
 800c448:	08013f18 	.word	0x08013f18
 800c44c:	08013fc8 	.word	0x08013fc8
 800c450:	24007c50 	.word	0x24007c50
 800c454:	24007c58 	.word	0x24007c58
 800c458:	24007c90 	.word	0x24007c90
 800c45c:	24007c48 	.word	0x24007c48
 800c460:	24007c4c 	.word	0x24007c4c

0800c464 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <tcp_close_shutdown_fin+0x1c>
 800c472:	4b2e      	ldr	r3, [pc, #184]	@ (800c52c <tcp_close_shutdown_fin+0xc8>)
 800c474:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c478:	492d      	ldr	r1, [pc, #180]	@ (800c530 <tcp_close_shutdown_fin+0xcc>)
 800c47a:	482e      	ldr	r0, [pc, #184]	@ (800c534 <tcp_close_shutdown_fin+0xd0>)
 800c47c:	f005 fba8 	bl	8011bd0 <iprintf>

  switch (pcb->state) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	7d1b      	ldrb	r3, [r3, #20]
 800c484:	2b07      	cmp	r3, #7
 800c486:	d020      	beq.n	800c4ca <tcp_close_shutdown_fin+0x66>
 800c488:	2b07      	cmp	r3, #7
 800c48a:	dc2b      	bgt.n	800c4e4 <tcp_close_shutdown_fin+0x80>
 800c48c:	2b03      	cmp	r3, #3
 800c48e:	d002      	beq.n	800c496 <tcp_close_shutdown_fin+0x32>
 800c490:	2b04      	cmp	r3, #4
 800c492:	d00d      	beq.n	800c4b0 <tcp_close_shutdown_fin+0x4c>
 800c494:	e026      	b.n	800c4e4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f003 fee2 	bl	8010260 <tcp_send_fin>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d11f      	bne.n	800c4e8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2205      	movs	r2, #5
 800c4ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c4ae:	e01b      	b.n	800c4e8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f003 fed5 	bl	8010260 <tcp_send_fin>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c4ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d114      	bne.n	800c4ec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2205      	movs	r2, #5
 800c4c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c4c8:	e010      	b.n	800c4ec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f003 fec8 	bl	8010260 <tcp_send_fin>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c4d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d109      	bne.n	800c4f0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2209      	movs	r2, #9
 800c4e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c4e2:	e005      	b.n	800c4f0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	e01c      	b.n	800c522 <tcp_close_shutdown_fin+0xbe>
      break;
 800c4e8:	bf00      	nop
 800c4ea:	e002      	b.n	800c4f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c4ec:	bf00      	nop
 800c4ee:	e000      	b.n	800c4f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c4f0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d103      	bne.n	800c502 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f003 ffee 	bl	80104dc <tcp_output>
 800c500:	e00d      	b.n	800c51e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c50a:	d108      	bne.n	800c51e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	8b5b      	ldrh	r3, [r3, #26]
 800c510:	f043 0308 	orr.w	r3, r3, #8
 800c514:	b29a      	uxth	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	e001      	b.n	800c522 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	08013e98 	.word	0x08013e98
 800c530:	08013f84 	.word	0x08013f84
 800c534:	08013f18 	.word	0x08013f18

0800c538 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <tcp_close+0x22>
 800c546:	4b0f      	ldr	r3, [pc, #60]	@ (800c584 <tcp_close+0x4c>)
 800c548:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c54c:	490e      	ldr	r1, [pc, #56]	@ (800c588 <tcp_close+0x50>)
 800c54e:	480f      	ldr	r0, [pc, #60]	@ (800c58c <tcp_close+0x54>)
 800c550:	f005 fb3e 	bl	8011bd0 <iprintf>
 800c554:	f06f 030f 	mvn.w	r3, #15
 800c558:	e00f      	b.n	800c57a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7d1b      	ldrb	r3, [r3, #20]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d006      	beq.n	800c570 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	8b5b      	ldrh	r3, [r3, #26]
 800c566:	f043 0310 	orr.w	r3, r3, #16
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c570:	2101      	movs	r1, #1
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff fe94 	bl	800c2a0 <tcp_close_shutdown>
 800c578:	4603      	mov	r3, r0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	08013e98 	.word	0x08013e98
 800c588:	08013fe4 	.word	0x08013fe4
 800c58c:	08013f18 	.word	0x08013f18

0800c590 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b08e      	sub	sp, #56	@ 0x38
 800c594:	af04      	add	r7, sp, #16
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d107      	bne.n	800c5b0 <tcp_abandon+0x20>
 800c5a0:	4b52      	ldr	r3, [pc, #328]	@ (800c6ec <tcp_abandon+0x15c>)
 800c5a2:	f240 223d 	movw	r2, #573	@ 0x23d
 800c5a6:	4952      	ldr	r1, [pc, #328]	@ (800c6f0 <tcp_abandon+0x160>)
 800c5a8:	4852      	ldr	r0, [pc, #328]	@ (800c6f4 <tcp_abandon+0x164>)
 800c5aa:	f005 fb11 	bl	8011bd0 <iprintf>
 800c5ae:	e099      	b.n	800c6e4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7d1b      	ldrb	r3, [r3, #20]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d106      	bne.n	800c5c6 <tcp_abandon+0x36>
 800c5b8:	4b4c      	ldr	r3, [pc, #304]	@ (800c6ec <tcp_abandon+0x15c>)
 800c5ba:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c5be:	494e      	ldr	r1, [pc, #312]	@ (800c6f8 <tcp_abandon+0x168>)
 800c5c0:	484c      	ldr	r0, [pc, #304]	@ (800c6f4 <tcp_abandon+0x164>)
 800c5c2:	f005 fb05 	bl	8011bd0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	7d1b      	ldrb	r3, [r3, #20]
 800c5ca:	2b0a      	cmp	r3, #10
 800c5cc:	d107      	bne.n	800c5de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c5ce:	6879      	ldr	r1, [r7, #4]
 800c5d0:	484a      	ldr	r0, [pc, #296]	@ (800c6fc <tcp_abandon+0x16c>)
 800c5d2:	f000 ffc5 	bl	800d560 <tcp_pcb_remove>
    tcp_free(pcb);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff fdb0 	bl	800c13c <tcp_free>
 800c5dc:	e082      	b.n	800c6e4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5f8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	7d1b      	ldrb	r3, [r3, #20]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d126      	bne.n	800c656 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	8adb      	ldrh	r3, [r3, #22]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d02e      	beq.n	800c66e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c610:	4b3b      	ldr	r3, [pc, #236]	@ (800c700 <tcp_abandon+0x170>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	429a      	cmp	r2, r3
 800c618:	d105      	bne.n	800c626 <tcp_abandon+0x96>
 800c61a:	4b39      	ldr	r3, [pc, #228]	@ (800c700 <tcp_abandon+0x170>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	4a37      	ldr	r2, [pc, #220]	@ (800c700 <tcp_abandon+0x170>)
 800c622:	6013      	str	r3, [r2, #0]
 800c624:	e013      	b.n	800c64e <tcp_abandon+0xbe>
 800c626:	4b36      	ldr	r3, [pc, #216]	@ (800c700 <tcp_abandon+0x170>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	61fb      	str	r3, [r7, #28]
 800c62c:	e00c      	b.n	800c648 <tcp_abandon+0xb8>
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	429a      	cmp	r2, r3
 800c636:	d104      	bne.n	800c642 <tcp_abandon+0xb2>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	68da      	ldr	r2, [r3, #12]
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	60da      	str	r2, [r3, #12]
 800c640:	e005      	b.n	800c64e <tcp_abandon+0xbe>
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	61fb      	str	r3, [r7, #28]
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1ef      	bne.n	800c62e <tcp_abandon+0x9e>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	60da      	str	r2, [r3, #12]
 800c654:	e00b      	b.n	800c66e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	8adb      	ldrh	r3, [r3, #22]
 800c65e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c660:	6879      	ldr	r1, [r7, #4]
 800c662:	4828      	ldr	r0, [pc, #160]	@ (800c704 <tcp_abandon+0x174>)
 800c664:	f000 ff7c 	bl	800d560 <tcp_pcb_remove>
 800c668:	4b27      	ldr	r3, [pc, #156]	@ (800c708 <tcp_abandon+0x178>)
 800c66a:	2201      	movs	r2, #1
 800c66c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c672:	2b00      	cmp	r3, #0
 800c674:	d004      	beq.n	800c680 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 fd1e 	bl	800d0bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c684:	2b00      	cmp	r3, #0
 800c686:	d004      	beq.n	800c692 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fd15 	bl	800d0bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c696:	2b00      	cmp	r3, #0
 800c698:	d004      	beq.n	800c6a4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 fd0c 	bl	800d0bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00e      	beq.n	800c6c8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	8b12      	ldrh	r2, [r2, #24]
 800c6b4:	9202      	str	r2, [sp, #8]
 800c6b6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c6b8:	9201      	str	r2, [sp, #4]
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	69b9      	ldr	r1, [r7, #24]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f004 fcbe 	bl	8011044 <tcp_rst>
    }
    last_state = pcb->state;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7d1b      	ldrb	r3, [r3, #20]
 800c6cc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7ff fd34 	bl	800c13c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d004      	beq.n	800c6e4 <tcp_abandon+0x154>
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	f06f 010c 	mvn.w	r1, #12
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	4798      	blx	r3
  }
}
 800c6e4:	3728      	adds	r7, #40	@ 0x28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	08013e98 	.word	0x08013e98
 800c6f0:	08014018 	.word	0x08014018
 800c6f4:	08013f18 	.word	0x08013f18
 800c6f8:	08014034 	.word	0x08014034
 800c6fc:	24007c54 	.word	0x24007c54
 800c700:	24007c48 	.word	0x24007c48
 800c704:	24007c50 	.word	0x24007c50
 800c708:	24007c58 	.word	0x24007c58

0800c70c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c714:	2101      	movs	r1, #1
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7ff ff3a 	bl	800c590 <tcp_abandon>
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d106      	bne.n	800c740 <tcp_update_rcv_ann_wnd+0x1c>
 800c732:	4b25      	ldr	r3, [pc, #148]	@ (800c7c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c734:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c738:	4924      	ldr	r1, [pc, #144]	@ (800c7cc <tcp_update_rcv_ann_wnd+0xa8>)
 800c73a:	4825      	ldr	r0, [pc, #148]	@ (800c7d0 <tcp_update_rcv_ann_wnd+0xac>)
 800c73c:	f005 fa48 	bl	8011bd0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c748:	4413      	add	r3, r2
 800c74a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c754:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c758:	bf28      	it	cs
 800c75a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c75e:	b292      	uxth	r2, r2
 800c760:	4413      	add	r3, r2
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	db08      	blt.n	800c77c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	e020      	b.n	800c7be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	dd03      	ble.n	800c792 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c790:	e014      	b.n	800c7bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7a4:	d306      	bcc.n	800c7b4 <tcp_update_rcv_ann_wnd+0x90>
 800c7a6:	4b08      	ldr	r3, [pc, #32]	@ (800c7c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c7a8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c7ac:	4909      	ldr	r1, [pc, #36]	@ (800c7d4 <tcp_update_rcv_ann_wnd+0xb0>)
 800c7ae:	4808      	ldr	r0, [pc, #32]	@ (800c7d0 <tcp_update_rcv_ann_wnd+0xac>)
 800c7b0:	f005 fa0e 	bl	8011bd0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c7bc:	2300      	movs	r3, #0
  }
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	08013e98 	.word	0x08013e98
 800c7cc:	08014130 	.word	0x08014130
 800c7d0:	08013f18 	.word	0x08013f18
 800c7d4:	08014154 	.word	0x08014154

0800c7d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d107      	bne.n	800c7fa <tcp_recved+0x22>
 800c7ea:	4b1f      	ldr	r3, [pc, #124]	@ (800c868 <tcp_recved+0x90>)
 800c7ec:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c7f0:	491e      	ldr	r1, [pc, #120]	@ (800c86c <tcp_recved+0x94>)
 800c7f2:	481f      	ldr	r0, [pc, #124]	@ (800c870 <tcp_recved+0x98>)
 800c7f4:	f005 f9ec 	bl	8011bd0 <iprintf>
 800c7f8:	e032      	b.n	800c860 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	7d1b      	ldrb	r3, [r3, #20]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d106      	bne.n	800c810 <tcp_recved+0x38>
 800c802:	4b19      	ldr	r3, [pc, #100]	@ (800c868 <tcp_recved+0x90>)
 800c804:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c808:	491a      	ldr	r1, [pc, #104]	@ (800c874 <tcp_recved+0x9c>)
 800c80a:	4819      	ldr	r0, [pc, #100]	@ (800c870 <tcp_recved+0x98>)
 800c80c:	f005 f9e0 	bl	8011bd0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c814:	887b      	ldrh	r3, [r7, #2]
 800c816:	4413      	add	r3, r2
 800c818:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c81a:	89fb      	ldrh	r3, [r7, #14]
 800c81c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c820:	d804      	bhi.n	800c82c <tcp_recved+0x54>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c826:	89fa      	ldrh	r2, [r7, #14]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d204      	bcs.n	800c836 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c832:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c834:	e002      	b.n	800c83c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	89fa      	ldrh	r2, [r7, #14]
 800c83a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff ff71 	bl	800c724 <tcp_update_rcv_ann_wnd>
 800c842:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c84a:	d309      	bcc.n	800c860 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8b5b      	ldrh	r3, [r3, #26]
 800c850:	f043 0302 	orr.w	r3, r3, #2
 800c854:	b29a      	uxth	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f003 fe3e 	bl	80104dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	08013e98 	.word	0x08013e98
 800c86c:	08014170 	.word	0x08014170
 800c870:	08013f18 	.word	0x08013f18
 800c874:	08014188 	.word	0x08014188

0800c878 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c878:	b5b0      	push	{r4, r5, r7, lr}
 800c87a:	b090      	sub	sp, #64	@ 0x40
 800c87c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c884:	4b95      	ldr	r3, [pc, #596]	@ (800cadc <tcp_slowtmr+0x264>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3301      	adds	r3, #1
 800c88a:	4a94      	ldr	r2, [pc, #592]	@ (800cadc <tcp_slowtmr+0x264>)
 800c88c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c88e:	4b94      	ldr	r3, [pc, #592]	@ (800cae0 <tcp_slowtmr+0x268>)
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	3301      	adds	r3, #1
 800c894:	b2da      	uxtb	r2, r3
 800c896:	4b92      	ldr	r3, [pc, #584]	@ (800cae0 <tcp_slowtmr+0x268>)
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	e000      	b.n	800c89e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c89c:	bf00      	nop
  prev = NULL;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c8a2:	4b90      	ldr	r3, [pc, #576]	@ (800cae4 <tcp_slowtmr+0x26c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c8a8:	e29d      	b.n	800cde6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ac:	7d1b      	ldrb	r3, [r3, #20]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <tcp_slowtmr+0x48>
 800c8b2:	4b8d      	ldr	r3, [pc, #564]	@ (800cae8 <tcp_slowtmr+0x270>)
 800c8b4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c8b8:	498c      	ldr	r1, [pc, #560]	@ (800caec <tcp_slowtmr+0x274>)
 800c8ba:	488d      	ldr	r0, [pc, #564]	@ (800caf0 <tcp_slowtmr+0x278>)
 800c8bc:	f005 f988 	bl	8011bd0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c2:	7d1b      	ldrb	r3, [r3, #20]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d106      	bne.n	800c8d6 <tcp_slowtmr+0x5e>
 800c8c8:	4b87      	ldr	r3, [pc, #540]	@ (800cae8 <tcp_slowtmr+0x270>)
 800c8ca:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c8ce:	4989      	ldr	r1, [pc, #548]	@ (800caf4 <tcp_slowtmr+0x27c>)
 800c8d0:	4887      	ldr	r0, [pc, #540]	@ (800caf0 <tcp_slowtmr+0x278>)
 800c8d2:	f005 f97d 	bl	8011bd0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d8:	7d1b      	ldrb	r3, [r3, #20]
 800c8da:	2b0a      	cmp	r3, #10
 800c8dc:	d106      	bne.n	800c8ec <tcp_slowtmr+0x74>
 800c8de:	4b82      	ldr	r3, [pc, #520]	@ (800cae8 <tcp_slowtmr+0x270>)
 800c8e0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c8e4:	4984      	ldr	r1, [pc, #528]	@ (800caf8 <tcp_slowtmr+0x280>)
 800c8e6:	4882      	ldr	r0, [pc, #520]	@ (800caf0 <tcp_slowtmr+0x278>)
 800c8e8:	f005 f972 	bl	8011bd0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ee:	7f9a      	ldrb	r2, [r3, #30]
 800c8f0:	4b7b      	ldr	r3, [pc, #492]	@ (800cae0 <tcp_slowtmr+0x268>)
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d105      	bne.n	800c904 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c902:	e270      	b.n	800cde6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800c904:	4b76      	ldr	r3, [pc, #472]	@ (800cae0 <tcp_slowtmr+0x268>)
 800c906:	781a      	ldrb	r2, [r3, #0]
 800c908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91a:	7d1b      	ldrb	r3, [r3, #20]
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d10a      	bne.n	800c936 <tcp_slowtmr+0xbe>
 800c920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c922:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c926:	2b05      	cmp	r3, #5
 800c928:	d905      	bls.n	800c936 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c92a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c92e:	3301      	adds	r3, #1
 800c930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c934:	e11e      	b.n	800cb74 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c938:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c93c:	2b0b      	cmp	r3, #11
 800c93e:	d905      	bls.n	800c94c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c944:	3301      	adds	r3, #1
 800c946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c94a:	e113      	b.n	800cb74 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c952:	2b00      	cmp	r3, #0
 800c954:	d075      	beq.n	800ca42 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d006      	beq.n	800c96c <tcp_slowtmr+0xf4>
 800c95e:	4b62      	ldr	r3, [pc, #392]	@ (800cae8 <tcp_slowtmr+0x270>)
 800c960:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c964:	4965      	ldr	r1, [pc, #404]	@ (800cafc <tcp_slowtmr+0x284>)
 800c966:	4862      	ldr	r0, [pc, #392]	@ (800caf0 <tcp_slowtmr+0x278>)
 800c968:	f005 f932 	bl	8011bd0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c970:	2b00      	cmp	r3, #0
 800c972:	d106      	bne.n	800c982 <tcp_slowtmr+0x10a>
 800c974:	4b5c      	ldr	r3, [pc, #368]	@ (800cae8 <tcp_slowtmr+0x270>)
 800c976:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c97a:	4961      	ldr	r1, [pc, #388]	@ (800cb00 <tcp_slowtmr+0x288>)
 800c97c:	485c      	ldr	r0, [pc, #368]	@ (800caf0 <tcp_slowtmr+0x278>)
 800c97e:	f005 f927 	bl	8011bd0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c984:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c988:	2b0b      	cmp	r3, #11
 800c98a:	d905      	bls.n	800c998 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c98c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c990:	3301      	adds	r3, #1
 800c992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c996:	e0ed      	b.n	800cb74 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	4a58      	ldr	r2, [pc, #352]	@ (800cb04 <tcp_slowtmr+0x28c>)
 800c9a2:	5cd3      	ldrb	r3, [r2, r3]
 800c9a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9ac:	7c7a      	ldrb	r2, [r7, #17]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d907      	bls.n	800c9c2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9c8:	7c7a      	ldrb	r2, [r7, #17]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	f200 80d2 	bhi.w	800cb74 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d108      	bne.n	800c9f0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c9de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9e0:	f004 fc24 	bl	801122c <tcp_zero_window_probe>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d014      	beq.n	800ca14 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	623b      	str	r3, [r7, #32]
 800c9ee:	e011      	b.n	800ca14 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9fa:	f003 fae9 	bl	800ffd0 <tcp_split_unsent_seg>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d107      	bne.n	800ca14 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ca04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca06:	f003 fd69 	bl	80104dc <tcp_output>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f000 80ac 	beq.w	800cb74 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ca1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ca24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca26:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ca2a:	2b06      	cmp	r3, #6
 800ca2c:	f200 80a2 	bhi.w	800cb74 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ca30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca32:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ca36:	3301      	adds	r3, #1
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ca40:	e098      	b.n	800cb74 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ca42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	db0f      	blt.n	800ca6c <tcp_slowtmr+0x1f4>
 800ca4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca52:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d008      	beq.n	800ca6c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ca5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	3301      	adds	r3, #1
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	b21a      	sxth	r2, r3
 800ca68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ca6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ca72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca74:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	db7b      	blt.n	800cb74 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ca7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca7e:	f004 f821 	bl	8010ac4 <tcp_rexmit_rto_prepare>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d007      	beq.n	800ca98 <tcp_slowtmr+0x220>
 800ca88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d171      	bne.n	800cb74 <tcp_slowtmr+0x2fc>
 800ca90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d06d      	beq.n	800cb74 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ca98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9a:	7d1b      	ldrb	r3, [r3, #20]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d03a      	beq.n	800cb16 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800caa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800caa6:	2b0c      	cmp	r3, #12
 800caa8:	bf28      	it	cs
 800caaa:	230c      	movcs	r3, #12
 800caac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800caae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800cab4:	10db      	asrs	r3, r3, #3
 800cab6:	b21b      	sxth	r3, r3
 800cab8:	461a      	mov	r2, r3
 800caba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800cac0:	4413      	add	r3, r2
 800cac2:	7efa      	ldrb	r2, [r7, #27]
 800cac4:	4910      	ldr	r1, [pc, #64]	@ (800cb08 <tcp_slowtmr+0x290>)
 800cac6:	5c8a      	ldrb	r2, [r1, r2]
 800cac8:	4093      	lsls	r3, r2
 800caca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800cad2:	4293      	cmp	r3, r2
 800cad4:	dc1a      	bgt.n	800cb0c <tcp_slowtmr+0x294>
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	b21a      	sxth	r2, r3
 800cada:	e019      	b.n	800cb10 <tcp_slowtmr+0x298>
 800cadc:	24007c44 	.word	0x24007c44
 800cae0:	24007c5a 	.word	0x24007c5a
 800cae4:	24007c50 	.word	0x24007c50
 800cae8:	08013e98 	.word	0x08013e98
 800caec:	08014218 	.word	0x08014218
 800caf0:	08013f18 	.word	0x08013f18
 800caf4:	08014244 	.word	0x08014244
 800caf8:	08014270 	.word	0x08014270
 800cafc:	080142a0 	.word	0x080142a0
 800cb00:	080142d4 	.word	0x080142d4
 800cb04:	0801590c 	.word	0x0801590c
 800cb08:	080158fc 	.word	0x080158fc
 800cb0c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800cb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb18:	2200      	movs	r2, #0
 800cb1a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	bf28      	it	cs
 800cb2c:	4613      	movcs	r3, r2
 800cb2e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cb30:	8a7b      	ldrh	r3, [r7, #18]
 800cb32:	085b      	lsrs	r3, r3, #1
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cb46:	005b      	lsls	r3, r3, #1
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d206      	bcs.n	800cb5c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb58:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800cb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800cb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb62:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800cb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800cb6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb70:	f004 f818 	bl	8010ba4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800cb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb76:	7d1b      	ldrb	r3, [r3, #20]
 800cb78:	2b06      	cmp	r3, #6
 800cb7a:	d111      	bne.n	800cba0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800cb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7e:	8b5b      	ldrh	r3, [r3, #26]
 800cb80:	f003 0310 	and.w	r3, r3, #16
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00b      	beq.n	800cba0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb88:	4b9c      	ldr	r3, [pc, #624]	@ (800cdfc <tcp_slowtmr+0x584>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8e:	6a1b      	ldr	r3, [r3, #32]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	2b28      	cmp	r3, #40	@ 0x28
 800cb94:	d904      	bls.n	800cba0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800cb96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba2:	7a5b      	ldrb	r3, [r3, #9]
 800cba4:	f003 0308 	and.w	r3, r3, #8
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d04a      	beq.n	800cc42 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d003      	beq.n	800cbbc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800cbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cbb8:	2b07      	cmp	r3, #7
 800cbba:	d142      	bne.n	800cc42 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbbc:	4b8f      	ldr	r3, [pc, #572]	@ (800cdfc <tcp_slowtmr+0x584>)
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cbcc:	4b8c      	ldr	r3, [pc, #560]	@ (800ce00 <tcp_slowtmr+0x588>)
 800cbce:	440b      	add	r3, r1
 800cbd0:	498c      	ldr	r1, [pc, #560]	@ (800ce04 <tcp_slowtmr+0x58c>)
 800cbd2:	fba1 1303 	umull	r1, r3, r1, r3
 800cbd6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d90a      	bls.n	800cbf2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800cbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800cbe6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbea:	3301      	adds	r3, #1
 800cbec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cbf0:	e027      	b.n	800cc42 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbf2:	4b82      	ldr	r3, [pc, #520]	@ (800cdfc <tcp_slowtmr+0x584>)
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfe:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc04:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cc08:	4618      	mov	r0, r3
 800cc0a:	4b7f      	ldr	r3, [pc, #508]	@ (800ce08 <tcp_slowtmr+0x590>)
 800cc0c:	fb00 f303 	mul.w	r3, r0, r3
 800cc10:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cc12:	497c      	ldr	r1, [pc, #496]	@ (800ce04 <tcp_slowtmr+0x58c>)
 800cc14:	fba1 1303 	umull	r1, r3, r1, r3
 800cc18:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d911      	bls.n	800cc42 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cc1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc20:	f004 fac4 	bl	80111ac <tcp_keepalive>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cc2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d107      	bne.n	800cc42 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc34:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cc38:	3301      	adds	r3, #1
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d011      	beq.n	800cc6e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cc4a:	4b6c      	ldr	r3, [pc, #432]	@ (800cdfc <tcp_slowtmr+0x584>)
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	1ad2      	subs	r2, r2, r3
 800cc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc56:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	440b      	add	r3, r1
 800cc62:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d302      	bcc.n	800cc6e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800cc68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc6a:	f000 fddd 	bl	800d828 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc70:	7d1b      	ldrb	r3, [r3, #20]
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d10b      	bne.n	800cc8e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc76:	4b61      	ldr	r3, [pc, #388]	@ (800cdfc <tcp_slowtmr+0x584>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7c:	6a1b      	ldr	r3, [r3, #32]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	2b28      	cmp	r3, #40	@ 0x28
 800cc82:	d904      	bls.n	800cc8e <tcp_slowtmr+0x416>
        ++pcb_remove;
 800cc84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc88:	3301      	adds	r3, #1
 800cc8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc90:	7d1b      	ldrb	r3, [r3, #20]
 800cc92:	2b09      	cmp	r3, #9
 800cc94:	d10b      	bne.n	800ccae <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc96:	4b59      	ldr	r3, [pc, #356]	@ (800cdfc <tcp_slowtmr+0x584>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	2bf0      	cmp	r3, #240	@ 0xf0
 800cca2:	d904      	bls.n	800ccae <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cca8:	3301      	adds	r3, #1
 800ccaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800ccae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d060      	beq.n	800cd78 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800ccb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccbc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800ccbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccc0:	f000 fbfe 	bl	800d4c0 <tcp_pcb_purge>
      if (prev != NULL) {
 800ccc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d010      	beq.n	800ccec <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ccca:	4b50      	ldr	r3, [pc, #320]	@ (800ce0c <tcp_slowtmr+0x594>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d106      	bne.n	800cce2 <tcp_slowtmr+0x46a>
 800ccd4:	4b4e      	ldr	r3, [pc, #312]	@ (800ce10 <tcp_slowtmr+0x598>)
 800ccd6:	f240 526d 	movw	r2, #1389	@ 0x56d
 800ccda:	494e      	ldr	r1, [pc, #312]	@ (800ce14 <tcp_slowtmr+0x59c>)
 800ccdc:	484e      	ldr	r0, [pc, #312]	@ (800ce18 <tcp_slowtmr+0x5a0>)
 800ccde:	f004 ff77 	bl	8011bd0 <iprintf>
        prev->next = pcb->next;
 800cce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce4:	68da      	ldr	r2, [r3, #12]
 800cce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce8:	60da      	str	r2, [r3, #12]
 800ccea:	e00f      	b.n	800cd0c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ccec:	4b47      	ldr	r3, [pc, #284]	@ (800ce0c <tcp_slowtmr+0x594>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d006      	beq.n	800cd04 <tcp_slowtmr+0x48c>
 800ccf6:	4b46      	ldr	r3, [pc, #280]	@ (800ce10 <tcp_slowtmr+0x598>)
 800ccf8:	f240 5271 	movw	r2, #1393	@ 0x571
 800ccfc:	4947      	ldr	r1, [pc, #284]	@ (800ce1c <tcp_slowtmr+0x5a4>)
 800ccfe:	4846      	ldr	r0, [pc, #280]	@ (800ce18 <tcp_slowtmr+0x5a0>)
 800cd00:	f004 ff66 	bl	8011bd0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	4a40      	ldr	r2, [pc, #256]	@ (800ce0c <tcp_slowtmr+0x594>)
 800cd0a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cd0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d013      	beq.n	800cd3c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd16:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cd1c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800cd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd20:	3304      	adds	r3, #4
 800cd22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd24:	8ad2      	ldrh	r2, [r2, #22]
 800cd26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd28:	8b09      	ldrh	r1, [r1, #24]
 800cd2a:	9102      	str	r1, [sp, #8]
 800cd2c:	9201      	str	r2, [sp, #4]
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	462b      	mov	r3, r5
 800cd32:	4622      	mov	r2, r4
 800cd34:	4601      	mov	r1, r0
 800cd36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd38:	f004 f984 	bl	8011044 <tcp_rst>
      err_arg = pcb->callback_arg;
 800cd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cd42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd44:	7d1b      	ldrb	r3, [r3, #20]
 800cd46:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cd52:	6838      	ldr	r0, [r7, #0]
 800cd54:	f7ff f9f2 	bl	800c13c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800cd58:	4b31      	ldr	r3, [pc, #196]	@ (800ce20 <tcp_slowtmr+0x5a8>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d004      	beq.n	800cd6e <tcp_slowtmr+0x4f6>
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f06f 010c 	mvn.w	r1, #12
 800cd6a:	68b8      	ldr	r0, [r7, #8]
 800cd6c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cd6e:	4b2c      	ldr	r3, [pc, #176]	@ (800ce20 <tcp_slowtmr+0x5a8>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d037      	beq.n	800cde6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cd76:	e592      	b.n	800c89e <tcp_slowtmr+0x26>
      prev = pcb;
 800cd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800cd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd84:	7f1b      	ldrb	r3, [r3, #28]
 800cd86:	3301      	adds	r3, #1
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd90:	7f1a      	ldrb	r2, [r3, #28]
 800cd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd94:	7f5b      	ldrb	r3, [r3, #29]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d325      	bcc.n	800cde6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800cda0:	4b1f      	ldr	r3, [pc, #124]	@ (800ce20 <tcp_slowtmr+0x5a8>)
 800cda2:	2200      	movs	r2, #0
 800cda4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00b      	beq.n	800cdc8 <tcp_slowtmr+0x550>
 800cdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdb8:	6912      	ldr	r2, [r2, #16]
 800cdba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	4798      	blx	r3
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cdc6:	e002      	b.n	800cdce <tcp_slowtmr+0x556>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800cdce:	4b14      	ldr	r3, [pc, #80]	@ (800ce20 <tcp_slowtmr+0x5a8>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f47f ad62 	bne.w	800c89c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cdd8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d102      	bne.n	800cde6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cde0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cde2:	f003 fb7b 	bl	80104dc <tcp_output>
  while (pcb != NULL) {
 800cde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f47f ad5e 	bne.w	800c8aa <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800cdf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ce24 <tcp_slowtmr+0x5ac>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cdf8:	e069      	b.n	800cece <tcp_slowtmr+0x656>
 800cdfa:	bf00      	nop
 800cdfc:	24007c44 	.word	0x24007c44
 800ce00:	000a4cb8 	.word	0x000a4cb8
 800ce04:	10624dd3 	.word	0x10624dd3
 800ce08:	000124f8 	.word	0x000124f8
 800ce0c:	24007c50 	.word	0x24007c50
 800ce10:	08013e98 	.word	0x08013e98
 800ce14:	0801430c 	.word	0x0801430c
 800ce18:	08013f18 	.word	0x08013f18
 800ce1c:	08014338 	.word	0x08014338
 800ce20:	24007c58 	.word	0x24007c58
 800ce24:	24007c54 	.word	0x24007c54
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2a:	7d1b      	ldrb	r3, [r3, #20]
 800ce2c:	2b0a      	cmp	r3, #10
 800ce2e:	d006      	beq.n	800ce3e <tcp_slowtmr+0x5c6>
 800ce30:	4b2b      	ldr	r3, [pc, #172]	@ (800cee0 <tcp_slowtmr+0x668>)
 800ce32:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ce36:	492b      	ldr	r1, [pc, #172]	@ (800cee4 <tcp_slowtmr+0x66c>)
 800ce38:	482b      	ldr	r0, [pc, #172]	@ (800cee8 <tcp_slowtmr+0x670>)
 800ce3a:	f004 fec9 	bl	8011bd0 <iprintf>
    pcb_remove = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ce44:	4b29      	ldr	r3, [pc, #164]	@ (800ceec <tcp_slowtmr+0x674>)
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4a:	6a1b      	ldr	r3, [r3, #32]
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	2bf0      	cmp	r3, #240	@ 0xf0
 800ce50:	d904      	bls.n	800ce5c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ce52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce56:	3301      	adds	r3, #1
 800ce58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d02f      	beq.n	800cec4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ce64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce66:	f000 fb2b 	bl	800d4c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ce6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d010      	beq.n	800ce92 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ce70:	4b1f      	ldr	r3, [pc, #124]	@ (800cef0 <tcp_slowtmr+0x678>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d106      	bne.n	800ce88 <tcp_slowtmr+0x610>
 800ce7a:	4b19      	ldr	r3, [pc, #100]	@ (800cee0 <tcp_slowtmr+0x668>)
 800ce7c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ce80:	491c      	ldr	r1, [pc, #112]	@ (800cef4 <tcp_slowtmr+0x67c>)
 800ce82:	4819      	ldr	r0, [pc, #100]	@ (800cee8 <tcp_slowtmr+0x670>)
 800ce84:	f004 fea4 	bl	8011bd0 <iprintf>
        prev->next = pcb->next;
 800ce88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8a:	68da      	ldr	r2, [r3, #12]
 800ce8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8e:	60da      	str	r2, [r3, #12]
 800ce90:	e00f      	b.n	800ceb2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ce92:	4b17      	ldr	r3, [pc, #92]	@ (800cef0 <tcp_slowtmr+0x678>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d006      	beq.n	800ceaa <tcp_slowtmr+0x632>
 800ce9c:	4b10      	ldr	r3, [pc, #64]	@ (800cee0 <tcp_slowtmr+0x668>)
 800ce9e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800cea2:	4915      	ldr	r1, [pc, #84]	@ (800cef8 <tcp_slowtmr+0x680>)
 800cea4:	4810      	ldr	r0, [pc, #64]	@ (800cee8 <tcp_slowtmr+0x670>)
 800cea6:	f004 fe93 	bl	8011bd0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ceaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	4a10      	ldr	r2, [pc, #64]	@ (800cef0 <tcp_slowtmr+0x678>)
 800ceb0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ceb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cebc:	69f8      	ldr	r0, [r7, #28]
 800cebe:	f7ff f93d 	bl	800c13c <tcp_free>
 800cec2:	e004      	b.n	800cece <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800cec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1a9      	bne.n	800ce28 <tcp_slowtmr+0x5b0>
    }
  }
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop
 800ced8:	3730      	adds	r7, #48	@ 0x30
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bdb0      	pop	{r4, r5, r7, pc}
 800cede:	bf00      	nop
 800cee0:	08013e98 	.word	0x08013e98
 800cee4:	08014364 	.word	0x08014364
 800cee8:	08013f18 	.word	0x08013f18
 800ceec:	24007c44 	.word	0x24007c44
 800cef0:	24007c54 	.word	0x24007c54
 800cef4:	08014394 	.word	0x08014394
 800cef8:	080143bc 	.word	0x080143bc

0800cefc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cf02:	4b2d      	ldr	r3, [pc, #180]	@ (800cfb8 <tcp_fasttmr+0xbc>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	3301      	adds	r3, #1
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	4b2b      	ldr	r3, [pc, #172]	@ (800cfb8 <tcp_fasttmr+0xbc>)
 800cf0c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cf0e:	4b2b      	ldr	r3, [pc, #172]	@ (800cfbc <tcp_fasttmr+0xc0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cf14:	e048      	b.n	800cfa8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	7f9a      	ldrb	r2, [r3, #30]
 800cf1a:	4b27      	ldr	r3, [pc, #156]	@ (800cfb8 <tcp_fasttmr+0xbc>)
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d03f      	beq.n	800cfa2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cf22:	4b25      	ldr	r3, [pc, #148]	@ (800cfb8 <tcp_fasttmr+0xbc>)
 800cf24:	781a      	ldrb	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	8b5b      	ldrh	r3, [r3, #26]
 800cf2e:	f003 0301 	and.w	r3, r3, #1
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d010      	beq.n	800cf58 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	8b5b      	ldrh	r3, [r3, #26]
 800cf3a:	f043 0302 	orr.w	r3, r3, #2
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f003 fac9 	bl	80104dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	8b5b      	ldrh	r3, [r3, #26]
 800cf4e:	f023 0303 	bic.w	r3, r3, #3
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	8b5b      	ldrh	r3, [r3, #26]
 800cf5c:	f003 0308 	and.w	r3, r3, #8
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d009      	beq.n	800cf78 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	8b5b      	ldrh	r3, [r3, #26]
 800cf68:	f023 0308 	bic.w	r3, r3, #8
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff fa76 	bl	800c464 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00a      	beq.n	800cf9c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cf86:	4b0e      	ldr	r3, [pc, #56]	@ (800cfc0 <tcp_fasttmr+0xc4>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f819 	bl	800cfc4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cf92:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc0 <tcp_fasttmr+0xc4>)
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d000      	beq.n	800cf9c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cf9a:	e7b8      	b.n	800cf0e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	607b      	str	r3, [r7, #4]
 800cfa0:	e002      	b.n	800cfa8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1b3      	bne.n	800cf16 <tcp_fasttmr+0x1a>
    }
  }
}
 800cfae:	bf00      	nop
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	24007c5a 	.word	0x24007c5a
 800cfbc:	24007c50 	.word	0x24007c50
 800cfc0:	24007c58 	.word	0x24007c58

0800cfc4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cfc4:	b590      	push	{r4, r7, lr}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d109      	bne.n	800cfe6 <tcp_process_refused_data+0x22>
 800cfd2:	4b37      	ldr	r3, [pc, #220]	@ (800d0b0 <tcp_process_refused_data+0xec>)
 800cfd4:	f240 6209 	movw	r2, #1545	@ 0x609
 800cfd8:	4936      	ldr	r1, [pc, #216]	@ (800d0b4 <tcp_process_refused_data+0xf0>)
 800cfda:	4837      	ldr	r0, [pc, #220]	@ (800d0b8 <tcp_process_refused_data+0xf4>)
 800cfdc:	f004 fdf8 	bl	8011bd0 <iprintf>
 800cfe0:	f06f 030f 	mvn.w	r3, #15
 800cfe4:	e060      	b.n	800d0a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfea:	7b5b      	ldrb	r3, [r3, #13]
 800cfec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cff2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00b      	beq.n	800d01c <tcp_process_refused_data+0x58>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6918      	ldr	r0, [r3, #16]
 800d00e:	2300      	movs	r3, #0
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	6879      	ldr	r1, [r7, #4]
 800d014:	47a0      	blx	r4
 800d016:	4603      	mov	r3, r0
 800d018:	73fb      	strb	r3, [r7, #15]
 800d01a:	e007      	b.n	800d02c <tcp_process_refused_data+0x68>
 800d01c:	2300      	movs	r3, #0
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	6879      	ldr	r1, [r7, #4]
 800d022:	2000      	movs	r0, #0
 800d024:	f000 f8a4 	bl	800d170 <tcp_recv_null>
 800d028:	4603      	mov	r3, r0
 800d02a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d02c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d12a      	bne.n	800d08a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d034:	7bbb      	ldrb	r3, [r7, #14]
 800d036:	f003 0320 	and.w	r3, r3, #32
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d033      	beq.n	800d0a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d042:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d046:	d005      	beq.n	800d054 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d04c:	3301      	adds	r3, #1
 800d04e:	b29a      	uxth	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00b      	beq.n	800d076 <tcp_process_refused_data+0xb2>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6918      	ldr	r0, [r3, #16]
 800d068:	2300      	movs	r3, #0
 800d06a:	2200      	movs	r2, #0
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	47a0      	blx	r4
 800d070:	4603      	mov	r3, r0
 800d072:	73fb      	strb	r3, [r7, #15]
 800d074:	e001      	b.n	800d07a <tcp_process_refused_data+0xb6>
 800d076:	2300      	movs	r3, #0
 800d078:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d07e:	f113 0f0d 	cmn.w	r3, #13
 800d082:	d110      	bne.n	800d0a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d084:	f06f 030c 	mvn.w	r3, #12
 800d088:	e00e      	b.n	800d0a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d08e:	f113 0f0d 	cmn.w	r3, #13
 800d092:	d102      	bne.n	800d09a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d094:	f06f 030c 	mvn.w	r3, #12
 800d098:	e006      	b.n	800d0a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	68ba      	ldr	r2, [r7, #8]
 800d09e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d0a0:	f06f 0304 	mvn.w	r3, #4
 800d0a4:	e000      	b.n	800d0a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd90      	pop	{r4, r7, pc}
 800d0b0:	08013e98 	.word	0x08013e98
 800d0b4:	080143e4 	.word	0x080143e4
 800d0b8:	08013f18 	.word	0x08013f18

0800d0bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d0c4:	e007      	b.n	800d0d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f80a 	bl	800d0e6 <tcp_seg_free>
    seg = next;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1f4      	bne.n	800d0c6 <tcp_segs_free+0xa>
  }
}
 800d0dc:	bf00      	nop
 800d0de:	bf00      	nop
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b082      	sub	sp, #8
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00c      	beq.n	800d10e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d004      	beq.n	800d106 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe fd7b 	bl	800bbfc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	2003      	movs	r0, #3
 800d10a:	f7fd ff01 	bl	800af10 <memp_free>
  }
}
 800d10e:	bf00      	nop
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
	...

0800d118 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d106      	bne.n	800d134 <tcp_seg_copy+0x1c>
 800d126:	4b0f      	ldr	r3, [pc, #60]	@ (800d164 <tcp_seg_copy+0x4c>)
 800d128:	f240 6282 	movw	r2, #1666	@ 0x682
 800d12c:	490e      	ldr	r1, [pc, #56]	@ (800d168 <tcp_seg_copy+0x50>)
 800d12e:	480f      	ldr	r0, [pc, #60]	@ (800d16c <tcp_seg_copy+0x54>)
 800d130:	f004 fd4e 	bl	8011bd0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d134:	2003      	movs	r0, #3
 800d136:	f7fd fe7b 	bl	800ae30 <memp_malloc>
 800d13a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <tcp_seg_copy+0x2e>
    return NULL;
 800d142:	2300      	movs	r3, #0
 800d144:	e00a      	b.n	800d15c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d146:	2210      	movs	r2, #16
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f004 ff0d 	bl	8011f6a <memcpy>
  pbuf_ref(cseg->p);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	4618      	mov	r0, r3
 800d156:	f7fe fdf1 	bl	800bd3c <pbuf_ref>
  return cseg;
 800d15a:	68fb      	ldr	r3, [r7, #12]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	08013e98 	.word	0x08013e98
 800d168:	08014428 	.word	0x08014428
 800d16c:	08013f18 	.word	0x08013f18

0800d170 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d109      	bne.n	800d198 <tcp_recv_null+0x28>
 800d184:	4b12      	ldr	r3, [pc, #72]	@ (800d1d0 <tcp_recv_null+0x60>)
 800d186:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d18a:	4912      	ldr	r1, [pc, #72]	@ (800d1d4 <tcp_recv_null+0x64>)
 800d18c:	4812      	ldr	r0, [pc, #72]	@ (800d1d8 <tcp_recv_null+0x68>)
 800d18e:	f004 fd1f 	bl	8011bd0 <iprintf>
 800d192:	f06f 030f 	mvn.w	r3, #15
 800d196:	e016      	b.n	800d1c6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d009      	beq.n	800d1b2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	891b      	ldrh	r3, [r3, #8]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	68b8      	ldr	r0, [r7, #8]
 800d1a6:	f7ff fb17 	bl	800c7d8 <tcp_recved>
    pbuf_free(p);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7fe fd26 	bl	800bbfc <pbuf_free>
 800d1b0:	e008      	b.n	800d1c4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d1b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d104      	bne.n	800d1c4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d1ba:	68b8      	ldr	r0, [r7, #8]
 800d1bc:	f7ff f9bc 	bl	800c538 <tcp_close>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	e000      	b.n	800d1c6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	08013e98 	.word	0x08013e98
 800d1d4:	08014444 	.word	0x08014444
 800d1d8:	08013f18 	.word	0x08013f18

0800d1dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d1e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	db01      	blt.n	800d1f2 <tcp_kill_prio+0x16>
 800d1ee:	79fb      	ldrb	r3, [r7, #7]
 800d1f0:	e000      	b.n	800d1f4 <tcp_kill_prio+0x18>
 800d1f2:	237f      	movs	r3, #127	@ 0x7f
 800d1f4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d1f6:	7afb      	ldrb	r3, [r7, #11]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d034      	beq.n	800d266 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d1fc:	7afb      	ldrb	r3, [r7, #11]
 800d1fe:	3b01      	subs	r3, #1
 800d200:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d20a:	4b19      	ldr	r3, [pc, #100]	@ (800d270 <tcp_kill_prio+0x94>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	617b      	str	r3, [r7, #20]
 800d210:	e01f      	b.n	800d252 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	7d5b      	ldrb	r3, [r3, #21]
 800d216:	7afa      	ldrb	r2, [r7, #11]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d80c      	bhi.n	800d236 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d220:	7afa      	ldrb	r2, [r7, #11]
 800d222:	429a      	cmp	r2, r3
 800d224:	d112      	bne.n	800d24c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d226:	4b13      	ldr	r3, [pc, #76]	@ (800d274 <tcp_kill_prio+0x98>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	429a      	cmp	r2, r3
 800d234:	d80a      	bhi.n	800d24c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d236:	4b0f      	ldr	r3, [pc, #60]	@ (800d274 <tcp_kill_prio+0x98>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	7d5b      	ldrb	r3, [r3, #21]
 800d24a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	617b      	str	r3, [r7, #20]
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1dc      	bne.n	800d212 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d004      	beq.n	800d268 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d25e:	6938      	ldr	r0, [r7, #16]
 800d260:	f7ff fa54 	bl	800c70c <tcp_abort>
 800d264:	e000      	b.n	800d268 <tcp_kill_prio+0x8c>
    return;
 800d266:	bf00      	nop
  }
}
 800d268:	3718      	adds	r7, #24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	24007c50 	.word	0x24007c50
 800d274:	24007c44 	.word	0x24007c44

0800d278 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d282:	79fb      	ldrb	r3, [r7, #7]
 800d284:	2b08      	cmp	r3, #8
 800d286:	d009      	beq.n	800d29c <tcp_kill_state+0x24>
 800d288:	79fb      	ldrb	r3, [r7, #7]
 800d28a:	2b09      	cmp	r3, #9
 800d28c:	d006      	beq.n	800d29c <tcp_kill_state+0x24>
 800d28e:	4b1a      	ldr	r3, [pc, #104]	@ (800d2f8 <tcp_kill_state+0x80>)
 800d290:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d294:	4919      	ldr	r1, [pc, #100]	@ (800d2fc <tcp_kill_state+0x84>)
 800d296:	481a      	ldr	r0, [pc, #104]	@ (800d300 <tcp_kill_state+0x88>)
 800d298:	f004 fc9a 	bl	8011bd0 <iprintf>

  inactivity = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2a4:	4b17      	ldr	r3, [pc, #92]	@ (800d304 <tcp_kill_state+0x8c>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	617b      	str	r3, [r7, #20]
 800d2aa:	e017      	b.n	800d2dc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	7d1b      	ldrb	r3, [r3, #20]
 800d2b0:	79fa      	ldrb	r2, [r7, #7]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d10f      	bne.n	800d2d6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d2b6:	4b14      	ldr	r3, [pc, #80]	@ (800d308 <tcp_kill_state+0x90>)
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d807      	bhi.n	800d2d6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d2c6:	4b10      	ldr	r3, [pc, #64]	@ (800d308 <tcp_kill_state+0x90>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	6a1b      	ldr	r3, [r3, #32]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	617b      	str	r3, [r7, #20]
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1e4      	bne.n	800d2ac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	6938      	ldr	r0, [r7, #16]
 800d2ec:	f7ff f950 	bl	800c590 <tcp_abandon>
  }
}
 800d2f0:	bf00      	nop
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	08013e98 	.word	0x08013e98
 800d2fc:	08014460 	.word	0x08014460
 800d300:	08013f18 	.word	0x08013f18
 800d304:	24007c50 	.word	0x24007c50
 800d308:	24007c44 	.word	0x24007c44

0800d30c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d316:	2300      	movs	r3, #0
 800d318:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d31a:	4b12      	ldr	r3, [pc, #72]	@ (800d364 <tcp_kill_timewait+0x58>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	60fb      	str	r3, [r7, #12]
 800d320:	e012      	b.n	800d348 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d322:	4b11      	ldr	r3, [pc, #68]	@ (800d368 <tcp_kill_timewait+0x5c>)
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d807      	bhi.n	800d342 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d332:	4b0d      	ldr	r3, [pc, #52]	@ (800d368 <tcp_kill_timewait+0x5c>)
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6a1b      	ldr	r3, [r3, #32]
 800d33a:	1ad3      	subs	r3, r2, r3
 800d33c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	60fb      	str	r3, [r7, #12]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1e9      	bne.n	800d322 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d002      	beq.n	800d35a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d354:	68b8      	ldr	r0, [r7, #8]
 800d356:	f7ff f9d9 	bl	800c70c <tcp_abort>
  }
}
 800d35a:	bf00      	nop
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	24007c54 	.word	0x24007c54
 800d368:	24007c44 	.word	0x24007c44

0800d36c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d372:	4b10      	ldr	r3, [pc, #64]	@ (800d3b4 <tcp_handle_closepend+0x48>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d378:	e014      	b.n	800d3a4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	8b5b      	ldrh	r3, [r3, #26]
 800d384:	f003 0308 	and.w	r3, r3, #8
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d009      	beq.n	800d3a0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	8b5b      	ldrh	r3, [r3, #26]
 800d390:	f023 0308 	bic.w	r3, r3, #8
 800d394:	b29a      	uxth	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff f862 	bl	800c464 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1e7      	bne.n	800d37a <tcp_handle_closepend+0xe>
  }
}
 800d3aa:	bf00      	nop
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	24007c50 	.word	0x24007c50

0800d3b8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	4603      	mov	r3, r0
 800d3c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3c2:	2001      	movs	r0, #1
 800d3c4:	f7fd fd34 	bl	800ae30 <memp_malloc>
 800d3c8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d126      	bne.n	800d41e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d3d0:	f7ff ffcc 	bl	800d36c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d3d4:	f7ff ff9a 	bl	800d30c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3d8:	2001      	movs	r0, #1
 800d3da:	f7fd fd29 	bl	800ae30 <memp_malloc>
 800d3de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d11b      	bne.n	800d41e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d3e6:	2009      	movs	r0, #9
 800d3e8:	f7ff ff46 	bl	800d278 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	f7fd fd1f 	bl	800ae30 <memp_malloc>
 800d3f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d111      	bne.n	800d41e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d3fa:	2008      	movs	r0, #8
 800d3fc:	f7ff ff3c 	bl	800d278 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d400:	2001      	movs	r0, #1
 800d402:	f7fd fd15 	bl	800ae30 <memp_malloc>
 800d406:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d107      	bne.n	800d41e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff fee3 	bl	800d1dc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d416:	2001      	movs	r0, #1
 800d418:	f7fd fd0a 	bl	800ae30 <memp_malloc>
 800d41c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d03f      	beq.n	800d4a4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d424:	229c      	movs	r2, #156	@ 0x9c
 800d426:	2100      	movs	r1, #0
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	f004 fd29 	bl	8011e80 <memset>
    pcb->prio = prio;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	79fa      	ldrb	r2, [r7, #7]
 800d432:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d43a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d444:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	22ff      	movs	r2, #255	@ 0xff
 800d452:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d45a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2206      	movs	r2, #6
 800d460:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2206      	movs	r2, #6
 800d468:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d470:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2201      	movs	r2, #1
 800d476:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d47a:	4b0d      	ldr	r3, [pc, #52]	@ (800d4b0 <tcp_alloc+0xf8>)
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d482:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b4 <tcp_alloc+0xfc>)
 800d484:	781a      	ldrb	r2, [r3, #0]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d490:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4a08      	ldr	r2, [pc, #32]	@ (800d4b8 <tcp_alloc+0x100>)
 800d498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	4a07      	ldr	r2, [pc, #28]	@ (800d4bc <tcp_alloc+0x104>)
 800d4a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	24007c44 	.word	0x24007c44
 800d4b4:	24007c5a 	.word	0x24007c5a
 800d4b8:	0800d171 	.word	0x0800d171
 800d4bc:	006ddd00 	.word	0x006ddd00

0800d4c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d107      	bne.n	800d4de <tcp_pcb_purge+0x1e>
 800d4ce:	4b21      	ldr	r3, [pc, #132]	@ (800d554 <tcp_pcb_purge+0x94>)
 800d4d0:	f640 0251 	movw	r2, #2129	@ 0x851
 800d4d4:	4920      	ldr	r1, [pc, #128]	@ (800d558 <tcp_pcb_purge+0x98>)
 800d4d6:	4821      	ldr	r0, [pc, #132]	@ (800d55c <tcp_pcb_purge+0x9c>)
 800d4d8:	f004 fb7a 	bl	8011bd0 <iprintf>
 800d4dc:	e037      	b.n	800d54e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	7d1b      	ldrb	r3, [r3, #20]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d033      	beq.n	800d54e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d4ea:	2b0a      	cmp	r3, #10
 800d4ec:	d02f      	beq.n	800d54e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d02b      	beq.n	800d54e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d007      	beq.n	800d50e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d502:	4618      	mov	r0, r3
 800d504:	f7fe fb7a 	bl	800bbfc <pbuf_free>
      pcb->refused_data = NULL;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f986 	bl	800d828 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d522:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d528:	4618      	mov	r0, r3
 800d52a:	f7ff fdc7 	bl	800d0bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d532:	4618      	mov	r0, r3
 800d534:	f7ff fdc2 	bl	800d0bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	08013e98 	.word	0x08013e98
 800d558:	08014520 	.word	0x08014520
 800d55c:	08013f18 	.word	0x08013f18

0800d560 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <tcp_pcb_remove+0x1e>
 800d570:	4b3e      	ldr	r3, [pc, #248]	@ (800d66c <tcp_pcb_remove+0x10c>)
 800d572:	f640 0283 	movw	r2, #2179	@ 0x883
 800d576:	493e      	ldr	r1, [pc, #248]	@ (800d670 <tcp_pcb_remove+0x110>)
 800d578:	483e      	ldr	r0, [pc, #248]	@ (800d674 <tcp_pcb_remove+0x114>)
 800d57a:	f004 fb29 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d106      	bne.n	800d592 <tcp_pcb_remove+0x32>
 800d584:	4b39      	ldr	r3, [pc, #228]	@ (800d66c <tcp_pcb_remove+0x10c>)
 800d586:	f640 0284 	movw	r2, #2180	@ 0x884
 800d58a:	493b      	ldr	r1, [pc, #236]	@ (800d678 <tcp_pcb_remove+0x118>)
 800d58c:	4839      	ldr	r0, [pc, #228]	@ (800d674 <tcp_pcb_remove+0x114>)
 800d58e:	f004 fb1f 	bl	8011bd0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d105      	bne.n	800d5a8 <tcp_pcb_remove+0x48>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	601a      	str	r2, [r3, #0]
 800d5a6:	e013      	b.n	800d5d0 <tcp_pcb_remove+0x70>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	e00c      	b.n	800d5ca <tcp_pcb_remove+0x6a>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d104      	bne.n	800d5c4 <tcp_pcb_remove+0x64>
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	68da      	ldr	r2, [r3, #12]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	60da      	str	r2, [r3, #12]
 800d5c2:	e005      	b.n	800d5d0 <tcp_pcb_remove+0x70>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1ef      	bne.n	800d5b0 <tcp_pcb_remove+0x50>
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d5d6:	6838      	ldr	r0, [r7, #0]
 800d5d8:	f7ff ff72 	bl	800d4c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	7d1b      	ldrb	r3, [r3, #20]
 800d5e0:	2b0a      	cmp	r3, #10
 800d5e2:	d013      	beq.n	800d60c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d00f      	beq.n	800d60c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	8b5b      	ldrh	r3, [r3, #26]
 800d5f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d009      	beq.n	800d60c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	8b5b      	ldrh	r3, [r3, #26]
 800d5fc:	f043 0302 	orr.w	r3, r3, #2
 800d600:	b29a      	uxth	r2, r3
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d606:	6838      	ldr	r0, [r7, #0]
 800d608:	f002 ff68 	bl	80104dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	7d1b      	ldrb	r3, [r3, #20]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d020      	beq.n	800d656 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d006      	beq.n	800d62a <tcp_pcb_remove+0xca>
 800d61c:	4b13      	ldr	r3, [pc, #76]	@ (800d66c <tcp_pcb_remove+0x10c>)
 800d61e:	f640 0293 	movw	r2, #2195	@ 0x893
 800d622:	4916      	ldr	r1, [pc, #88]	@ (800d67c <tcp_pcb_remove+0x11c>)
 800d624:	4813      	ldr	r0, [pc, #76]	@ (800d674 <tcp_pcb_remove+0x114>)
 800d626:	f004 fad3 	bl	8011bd0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d006      	beq.n	800d640 <tcp_pcb_remove+0xe0>
 800d632:	4b0e      	ldr	r3, [pc, #56]	@ (800d66c <tcp_pcb_remove+0x10c>)
 800d634:	f640 0294 	movw	r2, #2196	@ 0x894
 800d638:	4911      	ldr	r1, [pc, #68]	@ (800d680 <tcp_pcb_remove+0x120>)
 800d63a:	480e      	ldr	r0, [pc, #56]	@ (800d674 <tcp_pcb_remove+0x114>)
 800d63c:	f004 fac8 	bl	8011bd0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d644:	2b00      	cmp	r3, #0
 800d646:	d006      	beq.n	800d656 <tcp_pcb_remove+0xf6>
 800d648:	4b08      	ldr	r3, [pc, #32]	@ (800d66c <tcp_pcb_remove+0x10c>)
 800d64a:	f640 0296 	movw	r2, #2198	@ 0x896
 800d64e:	490d      	ldr	r1, [pc, #52]	@ (800d684 <tcp_pcb_remove+0x124>)
 800d650:	4808      	ldr	r0, [pc, #32]	@ (800d674 <tcp_pcb_remove+0x114>)
 800d652:	f004 fabd 	bl	8011bd0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2200      	movs	r2, #0
 800d65a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	2200      	movs	r2, #0
 800d660:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d662:	bf00      	nop
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	08013e98 	.word	0x08013e98
 800d670:	0801453c 	.word	0x0801453c
 800d674:	08013f18 	.word	0x08013f18
 800d678:	08014558 	.word	0x08014558
 800d67c:	08014578 	.word	0x08014578
 800d680:	08014590 	.word	0x08014590
 800d684:	080145ac 	.word	0x080145ac

0800d688 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d106      	bne.n	800d6a4 <tcp_next_iss+0x1c>
 800d696:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c0 <tcp_next_iss+0x38>)
 800d698:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d69c:	4909      	ldr	r1, [pc, #36]	@ (800d6c4 <tcp_next_iss+0x3c>)
 800d69e:	480a      	ldr	r0, [pc, #40]	@ (800d6c8 <tcp_next_iss+0x40>)
 800d6a0:	f004 fa96 	bl	8011bd0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d6a4:	4b09      	ldr	r3, [pc, #36]	@ (800d6cc <tcp_next_iss+0x44>)
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	4b09      	ldr	r3, [pc, #36]	@ (800d6d0 <tcp_next_iss+0x48>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	4a07      	ldr	r2, [pc, #28]	@ (800d6cc <tcp_next_iss+0x44>)
 800d6b0:	6013      	str	r3, [r2, #0]
  return iss;
 800d6b2:	4b06      	ldr	r3, [pc, #24]	@ (800d6cc <tcp_next_iss+0x44>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	08013e98 	.word	0x08013e98
 800d6c4:	080145c4 	.word	0x080145c4
 800d6c8:	08013f18 	.word	0x08013f18
 800d6cc:	24000028 	.word	0x24000028
 800d6d0:	24007c44 	.word	0x24007c44

0800d6d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d106      	bne.n	800d6f6 <tcp_eff_send_mss_netif+0x22>
 800d6e8:	4b14      	ldr	r3, [pc, #80]	@ (800d73c <tcp_eff_send_mss_netif+0x68>)
 800d6ea:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d6ee:	4914      	ldr	r1, [pc, #80]	@ (800d740 <tcp_eff_send_mss_netif+0x6c>)
 800d6f0:	4814      	ldr	r0, [pc, #80]	@ (800d744 <tcp_eff_send_mss_netif+0x70>)
 800d6f2:	f004 fa6d 	bl	8011bd0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d101      	bne.n	800d700 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d6fc:	89fb      	ldrh	r3, [r7, #14]
 800d6fe:	e019      	b.n	800d734 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d704:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d706:	8afb      	ldrh	r3, [r7, #22]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d012      	beq.n	800d732 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d70c:	2328      	movs	r3, #40	@ 0x28
 800d70e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d710:	8afa      	ldrh	r2, [r7, #22]
 800d712:	8abb      	ldrh	r3, [r7, #20]
 800d714:	429a      	cmp	r2, r3
 800d716:	d904      	bls.n	800d722 <tcp_eff_send_mss_netif+0x4e>
 800d718:	8afa      	ldrh	r2, [r7, #22]
 800d71a:	8abb      	ldrh	r3, [r7, #20]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	b29b      	uxth	r3, r3
 800d720:	e000      	b.n	800d724 <tcp_eff_send_mss_netif+0x50>
 800d722:	2300      	movs	r3, #0
 800d724:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d726:	8a7a      	ldrh	r2, [r7, #18]
 800d728:	89fb      	ldrh	r3, [r7, #14]
 800d72a:	4293      	cmp	r3, r2
 800d72c:	bf28      	it	cs
 800d72e:	4613      	movcs	r3, r2
 800d730:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d732:	89fb      	ldrh	r3, [r7, #14]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	08013e98 	.word	0x08013e98
 800d740:	080145e0 	.word	0x080145e0
 800d744:	08013f18 	.word	0x08013f18

0800d748 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d119      	bne.n	800d790 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d75c:	4b10      	ldr	r3, [pc, #64]	@ (800d7a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d75e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d762:	4910      	ldr	r1, [pc, #64]	@ (800d7a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d764:	4810      	ldr	r0, [pc, #64]	@ (800d7a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d766:	f004 fa33 	bl	8011bd0 <iprintf>

  while (pcb != NULL) {
 800d76a:	e011      	b.n	800d790 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	429a      	cmp	r2, r3
 800d776:	d108      	bne.n	800d78a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f7fe ffc4 	bl	800c70c <tcp_abort>
      pcb = next;
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	e002      	b.n	800d790 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1ea      	bne.n	800d76c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d796:	bf00      	nop
 800d798:	bf00      	nop
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	08013e98 	.word	0x08013e98
 800d7a4:	08014608 	.word	0x08014608
 800d7a8:	08013f18 	.word	0x08013f18

0800d7ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d02a      	beq.n	800d812 <tcp_netif_ip_addr_changed+0x66>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d026      	beq.n	800d812 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d7c4:	4b15      	ldr	r3, [pc, #84]	@ (800d81c <tcp_netif_ip_addr_changed+0x70>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7ff ffbc 	bl	800d748 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d7d0:	4b13      	ldr	r3, [pc, #76]	@ (800d820 <tcp_netif_ip_addr_changed+0x74>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff ffb6 	bl	800d748 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d017      	beq.n	800d812 <tcp_netif_ip_addr_changed+0x66>
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d013      	beq.n	800d812 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d824 <tcp_netif_ip_addr_changed+0x78>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	60fb      	str	r3, [r7, #12]
 800d7f0:	e00c      	b.n	800d80c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d103      	bne.n	800d806 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	60fb      	str	r3, [r7, #12]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1ef      	bne.n	800d7f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d812:	bf00      	nop
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	24007c50 	.word	0x24007c50
 800d820:	24007c48 	.word	0x24007c48
 800d824:	24007c4c 	.word	0x24007c4c

0800d828 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d834:	2b00      	cmp	r3, #0
 800d836:	d007      	beq.n	800d848 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff fc3d 	bl	800d0bc <tcp_segs_free>
    pcb->ooseq = NULL;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d848:	bf00      	nop
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d850:	b590      	push	{r4, r7, lr}
 800d852:	b08d      	sub	sp, #52	@ 0x34
 800d854:	af04      	add	r7, sp, #16
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d105      	bne.n	800d86c <tcp_input+0x1c>
 800d860:	4b9b      	ldr	r3, [pc, #620]	@ (800dad0 <tcp_input+0x280>)
 800d862:	2283      	movs	r2, #131	@ 0x83
 800d864:	499b      	ldr	r1, [pc, #620]	@ (800dad4 <tcp_input+0x284>)
 800d866:	489c      	ldr	r0, [pc, #624]	@ (800dad8 <tcp_input+0x288>)
 800d868:	f004 f9b2 	bl	8011bd0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	4a9a      	ldr	r2, [pc, #616]	@ (800dadc <tcp_input+0x28c>)
 800d872:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	895b      	ldrh	r3, [r3, #10]
 800d878:	2b13      	cmp	r3, #19
 800d87a:	f240 83d1 	bls.w	800e020 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d87e:	4b98      	ldr	r3, [pc, #608]	@ (800dae0 <tcp_input+0x290>)
 800d880:	695b      	ldr	r3, [r3, #20]
 800d882:	4a97      	ldr	r2, [pc, #604]	@ (800dae0 <tcp_input+0x290>)
 800d884:	6812      	ldr	r2, [r2, #0]
 800d886:	4611      	mov	r1, r2
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fc f821 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	f040 83c7 	bne.w	800e024 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d896:	4b92      	ldr	r3, [pc, #584]	@ (800dae0 <tcp_input+0x290>)
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d89e:	2be0      	cmp	r3, #224	@ 0xe0
 800d8a0:	f000 83c0 	beq.w	800e024 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d8a4:	4b8d      	ldr	r3, [pc, #564]	@ (800dadc <tcp_input+0x28c>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	899b      	ldrh	r3, [r3, #12]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fa faa3 	bl	8007df8 <lwip_htons>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	0b1b      	lsrs	r3, r3, #12
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d8be:	7cbb      	ldrb	r3, [r7, #18]
 800d8c0:	2b13      	cmp	r3, #19
 800d8c2:	f240 83b1 	bls.w	800e028 <tcp_input+0x7d8>
 800d8c6:	7cbb      	ldrb	r3, [r7, #18]
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	891b      	ldrh	r3, [r3, #8]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	f200 83aa 	bhi.w	800e028 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d8d4:	7cbb      	ldrb	r3, [r7, #18]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	3b14      	subs	r3, #20
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	4b81      	ldr	r3, [pc, #516]	@ (800dae4 <tcp_input+0x294>)
 800d8de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d8e0:	4b81      	ldr	r3, [pc, #516]	@ (800dae8 <tcp_input+0x298>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	895a      	ldrh	r2, [r3, #10]
 800d8ea:	7cbb      	ldrb	r3, [r7, #18]
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d309      	bcc.n	800d906 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d8f2:	4b7c      	ldr	r3, [pc, #496]	@ (800dae4 <tcp_input+0x294>)
 800d8f4:	881a      	ldrh	r2, [r3, #0]
 800d8f6:	4b7d      	ldr	r3, [pc, #500]	@ (800daec <tcp_input+0x29c>)
 800d8f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d8fa:	7cbb      	ldrb	r3, [r7, #18]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7fe f8f6 	bl	800baf0 <pbuf_remove_header>
 800d904:	e04e      	b.n	800d9a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d105      	bne.n	800d91a <tcp_input+0xca>
 800d90e:	4b70      	ldr	r3, [pc, #448]	@ (800dad0 <tcp_input+0x280>)
 800d910:	22c2      	movs	r2, #194	@ 0xc2
 800d912:	4977      	ldr	r1, [pc, #476]	@ (800daf0 <tcp_input+0x2a0>)
 800d914:	4870      	ldr	r0, [pc, #448]	@ (800dad8 <tcp_input+0x288>)
 800d916:	f004 f95b 	bl	8011bd0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d91a:	2114      	movs	r1, #20
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7fe f8e7 	bl	800baf0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	895a      	ldrh	r2, [r3, #10]
 800d926:	4b71      	ldr	r3, [pc, #452]	@ (800daec <tcp_input+0x29c>)
 800d928:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d92a:	4b6e      	ldr	r3, [pc, #440]	@ (800dae4 <tcp_input+0x294>)
 800d92c:	881a      	ldrh	r2, [r3, #0]
 800d92e:	4b6f      	ldr	r3, [pc, #444]	@ (800daec <tcp_input+0x29c>)
 800d930:	881b      	ldrh	r3, [r3, #0]
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d936:	4b6d      	ldr	r3, [pc, #436]	@ (800daec <tcp_input+0x29c>)
 800d938:	881b      	ldrh	r3, [r3, #0]
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7fe f8d7 	bl	800baf0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	895b      	ldrh	r3, [r3, #10]
 800d948:	8a3a      	ldrh	r2, [r7, #16]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	f200 836e 	bhi.w	800e02c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	4a64      	ldr	r2, [pc, #400]	@ (800dae8 <tcp_input+0x298>)
 800d958:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	8a3a      	ldrh	r2, [r7, #16]
 800d960:	4611      	mov	r1, r2
 800d962:	4618      	mov	r0, r3
 800d964:	f7fe f8c4 	bl	800baf0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	891a      	ldrh	r2, [r3, #8]
 800d96c:	8a3b      	ldrh	r3, [r7, #16]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	b29a      	uxth	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	895b      	ldrh	r3, [r3, #10]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d005      	beq.n	800d98a <tcp_input+0x13a>
 800d97e:	4b54      	ldr	r3, [pc, #336]	@ (800dad0 <tcp_input+0x280>)
 800d980:	22df      	movs	r2, #223	@ 0xdf
 800d982:	495c      	ldr	r1, [pc, #368]	@ (800daf4 <tcp_input+0x2a4>)
 800d984:	4854      	ldr	r0, [pc, #336]	@ (800dad8 <tcp_input+0x288>)
 800d986:	f004 f923 	bl	8011bd0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	891a      	ldrh	r2, [r3, #8]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	891b      	ldrh	r3, [r3, #8]
 800d994:	429a      	cmp	r2, r3
 800d996:	d005      	beq.n	800d9a4 <tcp_input+0x154>
 800d998:	4b4d      	ldr	r3, [pc, #308]	@ (800dad0 <tcp_input+0x280>)
 800d99a:	22e0      	movs	r2, #224	@ 0xe0
 800d99c:	4956      	ldr	r1, [pc, #344]	@ (800daf8 <tcp_input+0x2a8>)
 800d99e:	484e      	ldr	r0, [pc, #312]	@ (800dad8 <tcp_input+0x288>)
 800d9a0:	f004 f916 	bl	8011bd0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d9a4:	4b4d      	ldr	r3, [pc, #308]	@ (800dadc <tcp_input+0x28c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	4a4b      	ldr	r2, [pc, #300]	@ (800dadc <tcp_input+0x28c>)
 800d9ae:	6814      	ldr	r4, [r2, #0]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fa fa21 	bl	8007df8 <lwip_htons>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d9ba:	4b48      	ldr	r3, [pc, #288]	@ (800dadc <tcp_input+0x28c>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	885b      	ldrh	r3, [r3, #2]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	4a46      	ldr	r2, [pc, #280]	@ (800dadc <tcp_input+0x28c>)
 800d9c4:	6814      	ldr	r4, [r2, #0]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fa fa16 	bl	8007df8 <lwip_htons>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d9d0:	4b42      	ldr	r3, [pc, #264]	@ (800dadc <tcp_input+0x28c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	4a41      	ldr	r2, [pc, #260]	@ (800dadc <tcp_input+0x28c>)
 800d9d8:	6814      	ldr	r4, [r2, #0]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fa fa21 	bl	8007e22 <lwip_htonl>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	6063      	str	r3, [r4, #4]
 800d9e4:	6863      	ldr	r3, [r4, #4]
 800d9e6:	4a45      	ldr	r2, [pc, #276]	@ (800dafc <tcp_input+0x2ac>)
 800d9e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d9ea:	4b3c      	ldr	r3, [pc, #240]	@ (800dadc <tcp_input+0x28c>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	4a3a      	ldr	r2, [pc, #232]	@ (800dadc <tcp_input+0x28c>)
 800d9f2:	6814      	ldr	r4, [r2, #0]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fa fa14 	bl	8007e22 <lwip_htonl>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	60a3      	str	r3, [r4, #8]
 800d9fe:	68a3      	ldr	r3, [r4, #8]
 800da00:	4a3f      	ldr	r2, [pc, #252]	@ (800db00 <tcp_input+0x2b0>)
 800da02:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800da04:	4b35      	ldr	r3, [pc, #212]	@ (800dadc <tcp_input+0x28c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	89db      	ldrh	r3, [r3, #14]
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	4a33      	ldr	r2, [pc, #204]	@ (800dadc <tcp_input+0x28c>)
 800da0e:	6814      	ldr	r4, [r2, #0]
 800da10:	4618      	mov	r0, r3
 800da12:	f7fa f9f1 	bl	8007df8 <lwip_htons>
 800da16:	4603      	mov	r3, r0
 800da18:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800da1a:	4b30      	ldr	r3, [pc, #192]	@ (800dadc <tcp_input+0x28c>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	899b      	ldrh	r3, [r3, #12]
 800da20:	b29b      	uxth	r3, r3
 800da22:	4618      	mov	r0, r3
 800da24:	f7fa f9e8 	bl	8007df8 <lwip_htons>
 800da28:	4603      	mov	r3, r0
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da30:	b2da      	uxtb	r2, r3
 800da32:	4b34      	ldr	r3, [pc, #208]	@ (800db04 <tcp_input+0x2b4>)
 800da34:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	891a      	ldrh	r2, [r3, #8]
 800da3a:	4b33      	ldr	r3, [pc, #204]	@ (800db08 <tcp_input+0x2b8>)
 800da3c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800da3e:	4b31      	ldr	r3, [pc, #196]	@ (800db04 <tcp_input+0x2b4>)
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	f003 0303 	and.w	r3, r3, #3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00c      	beq.n	800da64 <tcp_input+0x214>
    tcplen++;
 800da4a:	4b2f      	ldr	r3, [pc, #188]	@ (800db08 <tcp_input+0x2b8>)
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	3301      	adds	r3, #1
 800da50:	b29a      	uxth	r2, r3
 800da52:	4b2d      	ldr	r3, [pc, #180]	@ (800db08 <tcp_input+0x2b8>)
 800da54:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	891a      	ldrh	r2, [r3, #8]
 800da5a:	4b2b      	ldr	r3, [pc, #172]	@ (800db08 <tcp_input+0x2b8>)
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	f200 82e6 	bhi.w	800e030 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800da64:	2300      	movs	r3, #0
 800da66:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da68:	4b28      	ldr	r3, [pc, #160]	@ (800db0c <tcp_input+0x2bc>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	61fb      	str	r3, [r7, #28]
 800da6e:	e09d      	b.n	800dbac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	7d1b      	ldrb	r3, [r3, #20]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d105      	bne.n	800da84 <tcp_input+0x234>
 800da78:	4b15      	ldr	r3, [pc, #84]	@ (800dad0 <tcp_input+0x280>)
 800da7a:	22fb      	movs	r2, #251	@ 0xfb
 800da7c:	4924      	ldr	r1, [pc, #144]	@ (800db10 <tcp_input+0x2c0>)
 800da7e:	4816      	ldr	r0, [pc, #88]	@ (800dad8 <tcp_input+0x288>)
 800da80:	f004 f8a6 	bl	8011bd0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	7d1b      	ldrb	r3, [r3, #20]
 800da88:	2b0a      	cmp	r3, #10
 800da8a:	d105      	bne.n	800da98 <tcp_input+0x248>
 800da8c:	4b10      	ldr	r3, [pc, #64]	@ (800dad0 <tcp_input+0x280>)
 800da8e:	22fc      	movs	r2, #252	@ 0xfc
 800da90:	4920      	ldr	r1, [pc, #128]	@ (800db14 <tcp_input+0x2c4>)
 800da92:	4811      	ldr	r0, [pc, #68]	@ (800dad8 <tcp_input+0x288>)
 800da94:	f004 f89c 	bl	8011bd0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	7d1b      	ldrb	r3, [r3, #20]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d105      	bne.n	800daac <tcp_input+0x25c>
 800daa0:	4b0b      	ldr	r3, [pc, #44]	@ (800dad0 <tcp_input+0x280>)
 800daa2:	22fd      	movs	r2, #253	@ 0xfd
 800daa4:	491c      	ldr	r1, [pc, #112]	@ (800db18 <tcp_input+0x2c8>)
 800daa6:	480c      	ldr	r0, [pc, #48]	@ (800dad8 <tcp_input+0x288>)
 800daa8:	f004 f892 	bl	8011bd0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	7a1b      	ldrb	r3, [r3, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d033      	beq.n	800db1c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	7a1a      	ldrb	r2, [r3, #8]
 800dab8:	4b09      	ldr	r3, [pc, #36]	@ (800dae0 <tcp_input+0x290>)
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dac0:	3301      	adds	r3, #1
 800dac2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d029      	beq.n	800db1c <tcp_input+0x2cc>
      prev = pcb;
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	61bb      	str	r3, [r7, #24]
      continue;
 800dacc:	e06b      	b.n	800dba6 <tcp_input+0x356>
 800dace:	bf00      	nop
 800dad0:	0801463c 	.word	0x0801463c
 800dad4:	080146ac 	.word	0x080146ac
 800dad8:	080146c4 	.word	0x080146c4
 800dadc:	24007c6c 	.word	0x24007c6c
 800dae0:	24004d1c 	.word	0x24004d1c
 800dae4:	24007c70 	.word	0x24007c70
 800dae8:	24007c74 	.word	0x24007c74
 800daec:	24007c72 	.word	0x24007c72
 800daf0:	080146ec 	.word	0x080146ec
 800daf4:	080146fc 	.word	0x080146fc
 800daf8:	08014708 	.word	0x08014708
 800dafc:	24007c7c 	.word	0x24007c7c
 800db00:	24007c80 	.word	0x24007c80
 800db04:	24007c88 	.word	0x24007c88
 800db08:	24007c86 	.word	0x24007c86
 800db0c:	24007c50 	.word	0x24007c50
 800db10:	08014728 	.word	0x08014728
 800db14:	08014750 	.word	0x08014750
 800db18:	0801477c 	.word	0x0801477c
    }

    if (pcb->remote_port == tcphdr->src &&
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	8b1a      	ldrh	r2, [r3, #24]
 800db20:	4b72      	ldr	r3, [pc, #456]	@ (800dcec <tcp_input+0x49c>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	881b      	ldrh	r3, [r3, #0]
 800db26:	b29b      	uxth	r3, r3
 800db28:	429a      	cmp	r2, r3
 800db2a:	d13a      	bne.n	800dba2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	8ada      	ldrh	r2, [r3, #22]
 800db30:	4b6e      	ldr	r3, [pc, #440]	@ (800dcec <tcp_input+0x49c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	885b      	ldrh	r3, [r3, #2]
 800db36:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800db38:	429a      	cmp	r2, r3
 800db3a:	d132      	bne.n	800dba2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	4b6b      	ldr	r3, [pc, #428]	@ (800dcf0 <tcp_input+0x4a0>)
 800db42:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800db44:	429a      	cmp	r2, r3
 800db46:	d12c      	bne.n	800dba2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	4b68      	ldr	r3, [pc, #416]	@ (800dcf0 <tcp_input+0x4a0>)
 800db4e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db50:	429a      	cmp	r2, r3
 800db52:	d126      	bne.n	800dba2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	69fa      	ldr	r2, [r7, #28]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d106      	bne.n	800db6c <tcp_input+0x31c>
 800db5e:	4b65      	ldr	r3, [pc, #404]	@ (800dcf4 <tcp_input+0x4a4>)
 800db60:	f240 120d 	movw	r2, #269	@ 0x10d
 800db64:	4964      	ldr	r1, [pc, #400]	@ (800dcf8 <tcp_input+0x4a8>)
 800db66:	4865      	ldr	r0, [pc, #404]	@ (800dcfc <tcp_input+0x4ac>)
 800db68:	f004 f832 	bl	8011bd0 <iprintf>
      if (prev != NULL) {
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00a      	beq.n	800db88 <tcp_input+0x338>
        prev->next = pcb->next;
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	68da      	ldr	r2, [r3, #12]
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800db7a:	4b61      	ldr	r3, [pc, #388]	@ (800dd00 <tcp_input+0x4b0>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800db82:	4a5f      	ldr	r2, [pc, #380]	@ (800dd00 <tcp_input+0x4b0>)
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	69fa      	ldr	r2, [r7, #28]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d111      	bne.n	800dbb6 <tcp_input+0x366>
 800db92:	4b58      	ldr	r3, [pc, #352]	@ (800dcf4 <tcp_input+0x4a4>)
 800db94:	f240 1215 	movw	r2, #277	@ 0x115
 800db98:	495a      	ldr	r1, [pc, #360]	@ (800dd04 <tcp_input+0x4b4>)
 800db9a:	4858      	ldr	r0, [pc, #352]	@ (800dcfc <tcp_input+0x4ac>)
 800db9c:	f004 f818 	bl	8011bd0 <iprintf>
      break;
 800dba0:	e009      	b.n	800dbb6 <tcp_input+0x366>
    }
    prev = pcb;
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	61fb      	str	r3, [r7, #28]
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f47f af5e 	bne.w	800da70 <tcp_input+0x220>
 800dbb4:	e000      	b.n	800dbb8 <tcp_input+0x368>
      break;
 800dbb6:	bf00      	nop
  }

  if (pcb == NULL) {
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f040 80aa 	bne.w	800dd14 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbc0:	4b51      	ldr	r3, [pc, #324]	@ (800dd08 <tcp_input+0x4b8>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	61fb      	str	r3, [r7, #28]
 800dbc6:	e03f      	b.n	800dc48 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	7d1b      	ldrb	r3, [r3, #20]
 800dbcc:	2b0a      	cmp	r3, #10
 800dbce:	d006      	beq.n	800dbde <tcp_input+0x38e>
 800dbd0:	4b48      	ldr	r3, [pc, #288]	@ (800dcf4 <tcp_input+0x4a4>)
 800dbd2:	f240 121f 	movw	r2, #287	@ 0x11f
 800dbd6:	494d      	ldr	r1, [pc, #308]	@ (800dd0c <tcp_input+0x4bc>)
 800dbd8:	4848      	ldr	r0, [pc, #288]	@ (800dcfc <tcp_input+0x4ac>)
 800dbda:	f003 fff9 	bl	8011bd0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	7a1b      	ldrb	r3, [r3, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d009      	beq.n	800dbfa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	7a1a      	ldrb	r2, [r3, #8]
 800dbea:	4b41      	ldr	r3, [pc, #260]	@ (800dcf0 <tcp_input+0x4a0>)
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d122      	bne.n	800dc40 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	8b1a      	ldrh	r2, [r3, #24]
 800dbfe:	4b3b      	ldr	r3, [pc, #236]	@ (800dcec <tcp_input+0x49c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d11b      	bne.n	800dc42 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	8ada      	ldrh	r2, [r3, #22]
 800dc0e:	4b37      	ldr	r3, [pc, #220]	@ (800dcec <tcp_input+0x49c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	885b      	ldrh	r3, [r3, #2]
 800dc14:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d113      	bne.n	800dc42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	685a      	ldr	r2, [r3, #4]
 800dc1e:	4b34      	ldr	r3, [pc, #208]	@ (800dcf0 <tcp_input+0x4a0>)
 800dc20:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d10d      	bne.n	800dc42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	4b31      	ldr	r3, [pc, #196]	@ (800dcf0 <tcp_input+0x4a0>)
 800dc2c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d107      	bne.n	800dc42 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dc32:	69f8      	ldr	r0, [r7, #28]
 800dc34:	f000 fb56 	bl	800e2e4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7fd ffdf 	bl	800bbfc <pbuf_free>
        return;
 800dc3e:	e1fd      	b.n	800e03c <tcp_input+0x7ec>
        continue;
 800dc40:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	61fb      	str	r3, [r7, #28]
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1bc      	bne.n	800dbc8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc52:	4b2f      	ldr	r3, [pc, #188]	@ (800dd10 <tcp_input+0x4c0>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	e02a      	b.n	800dcb0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	7a1b      	ldrb	r3, [r3, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00c      	beq.n	800dc7c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	7a1a      	ldrb	r2, [r3, #8]
 800dc66:	4b22      	ldr	r3, [pc, #136]	@ (800dcf0 <tcp_input+0x4a0>)
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc6e:	3301      	adds	r3, #1
 800dc70:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d002      	beq.n	800dc7c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	61bb      	str	r3, [r7, #24]
        continue;
 800dc7a:	e016      	b.n	800dcaa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	8ada      	ldrh	r2, [r3, #22]
 800dc80:	4b1a      	ldr	r3, [pc, #104]	@ (800dcec <tcp_input+0x49c>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	885b      	ldrh	r3, [r3, #2]
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d10c      	bne.n	800dca6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	4b17      	ldr	r3, [pc, #92]	@ (800dcf0 <tcp_input+0x4a0>)
 800dc92:	695b      	ldr	r3, [r3, #20]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d00f      	beq.n	800dcb8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00d      	beq.n	800dcba <tcp_input+0x46a>
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d009      	beq.n	800dcba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	617b      	str	r3, [r7, #20]
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1d1      	bne.n	800dc5a <tcp_input+0x40a>
 800dcb6:	e000      	b.n	800dcba <tcp_input+0x46a>
            break;
 800dcb8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d029      	beq.n	800dd14 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00a      	beq.n	800dcdc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	68da      	ldr	r2, [r3, #12]
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dcce:	4b10      	ldr	r3, [pc, #64]	@ (800dd10 <tcp_input+0x4c0>)
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dcd6:	4a0e      	ldr	r2, [pc, #56]	@ (800dd10 <tcp_input+0x4c0>)
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dcdc:	6978      	ldr	r0, [r7, #20]
 800dcde:	f000 fa03 	bl	800e0e8 <tcp_listen_input>
      }
      pbuf_free(p);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7fd ff8a 	bl	800bbfc <pbuf_free>
      return;
 800dce8:	e1a8      	b.n	800e03c <tcp_input+0x7ec>
 800dcea:	bf00      	nop
 800dcec:	24007c6c 	.word	0x24007c6c
 800dcf0:	24004d1c 	.word	0x24004d1c
 800dcf4:	0801463c 	.word	0x0801463c
 800dcf8:	080147a4 	.word	0x080147a4
 800dcfc:	080146c4 	.word	0x080146c4
 800dd00:	24007c50 	.word	0x24007c50
 800dd04:	080147d0 	.word	0x080147d0
 800dd08:	24007c54 	.word	0x24007c54
 800dd0c:	080147fc 	.word	0x080147fc
 800dd10:	24007c4c 	.word	0x24007c4c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 8158 	beq.w	800dfcc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dd1c:	4b95      	ldr	r3, [pc, #596]	@ (800df74 <tcp_input+0x724>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	891a      	ldrh	r2, [r3, #8]
 800dd26:	4b93      	ldr	r3, [pc, #588]	@ (800df74 <tcp_input+0x724>)
 800dd28:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dd2a:	4a92      	ldr	r2, [pc, #584]	@ (800df74 <tcp_input+0x724>)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dd30:	4b91      	ldr	r3, [pc, #580]	@ (800df78 <tcp_input+0x728>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a8f      	ldr	r2, [pc, #572]	@ (800df74 <tcp_input+0x724>)
 800dd36:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dd38:	4b90      	ldr	r3, [pc, #576]	@ (800df7c <tcp_input+0x72c>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dd3e:	4b90      	ldr	r3, [pc, #576]	@ (800df80 <tcp_input+0x730>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dd44:	4b8f      	ldr	r3, [pc, #572]	@ (800df84 <tcp_input+0x734>)
 800dd46:	2200      	movs	r2, #0
 800dd48:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dd4a:	4b8f      	ldr	r3, [pc, #572]	@ (800df88 <tcp_input+0x738>)
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	f003 0308 	and.w	r3, r3, #8
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d006      	beq.n	800dd64 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	7b5b      	ldrb	r3, [r3, #13]
 800dd5a:	f043 0301 	orr.w	r3, r3, #1
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d017      	beq.n	800dd9c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dd6c:	69f8      	ldr	r0, [r7, #28]
 800dd6e:	f7ff f929 	bl	800cfc4 <tcp_process_refused_data>
 800dd72:	4603      	mov	r3, r0
 800dd74:	f113 0f0d 	cmn.w	r3, #13
 800dd78:	d007      	beq.n	800dd8a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00c      	beq.n	800dd9c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dd82:	4b82      	ldr	r3, [pc, #520]	@ (800df8c <tcp_input+0x73c>)
 800dd84:	881b      	ldrh	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d008      	beq.n	800dd9c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	f040 80e3 	bne.w	800df5a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dd94:	69f8      	ldr	r0, [r7, #28]
 800dd96:	f003 f9a7 	bl	80110e8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dd9a:	e0de      	b.n	800df5a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dd9c:	4a7c      	ldr	r2, [pc, #496]	@ (800df90 <tcp_input+0x740>)
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dda2:	69f8      	ldr	r0, [r7, #28]
 800dda4:	f000 fb18 	bl	800e3d8 <tcp_process>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ddac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddb0:	f113 0f0d 	cmn.w	r3, #13
 800ddb4:	f000 80d3 	beq.w	800df5e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ddb8:	4b71      	ldr	r3, [pc, #452]	@ (800df80 <tcp_input+0x730>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	f003 0308 	and.w	r3, r3, #8
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d015      	beq.n	800ddf0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d008      	beq.n	800dde0 <tcp_input+0x590>
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddd4:	69fa      	ldr	r2, [r7, #28]
 800ddd6:	6912      	ldr	r2, [r2, #16]
 800ddd8:	f06f 010d 	mvn.w	r1, #13
 800dddc:	4610      	mov	r0, r2
 800ddde:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dde0:	69f9      	ldr	r1, [r7, #28]
 800dde2:	486c      	ldr	r0, [pc, #432]	@ (800df94 <tcp_input+0x744>)
 800dde4:	f7ff fbbc 	bl	800d560 <tcp_pcb_remove>
        tcp_free(pcb);
 800dde8:	69f8      	ldr	r0, [r7, #28]
 800ddea:	f7fe f9a7 	bl	800c13c <tcp_free>
 800ddee:	e0da      	b.n	800dfa6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ddf4:	4b63      	ldr	r3, [pc, #396]	@ (800df84 <tcp_input+0x734>)
 800ddf6:	881b      	ldrh	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d01d      	beq.n	800de38 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ddfc:	4b61      	ldr	r3, [pc, #388]	@ (800df84 <tcp_input+0x734>)
 800ddfe:	881b      	ldrh	r3, [r3, #0]
 800de00:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00a      	beq.n	800de22 <tcp_input+0x5d2>
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de12:	69fa      	ldr	r2, [r7, #28]
 800de14:	6910      	ldr	r0, [r2, #16]
 800de16:	89fa      	ldrh	r2, [r7, #14]
 800de18:	69f9      	ldr	r1, [r7, #28]
 800de1a:	4798      	blx	r3
 800de1c:	4603      	mov	r3, r0
 800de1e:	74fb      	strb	r3, [r7, #19]
 800de20:	e001      	b.n	800de26 <tcp_input+0x5d6>
 800de22:	2300      	movs	r3, #0
 800de24:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800de26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de2a:	f113 0f0d 	cmn.w	r3, #13
 800de2e:	f000 8098 	beq.w	800df62 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800de32:	4b54      	ldr	r3, [pc, #336]	@ (800df84 <tcp_input+0x734>)
 800de34:	2200      	movs	r2, #0
 800de36:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800de38:	69f8      	ldr	r0, [r7, #28]
 800de3a:	f000 f915 	bl	800e068 <tcp_input_delayed_close>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	f040 8090 	bne.w	800df66 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800de46:	4b4d      	ldr	r3, [pc, #308]	@ (800df7c <tcp_input+0x72c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d041      	beq.n	800ded2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de52:	2b00      	cmp	r3, #0
 800de54:	d006      	beq.n	800de64 <tcp_input+0x614>
 800de56:	4b50      	ldr	r3, [pc, #320]	@ (800df98 <tcp_input+0x748>)
 800de58:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800de5c:	494f      	ldr	r1, [pc, #316]	@ (800df9c <tcp_input+0x74c>)
 800de5e:	4850      	ldr	r0, [pc, #320]	@ (800dfa0 <tcp_input+0x750>)
 800de60:	f003 feb6 	bl	8011bd0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	8b5b      	ldrh	r3, [r3, #26]
 800de68:	f003 0310 	and.w	r3, r3, #16
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d008      	beq.n	800de82 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800de70:	4b42      	ldr	r3, [pc, #264]	@ (800df7c <tcp_input+0x72c>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4618      	mov	r0, r3
 800de76:	f7fd fec1 	bl	800bbfc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800de7a:	69f8      	ldr	r0, [r7, #28]
 800de7c:	f7fe fc46 	bl	800c70c <tcp_abort>
            goto aborted;
 800de80:	e091      	b.n	800dfa6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00c      	beq.n	800dea6 <tcp_input+0x656>
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	6918      	ldr	r0, [r3, #16]
 800de96:	4b39      	ldr	r3, [pc, #228]	@ (800df7c <tcp_input+0x72c>)
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	2300      	movs	r3, #0
 800de9c:	69f9      	ldr	r1, [r7, #28]
 800de9e:	47a0      	blx	r4
 800dea0:	4603      	mov	r3, r0
 800dea2:	74fb      	strb	r3, [r7, #19]
 800dea4:	e008      	b.n	800deb8 <tcp_input+0x668>
 800dea6:	4b35      	ldr	r3, [pc, #212]	@ (800df7c <tcp_input+0x72c>)
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	2300      	movs	r3, #0
 800deac:	69f9      	ldr	r1, [r7, #28]
 800deae:	2000      	movs	r0, #0
 800deb0:	f7ff f95e 	bl	800d170 <tcp_recv_null>
 800deb4:	4603      	mov	r3, r0
 800deb6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800deb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800debc:	f113 0f0d 	cmn.w	r3, #13
 800dec0:	d053      	beq.n	800df6a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dec2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800deca:	4b2c      	ldr	r3, [pc, #176]	@ (800df7c <tcp_input+0x72c>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ded2:	4b2b      	ldr	r3, [pc, #172]	@ (800df80 <tcp_input+0x730>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	f003 0320 	and.w	r3, r3, #32
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d030      	beq.n	800df40 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d009      	beq.n	800defa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800deea:	7b5a      	ldrb	r2, [r3, #13]
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800def0:	f042 0220 	orr.w	r2, r2, #32
 800def4:	b2d2      	uxtb	r2, r2
 800def6:	735a      	strb	r2, [r3, #13]
 800def8:	e022      	b.n	800df40 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800defe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800df02:	d005      	beq.n	800df10 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df08:	3301      	adds	r3, #1
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00b      	beq.n	800df32 <tcp_input+0x6e2>
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	6918      	ldr	r0, [r3, #16]
 800df24:	2300      	movs	r3, #0
 800df26:	2200      	movs	r2, #0
 800df28:	69f9      	ldr	r1, [r7, #28]
 800df2a:	47a0      	blx	r4
 800df2c:	4603      	mov	r3, r0
 800df2e:	74fb      	strb	r3, [r7, #19]
 800df30:	e001      	b.n	800df36 <tcp_input+0x6e6>
 800df32:	2300      	movs	r3, #0
 800df34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800df36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df3a:	f113 0f0d 	cmn.w	r3, #13
 800df3e:	d016      	beq.n	800df6e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800df40:	4b13      	ldr	r3, [pc, #76]	@ (800df90 <tcp_input+0x740>)
 800df42:	2200      	movs	r2, #0
 800df44:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800df46:	69f8      	ldr	r0, [r7, #28]
 800df48:	f000 f88e 	bl	800e068 <tcp_input_delayed_close>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d128      	bne.n	800dfa4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800df52:	69f8      	ldr	r0, [r7, #28]
 800df54:	f002 fac2 	bl	80104dc <tcp_output>
 800df58:	e025      	b.n	800dfa6 <tcp_input+0x756>
        goto aborted;
 800df5a:	bf00      	nop
 800df5c:	e023      	b.n	800dfa6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800df5e:	bf00      	nop
 800df60:	e021      	b.n	800dfa6 <tcp_input+0x756>
              goto aborted;
 800df62:	bf00      	nop
 800df64:	e01f      	b.n	800dfa6 <tcp_input+0x756>
          goto aborted;
 800df66:	bf00      	nop
 800df68:	e01d      	b.n	800dfa6 <tcp_input+0x756>
            goto aborted;
 800df6a:	bf00      	nop
 800df6c:	e01b      	b.n	800dfa6 <tcp_input+0x756>
              goto aborted;
 800df6e:	bf00      	nop
 800df70:	e019      	b.n	800dfa6 <tcp_input+0x756>
 800df72:	bf00      	nop
 800df74:	24007c5c 	.word	0x24007c5c
 800df78:	24007c6c 	.word	0x24007c6c
 800df7c:	24007c8c 	.word	0x24007c8c
 800df80:	24007c89 	.word	0x24007c89
 800df84:	24007c84 	.word	0x24007c84
 800df88:	24007c88 	.word	0x24007c88
 800df8c:	24007c86 	.word	0x24007c86
 800df90:	24007c90 	.word	0x24007c90
 800df94:	24007c50 	.word	0x24007c50
 800df98:	0801463c 	.word	0x0801463c
 800df9c:	0801482c 	.word	0x0801482c
 800dfa0:	080146c4 	.word	0x080146c4
          goto aborted;
 800dfa4:	bf00      	nop
    tcp_input_pcb = NULL;
 800dfa6:	4b27      	ldr	r3, [pc, #156]	@ (800e044 <tcp_input+0x7f4>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dfac:	4b26      	ldr	r3, [pc, #152]	@ (800e048 <tcp_input+0x7f8>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dfb2:	4b26      	ldr	r3, [pc, #152]	@ (800e04c <tcp_input+0x7fc>)
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d03f      	beq.n	800e03a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800dfba:	4b24      	ldr	r3, [pc, #144]	@ (800e04c <tcp_input+0x7fc>)
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fd fe1c 	bl	800bbfc <pbuf_free>
      inseg.p = NULL;
 800dfc4:	4b21      	ldr	r3, [pc, #132]	@ (800e04c <tcp_input+0x7fc>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800dfca:	e036      	b.n	800e03a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dfcc:	4b20      	ldr	r3, [pc, #128]	@ (800e050 <tcp_input+0x800>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	899b      	ldrh	r3, [r3, #12]
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7f9 ff0f 	bl	8007df8 <lwip_htons>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	f003 0304 	and.w	r3, r3, #4
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d118      	bne.n	800e018 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfe6:	4b1b      	ldr	r3, [pc, #108]	@ (800e054 <tcp_input+0x804>)
 800dfe8:	6819      	ldr	r1, [r3, #0]
 800dfea:	4b1b      	ldr	r3, [pc, #108]	@ (800e058 <tcp_input+0x808>)
 800dfec:	881b      	ldrh	r3, [r3, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	4b1a      	ldr	r3, [pc, #104]	@ (800e05c <tcp_input+0x80c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dff6:	4b16      	ldr	r3, [pc, #88]	@ (800e050 <tcp_input+0x800>)
 800dff8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dffa:	885b      	ldrh	r3, [r3, #2]
 800dffc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dffe:	4a14      	ldr	r2, [pc, #80]	@ (800e050 <tcp_input+0x800>)
 800e000:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e002:	8812      	ldrh	r2, [r2, #0]
 800e004:	b292      	uxth	r2, r2
 800e006:	9202      	str	r2, [sp, #8]
 800e008:	9301      	str	r3, [sp, #4]
 800e00a:	4b15      	ldr	r3, [pc, #84]	@ (800e060 <tcp_input+0x810>)
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	4b15      	ldr	r3, [pc, #84]	@ (800e064 <tcp_input+0x814>)
 800e010:	4602      	mov	r2, r0
 800e012:	2000      	movs	r0, #0
 800e014:	f003 f816 	bl	8011044 <tcp_rst>
    pbuf_free(p);
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7fd fdef 	bl	800bbfc <pbuf_free>
  return;
 800e01e:	e00c      	b.n	800e03a <tcp_input+0x7ea>
    goto dropped;
 800e020:	bf00      	nop
 800e022:	e006      	b.n	800e032 <tcp_input+0x7e2>
    goto dropped;
 800e024:	bf00      	nop
 800e026:	e004      	b.n	800e032 <tcp_input+0x7e2>
    goto dropped;
 800e028:	bf00      	nop
 800e02a:	e002      	b.n	800e032 <tcp_input+0x7e2>
      goto dropped;
 800e02c:	bf00      	nop
 800e02e:	e000      	b.n	800e032 <tcp_input+0x7e2>
      goto dropped;
 800e030:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7fd fde2 	bl	800bbfc <pbuf_free>
 800e038:	e000      	b.n	800e03c <tcp_input+0x7ec>
  return;
 800e03a:	bf00      	nop
}
 800e03c:	3724      	adds	r7, #36	@ 0x24
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd90      	pop	{r4, r7, pc}
 800e042:	bf00      	nop
 800e044:	24007c90 	.word	0x24007c90
 800e048:	24007c8c 	.word	0x24007c8c
 800e04c:	24007c5c 	.word	0x24007c5c
 800e050:	24007c6c 	.word	0x24007c6c
 800e054:	24007c80 	.word	0x24007c80
 800e058:	24007c86 	.word	0x24007c86
 800e05c:	24007c7c 	.word	0x24007c7c
 800e060:	24004d2c 	.word	0x24004d2c
 800e064:	24004d30 	.word	0x24004d30

0800e068 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d106      	bne.n	800e084 <tcp_input_delayed_close+0x1c>
 800e076:	4b17      	ldr	r3, [pc, #92]	@ (800e0d4 <tcp_input_delayed_close+0x6c>)
 800e078:	f240 225a 	movw	r2, #602	@ 0x25a
 800e07c:	4916      	ldr	r1, [pc, #88]	@ (800e0d8 <tcp_input_delayed_close+0x70>)
 800e07e:	4817      	ldr	r0, [pc, #92]	@ (800e0dc <tcp_input_delayed_close+0x74>)
 800e080:	f003 fda6 	bl	8011bd0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e084:	4b16      	ldr	r3, [pc, #88]	@ (800e0e0 <tcp_input_delayed_close+0x78>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	f003 0310 	and.w	r3, r3, #16
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d01c      	beq.n	800e0ca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	8b5b      	ldrh	r3, [r3, #26]
 800e094:	f003 0310 	and.w	r3, r3, #16
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10d      	bne.n	800e0b8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d008      	beq.n	800e0b8 <tcp_input_delayed_close+0x50>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	6912      	ldr	r2, [r2, #16]
 800e0b0:	f06f 010e 	mvn.w	r1, #14
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e0b8:	6879      	ldr	r1, [r7, #4]
 800e0ba:	480a      	ldr	r0, [pc, #40]	@ (800e0e4 <tcp_input_delayed_close+0x7c>)
 800e0bc:	f7ff fa50 	bl	800d560 <tcp_pcb_remove>
    tcp_free(pcb);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7fe f83b 	bl	800c13c <tcp_free>
    return 1;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e000      	b.n	800e0cc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	0801463c 	.word	0x0801463c
 800e0d8:	08014848 	.word	0x08014848
 800e0dc:	080146c4 	.word	0x080146c4
 800e0e0:	24007c89 	.word	0x24007c89
 800e0e4:	24007c50 	.word	0x24007c50

0800e0e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b08b      	sub	sp, #44	@ 0x2c
 800e0ec:	af04      	add	r7, sp, #16
 800e0ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e0f0:	4b6f      	ldr	r3, [pc, #444]	@ (800e2b0 <tcp_listen_input+0x1c8>)
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	f003 0304 	and.w	r3, r3, #4
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f040 80d2 	bne.w	800e2a2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d106      	bne.n	800e112 <tcp_listen_input+0x2a>
 800e104:	4b6b      	ldr	r3, [pc, #428]	@ (800e2b4 <tcp_listen_input+0x1cc>)
 800e106:	f240 2281 	movw	r2, #641	@ 0x281
 800e10a:	496b      	ldr	r1, [pc, #428]	@ (800e2b8 <tcp_listen_input+0x1d0>)
 800e10c:	486b      	ldr	r0, [pc, #428]	@ (800e2bc <tcp_listen_input+0x1d4>)
 800e10e:	f003 fd5f 	bl	8011bd0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e112:	4b67      	ldr	r3, [pc, #412]	@ (800e2b0 <tcp_listen_input+0x1c8>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	f003 0310 	and.w	r3, r3, #16
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d019      	beq.n	800e152 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e11e:	4b68      	ldr	r3, [pc, #416]	@ (800e2c0 <tcp_listen_input+0x1d8>)
 800e120:	6819      	ldr	r1, [r3, #0]
 800e122:	4b68      	ldr	r3, [pc, #416]	@ (800e2c4 <tcp_listen_input+0x1dc>)
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	4b67      	ldr	r3, [pc, #412]	@ (800e2c8 <tcp_listen_input+0x1e0>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e12e:	4b67      	ldr	r3, [pc, #412]	@ (800e2cc <tcp_listen_input+0x1e4>)
 800e130:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e132:	885b      	ldrh	r3, [r3, #2]
 800e134:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e136:	4a65      	ldr	r2, [pc, #404]	@ (800e2cc <tcp_listen_input+0x1e4>)
 800e138:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e13a:	8812      	ldrh	r2, [r2, #0]
 800e13c:	b292      	uxth	r2, r2
 800e13e:	9202      	str	r2, [sp, #8]
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	4b63      	ldr	r3, [pc, #396]	@ (800e2d0 <tcp_listen_input+0x1e8>)
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	4b63      	ldr	r3, [pc, #396]	@ (800e2d4 <tcp_listen_input+0x1ec>)
 800e148:	4602      	mov	r2, r0
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f002 ff7a 	bl	8011044 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e150:	e0a9      	b.n	800e2a6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e152:	4b57      	ldr	r3, [pc, #348]	@ (800e2b0 <tcp_listen_input+0x1c8>)
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	f003 0302 	and.w	r3, r3, #2
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 80a3 	beq.w	800e2a6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	7d5b      	ldrb	r3, [r3, #21]
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff f927 	bl	800d3b8 <tcp_alloc>
 800e16a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d111      	bne.n	800e196 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	699b      	ldr	r3, [r3, #24]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00a      	beq.n	800e190 <tcp_listen_input+0xa8>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	699b      	ldr	r3, [r3, #24]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	6910      	ldr	r0, [r2, #16]
 800e182:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e186:	2100      	movs	r1, #0
 800e188:	4798      	blx	r3
 800e18a:	4603      	mov	r3, r0
 800e18c:	73bb      	strb	r3, [r7, #14]
      return;
 800e18e:	e08b      	b.n	800e2a8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e190:	23f0      	movs	r3, #240	@ 0xf0
 800e192:	73bb      	strb	r3, [r7, #14]
      return;
 800e194:	e088      	b.n	800e2a8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e196:	4b50      	ldr	r3, [pc, #320]	@ (800e2d8 <tcp_listen_input+0x1f0>)
 800e198:	695a      	ldr	r2, [r3, #20]
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e19e:	4b4e      	ldr	r3, [pc, #312]	@ (800e2d8 <tcp_listen_input+0x1f0>)
 800e1a0:	691a      	ldr	r2, [r3, #16]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	8ada      	ldrh	r2, [r3, #22]
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e1ae:	4b47      	ldr	r3, [pc, #284]	@ (800e2cc <tcp_listen_input+0x1e4>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	881b      	ldrh	r3, [r3, #0]
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2203      	movs	r2, #3
 800e1be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e1c0:	4b41      	ldr	r3, [pc, #260]	@ (800e2c8 <tcp_listen_input+0x1e0>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e1d2:	6978      	ldr	r0, [r7, #20]
 800e1d4:	f7ff fa58 	bl	800d688 <tcp_next_iss>
 800e1d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	693a      	ldr	r2, [r7, #16]
 800e1de:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	693a      	ldr	r2, [r7, #16]
 800e1e4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	693a      	ldr	r2, [r7, #16]
 800e1ea:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	693a      	ldr	r2, [r7, #16]
 800e1f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e1f2:	4b35      	ldr	r3, [pc, #212]	@ (800e2c8 <tcp_listen_input+0x1e0>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	1e5a      	subs	r2, r3, #1
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	691a      	ldr	r2, [r3, #16]
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	7a5b      	ldrb	r3, [r3, #9]
 800e20e:	f003 030c 	and.w	r3, r3, #12
 800e212:	b2da      	uxtb	r2, r3
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	7a1a      	ldrb	r2, [r3, #8]
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e220:	4b2e      	ldr	r3, [pc, #184]	@ (800e2dc <tcp_listen_input+0x1f4>)
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	60da      	str	r2, [r3, #12]
 800e228:	4a2c      	ldr	r2, [pc, #176]	@ (800e2dc <tcp_listen_input+0x1f4>)
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	6013      	str	r3, [r2, #0]
 800e22e:	f003 f8cb 	bl	80113c8 <tcp_timer_needed>
 800e232:	4b2b      	ldr	r3, [pc, #172]	@ (800e2e0 <tcp_listen_input+0x1f8>)
 800e234:	2201      	movs	r2, #1
 800e236:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e238:	6978      	ldr	r0, [r7, #20]
 800e23a:	f001 fd8b 	bl	800fd54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e23e:	4b23      	ldr	r3, [pc, #140]	@ (800e2cc <tcp_listen_input+0x1e4>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	89db      	ldrh	r3, [r3, #14]
 800e244:	b29a      	uxth	r2, r3
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	3304      	adds	r3, #4
 800e260:	4618      	mov	r0, r3
 800e262:	f7fb f89f 	bl	80093a4 <ip4_route>
 800e266:	4601      	mov	r1, r0
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	3304      	adds	r3, #4
 800e26c:	461a      	mov	r2, r3
 800e26e:	4620      	mov	r0, r4
 800e270:	f7ff fa30 	bl	800d6d4 <tcp_eff_send_mss_netif>
 800e274:	4603      	mov	r3, r0
 800e276:	461a      	mov	r2, r3
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e27c:	2112      	movs	r1, #18
 800e27e:	6978      	ldr	r0, [r7, #20]
 800e280:	f002 f83e 	bl	8010300 <tcp_enqueue_flags>
 800e284:	4603      	mov	r3, r0
 800e286:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d004      	beq.n	800e29a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e290:	2100      	movs	r1, #0
 800e292:	6978      	ldr	r0, [r7, #20]
 800e294:	f7fe f97c 	bl	800c590 <tcp_abandon>
      return;
 800e298:	e006      	b.n	800e2a8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e29a:	6978      	ldr	r0, [r7, #20]
 800e29c:	f002 f91e 	bl	80104dc <tcp_output>
  return;
 800e2a0:	e001      	b.n	800e2a6 <tcp_listen_input+0x1be>
    return;
 800e2a2:	bf00      	nop
 800e2a4:	e000      	b.n	800e2a8 <tcp_listen_input+0x1c0>
  return;
 800e2a6:	bf00      	nop
}
 800e2a8:	371c      	adds	r7, #28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd90      	pop	{r4, r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	24007c88 	.word	0x24007c88
 800e2b4:	0801463c 	.word	0x0801463c
 800e2b8:	08014870 	.word	0x08014870
 800e2bc:	080146c4 	.word	0x080146c4
 800e2c0:	24007c80 	.word	0x24007c80
 800e2c4:	24007c86 	.word	0x24007c86
 800e2c8:	24007c7c 	.word	0x24007c7c
 800e2cc:	24007c6c 	.word	0x24007c6c
 800e2d0:	24004d2c 	.word	0x24004d2c
 800e2d4:	24004d30 	.word	0x24004d30
 800e2d8:	24004d1c 	.word	0x24004d1c
 800e2dc:	24007c50 	.word	0x24007c50
 800e2e0:	24007c58 	.word	0x24007c58

0800e2e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	af04      	add	r7, sp, #16
 800e2ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e2ec:	4b2f      	ldr	r3, [pc, #188]	@ (800e3ac <tcp_timewait_input+0xc8>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	f003 0304 	and.w	r3, r3, #4
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d153      	bne.n	800e3a0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d106      	bne.n	800e30c <tcp_timewait_input+0x28>
 800e2fe:	4b2c      	ldr	r3, [pc, #176]	@ (800e3b0 <tcp_timewait_input+0xcc>)
 800e300:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e304:	492b      	ldr	r1, [pc, #172]	@ (800e3b4 <tcp_timewait_input+0xd0>)
 800e306:	482c      	ldr	r0, [pc, #176]	@ (800e3b8 <tcp_timewait_input+0xd4>)
 800e308:	f003 fc62 	bl	8011bd0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e30c:	4b27      	ldr	r3, [pc, #156]	@ (800e3ac <tcp_timewait_input+0xc8>)
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	f003 0302 	and.w	r3, r3, #2
 800e314:	2b00      	cmp	r3, #0
 800e316:	d02a      	beq.n	800e36e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e318:	4b28      	ldr	r3, [pc, #160]	@ (800e3bc <tcp_timewait_input+0xd8>)
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	2b00      	cmp	r3, #0
 800e324:	db2d      	blt.n	800e382 <tcp_timewait_input+0x9e>
 800e326:	4b25      	ldr	r3, [pc, #148]	@ (800e3bc <tcp_timewait_input+0xd8>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e32e:	6879      	ldr	r1, [r7, #4]
 800e330:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e332:	440b      	add	r3, r1
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	dc23      	bgt.n	800e382 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e33a:	4b21      	ldr	r3, [pc, #132]	@ (800e3c0 <tcp_timewait_input+0xdc>)
 800e33c:	6819      	ldr	r1, [r3, #0]
 800e33e:	4b21      	ldr	r3, [pc, #132]	@ (800e3c4 <tcp_timewait_input+0xe0>)
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	4b1d      	ldr	r3, [pc, #116]	@ (800e3bc <tcp_timewait_input+0xd8>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e34a:	4b1f      	ldr	r3, [pc, #124]	@ (800e3c8 <tcp_timewait_input+0xe4>)
 800e34c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e34e:	885b      	ldrh	r3, [r3, #2]
 800e350:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e352:	4a1d      	ldr	r2, [pc, #116]	@ (800e3c8 <tcp_timewait_input+0xe4>)
 800e354:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e356:	8812      	ldrh	r2, [r2, #0]
 800e358:	b292      	uxth	r2, r2
 800e35a:	9202      	str	r2, [sp, #8]
 800e35c:	9301      	str	r3, [sp, #4]
 800e35e:	4b1b      	ldr	r3, [pc, #108]	@ (800e3cc <tcp_timewait_input+0xe8>)
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	4b1b      	ldr	r3, [pc, #108]	@ (800e3d0 <tcp_timewait_input+0xec>)
 800e364:	4602      	mov	r2, r0
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f002 fe6c 	bl	8011044 <tcp_rst>
      return;
 800e36c:	e01b      	b.n	800e3a6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e36e:	4b0f      	ldr	r3, [pc, #60]	@ (800e3ac <tcp_timewait_input+0xc8>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	d003      	beq.n	800e382 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e37a:	4b16      	ldr	r3, [pc, #88]	@ (800e3d4 <tcp_timewait_input+0xf0>)
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e382:	4b10      	ldr	r3, [pc, #64]	@ (800e3c4 <tcp_timewait_input+0xe0>)
 800e384:	881b      	ldrh	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00c      	beq.n	800e3a4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	8b5b      	ldrh	r3, [r3, #26]
 800e38e:	f043 0302 	orr.w	r3, r3, #2
 800e392:	b29a      	uxth	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f002 f89f 	bl	80104dc <tcp_output>
  }
  return;
 800e39e:	e001      	b.n	800e3a4 <tcp_timewait_input+0xc0>
    return;
 800e3a0:	bf00      	nop
 800e3a2:	e000      	b.n	800e3a6 <tcp_timewait_input+0xc2>
  return;
 800e3a4:	bf00      	nop
}
 800e3a6:	3708      	adds	r7, #8
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	24007c88 	.word	0x24007c88
 800e3b0:	0801463c 	.word	0x0801463c
 800e3b4:	08014890 	.word	0x08014890
 800e3b8:	080146c4 	.word	0x080146c4
 800e3bc:	24007c7c 	.word	0x24007c7c
 800e3c0:	24007c80 	.word	0x24007c80
 800e3c4:	24007c86 	.word	0x24007c86
 800e3c8:	24007c6c 	.word	0x24007c6c
 800e3cc:	24004d2c 	.word	0x24004d2c
 800e3d0:	24004d30 	.word	0x24004d30
 800e3d4:	24007c44 	.word	0x24007c44

0800e3d8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e3d8:	b590      	push	{r4, r7, lr}
 800e3da:	b08d      	sub	sp, #52	@ 0x34
 800e3dc:	af04      	add	r7, sp, #16
 800e3de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d106      	bne.n	800e3fc <tcp_process+0x24>
 800e3ee:	4b9d      	ldr	r3, [pc, #628]	@ (800e664 <tcp_process+0x28c>)
 800e3f0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e3f4:	499c      	ldr	r1, [pc, #624]	@ (800e668 <tcp_process+0x290>)
 800e3f6:	489d      	ldr	r0, [pc, #628]	@ (800e66c <tcp_process+0x294>)
 800e3f8:	f003 fbea 	bl	8011bd0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e3fc:	4b9c      	ldr	r3, [pc, #624]	@ (800e670 <tcp_process+0x298>)
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	f003 0304 	and.w	r3, r3, #4
 800e404:	2b00      	cmp	r3, #0
 800e406:	d04e      	beq.n	800e4a6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	7d1b      	ldrb	r3, [r3, #20]
 800e40c:	2b02      	cmp	r3, #2
 800e40e:	d108      	bne.n	800e422 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e414:	4b97      	ldr	r3, [pc, #604]	@ (800e674 <tcp_process+0x29c>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d123      	bne.n	800e464 <tcp_process+0x8c>
        acceptable = 1;
 800e41c:	2301      	movs	r3, #1
 800e41e:	76fb      	strb	r3, [r7, #27]
 800e420:	e020      	b.n	800e464 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e426:	4b94      	ldr	r3, [pc, #592]	@ (800e678 <tcp_process+0x2a0>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d102      	bne.n	800e434 <tcp_process+0x5c>
        acceptable = 1;
 800e42e:	2301      	movs	r3, #1
 800e430:	76fb      	strb	r3, [r7, #27]
 800e432:	e017      	b.n	800e464 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e434:	4b90      	ldr	r3, [pc, #576]	@ (800e678 <tcp_process+0x2a0>)
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	2b00      	cmp	r3, #0
 800e440:	db10      	blt.n	800e464 <tcp_process+0x8c>
 800e442:	4b8d      	ldr	r3, [pc, #564]	@ (800e678 <tcp_process+0x2a0>)
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44a:	6879      	ldr	r1, [r7, #4]
 800e44c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e44e:	440b      	add	r3, r1
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	dc06      	bgt.n	800e464 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	8b5b      	ldrh	r3, [r3, #26]
 800e45a:	f043 0302 	orr.w	r3, r3, #2
 800e45e:	b29a      	uxth	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e464:	7efb      	ldrb	r3, [r7, #27]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d01b      	beq.n	800e4a2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	7d1b      	ldrb	r3, [r3, #20]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d106      	bne.n	800e480 <tcp_process+0xa8>
 800e472:	4b7c      	ldr	r3, [pc, #496]	@ (800e664 <tcp_process+0x28c>)
 800e474:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e478:	4980      	ldr	r1, [pc, #512]	@ (800e67c <tcp_process+0x2a4>)
 800e47a:	487c      	ldr	r0, [pc, #496]	@ (800e66c <tcp_process+0x294>)
 800e47c:	f003 fba8 	bl	8011bd0 <iprintf>
      recv_flags |= TF_RESET;
 800e480:	4b7f      	ldr	r3, [pc, #508]	@ (800e680 <tcp_process+0x2a8>)
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	f043 0308 	orr.w	r3, r3, #8
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	4b7d      	ldr	r3, [pc, #500]	@ (800e680 <tcp_process+0x2a8>)
 800e48c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	8b5b      	ldrh	r3, [r3, #26]
 800e492:	f023 0301 	bic.w	r3, r3, #1
 800e496:	b29a      	uxth	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e49c:	f06f 030d 	mvn.w	r3, #13
 800e4a0:	e37a      	b.n	800eb98 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	e378      	b.n	800eb98 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e4a6:	4b72      	ldr	r3, [pc, #456]	@ (800e670 <tcp_process+0x298>)
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	f003 0302 	and.w	r3, r3, #2
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d010      	beq.n	800e4d4 <tcp_process+0xfc>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	7d1b      	ldrb	r3, [r3, #20]
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	d00c      	beq.n	800e4d4 <tcp_process+0xfc>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	7d1b      	ldrb	r3, [r3, #20]
 800e4be:	2b03      	cmp	r3, #3
 800e4c0:	d008      	beq.n	800e4d4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	8b5b      	ldrh	r3, [r3, #26]
 800e4c6:	f043 0302 	orr.w	r3, r3, #2
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e361      	b.n	800eb98 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	8b5b      	ldrh	r3, [r3, #26]
 800e4d8:	f003 0310 	and.w	r3, r3, #16
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d103      	bne.n	800e4e8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e4e0:	4b68      	ldr	r3, [pc, #416]	@ (800e684 <tcp_process+0x2ac>)
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f001 fc2b 	bl	800fd54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	7d1b      	ldrb	r3, [r3, #20]
 800e502:	3b02      	subs	r3, #2
 800e504:	2b07      	cmp	r3, #7
 800e506:	f200 8337 	bhi.w	800eb78 <tcp_process+0x7a0>
 800e50a:	a201      	add	r2, pc, #4	@ (adr r2, 800e510 <tcp_process+0x138>)
 800e50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e510:	0800e531 	.word	0x0800e531
 800e514:	0800e761 	.word	0x0800e761
 800e518:	0800e8d9 	.word	0x0800e8d9
 800e51c:	0800e903 	.word	0x0800e903
 800e520:	0800ea27 	.word	0x0800ea27
 800e524:	0800e8d9 	.word	0x0800e8d9
 800e528:	0800eab3 	.word	0x0800eab3
 800e52c:	0800eb43 	.word	0x0800eb43
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e530:	4b4f      	ldr	r3, [pc, #316]	@ (800e670 <tcp_process+0x298>)
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	f003 0310 	and.w	r3, r3, #16
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 80e4 	beq.w	800e706 <tcp_process+0x32e>
 800e53e:	4b4c      	ldr	r3, [pc, #304]	@ (800e670 <tcp_process+0x298>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	f003 0302 	and.w	r3, r3, #2
 800e546:	2b00      	cmp	r3, #0
 800e548:	f000 80dd 	beq.w	800e706 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e550:	1c5a      	adds	r2, r3, #1
 800e552:	4b48      	ldr	r3, [pc, #288]	@ (800e674 <tcp_process+0x29c>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	429a      	cmp	r2, r3
 800e558:	f040 80d5 	bne.w	800e706 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e55c:	4b46      	ldr	r3, [pc, #280]	@ (800e678 <tcp_process+0x2a0>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e56e:	4b41      	ldr	r3, [pc, #260]	@ (800e674 <tcp_process+0x29c>)
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e576:	4b44      	ldr	r3, [pc, #272]	@ (800e688 <tcp_process+0x2b0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	89db      	ldrh	r3, [r3, #14]
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e590:	4b39      	ldr	r3, [pc, #228]	@ (800e678 <tcp_process+0x2a0>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	1e5a      	subs	r2, r3, #1
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2204      	movs	r2, #4
 800e59e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	3304      	adds	r3, #4
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fa fefb 	bl	80093a4 <ip4_route>
 800e5ae:	4601      	mov	r1, r0
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f7ff f88c 	bl	800d6d4 <tcp_eff_send_mss_netif>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	461a      	mov	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e5c8:	009a      	lsls	r2, r3, #2
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e5d4:	428b      	cmp	r3, r1
 800e5d6:	bf38      	it	cc
 800e5d8:	460b      	movcc	r3, r1
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d204      	bcs.n	800e5e8 <tcp_process+0x210>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	e00d      	b.n	800e604 <tcp_process+0x22c>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e5ec:	005b      	lsls	r3, r3, #1
 800e5ee:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d904      	bls.n	800e600 <tcp_process+0x228>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e5fa:	005b      	lsls	r3, r3, #1
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	e001      	b.n	800e604 <tcp_process+0x22c>
 800e600:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e610:	2b00      	cmp	r3, #0
 800e612:	d106      	bne.n	800e622 <tcp_process+0x24a>
 800e614:	4b13      	ldr	r3, [pc, #76]	@ (800e664 <tcp_process+0x28c>)
 800e616:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e61a:	491c      	ldr	r1, [pc, #112]	@ (800e68c <tcp_process+0x2b4>)
 800e61c:	4813      	ldr	r0, [pc, #76]	@ (800e66c <tcp_process+0x294>)
 800e61e:	f003 fad7 	bl	8011bd0 <iprintf>
        --pcb->snd_queuelen;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e628:	3b01      	subs	r3, #1
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e636:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d12a      	bne.n	800e694 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e642:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d106      	bne.n	800e658 <tcp_process+0x280>
 800e64a:	4b06      	ldr	r3, [pc, #24]	@ (800e664 <tcp_process+0x28c>)
 800e64c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e650:	490f      	ldr	r1, [pc, #60]	@ (800e690 <tcp_process+0x2b8>)
 800e652:	4806      	ldr	r0, [pc, #24]	@ (800e66c <tcp_process+0x294>)
 800e654:	f003 fabc 	bl	8011bd0 <iprintf>
          pcb->unsent = rseg->next;
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e660:	e01c      	b.n	800e69c <tcp_process+0x2c4>
 800e662:	bf00      	nop
 800e664:	0801463c 	.word	0x0801463c
 800e668:	080148b0 	.word	0x080148b0
 800e66c:	080146c4 	.word	0x080146c4
 800e670:	24007c88 	.word	0x24007c88
 800e674:	24007c80 	.word	0x24007c80
 800e678:	24007c7c 	.word	0x24007c7c
 800e67c:	080148cc 	.word	0x080148cc
 800e680:	24007c89 	.word	0x24007c89
 800e684:	24007c44 	.word	0x24007c44
 800e688:	24007c6c 	.word	0x24007c6c
 800e68c:	080148ec 	.word	0x080148ec
 800e690:	08014904 	.word	0x08014904
        } else {
          pcb->unacked = rseg->next;
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e69c:	69f8      	ldr	r0, [r7, #28]
 800e69e:	f7fe fd22 	bl	800d0e6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d104      	bne.n	800e6b4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e6b0:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e6b2:	e006      	b.n	800e6c2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00a      	beq.n	800e6e2 <tcp_process+0x30a>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	6910      	ldr	r0, [r2, #16]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	6879      	ldr	r1, [r7, #4]
 800e6da:	4798      	blx	r3
 800e6dc:	4603      	mov	r3, r0
 800e6de:	76bb      	strb	r3, [r7, #26]
 800e6e0:	e001      	b.n	800e6e6 <tcp_process+0x30e>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e6e6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e6ea:	f113 0f0d 	cmn.w	r3, #13
 800e6ee:	d102      	bne.n	800e6f6 <tcp_process+0x31e>
          return ERR_ABRT;
 800e6f0:	f06f 030c 	mvn.w	r3, #12
 800e6f4:	e250      	b.n	800eb98 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	8b5b      	ldrh	r3, [r3, #26]
 800e6fa:	f043 0302 	orr.w	r3, r3, #2
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e704:	e23a      	b.n	800eb7c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e706:	4b98      	ldr	r3, [pc, #608]	@ (800e968 <tcp_process+0x590>)
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	f003 0310 	and.w	r3, r3, #16
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 8234 	beq.w	800eb7c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e714:	4b95      	ldr	r3, [pc, #596]	@ (800e96c <tcp_process+0x594>)
 800e716:	6819      	ldr	r1, [r3, #0]
 800e718:	4b95      	ldr	r3, [pc, #596]	@ (800e970 <tcp_process+0x598>)
 800e71a:	881b      	ldrh	r3, [r3, #0]
 800e71c:	461a      	mov	r2, r3
 800e71e:	4b95      	ldr	r3, [pc, #596]	@ (800e974 <tcp_process+0x59c>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e724:	4b94      	ldr	r3, [pc, #592]	@ (800e978 <tcp_process+0x5a0>)
 800e726:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e728:	885b      	ldrh	r3, [r3, #2]
 800e72a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e72c:	4a92      	ldr	r2, [pc, #584]	@ (800e978 <tcp_process+0x5a0>)
 800e72e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e730:	8812      	ldrh	r2, [r2, #0]
 800e732:	b292      	uxth	r2, r2
 800e734:	9202      	str	r2, [sp, #8]
 800e736:	9301      	str	r3, [sp, #4]
 800e738:	4b90      	ldr	r3, [pc, #576]	@ (800e97c <tcp_process+0x5a4>)
 800e73a:	9300      	str	r3, [sp, #0]
 800e73c:	4b90      	ldr	r3, [pc, #576]	@ (800e980 <tcp_process+0x5a8>)
 800e73e:	4602      	mov	r2, r0
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f002 fc7f 	bl	8011044 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e74c:	2b05      	cmp	r3, #5
 800e74e:	f200 8215 	bhi.w	800eb7c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2200      	movs	r2, #0
 800e756:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f002 fa4b 	bl	8010bf4 <tcp_rexmit_rto>
      break;
 800e75e:	e20d      	b.n	800eb7c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e760:	4b81      	ldr	r3, [pc, #516]	@ (800e968 <tcp_process+0x590>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f000 80a1 	beq.w	800e8b0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e76e:	4b7f      	ldr	r3, [pc, #508]	@ (800e96c <tcp_process+0x594>)
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e776:	1ad3      	subs	r3, r2, r3
 800e778:	3b01      	subs	r3, #1
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	db7e      	blt.n	800e87c <tcp_process+0x4a4>
 800e77e:	4b7b      	ldr	r3, [pc, #492]	@ (800e96c <tcp_process+0x594>)
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e786:	1ad3      	subs	r3, r2, r3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	dc77      	bgt.n	800e87c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2204      	movs	r2, #4
 800e790:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d102      	bne.n	800e7a0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e79a:	23fa      	movs	r3, #250	@ 0xfa
 800e79c:	76bb      	strb	r3, [r7, #26]
 800e79e:	e01d      	b.n	800e7dc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7a4:	699b      	ldr	r3, [r3, #24]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d106      	bne.n	800e7b8 <tcp_process+0x3e0>
 800e7aa:	4b76      	ldr	r3, [pc, #472]	@ (800e984 <tcp_process+0x5ac>)
 800e7ac:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e7b0:	4975      	ldr	r1, [pc, #468]	@ (800e988 <tcp_process+0x5b0>)
 800e7b2:	4876      	ldr	r0, [pc, #472]	@ (800e98c <tcp_process+0x5b4>)
 800e7b4:	f003 fa0c 	bl	8011bd0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00a      	beq.n	800e7d8 <tcp_process+0x400>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7c6:	699b      	ldr	r3, [r3, #24]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	6910      	ldr	r0, [r2, #16]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	6879      	ldr	r1, [r7, #4]
 800e7d0:	4798      	blx	r3
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	76bb      	strb	r3, [r7, #26]
 800e7d6:	e001      	b.n	800e7dc <tcp_process+0x404>
 800e7d8:	23f0      	movs	r3, #240	@ 0xf0
 800e7da:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e7dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d00a      	beq.n	800e7fa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e7e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e7e8:	f113 0f0d 	cmn.w	r3, #13
 800e7ec:	d002      	beq.n	800e7f4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7fd ff8c 	bl	800c70c <tcp_abort>
            }
            return ERR_ABRT;
 800e7f4:	f06f 030c 	mvn.w	r3, #12
 800e7f8:	e1ce      	b.n	800eb98 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 fae0 	bl	800edc0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e800:	4b63      	ldr	r3, [pc, #396]	@ (800e990 <tcp_process+0x5b8>)
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d005      	beq.n	800e814 <tcp_process+0x43c>
            recv_acked--;
 800e808:	4b61      	ldr	r3, [pc, #388]	@ (800e990 <tcp_process+0x5b8>)
 800e80a:	881b      	ldrh	r3, [r3, #0]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	b29a      	uxth	r2, r3
 800e810:	4b5f      	ldr	r3, [pc, #380]	@ (800e990 <tcp_process+0x5b8>)
 800e812:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e818:	009a      	lsls	r2, r3, #2
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e824:	428b      	cmp	r3, r1
 800e826:	bf38      	it	cc
 800e828:	460b      	movcc	r3, r1
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d204      	bcs.n	800e838 <tcp_process+0x460>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	b29b      	uxth	r3, r3
 800e836:	e00d      	b.n	800e854 <tcp_process+0x47c>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e842:	4293      	cmp	r3, r2
 800e844:	d904      	bls.n	800e850 <tcp_process+0x478>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	e001      	b.n	800e854 <tcp_process+0x47c>
 800e850:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e85a:	4b4e      	ldr	r3, [pc, #312]	@ (800e994 <tcp_process+0x5bc>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	f003 0320 	and.w	r3, r3, #32
 800e862:	2b00      	cmp	r3, #0
 800e864:	d037      	beq.n	800e8d6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	8b5b      	ldrh	r3, [r3, #26]
 800e86a:	f043 0302 	orr.w	r3, r3, #2
 800e86e:	b29a      	uxth	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2207      	movs	r2, #7
 800e878:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e87a:	e02c      	b.n	800e8d6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e87c:	4b3b      	ldr	r3, [pc, #236]	@ (800e96c <tcp_process+0x594>)
 800e87e:	6819      	ldr	r1, [r3, #0]
 800e880:	4b3b      	ldr	r3, [pc, #236]	@ (800e970 <tcp_process+0x598>)
 800e882:	881b      	ldrh	r3, [r3, #0]
 800e884:	461a      	mov	r2, r3
 800e886:	4b3b      	ldr	r3, [pc, #236]	@ (800e974 <tcp_process+0x59c>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e88c:	4b3a      	ldr	r3, [pc, #232]	@ (800e978 <tcp_process+0x5a0>)
 800e88e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e890:	885b      	ldrh	r3, [r3, #2]
 800e892:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e894:	4a38      	ldr	r2, [pc, #224]	@ (800e978 <tcp_process+0x5a0>)
 800e896:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e898:	8812      	ldrh	r2, [r2, #0]
 800e89a:	b292      	uxth	r2, r2
 800e89c:	9202      	str	r2, [sp, #8]
 800e89e:	9301      	str	r3, [sp, #4]
 800e8a0:	4b36      	ldr	r3, [pc, #216]	@ (800e97c <tcp_process+0x5a4>)
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	4b36      	ldr	r3, [pc, #216]	@ (800e980 <tcp_process+0x5a8>)
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f002 fbcb 	bl	8011044 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e8ae:	e167      	b.n	800eb80 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e8b0:	4b2d      	ldr	r3, [pc, #180]	@ (800e968 <tcp_process+0x590>)
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	f003 0302 	and.w	r3, r3, #2
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f000 8161 	beq.w	800eb80 <tcp_process+0x7a8>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8c2:	1e5a      	subs	r2, r3, #1
 800e8c4:	4b2b      	ldr	r3, [pc, #172]	@ (800e974 <tcp_process+0x59c>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	f040 8159 	bne.w	800eb80 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f002 f9b2 	bl	8010c38 <tcp_rexmit>
      break;
 800e8d4:	e154      	b.n	800eb80 <tcp_process+0x7a8>
 800e8d6:	e153      	b.n	800eb80 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 fa71 	bl	800edc0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e8de:	4b2d      	ldr	r3, [pc, #180]	@ (800e994 <tcp_process+0x5bc>)
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	f003 0320 	and.w	r3, r3, #32
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f000 814c 	beq.w	800eb84 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	8b5b      	ldrh	r3, [r3, #26]
 800e8f0:	f043 0302 	orr.w	r3, r3, #2
 800e8f4:	b29a      	uxth	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2207      	movs	r2, #7
 800e8fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e900:	e140      	b.n	800eb84 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 fa5c 	bl	800edc0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e908:	4b22      	ldr	r3, [pc, #136]	@ (800e994 <tcp_process+0x5bc>)
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f003 0320 	and.w	r3, r3, #32
 800e910:	2b00      	cmp	r3, #0
 800e912:	d071      	beq.n	800e9f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e914:	4b14      	ldr	r3, [pc, #80]	@ (800e968 <tcp_process+0x590>)
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	f003 0310 	and.w	r3, r3, #16
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d060      	beq.n	800e9e2 <tcp_process+0x60a>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e924:	4b11      	ldr	r3, [pc, #68]	@ (800e96c <tcp_process+0x594>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d15a      	bne.n	800e9e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e930:	2b00      	cmp	r3, #0
 800e932:	d156      	bne.n	800e9e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	8b5b      	ldrh	r3, [r3, #26]
 800e938:	f043 0302 	orr.w	r3, r3, #2
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7fe fdbc 	bl	800d4c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e948:	4b13      	ldr	r3, [pc, #76]	@ (800e998 <tcp_process+0x5c0>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d105      	bne.n	800e95e <tcp_process+0x586>
 800e952:	4b11      	ldr	r3, [pc, #68]	@ (800e998 <tcp_process+0x5c0>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	4a0f      	ldr	r2, [pc, #60]	@ (800e998 <tcp_process+0x5c0>)
 800e95a:	6013      	str	r3, [r2, #0]
 800e95c:	e02e      	b.n	800e9bc <tcp_process+0x5e4>
 800e95e:	4b0e      	ldr	r3, [pc, #56]	@ (800e998 <tcp_process+0x5c0>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	e027      	b.n	800e9b6 <tcp_process+0x5de>
 800e966:	bf00      	nop
 800e968:	24007c88 	.word	0x24007c88
 800e96c:	24007c80 	.word	0x24007c80
 800e970:	24007c86 	.word	0x24007c86
 800e974:	24007c7c 	.word	0x24007c7c
 800e978:	24007c6c 	.word	0x24007c6c
 800e97c:	24004d2c 	.word	0x24004d2c
 800e980:	24004d30 	.word	0x24004d30
 800e984:	0801463c 	.word	0x0801463c
 800e988:	08014918 	.word	0x08014918
 800e98c:	080146c4 	.word	0x080146c4
 800e990:	24007c84 	.word	0x24007c84
 800e994:	24007c89 	.word	0x24007c89
 800e998:	24007c50 	.word	0x24007c50
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d104      	bne.n	800e9b0 <tcp_process+0x5d8>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	68da      	ldr	r2, [r3, #12]
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	60da      	str	r2, [r3, #12]
 800e9ae:	e005      	b.n	800e9bc <tcp_process+0x5e4>
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	617b      	str	r3, [r7, #20]
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1ef      	bne.n	800e99c <tcp_process+0x5c4>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	60da      	str	r2, [r3, #12]
 800e9c2:	4b77      	ldr	r3, [pc, #476]	@ (800eba0 <tcp_process+0x7c8>)
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	220a      	movs	r2, #10
 800e9cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e9ce:	4b75      	ldr	r3, [pc, #468]	@ (800eba4 <tcp_process+0x7cc>)
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	60da      	str	r2, [r3, #12]
 800e9d6:	4a73      	ldr	r2, [pc, #460]	@ (800eba4 <tcp_process+0x7cc>)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6013      	str	r3, [r2, #0]
 800e9dc:	f002 fcf4 	bl	80113c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e9e0:	e0d2      	b.n	800eb88 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	8b5b      	ldrh	r3, [r3, #26]
 800e9e6:	f043 0302 	orr.w	r3, r3, #2
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2208      	movs	r2, #8
 800e9f4:	751a      	strb	r2, [r3, #20]
      break;
 800e9f6:	e0c7      	b.n	800eb88 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9f8:	4b6b      	ldr	r3, [pc, #428]	@ (800eba8 <tcp_process+0x7d0>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	f003 0310 	and.w	r3, r3, #16
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f000 80c1 	beq.w	800eb88 <tcp_process+0x7b0>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea0a:	4b68      	ldr	r3, [pc, #416]	@ (800ebac <tcp_process+0x7d4>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	f040 80ba 	bne.w	800eb88 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f040 80b5 	bne.w	800eb88 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2206      	movs	r2, #6
 800ea22:	751a      	strb	r2, [r3, #20]
      break;
 800ea24:	e0b0      	b.n	800eb88 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f9ca 	bl	800edc0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ea2c:	4b60      	ldr	r3, [pc, #384]	@ (800ebb0 <tcp_process+0x7d8>)
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	f003 0320 	and.w	r3, r3, #32
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f000 80a9 	beq.w	800eb8c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	8b5b      	ldrh	r3, [r3, #26]
 800ea3e:	f043 0302 	orr.w	r3, r3, #2
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fe fd39 	bl	800d4c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ea4e:	4b59      	ldr	r3, [pc, #356]	@ (800ebb4 <tcp_process+0x7dc>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d105      	bne.n	800ea64 <tcp_process+0x68c>
 800ea58:	4b56      	ldr	r3, [pc, #344]	@ (800ebb4 <tcp_process+0x7dc>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	4a55      	ldr	r2, [pc, #340]	@ (800ebb4 <tcp_process+0x7dc>)
 800ea60:	6013      	str	r3, [r2, #0]
 800ea62:	e013      	b.n	800ea8c <tcp_process+0x6b4>
 800ea64:	4b53      	ldr	r3, [pc, #332]	@ (800ebb4 <tcp_process+0x7dc>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	613b      	str	r3, [r7, #16]
 800ea6a:	e00c      	b.n	800ea86 <tcp_process+0x6ae>
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d104      	bne.n	800ea80 <tcp_process+0x6a8>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	68da      	ldr	r2, [r3, #12]
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	60da      	str	r2, [r3, #12]
 800ea7e:	e005      	b.n	800ea8c <tcp_process+0x6b4>
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	613b      	str	r3, [r7, #16]
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1ef      	bne.n	800ea6c <tcp_process+0x694>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	60da      	str	r2, [r3, #12]
 800ea92:	4b43      	ldr	r3, [pc, #268]	@ (800eba0 <tcp_process+0x7c8>)
 800ea94:	2201      	movs	r2, #1
 800ea96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	220a      	movs	r2, #10
 800ea9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ea9e:	4b41      	ldr	r3, [pc, #260]	@ (800eba4 <tcp_process+0x7cc>)
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	60da      	str	r2, [r3, #12]
 800eaa6:	4a3f      	ldr	r2, [pc, #252]	@ (800eba4 <tcp_process+0x7cc>)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6013      	str	r3, [r2, #0]
 800eaac:	f002 fc8c 	bl	80113c8 <tcp_timer_needed>
      }
      break;
 800eab0:	e06c      	b.n	800eb8c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f984 	bl	800edc0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eab8:	4b3b      	ldr	r3, [pc, #236]	@ (800eba8 <tcp_process+0x7d0>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	f003 0310 	and.w	r3, r3, #16
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d065      	beq.n	800eb90 <tcp_process+0x7b8>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eac8:	4b38      	ldr	r3, [pc, #224]	@ (800ebac <tcp_process+0x7d4>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d15f      	bne.n	800eb90 <tcp_process+0x7b8>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d15b      	bne.n	800eb90 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7fe fcf1 	bl	800d4c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eade:	4b35      	ldr	r3, [pc, #212]	@ (800ebb4 <tcp_process+0x7dc>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d105      	bne.n	800eaf4 <tcp_process+0x71c>
 800eae8:	4b32      	ldr	r3, [pc, #200]	@ (800ebb4 <tcp_process+0x7dc>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	4a31      	ldr	r2, [pc, #196]	@ (800ebb4 <tcp_process+0x7dc>)
 800eaf0:	6013      	str	r3, [r2, #0]
 800eaf2:	e013      	b.n	800eb1c <tcp_process+0x744>
 800eaf4:	4b2f      	ldr	r3, [pc, #188]	@ (800ebb4 <tcp_process+0x7dc>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	e00c      	b.n	800eb16 <tcp_process+0x73e>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d104      	bne.n	800eb10 <tcp_process+0x738>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	68da      	ldr	r2, [r3, #12]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	60da      	str	r2, [r3, #12]
 800eb0e:	e005      	b.n	800eb1c <tcp_process+0x744>
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	60fb      	str	r3, [r7, #12]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1ef      	bne.n	800eafc <tcp_process+0x724>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	60da      	str	r2, [r3, #12]
 800eb22:	4b1f      	ldr	r3, [pc, #124]	@ (800eba0 <tcp_process+0x7c8>)
 800eb24:	2201      	movs	r2, #1
 800eb26:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	220a      	movs	r2, #10
 800eb2c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eb2e:	4b1d      	ldr	r3, [pc, #116]	@ (800eba4 <tcp_process+0x7cc>)
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	60da      	str	r2, [r3, #12]
 800eb36:	4a1b      	ldr	r2, [pc, #108]	@ (800eba4 <tcp_process+0x7cc>)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6013      	str	r3, [r2, #0]
 800eb3c:	f002 fc44 	bl	80113c8 <tcp_timer_needed>
      }
      break;
 800eb40:	e026      	b.n	800eb90 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 f93c 	bl	800edc0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eb48:	4b17      	ldr	r3, [pc, #92]	@ (800eba8 <tcp_process+0x7d0>)
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	f003 0310 	and.w	r3, r3, #16
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01f      	beq.n	800eb94 <tcp_process+0x7bc>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb58:	4b14      	ldr	r3, [pc, #80]	@ (800ebac <tcp_process+0x7d4>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d119      	bne.n	800eb94 <tcp_process+0x7bc>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d115      	bne.n	800eb94 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800eb68:	4b11      	ldr	r3, [pc, #68]	@ (800ebb0 <tcp_process+0x7d8>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	f043 0310 	orr.w	r3, r3, #16
 800eb70:	b2da      	uxtb	r2, r3
 800eb72:	4b0f      	ldr	r3, [pc, #60]	@ (800ebb0 <tcp_process+0x7d8>)
 800eb74:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eb76:	e00d      	b.n	800eb94 <tcp_process+0x7bc>
    default:
      break;
 800eb78:	bf00      	nop
 800eb7a:	e00c      	b.n	800eb96 <tcp_process+0x7be>
      break;
 800eb7c:	bf00      	nop
 800eb7e:	e00a      	b.n	800eb96 <tcp_process+0x7be>
      break;
 800eb80:	bf00      	nop
 800eb82:	e008      	b.n	800eb96 <tcp_process+0x7be>
      break;
 800eb84:	bf00      	nop
 800eb86:	e006      	b.n	800eb96 <tcp_process+0x7be>
      break;
 800eb88:	bf00      	nop
 800eb8a:	e004      	b.n	800eb96 <tcp_process+0x7be>
      break;
 800eb8c:	bf00      	nop
 800eb8e:	e002      	b.n	800eb96 <tcp_process+0x7be>
      break;
 800eb90:	bf00      	nop
 800eb92:	e000      	b.n	800eb96 <tcp_process+0x7be>
      break;
 800eb94:	bf00      	nop
  }
  return ERR_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3724      	adds	r7, #36	@ 0x24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd90      	pop	{r4, r7, pc}
 800eba0:	24007c58 	.word	0x24007c58
 800eba4:	24007c54 	.word	0x24007c54
 800eba8:	24007c88 	.word	0x24007c88
 800ebac:	24007c80 	.word	0x24007c80
 800ebb0:	24007c89 	.word	0x24007c89
 800ebb4:	24007c50 	.word	0x24007c50

0800ebb8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ebb8:	b590      	push	{r4, r7, lr}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d106      	bne.n	800ebd6 <tcp_oos_insert_segment+0x1e>
 800ebc8:	4b3b      	ldr	r3, [pc, #236]	@ (800ecb8 <tcp_oos_insert_segment+0x100>)
 800ebca:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ebce:	493b      	ldr	r1, [pc, #236]	@ (800ecbc <tcp_oos_insert_segment+0x104>)
 800ebd0:	483b      	ldr	r0, [pc, #236]	@ (800ecc0 <tcp_oos_insert_segment+0x108>)
 800ebd2:	f002 fffd 	bl	8011bd0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	899b      	ldrh	r3, [r3, #12]
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f9 f90a 	bl	8007df8 <lwip_htons>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	f003 0301 	and.w	r3, r3, #1
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d028      	beq.n	800ec42 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ebf0:	6838      	ldr	r0, [r7, #0]
 800ebf2:	f7fe fa63 	bl	800d0bc <tcp_segs_free>
    next = NULL;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	603b      	str	r3, [r7, #0]
 800ebfa:	e056      	b.n	800ecaa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	899b      	ldrh	r3, [r3, #12]
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7f9 f8f7 	bl	8007df8 <lwip_htons>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	f003 0301 	and.w	r3, r3, #1
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00d      	beq.n	800ec32 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	899b      	ldrh	r3, [r3, #12]
 800ec1c:	b29c      	uxth	r4, r3
 800ec1e:	2001      	movs	r0, #1
 800ec20:	f7f9 f8ea 	bl	8007df8 <lwip_htons>
 800ec24:	4603      	mov	r3, r0
 800ec26:	461a      	mov	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	4322      	orrs	r2, r4
 800ec2e:	b292      	uxth	r2, r2
 800ec30:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	f7fe fa52 	bl	800d0e6 <tcp_seg_free>
    while (next &&
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00e      	beq.n	800ec66 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	891b      	ldrh	r3, [r3, #8]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4b1d      	ldr	r3, [pc, #116]	@ (800ecc4 <tcp_oos_insert_segment+0x10c>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	441a      	add	r2, r3
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	6839      	ldr	r1, [r7, #0]
 800ec5c:	8909      	ldrh	r1, [r1, #8]
 800ec5e:	440b      	add	r3, r1
 800ec60:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	daca      	bge.n	800ebfc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d01e      	beq.n	800ecaa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	891b      	ldrh	r3, [r3, #8]
 800ec70:	461a      	mov	r2, r3
 800ec72:	4b14      	ldr	r3, [pc, #80]	@ (800ecc4 <tcp_oos_insert_segment+0x10c>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	441a      	add	r2, r3
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	dd12      	ble.n	800ecaa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	4b0d      	ldr	r3, [pc, #52]	@ (800ecc4 <tcp_oos_insert_segment+0x10c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	685a      	ldr	r2, [r3, #4]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	891b      	ldrh	r3, [r3, #8]
 800eca2:	4619      	mov	r1, r3
 800eca4:	4610      	mov	r0, r2
 800eca6:	f7fc fe23 	bl	800b8f0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	683a      	ldr	r2, [r7, #0]
 800ecae:	601a      	str	r2, [r3, #0]
}
 800ecb0:	bf00      	nop
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd90      	pop	{r4, r7, pc}
 800ecb8:	0801463c 	.word	0x0801463c
 800ecbc:	08014938 	.word	0x08014938
 800ecc0:	080146c4 	.word	0x080146c4
 800ecc4:	24007c7c 	.word	0x24007c7c

0800ecc8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ecc8:	b5b0      	push	{r4, r5, r7, lr}
 800ecca:	b086      	sub	sp, #24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ecd6:	e03e      	b.n	800ed56 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fd f810 	bl	800bd0c <pbuf_clen>
 800ecec:	4603      	mov	r3, r0
 800ecee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ecf6:	8a7a      	ldrh	r2, [r7, #18]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d906      	bls.n	800ed0a <tcp_free_acked_segments+0x42>
 800ecfc:	4b2a      	ldr	r3, [pc, #168]	@ (800eda8 <tcp_free_acked_segments+0xe0>)
 800ecfe:	f240 4257 	movw	r2, #1111	@ 0x457
 800ed02:	492a      	ldr	r1, [pc, #168]	@ (800edac <tcp_free_acked_segments+0xe4>)
 800ed04:	482a      	ldr	r0, [pc, #168]	@ (800edb0 <tcp_free_acked_segments+0xe8>)
 800ed06:	f002 ff63 	bl	8011bd0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ed10:	8a7b      	ldrh	r3, [r7, #18]
 800ed12:	1ad3      	subs	r3, r2, r3
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	891a      	ldrh	r2, [r3, #8]
 800ed20:	4b24      	ldr	r3, [pc, #144]	@ (800edb4 <tcp_free_acked_segments+0xec>)
 800ed22:	881b      	ldrh	r3, [r3, #0]
 800ed24:	4413      	add	r3, r2
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	4b22      	ldr	r3, [pc, #136]	@ (800edb4 <tcp_free_acked_segments+0xec>)
 800ed2a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ed2c:	6978      	ldr	r0, [r7, #20]
 800ed2e:	f7fe f9da 	bl	800d0e6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00c      	beq.n	800ed56 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d109      	bne.n	800ed56 <tcp_free_acked_segments+0x8e>
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d106      	bne.n	800ed56 <tcp_free_acked_segments+0x8e>
 800ed48:	4b17      	ldr	r3, [pc, #92]	@ (800eda8 <tcp_free_acked_segments+0xe0>)
 800ed4a:	f240 4261 	movw	r2, #1121	@ 0x461
 800ed4e:	491a      	ldr	r1, [pc, #104]	@ (800edb8 <tcp_free_acked_segments+0xf0>)
 800ed50:	4817      	ldr	r0, [pc, #92]	@ (800edb0 <tcp_free_acked_segments+0xe8>)
 800ed52:	f002 ff3d 	bl	8011bd0 <iprintf>
  while (seg_list != NULL &&
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d020      	beq.n	800ed9e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7f9 f85d 	bl	8007e22 <lwip_htonl>
 800ed68:	4604      	mov	r4, r0
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	891b      	ldrh	r3, [r3, #8]
 800ed6e:	461d      	mov	r5, r3
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	899b      	ldrh	r3, [r3, #12]
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7f9 f83d 	bl	8007df8 <lwip_htons>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	f003 0303 	and.w	r3, r3, #3
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <tcp_free_acked_segments+0xc6>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e000      	b.n	800ed90 <tcp_free_acked_segments+0xc8>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	442b      	add	r3, r5
 800ed92:	18e2      	adds	r2, r4, r3
 800ed94:	4b09      	ldr	r3, [pc, #36]	@ (800edbc <tcp_free_acked_segments+0xf4>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	dd9c      	ble.n	800ecd8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ed9e:	68bb      	ldr	r3, [r7, #8]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bdb0      	pop	{r4, r5, r7, pc}
 800eda8:	0801463c 	.word	0x0801463c
 800edac:	08014960 	.word	0x08014960
 800edb0:	080146c4 	.word	0x080146c4
 800edb4:	24007c84 	.word	0x24007c84
 800edb8:	08014988 	.word	0x08014988
 800edbc:	24007c80 	.word	0x24007c80

0800edc0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800edc0:	b5b0      	push	{r4, r5, r7, lr}
 800edc2:	b094      	sub	sp, #80	@ 0x50
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d106      	bne.n	800ede0 <tcp_receive+0x20>
 800edd2:	4b91      	ldr	r3, [pc, #580]	@ (800f018 <tcp_receive+0x258>)
 800edd4:	f240 427b 	movw	r2, #1147	@ 0x47b
 800edd8:	4990      	ldr	r1, [pc, #576]	@ (800f01c <tcp_receive+0x25c>)
 800edda:	4891      	ldr	r0, [pc, #580]	@ (800f020 <tcp_receive+0x260>)
 800eddc:	f002 fef8 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	2b03      	cmp	r3, #3
 800ede6:	d806      	bhi.n	800edf6 <tcp_receive+0x36>
 800ede8:	4b8b      	ldr	r3, [pc, #556]	@ (800f018 <tcp_receive+0x258>)
 800edea:	f240 427c 	movw	r2, #1148	@ 0x47c
 800edee:	498d      	ldr	r1, [pc, #564]	@ (800f024 <tcp_receive+0x264>)
 800edf0:	488b      	ldr	r0, [pc, #556]	@ (800f020 <tcp_receive+0x260>)
 800edf2:	f002 feed 	bl	8011bd0 <iprintf>

  if (flags & TCP_ACK) {
 800edf6:	4b8c      	ldr	r3, [pc, #560]	@ (800f028 <tcp_receive+0x268>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	f003 0310 	and.w	r3, r3, #16
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f000 8264 	beq.w	800f2cc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee10:	4413      	add	r3, r2
 800ee12:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ee18:	4b84      	ldr	r3, [pc, #528]	@ (800f02c <tcp_receive+0x26c>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	1ad3      	subs	r3, r2, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	db1b      	blt.n	800ee5a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ee26:	4b81      	ldr	r3, [pc, #516]	@ (800f02c <tcp_receive+0x26c>)
 800ee28:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d106      	bne.n	800ee3c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ee32:	4b7f      	ldr	r3, [pc, #508]	@ (800f030 <tcp_receive+0x270>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	db0e      	blt.n	800ee5a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ee40:	4b7b      	ldr	r3, [pc, #492]	@ (800f030 <tcp_receive+0x270>)
 800ee42:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d125      	bne.n	800ee94 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ee48:	4b7a      	ldr	r3, [pc, #488]	@ (800f034 <tcp_receive+0x274>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	89db      	ldrh	r3, [r3, #14]
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d91c      	bls.n	800ee94 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ee5a:	4b76      	ldr	r3, [pc, #472]	@ (800f034 <tcp_receive+0x274>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	89db      	ldrh	r3, [r3, #14]
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d205      	bcs.n	800ee84 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ee84:	4b69      	ldr	r3, [pc, #420]	@ (800f02c <tcp_receive+0x26c>)
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ee8c:	4b68      	ldr	r3, [pc, #416]	@ (800f030 <tcp_receive+0x270>)
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ee94:	4b66      	ldr	r3, [pc, #408]	@ (800f030 <tcp_receive+0x270>)
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	dc58      	bgt.n	800ef54 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800eea2:	4b65      	ldr	r3, [pc, #404]	@ (800f038 <tcp_receive+0x278>)
 800eea4:	881b      	ldrh	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d14b      	bne.n	800ef42 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800eeb4:	4413      	add	r3, r2
 800eeb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d142      	bne.n	800ef42 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	db3d      	blt.n	800ef42 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eeca:	4b59      	ldr	r3, [pc, #356]	@ (800f030 <tcp_receive+0x270>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d137      	bne.n	800ef42 <tcp_receive+0x182>
              found_dupack = 1;
 800eed2:	2301      	movs	r3, #1
 800eed4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eedc:	2bff      	cmp	r3, #255	@ 0xff
 800eede:	d007      	beq.n	800eef0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eee6:	3301      	adds	r3, #1
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eef6:	2b03      	cmp	r3, #3
 800eef8:	d91b      	bls.n	800ef32 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef04:	4413      	add	r3, r2
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d30a      	bcc.n	800ef28 <tcp_receive+0x168>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef1c:	4413      	add	r3, r2
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ef26:	e004      	b.n	800ef32 <tcp_receive+0x172>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef2e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d902      	bls.n	800ef42 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f001 fee7 	bl	8010d10 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ef42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f040 8161 	bne.w	800f20c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ef52:	e15b      	b.n	800f20c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ef54:	4b36      	ldr	r3, [pc, #216]	@ (800f030 <tcp_receive+0x270>)
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f2c0 814e 	blt.w	800f202 <tcp_receive+0x442>
 800ef66:	4b32      	ldr	r3, [pc, #200]	@ (800f030 <tcp_receive+0x270>)
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f300 8146 	bgt.w	800f202 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	8b5b      	ldrh	r3, [r3, #26]
 800ef7a:	f003 0304 	and.w	r3, r3, #4
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d010      	beq.n	800efa4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	8b5b      	ldrh	r3, [r3, #26]
 800ef86:	f023 0304 	bic.w	r3, r3, #4
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800efb2:	10db      	asrs	r3, r3, #3
 800efb4:	b21b      	sxth	r3, r3
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	4413      	add	r3, r2
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	b21a      	sxth	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800efcc:	4b18      	ldr	r3, [pc, #96]	@ (800f030 <tcp_receive+0x270>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800efe4:	4b12      	ldr	r3, [pc, #72]	@ (800f030 <tcp_receive+0x270>)
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	7d1b      	ldrb	r3, [r3, #20]
 800eff0:	2b03      	cmp	r3, #3
 800eff2:	f240 8097 	bls.w	800f124 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f002:	429a      	cmp	r2, r3
 800f004:	d245      	bcs.n	800f092 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	8b5b      	ldrh	r3, [r3, #26]
 800f00a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d014      	beq.n	800f03c <tcp_receive+0x27c>
 800f012:	2301      	movs	r3, #1
 800f014:	e013      	b.n	800f03e <tcp_receive+0x27e>
 800f016:	bf00      	nop
 800f018:	0801463c 	.word	0x0801463c
 800f01c:	080149a8 	.word	0x080149a8
 800f020:	080146c4 	.word	0x080146c4
 800f024:	080149c4 	.word	0x080149c4
 800f028:	24007c88 	.word	0x24007c88
 800f02c:	24007c7c 	.word	0x24007c7c
 800f030:	24007c80 	.word	0x24007c80
 800f034:	24007c6c 	.word	0x24007c6c
 800f038:	24007c86 	.word	0x24007c86
 800f03c:	2302      	movs	r3, #2
 800f03e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f042:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f046:	b29a      	uxth	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f04c:	fb12 f303 	smulbb	r3, r2, r3
 800f050:	b29b      	uxth	r3, r3
 800f052:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f054:	4293      	cmp	r3, r2
 800f056:	bf28      	it	cs
 800f058:	4613      	movcs	r3, r2
 800f05a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f062:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f064:	4413      	add	r3, r2
 800f066:	b29a      	uxth	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f06e:	429a      	cmp	r2, r3
 800f070:	d309      	bcc.n	800f086 <tcp_receive+0x2c6>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f078:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f07a:	4413      	add	r3, r2
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f084:	e04e      	b.n	800f124 <tcp_receive+0x364>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f08c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f090:	e048      	b.n	800f124 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f098:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f09a:	4413      	add	r3, r2
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d309      	bcc.n	800f0bc <tcp_receive+0x2fc>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f0ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f0b0:	4413      	add	r3, r2
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f0ba:	e004      	b.n	800f0c6 <tcp_receive+0x306>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d326      	bcc.n	800f124 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0f6:	4413      	add	r3, r2
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f100:	429a      	cmp	r2, r3
 800f102:	d30a      	bcc.n	800f11a <tcp_receive+0x35a>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f10e:	4413      	add	r3, r2
 800f110:	b29a      	uxth	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f118:	e004      	b.n	800f124 <tcp_receive+0x364>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f120:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f12c:	4a98      	ldr	r2, [pc, #608]	@ (800f390 <tcp_receive+0x5d0>)
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff fdca 	bl	800ecc8 <tcp_free_acked_segments>
 800f134:	4602      	mov	r2, r0
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f142:	4a94      	ldr	r2, [pc, #592]	@ (800f394 <tcp_receive+0x5d4>)
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7ff fdbf 	bl	800ecc8 <tcp_free_acked_segments>
 800f14a:	4602      	mov	r2, r0
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f154:	2b00      	cmp	r3, #0
 800f156:	d104      	bne.n	800f162 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f15e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f160:	e002      	b.n	800f168 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f172:	2b00      	cmp	r3, #0
 800f174:	d103      	bne.n	800f17e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f184:	4b84      	ldr	r3, [pc, #528]	@ (800f398 <tcp_receive+0x5d8>)
 800f186:	881b      	ldrh	r3, [r3, #0]
 800f188:	4413      	add	r3, r2
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	8b5b      	ldrh	r3, [r3, #26]
 800f196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d035      	beq.n	800f20a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d118      	bne.n	800f1d8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00c      	beq.n	800f1c8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f8 fe31 	bl	8007e22 <lwip_htonl>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dc20      	bgt.n	800f20a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	8b5b      	ldrh	r3, [r3, #26]
 800f1cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f1d6:	e018      	b.n	800f20a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7f8 fe1c 	bl	8007e22 <lwip_htonl>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	1ae3      	subs	r3, r4, r3
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	dc0b      	bgt.n	800f20a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	8b5b      	ldrh	r3, [r3, #26]
 800f1f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f200:	e003      	b.n	800f20a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f001 ff70 	bl	80110e8 <tcp_send_empty_ack>
 800f208:	e000      	b.n	800f20c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f20a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f210:	2b00      	cmp	r3, #0
 800f212:	d05b      	beq.n	800f2cc <tcp_receive+0x50c>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f218:	4b60      	ldr	r3, [pc, #384]	@ (800f39c <tcp_receive+0x5dc>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	1ad3      	subs	r3, r2, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	da54      	bge.n	800f2cc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f222:	4b5f      	ldr	r3, [pc, #380]	@ (800f3a0 <tcp_receive+0x5e0>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	b29a      	uxth	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	b29b      	uxth	r3, r3
 800f232:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f236:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f240:	10db      	asrs	r3, r3, #3
 800f242:	b21b      	sxth	r3, r3
 800f244:	b29b      	uxth	r3, r3
 800f246:	1ad3      	subs	r3, r2, r3
 800f248:	b29b      	uxth	r3, r3
 800f24a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f254:	b29a      	uxth	r2, r3
 800f256:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f25a:	4413      	add	r3, r2
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	b21a      	sxth	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f264:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f268:	2b00      	cmp	r3, #0
 800f26a:	da05      	bge.n	800f278 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f26c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f270:	425b      	negs	r3, r3
 800f272:	b29b      	uxth	r3, r3
 800f274:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f278:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f282:	109b      	asrs	r3, r3, #2
 800f284:	b21b      	sxth	r3, r3
 800f286:	b29b      	uxth	r3, r3
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f296:	b29a      	uxth	r2, r3
 800f298:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f29c:	4413      	add	r3, r2
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	b21a      	sxth	r2, r3
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f2ac:	10db      	asrs	r3, r3, #3
 800f2ae:	b21b      	sxth	r3, r3
 800f2b0:	b29a      	uxth	r2, r3
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	4413      	add	r3, r2
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	b21a      	sxth	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f2cc:	4b35      	ldr	r3, [pc, #212]	@ (800f3a4 <tcp_receive+0x5e4>)
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 84df 	beq.w	800fc94 <tcp_receive+0xed4>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	7d1b      	ldrb	r3, [r3, #20]
 800f2da:	2b06      	cmp	r3, #6
 800f2dc:	f200 84da 	bhi.w	800fc94 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2e4:	4b30      	ldr	r3, [pc, #192]	@ (800f3a8 <tcp_receive+0x5e8>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	1ad3      	subs	r3, r2, r3
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f2c0 808f 	blt.w	800f410 <tcp_receive+0x650>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2f6:	4b2b      	ldr	r3, [pc, #172]	@ (800f3a4 <tcp_receive+0x5e4>)
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	4b2a      	ldr	r3, [pc, #168]	@ (800f3a8 <tcp_receive+0x5e8>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	440b      	add	r3, r1
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	3301      	adds	r3, #1
 800f306:	2b00      	cmp	r3, #0
 800f308:	f300 8082 	bgt.w	800f410 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f30c:	4b27      	ldr	r3, [pc, #156]	@ (800f3ac <tcp_receive+0x5ec>)
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f316:	4b24      	ldr	r3, [pc, #144]	@ (800f3a8 <tcp_receive+0x5e8>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	1ad3      	subs	r3, r2, r3
 800f31c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f31e:	4b23      	ldr	r3, [pc, #140]	@ (800f3ac <tcp_receive+0x5ec>)
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d106      	bne.n	800f334 <tcp_receive+0x574>
 800f326:	4b22      	ldr	r3, [pc, #136]	@ (800f3b0 <tcp_receive+0x5f0>)
 800f328:	f240 5294 	movw	r2, #1428	@ 0x594
 800f32c:	4921      	ldr	r1, [pc, #132]	@ (800f3b4 <tcp_receive+0x5f4>)
 800f32e:	4822      	ldr	r0, [pc, #136]	@ (800f3b8 <tcp_receive+0x5f8>)
 800f330:	f002 fc4e 	bl	8011bd0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f336:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d906      	bls.n	800f34c <tcp_receive+0x58c>
 800f33e:	4b1c      	ldr	r3, [pc, #112]	@ (800f3b0 <tcp_receive+0x5f0>)
 800f340:	f240 5295 	movw	r2, #1429	@ 0x595
 800f344:	491d      	ldr	r1, [pc, #116]	@ (800f3bc <tcp_receive+0x5fc>)
 800f346:	481c      	ldr	r0, [pc, #112]	@ (800f3b8 <tcp_receive+0x5f8>)
 800f348:	f002 fc42 	bl	8011bd0 <iprintf>
      off = (u16_t)off32;
 800f34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f352:	4b16      	ldr	r3, [pc, #88]	@ (800f3ac <tcp_receive+0x5ec>)
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	891b      	ldrh	r3, [r3, #8]
 800f358:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d906      	bls.n	800f36e <tcp_receive+0x5ae>
 800f360:	4b13      	ldr	r3, [pc, #76]	@ (800f3b0 <tcp_receive+0x5f0>)
 800f362:	f240 5297 	movw	r2, #1431	@ 0x597
 800f366:	4916      	ldr	r1, [pc, #88]	@ (800f3c0 <tcp_receive+0x600>)
 800f368:	4813      	ldr	r0, [pc, #76]	@ (800f3b8 <tcp_receive+0x5f8>)
 800f36a:	f002 fc31 	bl	8011bd0 <iprintf>
      inseg.len -= off;
 800f36e:	4b0f      	ldr	r3, [pc, #60]	@ (800f3ac <tcp_receive+0x5ec>)
 800f370:	891a      	ldrh	r2, [r3, #8]
 800f372:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f376:	1ad3      	subs	r3, r2, r3
 800f378:	b29a      	uxth	r2, r3
 800f37a:	4b0c      	ldr	r3, [pc, #48]	@ (800f3ac <tcp_receive+0x5ec>)
 800f37c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f37e:	4b0b      	ldr	r3, [pc, #44]	@ (800f3ac <tcp_receive+0x5ec>)
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	891a      	ldrh	r2, [r3, #8]
 800f384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f38c:	e02a      	b.n	800f3e4 <tcp_receive+0x624>
 800f38e:	bf00      	nop
 800f390:	080149e0 	.word	0x080149e0
 800f394:	080149e8 	.word	0x080149e8
 800f398:	24007c84 	.word	0x24007c84
 800f39c:	24007c80 	.word	0x24007c80
 800f3a0:	24007c44 	.word	0x24007c44
 800f3a4:	24007c86 	.word	0x24007c86
 800f3a8:	24007c7c 	.word	0x24007c7c
 800f3ac:	24007c5c 	.word	0x24007c5c
 800f3b0:	0801463c 	.word	0x0801463c
 800f3b4:	080149f0 	.word	0x080149f0
 800f3b8:	080146c4 	.word	0x080146c4
 800f3bc:	08014a00 	.word	0x08014a00
 800f3c0:	08014a10 	.word	0x08014a10
        off -= p->len;
 800f3c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3c6:	895b      	ldrh	r3, [r3, #10]
 800f3c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f3d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f3d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3da:	2200      	movs	r2, #0
 800f3dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f3de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f3e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3e6:	895b      	ldrh	r3, [r3, #10]
 800f3e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d8e9      	bhi.n	800f3c4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f3f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f3f8:	f7fc fb7a 	bl	800baf0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f400:	4a90      	ldr	r2, [pc, #576]	@ (800f644 <tcp_receive+0x884>)
 800f402:	6013      	str	r3, [r2, #0]
 800f404:	4b90      	ldr	r3, [pc, #576]	@ (800f648 <tcp_receive+0x888>)
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	4a8e      	ldr	r2, [pc, #568]	@ (800f644 <tcp_receive+0x884>)
 800f40a:	6812      	ldr	r2, [r2, #0]
 800f40c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f40e:	e00d      	b.n	800f42c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f410:	4b8c      	ldr	r3, [pc, #560]	@ (800f644 <tcp_receive+0x884>)
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	da06      	bge.n	800f42c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	8b5b      	ldrh	r3, [r3, #26]
 800f422:	f043 0302 	orr.w	r3, r3, #2
 800f426:	b29a      	uxth	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f42c:	4b85      	ldr	r3, [pc, #532]	@ (800f644 <tcp_receive+0x884>)
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	2b00      	cmp	r3, #0
 800f438:	f2c0 8427 	blt.w	800fc8a <tcp_receive+0xeca>
 800f43c:	4b81      	ldr	r3, [pc, #516]	@ (800f644 <tcp_receive+0x884>)
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f444:	6879      	ldr	r1, [r7, #4]
 800f446:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f448:	440b      	add	r3, r1
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	3301      	adds	r3, #1
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f300 841b 	bgt.w	800fc8a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f458:	4b7a      	ldr	r3, [pc, #488]	@ (800f644 <tcp_receive+0x884>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	f040 8298 	bne.w	800f992 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f462:	4b79      	ldr	r3, [pc, #484]	@ (800f648 <tcp_receive+0x888>)
 800f464:	891c      	ldrh	r4, [r3, #8]
 800f466:	4b78      	ldr	r3, [pc, #480]	@ (800f648 <tcp_receive+0x888>)
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	899b      	ldrh	r3, [r3, #12]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	4618      	mov	r0, r3
 800f470:	f7f8 fcc2 	bl	8007df8 <lwip_htons>
 800f474:	4603      	mov	r3, r0
 800f476:	b2db      	uxtb	r3, r3
 800f478:	f003 0303 	and.w	r3, r3, #3
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <tcp_receive+0x6c4>
 800f480:	2301      	movs	r3, #1
 800f482:	e000      	b.n	800f486 <tcp_receive+0x6c6>
 800f484:	2300      	movs	r3, #0
 800f486:	4423      	add	r3, r4
 800f488:	b29a      	uxth	r2, r3
 800f48a:	4b70      	ldr	r3, [pc, #448]	@ (800f64c <tcp_receive+0x88c>)
 800f48c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f492:	4b6e      	ldr	r3, [pc, #440]	@ (800f64c <tcp_receive+0x88c>)
 800f494:	881b      	ldrh	r3, [r3, #0]
 800f496:	429a      	cmp	r2, r3
 800f498:	d274      	bcs.n	800f584 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f49a:	4b6b      	ldr	r3, [pc, #428]	@ (800f648 <tcp_receive+0x888>)
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	899b      	ldrh	r3, [r3, #12]
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7f8 fca8 	bl	8007df8 <lwip_htons>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	f003 0301 	and.w	r3, r3, #1
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01e      	beq.n	800f4f2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f4b4:	4b64      	ldr	r3, [pc, #400]	@ (800f648 <tcp_receive+0x888>)
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	899b      	ldrh	r3, [r3, #12]
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	b21b      	sxth	r3, r3
 800f4be:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f4c2:	b21c      	sxth	r4, r3
 800f4c4:	4b60      	ldr	r3, [pc, #384]	@ (800f648 <tcp_receive+0x888>)
 800f4c6:	68db      	ldr	r3, [r3, #12]
 800f4c8:	899b      	ldrh	r3, [r3, #12]
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7f8 fc93 	bl	8007df8 <lwip_htons>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7f8 fc8b 	bl	8007df8 <lwip_htons>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	b21b      	sxth	r3, r3
 800f4e6:	4323      	orrs	r3, r4
 800f4e8:	b21a      	sxth	r2, r3
 800f4ea:	4b57      	ldr	r3, [pc, #348]	@ (800f648 <tcp_receive+0x888>)
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	b292      	uxth	r2, r2
 800f4f0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f4f6:	4b54      	ldr	r3, [pc, #336]	@ (800f648 <tcp_receive+0x888>)
 800f4f8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f4fa:	4b53      	ldr	r3, [pc, #332]	@ (800f648 <tcp_receive+0x888>)
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	899b      	ldrh	r3, [r3, #12]
 800f500:	b29b      	uxth	r3, r3
 800f502:	4618      	mov	r0, r3
 800f504:	f7f8 fc78 	bl	8007df8 <lwip_htons>
 800f508:	4603      	mov	r3, r0
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	f003 0302 	and.w	r3, r3, #2
 800f510:	2b00      	cmp	r3, #0
 800f512:	d005      	beq.n	800f520 <tcp_receive+0x760>
            inseg.len -= 1;
 800f514:	4b4c      	ldr	r3, [pc, #304]	@ (800f648 <tcp_receive+0x888>)
 800f516:	891b      	ldrh	r3, [r3, #8]
 800f518:	3b01      	subs	r3, #1
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	4b4a      	ldr	r3, [pc, #296]	@ (800f648 <tcp_receive+0x888>)
 800f51e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f520:	4b49      	ldr	r3, [pc, #292]	@ (800f648 <tcp_receive+0x888>)
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	4a48      	ldr	r2, [pc, #288]	@ (800f648 <tcp_receive+0x888>)
 800f526:	8912      	ldrh	r2, [r2, #8]
 800f528:	4611      	mov	r1, r2
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fc f9e0 	bl	800b8f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f530:	4b45      	ldr	r3, [pc, #276]	@ (800f648 <tcp_receive+0x888>)
 800f532:	891c      	ldrh	r4, [r3, #8]
 800f534:	4b44      	ldr	r3, [pc, #272]	@ (800f648 <tcp_receive+0x888>)
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	899b      	ldrh	r3, [r3, #12]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f8 fc5b 	bl	8007df8 <lwip_htons>
 800f542:	4603      	mov	r3, r0
 800f544:	b2db      	uxtb	r3, r3
 800f546:	f003 0303 	and.w	r3, r3, #3
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d001      	beq.n	800f552 <tcp_receive+0x792>
 800f54e:	2301      	movs	r3, #1
 800f550:	e000      	b.n	800f554 <tcp_receive+0x794>
 800f552:	2300      	movs	r3, #0
 800f554:	4423      	add	r3, r4
 800f556:	b29a      	uxth	r2, r3
 800f558:	4b3c      	ldr	r3, [pc, #240]	@ (800f64c <tcp_receive+0x88c>)
 800f55a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f55c:	4b3b      	ldr	r3, [pc, #236]	@ (800f64c <tcp_receive+0x88c>)
 800f55e:	881b      	ldrh	r3, [r3, #0]
 800f560:	461a      	mov	r2, r3
 800f562:	4b38      	ldr	r3, [pc, #224]	@ (800f644 <tcp_receive+0x884>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	441a      	add	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f56c:	6879      	ldr	r1, [r7, #4]
 800f56e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f570:	440b      	add	r3, r1
 800f572:	429a      	cmp	r2, r3
 800f574:	d006      	beq.n	800f584 <tcp_receive+0x7c4>
 800f576:	4b36      	ldr	r3, [pc, #216]	@ (800f650 <tcp_receive+0x890>)
 800f578:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f57c:	4935      	ldr	r1, [pc, #212]	@ (800f654 <tcp_receive+0x894>)
 800f57e:	4836      	ldr	r0, [pc, #216]	@ (800f658 <tcp_receive+0x898>)
 800f580:	f002 fb26 	bl	8011bd0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f000 80e6 	beq.w	800f75a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f58e:	4b2e      	ldr	r3, [pc, #184]	@ (800f648 <tcp_receive+0x888>)
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	899b      	ldrh	r3, [r3, #12]
 800f594:	b29b      	uxth	r3, r3
 800f596:	4618      	mov	r0, r3
 800f598:	f7f8 fc2e 	bl	8007df8 <lwip_htons>
 800f59c:	4603      	mov	r3, r0
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	f003 0301 	and.w	r3, r3, #1
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d010      	beq.n	800f5ca <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f5a8:	e00a      	b.n	800f5c0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5ae:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f7fd fd93 	bl	800d0e6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1f0      	bne.n	800f5aa <tcp_receive+0x7ea>
 800f5c8:	e0c7      	b.n	800f75a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f5d0:	e051      	b.n	800f676 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	899b      	ldrh	r3, [r3, #12]
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7f8 fc0c 	bl	8007df8 <lwip_htons>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	f003 0301 	and.w	r3, r3, #1
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d03c      	beq.n	800f666 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f5ec:	4b16      	ldr	r3, [pc, #88]	@ (800f648 <tcp_receive+0x888>)
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	899b      	ldrh	r3, [r3, #12]
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7f8 fbff 	bl	8007df8 <lwip_htons>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f602:	2b00      	cmp	r3, #0
 800f604:	d12f      	bne.n	800f666 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f606:	4b10      	ldr	r3, [pc, #64]	@ (800f648 <tcp_receive+0x888>)
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	899b      	ldrh	r3, [r3, #12]
 800f60c:	b29c      	uxth	r4, r3
 800f60e:	2001      	movs	r0, #1
 800f610:	f7f8 fbf2 	bl	8007df8 <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	461a      	mov	r2, r3
 800f618:	4b0b      	ldr	r3, [pc, #44]	@ (800f648 <tcp_receive+0x888>)
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	4322      	orrs	r2, r4
 800f61e:	b292      	uxth	r2, r2
 800f620:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f622:	4b09      	ldr	r3, [pc, #36]	@ (800f648 <tcp_receive+0x888>)
 800f624:	891c      	ldrh	r4, [r3, #8]
 800f626:	4b08      	ldr	r3, [pc, #32]	@ (800f648 <tcp_receive+0x888>)
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	899b      	ldrh	r3, [r3, #12]
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	4618      	mov	r0, r3
 800f630:	f7f8 fbe2 	bl	8007df8 <lwip_htons>
 800f634:	4603      	mov	r3, r0
 800f636:	b2db      	uxtb	r3, r3
 800f638:	f003 0303 	and.w	r3, r3, #3
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00d      	beq.n	800f65c <tcp_receive+0x89c>
 800f640:	2301      	movs	r3, #1
 800f642:	e00c      	b.n	800f65e <tcp_receive+0x89e>
 800f644:	24007c7c 	.word	0x24007c7c
 800f648:	24007c5c 	.word	0x24007c5c
 800f64c:	24007c86 	.word	0x24007c86
 800f650:	0801463c 	.word	0x0801463c
 800f654:	08014a20 	.word	0x08014a20
 800f658:	080146c4 	.word	0x080146c4
 800f65c:	2300      	movs	r3, #0
 800f65e:	4423      	add	r3, r4
 800f660:	b29a      	uxth	r2, r3
 800f662:	4b98      	ldr	r3, [pc, #608]	@ (800f8c4 <tcp_receive+0xb04>)
 800f664:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f668:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f670:	6938      	ldr	r0, [r7, #16]
 800f672:	f7fd fd38 	bl	800d0e6 <tcp_seg_free>
            while (next &&
 800f676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00e      	beq.n	800f69a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f67c:	4b91      	ldr	r3, [pc, #580]	@ (800f8c4 <tcp_receive+0xb04>)
 800f67e:	881b      	ldrh	r3, [r3, #0]
 800f680:	461a      	mov	r2, r3
 800f682:	4b91      	ldr	r3, [pc, #580]	@ (800f8c8 <tcp_receive+0xb08>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	441a      	add	r2, r3
 800f688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f690:	8909      	ldrh	r1, [r1, #8]
 800f692:	440b      	add	r3, r1
 800f694:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f696:	2b00      	cmp	r3, #0
 800f698:	da9b      	bge.n	800f5d2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f69a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d059      	beq.n	800f754 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f6a0:	4b88      	ldr	r3, [pc, #544]	@ (800f8c4 <tcp_receive+0xb04>)
 800f6a2:	881b      	ldrh	r3, [r3, #0]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	4b88      	ldr	r3, [pc, #544]	@ (800f8c8 <tcp_receive+0xb08>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	441a      	add	r2, r3
 800f6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	dd4d      	ble.n	800f754 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f6b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	4b81      	ldr	r3, [pc, #516]	@ (800f8c8 <tcp_receive+0xb08>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	4b80      	ldr	r3, [pc, #512]	@ (800f8cc <tcp_receive+0xb0c>)
 800f6cc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f6ce:	4b7f      	ldr	r3, [pc, #508]	@ (800f8cc <tcp_receive+0xb0c>)
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	899b      	ldrh	r3, [r3, #12]
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7f8 fb8e 	bl	8007df8 <lwip_htons>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	f003 0302 	and.w	r3, r3, #2
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d005      	beq.n	800f6f4 <tcp_receive+0x934>
                inseg.len -= 1;
 800f6e8:	4b78      	ldr	r3, [pc, #480]	@ (800f8cc <tcp_receive+0xb0c>)
 800f6ea:	891b      	ldrh	r3, [r3, #8]
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	b29a      	uxth	r2, r3
 800f6f0:	4b76      	ldr	r3, [pc, #472]	@ (800f8cc <tcp_receive+0xb0c>)
 800f6f2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f6f4:	4b75      	ldr	r3, [pc, #468]	@ (800f8cc <tcp_receive+0xb0c>)
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	4a74      	ldr	r2, [pc, #464]	@ (800f8cc <tcp_receive+0xb0c>)
 800f6fa:	8912      	ldrh	r2, [r2, #8]
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fc f8f6 	bl	800b8f0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f704:	4b71      	ldr	r3, [pc, #452]	@ (800f8cc <tcp_receive+0xb0c>)
 800f706:	891c      	ldrh	r4, [r3, #8]
 800f708:	4b70      	ldr	r3, [pc, #448]	@ (800f8cc <tcp_receive+0xb0c>)
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	899b      	ldrh	r3, [r3, #12]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	4618      	mov	r0, r3
 800f712:	f7f8 fb71 	bl	8007df8 <lwip_htons>
 800f716:	4603      	mov	r3, r0
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	f003 0303 	and.w	r3, r3, #3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <tcp_receive+0x966>
 800f722:	2301      	movs	r3, #1
 800f724:	e000      	b.n	800f728 <tcp_receive+0x968>
 800f726:	2300      	movs	r3, #0
 800f728:	4423      	add	r3, r4
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	4b65      	ldr	r3, [pc, #404]	@ (800f8c4 <tcp_receive+0xb04>)
 800f72e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f730:	4b64      	ldr	r3, [pc, #400]	@ (800f8c4 <tcp_receive+0xb04>)
 800f732:	881b      	ldrh	r3, [r3, #0]
 800f734:	461a      	mov	r2, r3
 800f736:	4b64      	ldr	r3, [pc, #400]	@ (800f8c8 <tcp_receive+0xb08>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	441a      	add	r2, r3
 800f73c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	429a      	cmp	r2, r3
 800f744:	d006      	beq.n	800f754 <tcp_receive+0x994>
 800f746:	4b62      	ldr	r3, [pc, #392]	@ (800f8d0 <tcp_receive+0xb10>)
 800f748:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f74c:	4961      	ldr	r1, [pc, #388]	@ (800f8d4 <tcp_receive+0xb14>)
 800f74e:	4862      	ldr	r0, [pc, #392]	@ (800f8d8 <tcp_receive+0xb18>)
 800f750:	f002 fa3e 	bl	8011bd0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f758:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f75a:	4b5a      	ldr	r3, [pc, #360]	@ (800f8c4 <tcp_receive+0xb04>)
 800f75c:	881b      	ldrh	r3, [r3, #0]
 800f75e:	461a      	mov	r2, r3
 800f760:	4b59      	ldr	r3, [pc, #356]	@ (800f8c8 <tcp_receive+0xb08>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	441a      	add	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f76e:	4b55      	ldr	r3, [pc, #340]	@ (800f8c4 <tcp_receive+0xb04>)
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	429a      	cmp	r2, r3
 800f774:	d206      	bcs.n	800f784 <tcp_receive+0x9c4>
 800f776:	4b56      	ldr	r3, [pc, #344]	@ (800f8d0 <tcp_receive+0xb10>)
 800f778:	f240 6207 	movw	r2, #1543	@ 0x607
 800f77c:	4957      	ldr	r1, [pc, #348]	@ (800f8dc <tcp_receive+0xb1c>)
 800f77e:	4856      	ldr	r0, [pc, #344]	@ (800f8d8 <tcp_receive+0xb18>)
 800f780:	f002 fa26 	bl	8011bd0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f788:	4b4e      	ldr	r3, [pc, #312]	@ (800f8c4 <tcp_receive+0xb04>)
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	b29a      	uxth	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f7fc ffc5 	bl	800c724 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f79a:	4b4c      	ldr	r3, [pc, #304]	@ (800f8cc <tcp_receive+0xb0c>)
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	891b      	ldrh	r3, [r3, #8]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d006      	beq.n	800f7b2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f7a4:	4b49      	ldr	r3, [pc, #292]	@ (800f8cc <tcp_receive+0xb0c>)
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	4a4d      	ldr	r2, [pc, #308]	@ (800f8e0 <tcp_receive+0xb20>)
 800f7aa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f7ac:	4b47      	ldr	r3, [pc, #284]	@ (800f8cc <tcp_receive+0xb0c>)
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f7b2:	4b46      	ldr	r3, [pc, #280]	@ (800f8cc <tcp_receive+0xb0c>)
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	899b      	ldrh	r3, [r3, #12]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7f8 fb1c 	bl	8007df8 <lwip_htons>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	f003 0301 	and.w	r3, r3, #1
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f000 80b8 	beq.w	800f93e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f7ce:	4b45      	ldr	r3, [pc, #276]	@ (800f8e4 <tcp_receive+0xb24>)
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	f043 0320 	orr.w	r3, r3, #32
 800f7d6:	b2da      	uxtb	r2, r3
 800f7d8:	4b42      	ldr	r3, [pc, #264]	@ (800f8e4 <tcp_receive+0xb24>)
 800f7da:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f7dc:	e0af      	b.n	800f93e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7e2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	4a36      	ldr	r2, [pc, #216]	@ (800f8c8 <tcp_receive+0xb08>)
 800f7ee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	891b      	ldrh	r3, [r3, #8]
 800f7f4:	461c      	mov	r4, r3
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	899b      	ldrh	r3, [r3, #12]
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7f8 fafa 	bl	8007df8 <lwip_htons>
 800f804:	4603      	mov	r3, r0
 800f806:	b2db      	uxtb	r3, r3
 800f808:	f003 0303 	and.w	r3, r3, #3
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <tcp_receive+0xa54>
 800f810:	2301      	movs	r3, #1
 800f812:	e000      	b.n	800f816 <tcp_receive+0xa56>
 800f814:	2300      	movs	r3, #0
 800f816:	191a      	adds	r2, r3, r4
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f81c:	441a      	add	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f826:	461c      	mov	r4, r3
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	891b      	ldrh	r3, [r3, #8]
 800f82c:	461d      	mov	r5, r3
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	899b      	ldrh	r3, [r3, #12]
 800f834:	b29b      	uxth	r3, r3
 800f836:	4618      	mov	r0, r3
 800f838:	f7f8 fade 	bl	8007df8 <lwip_htons>
 800f83c:	4603      	mov	r3, r0
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	f003 0303 	and.w	r3, r3, #3
 800f844:	2b00      	cmp	r3, #0
 800f846:	d001      	beq.n	800f84c <tcp_receive+0xa8c>
 800f848:	2301      	movs	r3, #1
 800f84a:	e000      	b.n	800f84e <tcp_receive+0xa8e>
 800f84c:	2300      	movs	r3, #0
 800f84e:	442b      	add	r3, r5
 800f850:	429c      	cmp	r4, r3
 800f852:	d206      	bcs.n	800f862 <tcp_receive+0xaa2>
 800f854:	4b1e      	ldr	r3, [pc, #120]	@ (800f8d0 <tcp_receive+0xb10>)
 800f856:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f85a:	4923      	ldr	r1, [pc, #140]	@ (800f8e8 <tcp_receive+0xb28>)
 800f85c:	481e      	ldr	r0, [pc, #120]	@ (800f8d8 <tcp_receive+0xb18>)
 800f85e:	f002 f9b7 	bl	8011bd0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	891b      	ldrh	r3, [r3, #8]
 800f866:	461c      	mov	r4, r3
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	899b      	ldrh	r3, [r3, #12]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	4618      	mov	r0, r3
 800f872:	f7f8 fac1 	bl	8007df8 <lwip_htons>
 800f876:	4603      	mov	r3, r0
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	f003 0303 	and.w	r3, r3, #3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d001      	beq.n	800f886 <tcp_receive+0xac6>
 800f882:	2301      	movs	r3, #1
 800f884:	e000      	b.n	800f888 <tcp_receive+0xac8>
 800f886:	2300      	movs	r3, #0
 800f888:	1919      	adds	r1, r3, r4
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f88e:	b28b      	uxth	r3, r1
 800f890:	1ad3      	subs	r3, r2, r3
 800f892:	b29a      	uxth	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f7fc ff43 	bl	800c724 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	891b      	ldrh	r3, [r3, #8]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d028      	beq.n	800f8fa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f8a8:	4b0d      	ldr	r3, [pc, #52]	@ (800f8e0 <tcp_receive+0xb20>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d01d      	beq.n	800f8ec <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800f8e0 <tcp_receive+0xb20>)
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	4610      	mov	r0, r2
 800f8bc:	f7fc fa60 	bl	800bd80 <pbuf_cat>
 800f8c0:	e018      	b.n	800f8f4 <tcp_receive+0xb34>
 800f8c2:	bf00      	nop
 800f8c4:	24007c86 	.word	0x24007c86
 800f8c8:	24007c7c 	.word	0x24007c7c
 800f8cc:	24007c5c 	.word	0x24007c5c
 800f8d0:	0801463c 	.word	0x0801463c
 800f8d4:	08014a58 	.word	0x08014a58
 800f8d8:	080146c4 	.word	0x080146c4
 800f8dc:	08014a94 	.word	0x08014a94
 800f8e0:	24007c8c 	.word	0x24007c8c
 800f8e4:	24007c89 	.word	0x24007c89
 800f8e8:	08014ab4 	.word	0x08014ab4
            } else {
              recv_data = cseg->p;
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	4a70      	ldr	r2, [pc, #448]	@ (800fab4 <tcp_receive+0xcf4>)
 800f8f2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	899b      	ldrh	r3, [r3, #12]
 800f900:	b29b      	uxth	r3, r3
 800f902:	4618      	mov	r0, r3
 800f904:	f7f8 fa78 	bl	8007df8 <lwip_htons>
 800f908:	4603      	mov	r3, r0
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	f003 0301 	and.w	r3, r3, #1
 800f910:	2b00      	cmp	r3, #0
 800f912:	d00d      	beq.n	800f930 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f914:	4b68      	ldr	r3, [pc, #416]	@ (800fab8 <tcp_receive+0xcf8>)
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	f043 0320 	orr.w	r3, r3, #32
 800f91c:	b2da      	uxtb	r2, r3
 800f91e:	4b66      	ldr	r3, [pc, #408]	@ (800fab8 <tcp_receive+0xcf8>)
 800f920:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	7d1b      	ldrb	r3, [r3, #20]
 800f926:	2b04      	cmp	r3, #4
 800f928:	d102      	bne.n	800f930 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2207      	movs	r2, #7
 800f92e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f938:	68b8      	ldr	r0, [r7, #8]
 800f93a:	f7fd fbd4 	bl	800d0e6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f942:	2b00      	cmp	r3, #0
 800f944:	d008      	beq.n	800f958 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	685a      	ldr	r2, [r3, #4]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f952:	429a      	cmp	r2, r3
 800f954:	f43f af43 	beq.w	800f7de <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	8b5b      	ldrh	r3, [r3, #26]
 800f95c:	f003 0301 	and.w	r3, r3, #1
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00e      	beq.n	800f982 <tcp_receive+0xbc2>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	8b5b      	ldrh	r3, [r3, #26]
 800f968:	f023 0301 	bic.w	r3, r3, #1
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	835a      	strh	r2, [r3, #26]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8b5b      	ldrh	r3, [r3, #26]
 800f976:	f043 0302 	orr.w	r3, r3, #2
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f980:	e187      	b.n	800fc92 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	8b5b      	ldrh	r3, [r3, #26]
 800f986:	f043 0301 	orr.w	r3, r3, #1
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f990:	e17f      	b.n	800fc92 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f996:	2b00      	cmp	r3, #0
 800f998:	d106      	bne.n	800f9a8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f99a:	4848      	ldr	r0, [pc, #288]	@ (800fabc <tcp_receive+0xcfc>)
 800f99c:	f7fd fbbc 	bl	800d118 <tcp_seg_copy>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	675a      	str	r2, [r3, #116]	@ 0x74
 800f9a6:	e16c      	b.n	800fc82 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9b2:	e156      	b.n	800fc62 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	685a      	ldr	r2, [r3, #4]
 800f9ba:	4b41      	ldr	r3, [pc, #260]	@ (800fac0 <tcp_receive+0xd00>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d11d      	bne.n	800f9fe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f9c2:	4b3e      	ldr	r3, [pc, #248]	@ (800fabc <tcp_receive+0xcfc>)
 800f9c4:	891a      	ldrh	r2, [r3, #8]
 800f9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c8:	891b      	ldrh	r3, [r3, #8]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	f240 814e 	bls.w	800fc6c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f9d0:	483a      	ldr	r0, [pc, #232]	@ (800fabc <tcp_receive+0xcfc>)
 800f9d2:	f7fd fba1 	bl	800d118 <tcp_seg_copy>
 800f9d6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f000 8148 	beq.w	800fc70 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d003      	beq.n	800f9ee <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	601a      	str	r2, [r3, #0]
 800f9ec:	e002      	b.n	800f9f4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f9f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f9f6:	6978      	ldr	r0, [r7, #20]
 800f9f8:	f7ff f8de 	bl	800ebb8 <tcp_oos_insert_segment>
                }
                break;
 800f9fc:	e138      	b.n	800fc70 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d117      	bne.n	800fa34 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fa04:	4b2e      	ldr	r3, [pc, #184]	@ (800fac0 <tcp_receive+0xd00>)
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	1ad3      	subs	r3, r2, r3
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	da57      	bge.n	800fac4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa14:	4829      	ldr	r0, [pc, #164]	@ (800fabc <tcp_receive+0xcfc>)
 800fa16:	f7fd fb7f 	bl	800d118 <tcp_seg_copy>
 800fa1a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f000 8128 	beq.w	800fc74 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	69ba      	ldr	r2, [r7, #24]
 800fa28:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fa2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fa2c:	69b8      	ldr	r0, [r7, #24]
 800fa2e:	f7ff f8c3 	bl	800ebb8 <tcp_oos_insert_segment>
                  }
                  break;
 800fa32:	e11f      	b.n	800fc74 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fa34:	4b22      	ldr	r3, [pc, #136]	@ (800fac0 <tcp_receive+0xd00>)
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	3b01      	subs	r3, #1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	db3e      	blt.n	800fac4 <tcp_receive+0xd04>
 800fa46:	4b1e      	ldr	r3, [pc, #120]	@ (800fac0 <tcp_receive+0xd00>)
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	3301      	adds	r3, #1
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	dc35      	bgt.n	800fac4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa58:	4818      	ldr	r0, [pc, #96]	@ (800fabc <tcp_receive+0xcfc>)
 800fa5a:	f7fd fb5d 	bl	800d118 <tcp_seg_copy>
 800fa5e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f000 8108 	beq.w	800fc78 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fa68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa70:	8912      	ldrh	r2, [r2, #8]
 800fa72:	441a      	add	r2, r3
 800fa74:	4b12      	ldr	r3, [pc, #72]	@ (800fac0 <tcp_receive+0xd00>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	1ad3      	subs	r3, r2, r3
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	dd12      	ble.n	800faa4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fa7e:	4b10      	ldr	r3, [pc, #64]	@ (800fac0 <tcp_receive+0xd00>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	b29a      	uxth	r2, r3
 800fa84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	1ad3      	subs	r3, r2, r3
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa92:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fa94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa96:	685a      	ldr	r2, [r3, #4]
 800fa98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa9a:	891b      	ldrh	r3, [r3, #8]
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	4610      	mov	r0, r2
 800faa0:	f7fb ff26 	bl	800b8f0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800faa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa6:	69fa      	ldr	r2, [r7, #28]
 800faa8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800faaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800faac:	69f8      	ldr	r0, [r7, #28]
 800faae:	f7ff f883 	bl	800ebb8 <tcp_oos_insert_segment>
                  }
                  break;
 800fab2:	e0e1      	b.n	800fc78 <tcp_receive+0xeb8>
 800fab4:	24007c8c 	.word	0x24007c8c
 800fab8:	24007c89 	.word	0x24007c89
 800fabc:	24007c5c 	.word	0x24007c5c
 800fac0:	24007c7c 	.word	0x24007c7c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	f040 80c5 	bne.w	800fc5c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fad2:	4b7f      	ldr	r3, [pc, #508]	@ (800fcd0 <tcp_receive+0xf10>)
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f340 80bc 	ble.w	800fc5c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	899b      	ldrh	r3, [r3, #12]
 800faea:	b29b      	uxth	r3, r3
 800faec:	4618      	mov	r0, r3
 800faee:	f7f8 f983 	bl	8007df8 <lwip_htons>
 800faf2:	4603      	mov	r3, r0
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	f003 0301 	and.w	r3, r3, #1
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f040 80be 	bne.w	800fc7c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fb00:	4874      	ldr	r0, [pc, #464]	@ (800fcd4 <tcp_receive+0xf14>)
 800fb02:	f7fd fb09 	bl	800d118 <tcp_seg_copy>
 800fb06:	4602      	mov	r2, r0
 800fb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 80b5 	beq.w	800fc80 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb18:	68db      	ldr	r3, [r3, #12]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb1e:	8912      	ldrh	r2, [r2, #8]
 800fb20:	441a      	add	r2, r3
 800fb22:	4b6b      	ldr	r3, [pc, #428]	@ (800fcd0 <tcp_receive+0xf10>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	dd12      	ble.n	800fb52 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fb2c:	4b68      	ldr	r3, [pc, #416]	@ (800fcd0 <tcp_receive+0xf10>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	1ad3      	subs	r3, r2, r3
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb44:	685a      	ldr	r2, [r3, #4]
 800fb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb48:	891b      	ldrh	r3, [r3, #8]
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f7fb fecf 	bl	800b8f0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fb52:	4b61      	ldr	r3, [pc, #388]	@ (800fcd8 <tcp_receive+0xf18>)
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	461a      	mov	r2, r3
 800fb58:	4b5d      	ldr	r3, [pc, #372]	@ (800fcd0 <tcp_receive+0xf10>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	441a      	add	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb62:	6879      	ldr	r1, [r7, #4]
 800fb64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fb66:	440b      	add	r3, r1
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f340 8088 	ble.w	800fc80 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	899b      	ldrh	r3, [r3, #12]
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7f8 f93c 	bl	8007df8 <lwip_htons>
 800fb80:	4603      	mov	r3, r0
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	f003 0301 	and.w	r3, r3, #1
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d021      	beq.n	800fbd0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	899b      	ldrh	r3, [r3, #12]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	b21b      	sxth	r3, r3
 800fb98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fb9c:	b21c      	sxth	r4, r3
 800fb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	899b      	ldrh	r3, [r3, #12]
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7f8 f925 	bl	8007df8 <lwip_htons>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7f8 f91d 	bl	8007df8 <lwip_htons>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	b21b      	sxth	r3, r3
 800fbc2:	4323      	orrs	r3, r4
 800fbc4:	b21a      	sxth	r2, r3
 800fbc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	b292      	uxth	r2, r2
 800fbce:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbda:	4413      	add	r3, r2
 800fbdc:	b299      	uxth	r1, r3
 800fbde:	4b3c      	ldr	r3, [pc, #240]	@ (800fcd0 <tcp_receive+0xf10>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	1a8a      	subs	r2, r1, r2
 800fbea:	b292      	uxth	r2, r2
 800fbec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	685a      	ldr	r2, [r3, #4]
 800fbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	891b      	ldrh	r3, [r3, #8]
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	f7fb fe77 	bl	800b8f0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	891c      	ldrh	r4, [r3, #8]
 800fc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	68db      	ldr	r3, [r3, #12]
 800fc0e:	899b      	ldrh	r3, [r3, #12]
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7f8 f8f0 	bl	8007df8 <lwip_htons>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	f003 0303 	and.w	r3, r3, #3
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d001      	beq.n	800fc28 <tcp_receive+0xe68>
 800fc24:	2301      	movs	r3, #1
 800fc26:	e000      	b.n	800fc2a <tcp_receive+0xe6a>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	4423      	add	r3, r4
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	4b2a      	ldr	r3, [pc, #168]	@ (800fcd8 <tcp_receive+0xf18>)
 800fc30:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fc32:	4b29      	ldr	r3, [pc, #164]	@ (800fcd8 <tcp_receive+0xf18>)
 800fc34:	881b      	ldrh	r3, [r3, #0]
 800fc36:	461a      	mov	r2, r3
 800fc38:	4b25      	ldr	r3, [pc, #148]	@ (800fcd0 <tcp_receive+0xf10>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	441a      	add	r2, r3
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc42:	6879      	ldr	r1, [r7, #4]
 800fc44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fc46:	440b      	add	r3, r1
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d019      	beq.n	800fc80 <tcp_receive+0xec0>
 800fc4c:	4b23      	ldr	r3, [pc, #140]	@ (800fcdc <tcp_receive+0xf1c>)
 800fc4e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800fc52:	4923      	ldr	r1, [pc, #140]	@ (800fce0 <tcp_receive+0xf20>)
 800fc54:	4823      	ldr	r0, [pc, #140]	@ (800fce4 <tcp_receive+0xf24>)
 800fc56:	f001 ffbb 	bl	8011bd0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fc5a:	e011      	b.n	800fc80 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f47f aea5 	bne.w	800f9b4 <tcp_receive+0xbf4>
 800fc6a:	e00a      	b.n	800fc82 <tcp_receive+0xec2>
                break;
 800fc6c:	bf00      	nop
 800fc6e:	e008      	b.n	800fc82 <tcp_receive+0xec2>
                break;
 800fc70:	bf00      	nop
 800fc72:	e006      	b.n	800fc82 <tcp_receive+0xec2>
                  break;
 800fc74:	bf00      	nop
 800fc76:	e004      	b.n	800fc82 <tcp_receive+0xec2>
                  break;
 800fc78:	bf00      	nop
 800fc7a:	e002      	b.n	800fc82 <tcp_receive+0xec2>
                  break;
 800fc7c:	bf00      	nop
 800fc7e:	e000      	b.n	800fc82 <tcp_receive+0xec2>
                break;
 800fc80:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f001 fa30 	bl	80110e8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fc88:	e003      	b.n	800fc92 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f001 fa2c 	bl	80110e8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc90:	e01a      	b.n	800fcc8 <tcp_receive+0xf08>
 800fc92:	e019      	b.n	800fcc8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fc94:	4b0e      	ldr	r3, [pc, #56]	@ (800fcd0 <tcp_receive+0xf10>)
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	db0a      	blt.n	800fcb8 <tcp_receive+0xef8>
 800fca2:	4b0b      	ldr	r3, [pc, #44]	@ (800fcd0 <tcp_receive+0xf10>)
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcaa:	6879      	ldr	r1, [r7, #4]
 800fcac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fcae:	440b      	add	r3, r1
 800fcb0:	1ad3      	subs	r3, r2, r3
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	dd07      	ble.n	800fcc8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	8b5b      	ldrh	r3, [r3, #26]
 800fcbc:	f043 0302 	orr.w	r3, r3, #2
 800fcc0:	b29a      	uxth	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fcc6:	e7ff      	b.n	800fcc8 <tcp_receive+0xf08>
 800fcc8:	bf00      	nop
 800fcca:	3750      	adds	r7, #80	@ 0x50
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bdb0      	pop	{r4, r5, r7, pc}
 800fcd0:	24007c7c 	.word	0x24007c7c
 800fcd4:	24007c5c 	.word	0x24007c5c
 800fcd8:	24007c86 	.word	0x24007c86
 800fcdc:	0801463c 	.word	0x0801463c
 800fce0:	08014a20 	.word	0x08014a20
 800fce4:	080146c4 	.word	0x080146c4

0800fce8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fcee:	4b15      	ldr	r3, [pc, #84]	@ (800fd44 <tcp_get_next_optbyte+0x5c>)
 800fcf0:	881b      	ldrh	r3, [r3, #0]
 800fcf2:	1c5a      	adds	r2, r3, #1
 800fcf4:	b291      	uxth	r1, r2
 800fcf6:	4a13      	ldr	r2, [pc, #76]	@ (800fd44 <tcp_get_next_optbyte+0x5c>)
 800fcf8:	8011      	strh	r1, [r2, #0]
 800fcfa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fcfc:	4b12      	ldr	r3, [pc, #72]	@ (800fd48 <tcp_get_next_optbyte+0x60>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d004      	beq.n	800fd0e <tcp_get_next_optbyte+0x26>
 800fd04:	4b11      	ldr	r3, [pc, #68]	@ (800fd4c <tcp_get_next_optbyte+0x64>)
 800fd06:	881b      	ldrh	r3, [r3, #0]
 800fd08:	88fa      	ldrh	r2, [r7, #6]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d208      	bcs.n	800fd20 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fd0e:	4b10      	ldr	r3, [pc, #64]	@ (800fd50 <tcp_get_next_optbyte+0x68>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	3314      	adds	r3, #20
 800fd14:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fd16:	88fb      	ldrh	r3, [r7, #6]
 800fd18:	683a      	ldr	r2, [r7, #0]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	e00b      	b.n	800fd38 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fd20:	88fb      	ldrh	r3, [r7, #6]
 800fd22:	b2da      	uxtb	r2, r3
 800fd24:	4b09      	ldr	r3, [pc, #36]	@ (800fd4c <tcp_get_next_optbyte+0x64>)
 800fd26:	881b      	ldrh	r3, [r3, #0]
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	1ad3      	subs	r3, r2, r3
 800fd2c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fd2e:	4b06      	ldr	r3, [pc, #24]	@ (800fd48 <tcp_get_next_optbyte+0x60>)
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	797b      	ldrb	r3, [r7, #5]
 800fd34:	4413      	add	r3, r2
 800fd36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	24007c78 	.word	0x24007c78
 800fd48:	24007c74 	.word	0x24007c74
 800fd4c:	24007c72 	.word	0x24007c72
 800fd50:	24007c6c 	.word	0x24007c6c

0800fd54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d106      	bne.n	800fd70 <tcp_parseopt+0x1c>
 800fd62:	4b32      	ldr	r3, [pc, #200]	@ (800fe2c <tcp_parseopt+0xd8>)
 800fd64:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fd68:	4931      	ldr	r1, [pc, #196]	@ (800fe30 <tcp_parseopt+0xdc>)
 800fd6a:	4832      	ldr	r0, [pc, #200]	@ (800fe34 <tcp_parseopt+0xe0>)
 800fd6c:	f001 ff30 	bl	8011bd0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fd70:	4b31      	ldr	r3, [pc, #196]	@ (800fe38 <tcp_parseopt+0xe4>)
 800fd72:	881b      	ldrh	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d056      	beq.n	800fe26 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fd78:	4b30      	ldr	r3, [pc, #192]	@ (800fe3c <tcp_parseopt+0xe8>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	801a      	strh	r2, [r3, #0]
 800fd7e:	e046      	b.n	800fe0e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fd80:	f7ff ffb2 	bl	800fce8 <tcp_get_next_optbyte>
 800fd84:	4603      	mov	r3, r0
 800fd86:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d006      	beq.n	800fd9c <tcp_parseopt+0x48>
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	dc2a      	bgt.n	800fde8 <tcp_parseopt+0x94>
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d042      	beq.n	800fe1c <tcp_parseopt+0xc8>
 800fd96:	2b01      	cmp	r3, #1
 800fd98:	d038      	beq.n	800fe0c <tcp_parseopt+0xb8>
 800fd9a:	e025      	b.n	800fde8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fd9c:	f7ff ffa4 	bl	800fce8 <tcp_get_next_optbyte>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b04      	cmp	r3, #4
 800fda4:	d13c      	bne.n	800fe20 <tcp_parseopt+0xcc>
 800fda6:	4b25      	ldr	r3, [pc, #148]	@ (800fe3c <tcp_parseopt+0xe8>)
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	4a22      	ldr	r2, [pc, #136]	@ (800fe38 <tcp_parseopt+0xe4>)
 800fdae:	8812      	ldrh	r2, [r2, #0]
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	da35      	bge.n	800fe20 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fdb4:	f7ff ff98 	bl	800fce8 <tcp_get_next_optbyte>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	021b      	lsls	r3, r3, #8
 800fdbc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fdbe:	f7ff ff93 	bl	800fce8 <tcp_get_next_optbyte>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	89bb      	ldrh	r3, [r7, #12]
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fdcc:	89bb      	ldrh	r3, [r7, #12]
 800fdce:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fdd2:	d804      	bhi.n	800fdde <tcp_parseopt+0x8a>
 800fdd4:	89bb      	ldrh	r3, [r7, #12]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d001      	beq.n	800fdde <tcp_parseopt+0x8a>
 800fdda:	89ba      	ldrh	r2, [r7, #12]
 800fddc:	e001      	b.n	800fde2 <tcp_parseopt+0x8e>
 800fdde:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fde6:	e012      	b.n	800fe0e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fde8:	f7ff ff7e 	bl	800fce8 <tcp_get_next_optbyte>
 800fdec:	4603      	mov	r3, r0
 800fdee:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fdf0:	7afb      	ldrb	r3, [r7, #11]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d916      	bls.n	800fe24 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fdf6:	7afb      	ldrb	r3, [r7, #11]
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	4b10      	ldr	r3, [pc, #64]	@ (800fe3c <tcp_parseopt+0xe8>)
 800fdfc:	881b      	ldrh	r3, [r3, #0]
 800fdfe:	4413      	add	r3, r2
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	3b02      	subs	r3, #2
 800fe04:	b29a      	uxth	r2, r3
 800fe06:	4b0d      	ldr	r3, [pc, #52]	@ (800fe3c <tcp_parseopt+0xe8>)
 800fe08:	801a      	strh	r2, [r3, #0]
 800fe0a:	e000      	b.n	800fe0e <tcp_parseopt+0xba>
          break;
 800fe0c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe0e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe3c <tcp_parseopt+0xe8>)
 800fe10:	881a      	ldrh	r2, [r3, #0]
 800fe12:	4b09      	ldr	r3, [pc, #36]	@ (800fe38 <tcp_parseopt+0xe4>)
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d3b2      	bcc.n	800fd80 <tcp_parseopt+0x2c>
 800fe1a:	e004      	b.n	800fe26 <tcp_parseopt+0xd2>
          return;
 800fe1c:	bf00      	nop
 800fe1e:	e002      	b.n	800fe26 <tcp_parseopt+0xd2>
            return;
 800fe20:	bf00      	nop
 800fe22:	e000      	b.n	800fe26 <tcp_parseopt+0xd2>
            return;
 800fe24:	bf00      	nop
      }
    }
  }
}
 800fe26:	3710      	adds	r7, #16
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	0801463c 	.word	0x0801463c
 800fe30:	08014adc 	.word	0x08014adc
 800fe34:	080146c4 	.word	0x080146c4
 800fe38:	24007c70 	.word	0x24007c70
 800fe3c:	24007c78 	.word	0x24007c78

0800fe40 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fe40:	b480      	push	{r7}
 800fe42:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fe44:	4b05      	ldr	r3, [pc, #20]	@ (800fe5c <tcp_trigger_input_pcb_close+0x1c>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	f043 0310 	orr.w	r3, r3, #16
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	4b03      	ldr	r3, [pc, #12]	@ (800fe5c <tcp_trigger_input_pcb_close+0x1c>)
 800fe50:	701a      	strb	r2, [r3, #0]
}
 800fe52:	bf00      	nop
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr
 800fe5c:	24007c89 	.word	0x24007c89

0800fe60 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d00a      	beq.n	800fe88 <tcp_route+0x28>
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	7a1b      	ldrb	r3, [r3, #8]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d006      	beq.n	800fe88 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	7a1b      	ldrb	r3, [r3, #8]
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fb fb5c 	bl	800b53c <netif_get_by_index>
 800fe84:	4603      	mov	r3, r0
 800fe86:	e003      	b.n	800fe90 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7f9 fa8b 	bl	80093a4 <ip4_route>
 800fe8e:	4603      	mov	r3, r0
  }
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fe98:	b590      	push	{r4, r7, lr}
 800fe9a:	b087      	sub	sp, #28
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	4613      	mov	r3, r2
 800fea6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d105      	bne.n	800feba <tcp_create_segment+0x22>
 800feae:	4b43      	ldr	r3, [pc, #268]	@ (800ffbc <tcp_create_segment+0x124>)
 800feb0:	22a3      	movs	r2, #163	@ 0xa3
 800feb2:	4943      	ldr	r1, [pc, #268]	@ (800ffc0 <tcp_create_segment+0x128>)
 800feb4:	4843      	ldr	r0, [pc, #268]	@ (800ffc4 <tcp_create_segment+0x12c>)
 800feb6:	f001 fe8b 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d105      	bne.n	800fecc <tcp_create_segment+0x34>
 800fec0:	4b3e      	ldr	r3, [pc, #248]	@ (800ffbc <tcp_create_segment+0x124>)
 800fec2:	22a4      	movs	r2, #164	@ 0xa4
 800fec4:	4940      	ldr	r1, [pc, #256]	@ (800ffc8 <tcp_create_segment+0x130>)
 800fec6:	483f      	ldr	r0, [pc, #252]	@ (800ffc4 <tcp_create_segment+0x12c>)
 800fec8:	f001 fe82 	bl	8011bd0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fecc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	f003 0304 	and.w	r3, r3, #4
 800fed8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800feda:	2003      	movs	r0, #3
 800fedc:	f7fa ffa8 	bl	800ae30 <memp_malloc>
 800fee0:	6138      	str	r0, [r7, #16]
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d104      	bne.n	800fef2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fee8:	68b8      	ldr	r0, [r7, #8]
 800feea:	f7fb fe87 	bl	800bbfc <pbuf_free>
    return NULL;
 800feee:	2300      	movs	r3, #0
 800fef0:	e060      	b.n	800ffb4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fef8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	2200      	movs	r2, #0
 800fefe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	68ba      	ldr	r2, [r7, #8]
 800ff04:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	891a      	ldrh	r2, [r3, #8]
 800ff0a:	7dfb      	ldrb	r3, [r7, #23]
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d205      	bcs.n	800ff1e <tcp_create_segment+0x86>
 800ff12:	4b2a      	ldr	r3, [pc, #168]	@ (800ffbc <tcp_create_segment+0x124>)
 800ff14:	22b0      	movs	r2, #176	@ 0xb0
 800ff16:	492d      	ldr	r1, [pc, #180]	@ (800ffcc <tcp_create_segment+0x134>)
 800ff18:	482a      	ldr	r0, [pc, #168]	@ (800ffc4 <tcp_create_segment+0x12c>)
 800ff1a:	f001 fe59 	bl	8011bd0 <iprintf>
  seg->len = p->tot_len - optlen;
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	891a      	ldrh	r2, [r3, #8]
 800ff22:	7dfb      	ldrb	r3, [r7, #23]
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ff2e:	2114      	movs	r1, #20
 800ff30:	68b8      	ldr	r0, [r7, #8]
 800ff32:	f7fb fdcd 	bl	800bad0 <pbuf_add_header>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d004      	beq.n	800ff46 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ff3c:	6938      	ldr	r0, [r7, #16]
 800ff3e:	f7fd f8d2 	bl	800d0e6 <tcp_seg_free>
    return NULL;
 800ff42:	2300      	movs	r3, #0
 800ff44:	e036      	b.n	800ffb4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	685a      	ldr	r2, [r3, #4]
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	8ada      	ldrh	r2, [r3, #22]
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	68dc      	ldr	r4, [r3, #12]
 800ff58:	4610      	mov	r0, r2
 800ff5a:	f7f7 ff4d 	bl	8007df8 <lwip_htons>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	8b1a      	ldrh	r2, [r3, #24]
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	68dc      	ldr	r4, [r3, #12]
 800ff6a:	4610      	mov	r0, r2
 800ff6c:	f7f7 ff44 	bl	8007df8 <lwip_htons>
 800ff70:	4603      	mov	r3, r0
 800ff72:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	68dc      	ldr	r4, [r3, #12]
 800ff78:	6838      	ldr	r0, [r7, #0]
 800ff7a:	f7f7 ff52 	bl	8007e22 <lwip_htonl>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ff82:	7dfb      	ldrb	r3, [r7, #23]
 800ff84:	089b      	lsrs	r3, r3, #2
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	3305      	adds	r3, #5
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	031b      	lsls	r3, r3, #12
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	79fb      	ldrb	r3, [r7, #7]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	4313      	orrs	r3, r2
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	68dc      	ldr	r4, [r3, #12]
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	f7f7 ff2b 	bl	8007df8 <lwip_htons>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	749a      	strb	r2, [r3, #18]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	74da      	strb	r2, [r3, #19]
  return seg;
 800ffb2:	693b      	ldr	r3, [r7, #16]
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	371c      	adds	r7, #28
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd90      	pop	{r4, r7, pc}
 800ffbc:	08014af8 	.word	0x08014af8
 800ffc0:	08014b68 	.word	0x08014b68
 800ffc4:	08014b88 	.word	0x08014b88
 800ffc8:	08014bb0 	.word	0x08014bb0
 800ffcc:	08014bd4 	.word	0x08014bd4

0800ffd0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ffd0:	b590      	push	{r4, r7, lr}
 800ffd2:	b08b      	sub	sp, #44	@ 0x2c
 800ffd4:	af02      	add	r7, sp, #8
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	460b      	mov	r3, r1
 800ffda:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	61fb      	str	r3, [r7, #28]
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d106      	bne.n	800fffc <tcp_split_unsent_seg+0x2c>
 800ffee:	4b95      	ldr	r3, [pc, #596]	@ (8010244 <tcp_split_unsent_seg+0x274>)
 800fff0:	f240 324b 	movw	r2, #843	@ 0x34b
 800fff4:	4994      	ldr	r1, [pc, #592]	@ (8010248 <tcp_split_unsent_seg+0x278>)
 800fff6:	4895      	ldr	r0, [pc, #596]	@ (801024c <tcp_split_unsent_seg+0x27c>)
 800fff8:	f001 fdea 	bl	8011bd0 <iprintf>

  useg = pcb->unsent;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010000:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d102      	bne.n	801000e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801000c:	e116      	b.n	801023c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801000e:	887b      	ldrh	r3, [r7, #2]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d109      	bne.n	8010028 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010014:	4b8b      	ldr	r3, [pc, #556]	@ (8010244 <tcp_split_unsent_seg+0x274>)
 8010016:	f240 3253 	movw	r2, #851	@ 0x353
 801001a:	498d      	ldr	r1, [pc, #564]	@ (8010250 <tcp_split_unsent_seg+0x280>)
 801001c:	488b      	ldr	r0, [pc, #556]	@ (801024c <tcp_split_unsent_seg+0x27c>)
 801001e:	f001 fdd7 	bl	8011bd0 <iprintf>
    return ERR_VAL;
 8010022:	f06f 0305 	mvn.w	r3, #5
 8010026:	e109      	b.n	801023c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	891b      	ldrh	r3, [r3, #8]
 801002c:	887a      	ldrh	r2, [r7, #2]
 801002e:	429a      	cmp	r2, r3
 8010030:	d301      	bcc.n	8010036 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010032:	2300      	movs	r3, #0
 8010034:	e102      	b.n	801023c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801003a:	887a      	ldrh	r2, [r7, #2]
 801003c:	429a      	cmp	r2, r3
 801003e:	d906      	bls.n	801004e <tcp_split_unsent_seg+0x7e>
 8010040:	4b80      	ldr	r3, [pc, #512]	@ (8010244 <tcp_split_unsent_seg+0x274>)
 8010042:	f240 325b 	movw	r2, #859	@ 0x35b
 8010046:	4983      	ldr	r1, [pc, #524]	@ (8010254 <tcp_split_unsent_seg+0x284>)
 8010048:	4880      	ldr	r0, [pc, #512]	@ (801024c <tcp_split_unsent_seg+0x27c>)
 801004a:	f001 fdc1 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	891b      	ldrh	r3, [r3, #8]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d106      	bne.n	8010064 <tcp_split_unsent_seg+0x94>
 8010056:	4b7b      	ldr	r3, [pc, #492]	@ (8010244 <tcp_split_unsent_seg+0x274>)
 8010058:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801005c:	497e      	ldr	r1, [pc, #504]	@ (8010258 <tcp_split_unsent_seg+0x288>)
 801005e:	487b      	ldr	r0, [pc, #492]	@ (801024c <tcp_split_unsent_seg+0x27c>)
 8010060:	f001 fdb6 	bl	8011bd0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	7a9b      	ldrb	r3, [r3, #10]
 8010068:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801006a:	7bfb      	ldrb	r3, [r7, #15]
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	b2db      	uxtb	r3, r3
 8010070:	f003 0304 	and.w	r3, r3, #4
 8010074:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	891a      	ldrh	r2, [r3, #8]
 801007a:	887b      	ldrh	r3, [r7, #2]
 801007c:	1ad3      	subs	r3, r2, r3
 801007e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010080:	7bbb      	ldrb	r3, [r7, #14]
 8010082:	b29a      	uxth	r2, r3
 8010084:	89bb      	ldrh	r3, [r7, #12]
 8010086:	4413      	add	r3, r2
 8010088:	b29b      	uxth	r3, r3
 801008a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801008e:	4619      	mov	r1, r3
 8010090:	2036      	movs	r0, #54	@ 0x36
 8010092:	f7fb facf 	bl	800b634 <pbuf_alloc>
 8010096:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	2b00      	cmp	r3, #0
 801009c:	f000 80b7 	beq.w	801020e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	891a      	ldrh	r2, [r3, #8]
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	891b      	ldrh	r3, [r3, #8]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	b29a      	uxth	r2, r3
 80100ae:	887b      	ldrh	r3, [r7, #2]
 80100b0:	4413      	add	r3, r2
 80100b2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	6858      	ldr	r0, [r3, #4]
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	685a      	ldr	r2, [r3, #4]
 80100bc:	7bbb      	ldrb	r3, [r7, #14]
 80100be:	18d1      	adds	r1, r2, r3
 80100c0:	897b      	ldrh	r3, [r7, #10]
 80100c2:	89ba      	ldrh	r2, [r7, #12]
 80100c4:	f7fb ff84 	bl	800bfd0 <pbuf_copy_partial>
 80100c8:	4603      	mov	r3, r0
 80100ca:	461a      	mov	r2, r3
 80100cc:	89bb      	ldrh	r3, [r7, #12]
 80100ce:	4293      	cmp	r3, r2
 80100d0:	f040 809f 	bne.w	8010212 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	899b      	ldrh	r3, [r3, #12]
 80100da:	b29b      	uxth	r3, r3
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f7 fe8b 	bl	8007df8 <lwip_htons>
 80100e2:	4603      	mov	r3, r0
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80100ea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80100ec:	2300      	movs	r3, #0
 80100ee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80100f0:	7efb      	ldrb	r3, [r7, #27]
 80100f2:	f003 0308 	and.w	r3, r3, #8
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d007      	beq.n	801010a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80100fa:	7efb      	ldrb	r3, [r7, #27]
 80100fc:	f023 0308 	bic.w	r3, r3, #8
 8010100:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010102:	7ebb      	ldrb	r3, [r7, #26]
 8010104:	f043 0308 	orr.w	r3, r3, #8
 8010108:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801010a:	7efb      	ldrb	r3, [r7, #27]
 801010c:	f003 0301 	and.w	r3, r3, #1
 8010110:	2b00      	cmp	r3, #0
 8010112:	d007      	beq.n	8010124 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010114:	7efb      	ldrb	r3, [r7, #27]
 8010116:	f023 0301 	bic.w	r3, r3, #1
 801011a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801011c:	7ebb      	ldrb	r3, [r7, #26]
 801011e:	f043 0301 	orr.w	r3, r3, #1
 8010122:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	4618      	mov	r0, r3
 801012c:	f7f7 fe79 	bl	8007e22 <lwip_htonl>
 8010130:	4602      	mov	r2, r0
 8010132:	887b      	ldrh	r3, [r7, #2]
 8010134:	18d1      	adds	r1, r2, r3
 8010136:	7eba      	ldrb	r2, [r7, #26]
 8010138:	7bfb      	ldrb	r3, [r7, #15]
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	460b      	mov	r3, r1
 801013e:	6939      	ldr	r1, [r7, #16]
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f7ff fea9 	bl	800fe98 <tcp_create_segment>
 8010146:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d063      	beq.n	8010216 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	4618      	mov	r0, r3
 8010154:	f7fb fdda 	bl	800bd0c <pbuf_clen>
 8010158:	4603      	mov	r3, r0
 801015a:	461a      	mov	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010162:	1a9b      	subs	r3, r3, r2
 8010164:	b29a      	uxth	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	6858      	ldr	r0, [r3, #4]
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	891a      	ldrh	r2, [r3, #8]
 8010176:	89bb      	ldrh	r3, [r7, #12]
 8010178:	1ad3      	subs	r3, r2, r3
 801017a:	b29b      	uxth	r3, r3
 801017c:	4619      	mov	r1, r3
 801017e:	f7fb fbb7 	bl	800b8f0 <pbuf_realloc>
  useg->len -= remainder;
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	891a      	ldrh	r2, [r3, #8]
 8010186:	89bb      	ldrh	r3, [r7, #12]
 8010188:	1ad3      	subs	r3, r2, r3
 801018a:	b29a      	uxth	r2, r3
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	899b      	ldrh	r3, [r3, #12]
 8010196:	b29c      	uxth	r4, r3
 8010198:	7efb      	ldrb	r3, [r7, #27]
 801019a:	b29b      	uxth	r3, r3
 801019c:	4618      	mov	r0, r3
 801019e:	f7f7 fe2b 	bl	8007df8 <lwip_htons>
 80101a2:	4603      	mov	r3, r0
 80101a4:	461a      	mov	r2, r3
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	4322      	orrs	r2, r4
 80101ac:	b292      	uxth	r2, r2
 80101ae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fb fda9 	bl	800bd0c <pbuf_clen>
 80101ba:	4603      	mov	r3, r0
 80101bc:	461a      	mov	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80101c4:	4413      	add	r3, r2
 80101c6:	b29a      	uxth	r2, r3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7fb fd9a 	bl	800bd0c <pbuf_clen>
 80101d8:	4603      	mov	r3, r0
 80101da:	461a      	mov	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80101e2:	4413      	add	r3, r2
 80101e4:	b29a      	uxth	r2, r3
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	69fa      	ldr	r2, [r7, #28]
 80101f8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d103      	bne.n	801020a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2200      	movs	r2, #0
 8010206:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801020a:	2300      	movs	r3, #0
 801020c:	e016      	b.n	801023c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801020e:	bf00      	nop
 8010210:	e002      	b.n	8010218 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010212:	bf00      	nop
 8010214:	e000      	b.n	8010218 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010216:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d006      	beq.n	801022c <tcp_split_unsent_seg+0x25c>
 801021e:	4b09      	ldr	r3, [pc, #36]	@ (8010244 <tcp_split_unsent_seg+0x274>)
 8010220:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010224:	490d      	ldr	r1, [pc, #52]	@ (801025c <tcp_split_unsent_seg+0x28c>)
 8010226:	4809      	ldr	r0, [pc, #36]	@ (801024c <tcp_split_unsent_seg+0x27c>)
 8010228:	f001 fcd2 	bl	8011bd0 <iprintf>
  if (p != NULL) {
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010232:	6938      	ldr	r0, [r7, #16]
 8010234:	f7fb fce2 	bl	800bbfc <pbuf_free>
  }

  return ERR_MEM;
 8010238:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801023c:	4618      	mov	r0, r3
 801023e:	3724      	adds	r7, #36	@ 0x24
 8010240:	46bd      	mov	sp, r7
 8010242:	bd90      	pop	{r4, r7, pc}
 8010244:	08014af8 	.word	0x08014af8
 8010248:	08014ec8 	.word	0x08014ec8
 801024c:	08014b88 	.word	0x08014b88
 8010250:	08014eec 	.word	0x08014eec
 8010254:	08014f10 	.word	0x08014f10
 8010258:	08014f20 	.word	0x08014f20
 801025c:	08014f30 	.word	0x08014f30

08010260 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010260:	b590      	push	{r4, r7, lr}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d106      	bne.n	801027c <tcp_send_fin+0x1c>
 801026e:	4b21      	ldr	r3, [pc, #132]	@ (80102f4 <tcp_send_fin+0x94>)
 8010270:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010274:	4920      	ldr	r1, [pc, #128]	@ (80102f8 <tcp_send_fin+0x98>)
 8010276:	4821      	ldr	r0, [pc, #132]	@ (80102fc <tcp_send_fin+0x9c>)
 8010278:	f001 fcaa 	bl	8011bd0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010280:	2b00      	cmp	r3, #0
 8010282:	d02e      	beq.n	80102e2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010288:	60fb      	str	r3, [r7, #12]
 801028a:	e002      	b.n	8010292 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1f8      	bne.n	801028c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	899b      	ldrh	r3, [r3, #12]
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7f7 fda8 	bl	8007df8 <lwip_htons>
 80102a8:	4603      	mov	r3, r0
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	f003 0307 	and.w	r3, r3, #7
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d116      	bne.n	80102e2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	899b      	ldrh	r3, [r3, #12]
 80102ba:	b29c      	uxth	r4, r3
 80102bc:	2001      	movs	r0, #1
 80102be:	f7f7 fd9b 	bl	8007df8 <lwip_htons>
 80102c2:	4603      	mov	r3, r0
 80102c4:	461a      	mov	r2, r3
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	4322      	orrs	r2, r4
 80102cc:	b292      	uxth	r2, r2
 80102ce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	8b5b      	ldrh	r3, [r3, #26]
 80102d4:	f043 0320 	orr.w	r3, r3, #32
 80102d8:	b29a      	uxth	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80102de:	2300      	movs	r3, #0
 80102e0:	e004      	b.n	80102ec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80102e2:	2101      	movs	r1, #1
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 f80b 	bl	8010300 <tcp_enqueue_flags>
 80102ea:	4603      	mov	r3, r0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3714      	adds	r7, #20
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd90      	pop	{r4, r7, pc}
 80102f4:	08014af8 	.word	0x08014af8
 80102f8:	08014f3c 	.word	0x08014f3c
 80102fc:	08014b88 	.word	0x08014b88

08010300 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b08a      	sub	sp, #40	@ 0x28
 8010304:	af02      	add	r7, sp, #8
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801030c:	2300      	movs	r3, #0
 801030e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010310:	2300      	movs	r3, #0
 8010312:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010314:	78fb      	ldrb	r3, [r7, #3]
 8010316:	f003 0303 	and.w	r3, r3, #3
 801031a:	2b00      	cmp	r3, #0
 801031c:	d106      	bne.n	801032c <tcp_enqueue_flags+0x2c>
 801031e:	4b67      	ldr	r3, [pc, #412]	@ (80104bc <tcp_enqueue_flags+0x1bc>)
 8010320:	f240 4211 	movw	r2, #1041	@ 0x411
 8010324:	4966      	ldr	r1, [pc, #408]	@ (80104c0 <tcp_enqueue_flags+0x1c0>)
 8010326:	4867      	ldr	r0, [pc, #412]	@ (80104c4 <tcp_enqueue_flags+0x1c4>)
 8010328:	f001 fc52 	bl	8011bd0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d106      	bne.n	8010340 <tcp_enqueue_flags+0x40>
 8010332:	4b62      	ldr	r3, [pc, #392]	@ (80104bc <tcp_enqueue_flags+0x1bc>)
 8010334:	f240 4213 	movw	r2, #1043	@ 0x413
 8010338:	4963      	ldr	r1, [pc, #396]	@ (80104c8 <tcp_enqueue_flags+0x1c8>)
 801033a:	4862      	ldr	r0, [pc, #392]	@ (80104c4 <tcp_enqueue_flags+0x1c4>)
 801033c:	f001 fc48 	bl	8011bd0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010340:	78fb      	ldrb	r3, [r7, #3]
 8010342:	f003 0302 	and.w	r3, r3, #2
 8010346:	2b00      	cmp	r3, #0
 8010348:	d001      	beq.n	801034e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801034a:	2301      	movs	r3, #1
 801034c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801034e:	7ffb      	ldrb	r3, [r7, #31]
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	b2db      	uxtb	r3, r3
 8010354:	f003 0304 	and.w	r3, r3, #4
 8010358:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801035a:	7dfb      	ldrb	r3, [r7, #23]
 801035c:	b29b      	uxth	r3, r3
 801035e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010362:	4619      	mov	r1, r3
 8010364:	2036      	movs	r0, #54	@ 0x36
 8010366:	f7fb f965 	bl	800b634 <pbuf_alloc>
 801036a:	6138      	str	r0, [r7, #16]
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d109      	bne.n	8010386 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	8b5b      	ldrh	r3, [r3, #26]
 8010376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010384:	e095      	b.n	80104b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	895a      	ldrh	r2, [r3, #10]
 801038a:	7dfb      	ldrb	r3, [r7, #23]
 801038c:	b29b      	uxth	r3, r3
 801038e:	429a      	cmp	r2, r3
 8010390:	d206      	bcs.n	80103a0 <tcp_enqueue_flags+0xa0>
 8010392:	4b4a      	ldr	r3, [pc, #296]	@ (80104bc <tcp_enqueue_flags+0x1bc>)
 8010394:	f240 4239 	movw	r2, #1081	@ 0x439
 8010398:	494c      	ldr	r1, [pc, #304]	@ (80104cc <tcp_enqueue_flags+0x1cc>)
 801039a:	484a      	ldr	r0, [pc, #296]	@ (80104c4 <tcp_enqueue_flags+0x1c4>)
 801039c:	f001 fc18 	bl	8011bd0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80103a4:	78fa      	ldrb	r2, [r7, #3]
 80103a6:	7ffb      	ldrb	r3, [r7, #31]
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	460b      	mov	r3, r1
 80103ac:	6939      	ldr	r1, [r7, #16]
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7ff fd72 	bl	800fe98 <tcp_create_segment>
 80103b4:	60f8      	str	r0, [r7, #12]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d109      	bne.n	80103d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	8b5b      	ldrh	r3, [r3, #26]
 80103c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80103ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80103ce:	e070      	b.n	80104b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	f003 0303 	and.w	r3, r3, #3
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d006      	beq.n	80103ea <tcp_enqueue_flags+0xea>
 80103dc:	4b37      	ldr	r3, [pc, #220]	@ (80104bc <tcp_enqueue_flags+0x1bc>)
 80103de:	f240 4242 	movw	r2, #1090	@ 0x442
 80103e2:	493b      	ldr	r1, [pc, #236]	@ (80104d0 <tcp_enqueue_flags+0x1d0>)
 80103e4:	4837      	ldr	r0, [pc, #220]	@ (80104c4 <tcp_enqueue_flags+0x1c4>)
 80103e6:	f001 fbf3 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	891b      	ldrh	r3, [r3, #8]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d006      	beq.n	8010400 <tcp_enqueue_flags+0x100>
 80103f2:	4b32      	ldr	r3, [pc, #200]	@ (80104bc <tcp_enqueue_flags+0x1bc>)
 80103f4:	f240 4243 	movw	r2, #1091	@ 0x443
 80103f8:	4936      	ldr	r1, [pc, #216]	@ (80104d4 <tcp_enqueue_flags+0x1d4>)
 80103fa:	4832      	ldr	r0, [pc, #200]	@ (80104c4 <tcp_enqueue_flags+0x1c4>)
 80103fc:	f001 fbe8 	bl	8011bd0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010404:	2b00      	cmp	r3, #0
 8010406:	d103      	bne.n	8010410 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	68fa      	ldr	r2, [r7, #12]
 801040c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801040e:	e00d      	b.n	801042c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010414:	61bb      	str	r3, [r7, #24]
 8010416:	e002      	b.n	801041e <tcp_enqueue_flags+0x11e>
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	61bb      	str	r3, [r7, #24]
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d1f8      	bne.n	8010418 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010434:	78fb      	ldrb	r3, [r7, #3]
 8010436:	f003 0302 	and.w	r3, r3, #2
 801043a:	2b00      	cmp	r3, #0
 801043c:	d104      	bne.n	8010448 <tcp_enqueue_flags+0x148>
 801043e:	78fb      	ldrb	r3, [r7, #3]
 8010440:	f003 0301 	and.w	r3, r3, #1
 8010444:	2b00      	cmp	r3, #0
 8010446:	d004      	beq.n	8010452 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801044c:	1c5a      	adds	r2, r3, #1
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010452:	78fb      	ldrb	r3, [r7, #3]
 8010454:	f003 0301 	and.w	r3, r3, #1
 8010458:	2b00      	cmp	r3, #0
 801045a:	d006      	beq.n	801046a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	8b5b      	ldrh	r3, [r3, #26]
 8010460:	f043 0320 	orr.w	r3, r3, #32
 8010464:	b29a      	uxth	r2, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	4618      	mov	r0, r3
 8010470:	f7fb fc4c 	bl	800bd0c <pbuf_clen>
 8010474:	4603      	mov	r3, r0
 8010476:	461a      	mov	r2, r3
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801047e:	4413      	add	r3, r2
 8010480:	b29a      	uxth	r2, r3
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00e      	beq.n	80104b0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10a      	bne.n	80104b0 <tcp_enqueue_flags+0x1b0>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d106      	bne.n	80104b0 <tcp_enqueue_flags+0x1b0>
 80104a2:	4b06      	ldr	r3, [pc, #24]	@ (80104bc <tcp_enqueue_flags+0x1bc>)
 80104a4:	f240 4265 	movw	r2, #1125	@ 0x465
 80104a8:	490b      	ldr	r1, [pc, #44]	@ (80104d8 <tcp_enqueue_flags+0x1d8>)
 80104aa:	4806      	ldr	r0, [pc, #24]	@ (80104c4 <tcp_enqueue_flags+0x1c4>)
 80104ac:	f001 fb90 	bl	8011bd0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3720      	adds	r7, #32
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	08014af8 	.word	0x08014af8
 80104c0:	08014f58 	.word	0x08014f58
 80104c4:	08014b88 	.word	0x08014b88
 80104c8:	08014fb0 	.word	0x08014fb0
 80104cc:	08014fd0 	.word	0x08014fd0
 80104d0:	0801500c 	.word	0x0801500c
 80104d4:	08015024 	.word	0x08015024
 80104d8:	08015050 	.word	0x08015050

080104dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80104dc:	b5b0      	push	{r4, r5, r7, lr}
 80104de:	b08a      	sub	sp, #40	@ 0x28
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d106      	bne.n	80104f8 <tcp_output+0x1c>
 80104ea:	4b8a      	ldr	r3, [pc, #552]	@ (8010714 <tcp_output+0x238>)
 80104ec:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80104f0:	4989      	ldr	r1, [pc, #548]	@ (8010718 <tcp_output+0x23c>)
 80104f2:	488a      	ldr	r0, [pc, #552]	@ (801071c <tcp_output+0x240>)
 80104f4:	f001 fb6c 	bl	8011bd0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	7d1b      	ldrb	r3, [r3, #20]
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d106      	bne.n	801050e <tcp_output+0x32>
 8010500:	4b84      	ldr	r3, [pc, #528]	@ (8010714 <tcp_output+0x238>)
 8010502:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010506:	4986      	ldr	r1, [pc, #536]	@ (8010720 <tcp_output+0x244>)
 8010508:	4884      	ldr	r0, [pc, #528]	@ (801071c <tcp_output+0x240>)
 801050a:	f001 fb61 	bl	8011bd0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801050e:	4b85      	ldr	r3, [pc, #532]	@ (8010724 <tcp_output+0x248>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	429a      	cmp	r2, r3
 8010516:	d101      	bne.n	801051c <tcp_output+0x40>
    return ERR_OK;
 8010518:	2300      	movs	r3, #0
 801051a:	e1ce      	b.n	80108ba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010528:	4293      	cmp	r3, r2
 801052a:	bf28      	it	cs
 801052c:	4613      	movcs	r3, r2
 801052e:	b29b      	uxth	r3, r3
 8010530:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010536:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10b      	bne.n	8010556 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	8b5b      	ldrh	r3, [r3, #26]
 8010542:	f003 0302 	and.w	r3, r3, #2
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 81aa 	beq.w	80108a0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 fdcb 	bl	80110e8 <tcp_send_empty_ack>
 8010552:	4603      	mov	r3, r0
 8010554:	e1b1      	b.n	80108ba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010556:	6879      	ldr	r1, [r7, #4]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	3304      	adds	r3, #4
 801055c:	461a      	mov	r2, r3
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7ff fc7e 	bl	800fe60 <tcp_route>
 8010564:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d102      	bne.n	8010572 <tcp_output+0x96>
    return ERR_RTE;
 801056c:	f06f 0303 	mvn.w	r3, #3
 8010570:	e1a3      	b.n	80108ba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d003      	beq.n	8010580 <tcp_output+0xa4>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d111      	bne.n	80105a4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d002      	beq.n	801058c <tcp_output+0xb0>
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	3304      	adds	r3, #4
 801058a:	e000      	b.n	801058e <tcp_output+0xb2>
 801058c:	2300      	movs	r3, #0
 801058e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d102      	bne.n	801059c <tcp_output+0xc0>
      return ERR_RTE;
 8010596:	f06f 0303 	mvn.w	r3, #3
 801059a:	e18e      	b.n	80108ba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80105a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7f7 fc39 	bl	8007e22 <lwip_htonl>
 80105b0:	4602      	mov	r2, r0
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105ba:	8912      	ldrh	r2, [r2, #8]
 80105bc:	4413      	add	r3, r2
 80105be:	69ba      	ldr	r2, [r7, #24]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d227      	bcs.n	8010614 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80105ca:	461a      	mov	r2, r3
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d114      	bne.n	80105fc <tcp_output+0x120>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d110      	bne.n	80105fc <tcp_output+0x120>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d10b      	bne.n	80105fc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2201      	movs	r2, #1
 80105f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	8b5b      	ldrh	r3, [r3, #26]
 8010600:	f003 0302 	and.w	r3, r3, #2
 8010604:	2b00      	cmp	r3, #0
 8010606:	f000 814d 	beq.w	80108a4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 fd6c 	bl	80110e8 <tcp_send_empty_ack>
 8010610:	4603      	mov	r3, r0
 8010612:	e152      	b.n	80108ba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010620:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010622:	6a3b      	ldr	r3, [r7, #32]
 8010624:	2b00      	cmp	r3, #0
 8010626:	f000 811c 	beq.w	8010862 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801062a:	e002      	b.n	8010632 <tcp_output+0x156>
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	623b      	str	r3, [r7, #32]
 8010632:	6a3b      	ldr	r3, [r7, #32]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1f8      	bne.n	801062c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801063a:	e112      	b.n	8010862 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	899b      	ldrh	r3, [r3, #12]
 8010642:	b29b      	uxth	r3, r3
 8010644:	4618      	mov	r0, r3
 8010646:	f7f7 fbd7 	bl	8007df8 <lwip_htons>
 801064a:	4603      	mov	r3, r0
 801064c:	b2db      	uxtb	r3, r3
 801064e:	f003 0304 	and.w	r3, r3, #4
 8010652:	2b00      	cmp	r3, #0
 8010654:	d006      	beq.n	8010664 <tcp_output+0x188>
 8010656:	4b2f      	ldr	r3, [pc, #188]	@ (8010714 <tcp_output+0x238>)
 8010658:	f240 5236 	movw	r2, #1334	@ 0x536
 801065c:	4932      	ldr	r1, [pc, #200]	@ (8010728 <tcp_output+0x24c>)
 801065e:	482f      	ldr	r0, [pc, #188]	@ (801071c <tcp_output+0x240>)
 8010660:	f001 fab6 	bl	8011bd0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010668:	2b00      	cmp	r3, #0
 801066a:	d01f      	beq.n	80106ac <tcp_output+0x1d0>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	8b5b      	ldrh	r3, [r3, #26]
 8010670:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010674:	2b00      	cmp	r3, #0
 8010676:	d119      	bne.n	80106ac <tcp_output+0x1d0>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00b      	beq.n	8010698 <tcp_output+0x1bc>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d110      	bne.n	80106ac <tcp_output+0x1d0>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801068e:	891a      	ldrh	r2, [r3, #8]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010694:	429a      	cmp	r2, r3
 8010696:	d209      	bcs.n	80106ac <tcp_output+0x1d0>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d004      	beq.n	80106ac <tcp_output+0x1d0>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80106a8:	2b08      	cmp	r3, #8
 80106aa:	d901      	bls.n	80106b0 <tcp_output+0x1d4>
 80106ac:	2301      	movs	r3, #1
 80106ae:	e000      	b.n	80106b2 <tcp_output+0x1d6>
 80106b0:	2300      	movs	r3, #0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d106      	bne.n	80106c4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	8b5b      	ldrh	r3, [r3, #26]
 80106ba:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f000 80e4 	beq.w	801088c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	7d1b      	ldrb	r3, [r3, #20]
 80106c8:	2b02      	cmp	r3, #2
 80106ca:	d00d      	beq.n	80106e8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80106cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	899b      	ldrh	r3, [r3, #12]
 80106d2:	b29c      	uxth	r4, r3
 80106d4:	2010      	movs	r0, #16
 80106d6:	f7f7 fb8f 	bl	8007df8 <lwip_htons>
 80106da:	4603      	mov	r3, r0
 80106dc:	461a      	mov	r2, r3
 80106de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	4322      	orrs	r2, r4
 80106e4:	b292      	uxth	r2, r2
 80106e6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80106e8:	697a      	ldr	r2, [r7, #20]
 80106ea:	6879      	ldr	r1, [r7, #4]
 80106ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80106ee:	f000 f909 	bl	8010904 <tcp_output_segment>
 80106f2:	4603      	mov	r3, r0
 80106f4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80106f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d016      	beq.n	801072c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	8b5b      	ldrh	r3, [r3, #26]
 8010702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010706:	b29a      	uxth	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	835a      	strh	r2, [r3, #26]
      return err;
 801070c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010710:	e0d3      	b.n	80108ba <tcp_output+0x3de>
 8010712:	bf00      	nop
 8010714:	08014af8 	.word	0x08014af8
 8010718:	08015078 	.word	0x08015078
 801071c:	08014b88 	.word	0x08014b88
 8010720:	08015090 	.word	0x08015090
 8010724:	24007c90 	.word	0x24007c90
 8010728:	080150b8 	.word	0x080150b8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	7d1b      	ldrb	r3, [r3, #20]
 8010738:	2b02      	cmp	r3, #2
 801073a:	d006      	beq.n	801074a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	8b5b      	ldrh	r3, [r3, #26]
 8010740:	f023 0303 	bic.w	r3, r3, #3
 8010744:	b29a      	uxth	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	f7f7 fb66 	bl	8007e22 <lwip_htonl>
 8010756:	4604      	mov	r4, r0
 8010758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801075a:	891b      	ldrh	r3, [r3, #8]
 801075c:	461d      	mov	r5, r3
 801075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010760:	68db      	ldr	r3, [r3, #12]
 8010762:	899b      	ldrh	r3, [r3, #12]
 8010764:	b29b      	uxth	r3, r3
 8010766:	4618      	mov	r0, r3
 8010768:	f7f7 fb46 	bl	8007df8 <lwip_htons>
 801076c:	4603      	mov	r3, r0
 801076e:	b2db      	uxtb	r3, r3
 8010770:	f003 0303 	and.w	r3, r3, #3
 8010774:	2b00      	cmp	r3, #0
 8010776:	d001      	beq.n	801077c <tcp_output+0x2a0>
 8010778:	2301      	movs	r3, #1
 801077a:	e000      	b.n	801077e <tcp_output+0x2a2>
 801077c:	2300      	movs	r3, #0
 801077e:	442b      	add	r3, r5
 8010780:	4423      	add	r3, r4
 8010782:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	1ad3      	subs	r3, r2, r3
 801078c:	2b00      	cmp	r3, #0
 801078e:	da02      	bge.n	8010796 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010798:	891b      	ldrh	r3, [r3, #8]
 801079a:	461c      	mov	r4, r3
 801079c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	899b      	ldrh	r3, [r3, #12]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7f7 fb27 	bl	8007df8 <lwip_htons>
 80107aa:	4603      	mov	r3, r0
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	f003 0303 	and.w	r3, r3, #3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d001      	beq.n	80107ba <tcp_output+0x2de>
 80107b6:	2301      	movs	r3, #1
 80107b8:	e000      	b.n	80107bc <tcp_output+0x2e0>
 80107ba:	2300      	movs	r3, #0
 80107bc:	4423      	add	r3, r4
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d049      	beq.n	8010856 <tcp_output+0x37a>
      seg->next = NULL;
 80107c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c4:	2200      	movs	r2, #0
 80107c6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d105      	bne.n	80107dc <tcp_output+0x300>
        pcb->unacked = seg;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107d4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80107d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d8:	623b      	str	r3, [r7, #32]
 80107da:	e03f      	b.n	801085c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80107dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f7 fb1d 	bl	8007e22 <lwip_htonl>
 80107e8:	4604      	mov	r4, r0
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7f7 fb16 	bl	8007e22 <lwip_htonl>
 80107f6:	4603      	mov	r3, r0
 80107f8:	1ae3      	subs	r3, r4, r3
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	da24      	bge.n	8010848 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	3370      	adds	r3, #112	@ 0x70
 8010802:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010804:	e002      	b.n	801080c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010806:	69fb      	ldr	r3, [r7, #28]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801080c:	69fb      	ldr	r3, [r7, #28]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d011      	beq.n	8010838 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	4618      	mov	r0, r3
 801081e:	f7f7 fb00 	bl	8007e22 <lwip_htonl>
 8010822:	4604      	mov	r4, r0
 8010824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	4618      	mov	r0, r3
 801082c:	f7f7 faf9 	bl	8007e22 <lwip_htonl>
 8010830:	4603      	mov	r3, r0
 8010832:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010834:	2b00      	cmp	r3, #0
 8010836:	dbe6      	blt.n	8010806 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	681a      	ldr	r2, [r3, #0]
 801083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	e009      	b.n	801085c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010848:	6a3b      	ldr	r3, [r7, #32]
 801084a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801084c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801084e:	6a3b      	ldr	r3, [r7, #32]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	623b      	str	r3, [r7, #32]
 8010854:	e002      	b.n	801085c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010856:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010858:	f7fc fc45 	bl	800d0e6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010860:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010864:	2b00      	cmp	r3, #0
 8010866:	d012      	beq.n	801088e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	4618      	mov	r0, r3
 8010870:	f7f7 fad7 	bl	8007e22 <lwip_htonl>
 8010874:	4602      	mov	r2, r0
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801087e:	8912      	ldrh	r2, [r2, #8]
 8010880:	4413      	add	r3, r2
  while (seg != NULL &&
 8010882:	69ba      	ldr	r2, [r7, #24]
 8010884:	429a      	cmp	r2, r3
 8010886:	f4bf aed9 	bcs.w	801063c <tcp_output+0x160>
 801088a:	e000      	b.n	801088e <tcp_output+0x3b2>
      break;
 801088c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010892:	2b00      	cmp	r3, #0
 8010894:	d108      	bne.n	80108a8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2200      	movs	r2, #0
 801089a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801089e:	e004      	b.n	80108aa <tcp_output+0x3ce>
    goto output_done;
 80108a0:	bf00      	nop
 80108a2:	e002      	b.n	80108aa <tcp_output+0x3ce>
    goto output_done;
 80108a4:	bf00      	nop
 80108a6:	e000      	b.n	80108aa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80108a8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	8b5b      	ldrh	r3, [r3, #26]
 80108ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80108b8:	2300      	movs	r3, #0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3728      	adds	r7, #40	@ 0x28
 80108be:	46bd      	mov	sp, r7
 80108c0:	bdb0      	pop	{r4, r5, r7, pc}
 80108c2:	bf00      	nop

080108c4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d106      	bne.n	80108e0 <tcp_output_segment_busy+0x1c>
 80108d2:	4b09      	ldr	r3, [pc, #36]	@ (80108f8 <tcp_output_segment_busy+0x34>)
 80108d4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80108d8:	4908      	ldr	r1, [pc, #32]	@ (80108fc <tcp_output_segment_busy+0x38>)
 80108da:	4809      	ldr	r0, [pc, #36]	@ (8010900 <tcp_output_segment_busy+0x3c>)
 80108dc:	f001 f978 	bl	8011bd0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	7b9b      	ldrb	r3, [r3, #14]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d001      	beq.n	80108ee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80108ea:	2301      	movs	r3, #1
 80108ec:	e000      	b.n	80108f0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	08014af8 	.word	0x08014af8
 80108fc:	080150d0 	.word	0x080150d0
 8010900:	08014b88 	.word	0x08014b88

08010904 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010904:	b5b0      	push	{r4, r5, r7, lr}
 8010906:	b08c      	sub	sp, #48	@ 0x30
 8010908:	af04      	add	r7, sp, #16
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d106      	bne.n	8010924 <tcp_output_segment+0x20>
 8010916:	4b64      	ldr	r3, [pc, #400]	@ (8010aa8 <tcp_output_segment+0x1a4>)
 8010918:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801091c:	4963      	ldr	r1, [pc, #396]	@ (8010aac <tcp_output_segment+0x1a8>)
 801091e:	4864      	ldr	r0, [pc, #400]	@ (8010ab0 <tcp_output_segment+0x1ac>)
 8010920:	f001 f956 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d106      	bne.n	8010938 <tcp_output_segment+0x34>
 801092a:	4b5f      	ldr	r3, [pc, #380]	@ (8010aa8 <tcp_output_segment+0x1a4>)
 801092c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8010930:	4960      	ldr	r1, [pc, #384]	@ (8010ab4 <tcp_output_segment+0x1b0>)
 8010932:	485f      	ldr	r0, [pc, #380]	@ (8010ab0 <tcp_output_segment+0x1ac>)
 8010934:	f001 f94c 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d106      	bne.n	801094c <tcp_output_segment+0x48>
 801093e:	4b5a      	ldr	r3, [pc, #360]	@ (8010aa8 <tcp_output_segment+0x1a4>)
 8010940:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010944:	495c      	ldr	r1, [pc, #368]	@ (8010ab8 <tcp_output_segment+0x1b4>)
 8010946:	485a      	ldr	r0, [pc, #360]	@ (8010ab0 <tcp_output_segment+0x1ac>)
 8010948:	f001 f942 	bl	8011bd0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801094c:	68f8      	ldr	r0, [r7, #12]
 801094e:	f7ff ffb9 	bl	80108c4 <tcp_output_segment_busy>
 8010952:	4603      	mov	r3, r0
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010958:	2300      	movs	r3, #0
 801095a:	e0a1      	b.n	8010aa0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	68dc      	ldr	r4, [r3, #12]
 8010964:	4610      	mov	r0, r2
 8010966:	f7f7 fa5c 	bl	8007e22 <lwip_htonl>
 801096a:	4603      	mov	r3, r0
 801096c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	68dc      	ldr	r4, [r3, #12]
 8010976:	4610      	mov	r0, r2
 8010978:	f7f7 fa3e 	bl	8007df8 <lwip_htons>
 801097c:	4603      	mov	r3, r0
 801097e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010984:	68ba      	ldr	r2, [r7, #8]
 8010986:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010988:	441a      	add	r2, r3
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	68db      	ldr	r3, [r3, #12]
 8010992:	3314      	adds	r3, #20
 8010994:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	7a9b      	ldrb	r3, [r3, #10]
 801099a:	f003 0301 	and.w	r3, r3, #1
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d015      	beq.n	80109ce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	3304      	adds	r3, #4
 80109a6:	461a      	mov	r2, r3
 80109a8:	6879      	ldr	r1, [r7, #4]
 80109aa:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80109ae:	f7fc fe91 	bl	800d6d4 <tcp_eff_send_mss_netif>
 80109b2:	4603      	mov	r3, r0
 80109b4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80109b6:	8b7b      	ldrh	r3, [r7, #26]
 80109b8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80109bc:	4618      	mov	r0, r3
 80109be:	f7f7 fa30 	bl	8007e22 <lwip_htonl>
 80109c2:	4602      	mov	r2, r0
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	3304      	adds	r3, #4
 80109cc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	da02      	bge.n	80109de <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	2200      	movs	r2, #0
 80109dc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10c      	bne.n	8010a00 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80109e6:	4b35      	ldr	r3, [pc, #212]	@ (8010abc <tcp_output_segment+0x1b8>)
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7f7 fa14 	bl	8007e22 <lwip_htonl>
 80109fa:	4602      	mov	r2, r0
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	68da      	ldr	r2, [r3, #12]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	8959      	ldrh	r1, [r3, #10]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	8b3a      	ldrh	r2, [r7, #24]
 8010a1a:	1a8a      	subs	r2, r1, r2
 8010a1c:	b292      	uxth	r2, r2
 8010a1e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	8919      	ldrh	r1, [r3, #8]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	8b3a      	ldrh	r2, [r7, #24]
 8010a2c:	1a8a      	subs	r2, r1, r2
 8010a2e:	b292      	uxth	r2, r2
 8010a30:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	68d2      	ldr	r2, [r2, #12]
 8010a3a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	2200      	movs	r2, #0
 8010a42:	741a      	strb	r2, [r3, #16]
 8010a44:	2200      	movs	r2, #0
 8010a46:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	68da      	ldr	r2, [r3, #12]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	7a9b      	ldrb	r3, [r3, #10]
 8010a50:	f003 0301 	and.w	r3, r3, #1
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d001      	beq.n	8010a5c <tcp_output_segment+0x158>
 8010a58:	2318      	movs	r3, #24
 8010a5a:	e000      	b.n	8010a5e <tcp_output_segment+0x15a>
 8010a5c:	2314      	movs	r3, #20
 8010a5e:	4413      	add	r3, r2
 8010a60:	69fa      	ldr	r2, [r7, #28]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d006      	beq.n	8010a74 <tcp_output_segment+0x170>
 8010a66:	4b10      	ldr	r3, [pc, #64]	@ (8010aa8 <tcp_output_segment+0x1a4>)
 8010a68:	f240 621c 	movw	r2, #1564	@ 0x61c
 8010a6c:	4914      	ldr	r1, [pc, #80]	@ (8010ac0 <tcp_output_segment+0x1bc>)
 8010a6e:	4810      	ldr	r0, [pc, #64]	@ (8010ab0 <tcp_output_segment+0x1ac>)
 8010a70:	f001 f8ae 	bl	8011bd0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	6858      	ldr	r0, [r3, #4]
 8010a78:	68b9      	ldr	r1, [r7, #8]
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	1d1c      	adds	r4, r3, #4
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	7add      	ldrb	r5, [r3, #11]
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	7a9b      	ldrb	r3, [r3, #10]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	9202      	str	r2, [sp, #8]
 8010a8a:	2206      	movs	r2, #6
 8010a8c:	9201      	str	r2, [sp, #4]
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	462b      	mov	r3, r5
 8010a92:	4622      	mov	r2, r4
 8010a94:	f7f8 fe44 	bl	8009720 <ip4_output_if>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3720      	adds	r7, #32
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8010aa8:	08014af8 	.word	0x08014af8
 8010aac:	080150f8 	.word	0x080150f8
 8010ab0:	08014b88 	.word	0x08014b88
 8010ab4:	08015118 	.word	0x08015118
 8010ab8:	08015138 	.word	0x08015138
 8010abc:	24007c44 	.word	0x24007c44
 8010ac0:	0801515c 	.word	0x0801515c

08010ac4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010ac4:	b5b0      	push	{r4, r5, r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <tcp_rexmit_rto_prepare+0x1c>
 8010ad2:	4b31      	ldr	r3, [pc, #196]	@ (8010b98 <tcp_rexmit_rto_prepare+0xd4>)
 8010ad4:	f240 6263 	movw	r2, #1635	@ 0x663
 8010ad8:	4930      	ldr	r1, [pc, #192]	@ (8010b9c <tcp_rexmit_rto_prepare+0xd8>)
 8010ada:	4831      	ldr	r0, [pc, #196]	@ (8010ba0 <tcp_rexmit_rto_prepare+0xdc>)
 8010adc:	f001 f878 	bl	8011bd0 <iprintf>

  if (pcb->unacked == NULL) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d102      	bne.n	8010aee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010ae8:	f06f 0305 	mvn.w	r3, #5
 8010aec:	e050      	b.n	8010b90 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010af2:	60fb      	str	r3, [r7, #12]
 8010af4:	e00b      	b.n	8010b0e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f7ff fee4 	bl	80108c4 <tcp_output_segment_busy>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d002      	beq.n	8010b08 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010b02:	f06f 0305 	mvn.w	r3, #5
 8010b06:	e043      	b.n	8010b90 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	60fb      	str	r3, [r7, #12]
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1ef      	bne.n	8010af6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7ff fed4 	bl	80108c4 <tcp_output_segment_busy>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d002      	beq.n	8010b28 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010b22:	f06f 0305 	mvn.w	r3, #5
 8010b26:	e033      	b.n	8010b90 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	8b5b      	ldrh	r3, [r3, #26]
 8010b42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7f7 f965 	bl	8007e22 <lwip_htonl>
 8010b58:	4604      	mov	r4, r0
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	891b      	ldrh	r3, [r3, #8]
 8010b5e:	461d      	mov	r5, r3
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	899b      	ldrh	r3, [r3, #12]
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7f7 f945 	bl	8007df8 <lwip_htons>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	f003 0303 	and.w	r3, r3, #3
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <tcp_rexmit_rto_prepare+0xba>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e000      	b.n	8010b80 <tcp_rexmit_rto_prepare+0xbc>
 8010b7e:	2300      	movs	r3, #0
 8010b80:	442b      	add	r3, r5
 8010b82:	18e2      	adds	r2, r4, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8010b8e:	2300      	movs	r3, #0
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bdb0      	pop	{r4, r5, r7, pc}
 8010b98:	08014af8 	.word	0x08014af8
 8010b9c:	08015170 	.word	0x08015170
 8010ba0:	08014b88 	.word	0x08014b88

08010ba4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d106      	bne.n	8010bc0 <tcp_rexmit_rto_commit+0x1c>
 8010bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8010be8 <tcp_rexmit_rto_commit+0x44>)
 8010bb4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010bb8:	490c      	ldr	r1, [pc, #48]	@ (8010bec <tcp_rexmit_rto_commit+0x48>)
 8010bba:	480d      	ldr	r0, [pc, #52]	@ (8010bf0 <tcp_rexmit_rto_commit+0x4c>)
 8010bbc:	f001 f808 	bl	8011bd0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010bc6:	2bff      	cmp	r3, #255	@ 0xff
 8010bc8:	d007      	beq.n	8010bda <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f7ff fc7e 	bl	80104dc <tcp_output>
}
 8010be0:	bf00      	nop
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	08014af8 	.word	0x08014af8
 8010bec:	08015194 	.word	0x08015194
 8010bf0:	08014b88 	.word	0x08014b88

08010bf4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d106      	bne.n	8010c10 <tcp_rexmit_rto+0x1c>
 8010c02:	4b0a      	ldr	r3, [pc, #40]	@ (8010c2c <tcp_rexmit_rto+0x38>)
 8010c04:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8010c08:	4909      	ldr	r1, [pc, #36]	@ (8010c30 <tcp_rexmit_rto+0x3c>)
 8010c0a:	480a      	ldr	r0, [pc, #40]	@ (8010c34 <tcp_rexmit_rto+0x40>)
 8010c0c:	f000 ffe0 	bl	8011bd0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7ff ff57 	bl	8010ac4 <tcp_rexmit_rto_prepare>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d102      	bne.n	8010c22 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f7ff ffc1 	bl	8010ba4 <tcp_rexmit_rto_commit>
  }
}
 8010c22:	bf00      	nop
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	08014af8 	.word	0x08014af8
 8010c30:	080151b8 	.word	0x080151b8
 8010c34:	08014b88 	.word	0x08014b88

08010c38 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010c38:	b590      	push	{r4, r7, lr}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d106      	bne.n	8010c54 <tcp_rexmit+0x1c>
 8010c46:	4b2f      	ldr	r3, [pc, #188]	@ (8010d04 <tcp_rexmit+0xcc>)
 8010c48:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8010c4c:	492e      	ldr	r1, [pc, #184]	@ (8010d08 <tcp_rexmit+0xd0>)
 8010c4e:	482f      	ldr	r0, [pc, #188]	@ (8010d0c <tcp_rexmit+0xd4>)
 8010c50:	f000 ffbe 	bl	8011bd0 <iprintf>

  if (pcb->unacked == NULL) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d102      	bne.n	8010c62 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010c5c:	f06f 0305 	mvn.w	r3, #5
 8010c60:	e04c      	b.n	8010cfc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c66:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010c68:	68b8      	ldr	r0, [r7, #8]
 8010c6a:	f7ff fe2b 	bl	80108c4 <tcp_output_segment_busy>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d002      	beq.n	8010c7a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010c74:	f06f 0305 	mvn.w	r3, #5
 8010c78:	e040      	b.n	8010cfc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	336c      	adds	r3, #108	@ 0x6c
 8010c86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010c88:	e002      	b.n	8010c90 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d011      	beq.n	8010cbc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7f7 f8be 	bl	8007e22 <lwip_htonl>
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7f7 f8b7 	bl	8007e22 <lwip_htonl>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	dbe6      	blt.n	8010c8a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	68ba      	ldr	r2, [r7, #8]
 8010cc8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d103      	bne.n	8010cda <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010ce0:	2bff      	cmp	r3, #255	@ 0xff
 8010ce2:	d007      	beq.n	8010cf4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010cea:	3301      	adds	r3, #1
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010cfa:	2300      	movs	r3, #0
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3714      	adds	r7, #20
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd90      	pop	{r4, r7, pc}
 8010d04:	08014af8 	.word	0x08014af8
 8010d08:	080151d4 	.word	0x080151d4
 8010d0c:	08014b88 	.word	0x08014b88

08010d10 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d106      	bne.n	8010d2c <tcp_rexmit_fast+0x1c>
 8010d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8010dc8 <tcp_rexmit_fast+0xb8>)
 8010d20:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010d24:	4929      	ldr	r1, [pc, #164]	@ (8010dcc <tcp_rexmit_fast+0xbc>)
 8010d26:	482a      	ldr	r0, [pc, #168]	@ (8010dd0 <tcp_rexmit_fast+0xc0>)
 8010d28:	f000 ff52 	bl	8011bd0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d045      	beq.n	8010dc0 <tcp_rexmit_fast+0xb0>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	8b5b      	ldrh	r3, [r3, #26]
 8010d38:	f003 0304 	and.w	r3, r3, #4
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d13f      	bne.n	8010dc0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff ff79 	bl	8010c38 <tcp_rexmit>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d139      	bne.n	8010dc0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	bf28      	it	cs
 8010d5c:	4613      	movcs	r3, r2
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	da00      	bge.n	8010d66 <tcp_rexmit_fast+0x56>
 8010d64:	3301      	adds	r3, #1
 8010d66:	105b      	asrs	r3, r3, #1
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010d76:	461a      	mov	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d7c:	005b      	lsls	r3, r3, #1
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d206      	bcs.n	8010d90 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	b29a      	uxth	r2, r3
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	0049      	lsls	r1, r1, #1
 8010d9e:	440b      	add	r3, r1
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	4413      	add	r3, r2
 8010da4:	b29a      	uxth	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	8b5b      	ldrh	r3, [r3, #26]
 8010db0:	f043 0304 	orr.w	r3, r3, #4
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010dc0:	bf00      	nop
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	08014af8 	.word	0x08014af8
 8010dcc:	080151ec 	.word	0x080151ec
 8010dd0:	08014b88 	.word	0x08014b88

08010dd4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b086      	sub	sp, #24
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	607b      	str	r3, [r7, #4]
 8010dde:	460b      	mov	r3, r1
 8010de0:	817b      	strh	r3, [r7, #10]
 8010de2:	4613      	mov	r3, r2
 8010de4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010de6:	897a      	ldrh	r2, [r7, #10]
 8010de8:	893b      	ldrh	r3, [r7, #8]
 8010dea:	4413      	add	r3, r2
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	3314      	adds	r3, #20
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010df6:	4619      	mov	r1, r3
 8010df8:	2022      	movs	r0, #34	@ 0x22
 8010dfa:	f7fa fc1b 	bl	800b634 <pbuf_alloc>
 8010dfe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d04d      	beq.n	8010ea2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010e06:	897b      	ldrh	r3, [r7, #10]
 8010e08:	3313      	adds	r3, #19
 8010e0a:	697a      	ldr	r2, [r7, #20]
 8010e0c:	8952      	ldrh	r2, [r2, #10]
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	db06      	blt.n	8010e20 <tcp_output_alloc_header_common+0x4c>
 8010e12:	4b26      	ldr	r3, [pc, #152]	@ (8010eac <tcp_output_alloc_header_common+0xd8>)
 8010e14:	f240 7223 	movw	r2, #1827	@ 0x723
 8010e18:	4925      	ldr	r1, [pc, #148]	@ (8010eb0 <tcp_output_alloc_header_common+0xdc>)
 8010e1a:	4826      	ldr	r0, [pc, #152]	@ (8010eb4 <tcp_output_alloc_header_common+0xe0>)
 8010e1c:	f000 fed8 	bl	8011bd0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010e26:	8c3b      	ldrh	r3, [r7, #32]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7f6 ffe5 	bl	8007df8 <lwip_htons>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	461a      	mov	r2, r3
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010e36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7f6 ffdd 	bl	8007df8 <lwip_htons>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	461a      	mov	r2, r3
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010e4c:	68f8      	ldr	r0, [r7, #12]
 8010e4e:	f7f6 ffe8 	bl	8007e22 <lwip_htonl>
 8010e52:	4602      	mov	r2, r0
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010e58:	897b      	ldrh	r3, [r7, #10]
 8010e5a:	089b      	lsrs	r3, r3, #2
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	3305      	adds	r3, #5
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	031b      	lsls	r3, r3, #12
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7f6 ffc1 	bl	8007df8 <lwip_htons>
 8010e76:	4603      	mov	r3, r0
 8010e78:	461a      	mov	r2, r3
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010e7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7f6 ffb9 	bl	8007df8 <lwip_htons>
 8010e86:	4603      	mov	r3, r0
 8010e88:	461a      	mov	r2, r3
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	2200      	movs	r2, #0
 8010e92:	741a      	strb	r2, [r3, #16]
 8010e94:	2200      	movs	r2, #0
 8010e96:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	749a      	strb	r2, [r3, #18]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010ea2:	697b      	ldr	r3, [r7, #20]
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3718      	adds	r7, #24
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	08014af8 	.word	0x08014af8
 8010eb0:	0801520c 	.word	0x0801520c
 8010eb4:	08014b88 	.word	0x08014b88

08010eb8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010eb8:	b5b0      	push	{r4, r5, r7, lr}
 8010eba:	b08a      	sub	sp, #40	@ 0x28
 8010ebc:	af04      	add	r7, sp, #16
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	607b      	str	r3, [r7, #4]
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	817b      	strh	r3, [r7, #10]
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d106      	bne.n	8010ede <tcp_output_alloc_header+0x26>
 8010ed0:	4b15      	ldr	r3, [pc, #84]	@ (8010f28 <tcp_output_alloc_header+0x70>)
 8010ed2:	f240 7242 	movw	r2, #1858	@ 0x742
 8010ed6:	4915      	ldr	r1, [pc, #84]	@ (8010f2c <tcp_output_alloc_header+0x74>)
 8010ed8:	4815      	ldr	r0, [pc, #84]	@ (8010f30 <tcp_output_alloc_header+0x78>)
 8010eda:	f000 fe79 	bl	8011bd0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	8adb      	ldrh	r3, [r3, #22]
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	8b12      	ldrh	r2, [r2, #24]
 8010eea:	68f9      	ldr	r1, [r7, #12]
 8010eec:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010eee:	893d      	ldrh	r5, [r7, #8]
 8010ef0:	897c      	ldrh	r4, [r7, #10]
 8010ef2:	9103      	str	r1, [sp, #12]
 8010ef4:	2110      	movs	r1, #16
 8010ef6:	9102      	str	r1, [sp, #8]
 8010ef8:	9201      	str	r2, [sp, #4]
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	462a      	mov	r2, r5
 8010f00:	4621      	mov	r1, r4
 8010f02:	f7ff ff67 	bl	8010dd4 <tcp_output_alloc_header_common>
 8010f06:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d006      	beq.n	8010f1c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f12:	68fa      	ldr	r2, [r7, #12]
 8010f14:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010f16:	441a      	add	r2, r3
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010f1c:	697b      	ldr	r3, [r7, #20]
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3718      	adds	r7, #24
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bdb0      	pop	{r4, r5, r7, pc}
 8010f26:	bf00      	nop
 8010f28:	08014af8 	.word	0x08014af8
 8010f2c:	0801523c 	.word	0x0801523c
 8010f30:	08014b88 	.word	0x08014b88

08010f34 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b088      	sub	sp, #32
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	4611      	mov	r1, r2
 8010f40:	461a      	mov	r2, r3
 8010f42:	460b      	mov	r3, r1
 8010f44:	71fb      	strb	r3, [r7, #7]
 8010f46:	4613      	mov	r3, r2
 8010f48:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d106      	bne.n	8010f62 <tcp_output_fill_options+0x2e>
 8010f54:	4b12      	ldr	r3, [pc, #72]	@ (8010fa0 <tcp_output_fill_options+0x6c>)
 8010f56:	f240 7256 	movw	r2, #1878	@ 0x756
 8010f5a:	4912      	ldr	r1, [pc, #72]	@ (8010fa4 <tcp_output_fill_options+0x70>)
 8010f5c:	4812      	ldr	r0, [pc, #72]	@ (8010fa8 <tcp_output_fill_options+0x74>)
 8010f5e:	f000 fe37 	bl	8011bd0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	3314      	adds	r3, #20
 8010f6c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010f6e:	8bfb      	ldrh	r3, [r7, #30]
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	461a      	mov	r2, r3
 8010f74:	79fb      	ldrb	r3, [r7, #7]
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	f003 0304 	and.w	r3, r3, #4
 8010f7c:	4413      	add	r3, r2
 8010f7e:	3314      	adds	r3, #20
 8010f80:	69ba      	ldr	r2, [r7, #24]
 8010f82:	4413      	add	r3, r2
 8010f84:	697a      	ldr	r2, [r7, #20]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d006      	beq.n	8010f98 <tcp_output_fill_options+0x64>
 8010f8a:	4b05      	ldr	r3, [pc, #20]	@ (8010fa0 <tcp_output_fill_options+0x6c>)
 8010f8c:	f240 7275 	movw	r2, #1909	@ 0x775
 8010f90:	4906      	ldr	r1, [pc, #24]	@ (8010fac <tcp_output_fill_options+0x78>)
 8010f92:	4805      	ldr	r0, [pc, #20]	@ (8010fa8 <tcp_output_fill_options+0x74>)
 8010f94:	f000 fe1c 	bl	8011bd0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010f98:	bf00      	nop
 8010f9a:	3720      	adds	r7, #32
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	08014af8 	.word	0x08014af8
 8010fa4:	08015264 	.word	0x08015264
 8010fa8:	08014b88 	.word	0x08014b88
 8010fac:	0801515c 	.word	0x0801515c

08010fb0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b08a      	sub	sp, #40	@ 0x28
 8010fb4:	af04      	add	r7, sp, #16
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	607a      	str	r2, [r7, #4]
 8010fbc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d106      	bne.n	8010fd2 <tcp_output_control_segment+0x22>
 8010fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8011038 <tcp_output_control_segment+0x88>)
 8010fc6:	f240 7287 	movw	r2, #1927	@ 0x787
 8010fca:	491c      	ldr	r1, [pc, #112]	@ (801103c <tcp_output_control_segment+0x8c>)
 8010fcc:	481c      	ldr	r0, [pc, #112]	@ (8011040 <tcp_output_control_segment+0x90>)
 8010fce:	f000 fdff 	bl	8011bd0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010fd2:	683a      	ldr	r2, [r7, #0]
 8010fd4:	6879      	ldr	r1, [r7, #4]
 8010fd6:	68f8      	ldr	r0, [r7, #12]
 8010fd8:	f7fe ff42 	bl	800fe60 <tcp_route>
 8010fdc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d102      	bne.n	8010fea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010fe4:	23fc      	movs	r3, #252	@ 0xfc
 8010fe6:	75fb      	strb	r3, [r7, #23]
 8010fe8:	e01c      	b.n	8011024 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d006      	beq.n	8010ffe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	7adb      	ldrb	r3, [r3, #11]
 8010ff4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	7a9b      	ldrb	r3, [r3, #10]
 8010ffa:	757b      	strb	r3, [r7, #21]
 8010ffc:	e003      	b.n	8011006 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010ffe:	23ff      	movs	r3, #255	@ 0xff
 8011000:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011002:	2300      	movs	r3, #0
 8011004:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011006:	7dba      	ldrb	r2, [r7, #22]
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	9302      	str	r3, [sp, #8]
 801100c:	2306      	movs	r3, #6
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	7d7b      	ldrb	r3, [r7, #21]
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	4613      	mov	r3, r2
 8011016:	683a      	ldr	r2, [r7, #0]
 8011018:	6879      	ldr	r1, [r7, #4]
 801101a:	68b8      	ldr	r0, [r7, #8]
 801101c:	f7f8 fb80 	bl	8009720 <ip4_output_if>
 8011020:	4603      	mov	r3, r0
 8011022:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011024:	68b8      	ldr	r0, [r7, #8]
 8011026:	f7fa fde9 	bl	800bbfc <pbuf_free>
  return err;
 801102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801102e:	4618      	mov	r0, r3
 8011030:	3718      	adds	r7, #24
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	08014af8 	.word	0x08014af8
 801103c:	0801528c 	.word	0x0801528c
 8011040:	08014b88 	.word	0x08014b88

08011044 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011044:	b590      	push	{r4, r7, lr}
 8011046:	b08b      	sub	sp, #44	@ 0x2c
 8011048:	af04      	add	r7, sp, #16
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	607a      	str	r2, [r7, #4]
 8011050:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d106      	bne.n	8011066 <tcp_rst+0x22>
 8011058:	4b1f      	ldr	r3, [pc, #124]	@ (80110d8 <tcp_rst+0x94>)
 801105a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801105e:	491f      	ldr	r1, [pc, #124]	@ (80110dc <tcp_rst+0x98>)
 8011060:	481f      	ldr	r0, [pc, #124]	@ (80110e0 <tcp_rst+0x9c>)
 8011062:	f000 fdb5 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011068:	2b00      	cmp	r3, #0
 801106a:	d106      	bne.n	801107a <tcp_rst+0x36>
 801106c:	4b1a      	ldr	r3, [pc, #104]	@ (80110d8 <tcp_rst+0x94>)
 801106e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011072:	491c      	ldr	r1, [pc, #112]	@ (80110e4 <tcp_rst+0xa0>)
 8011074:	481a      	ldr	r0, [pc, #104]	@ (80110e0 <tcp_rst+0x9c>)
 8011076:	f000 fdab 	bl	8011bd0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801107a:	2300      	movs	r3, #0
 801107c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801107e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011082:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011084:	7dfb      	ldrb	r3, [r7, #23]
 8011086:	b29c      	uxth	r4, r3
 8011088:	68b8      	ldr	r0, [r7, #8]
 801108a:	f7f6 feca 	bl	8007e22 <lwip_htonl>
 801108e:	4602      	mov	r2, r0
 8011090:	8abb      	ldrh	r3, [r7, #20]
 8011092:	9303      	str	r3, [sp, #12]
 8011094:	2314      	movs	r3, #20
 8011096:	9302      	str	r3, [sp, #8]
 8011098:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801109a:	9301      	str	r3, [sp, #4]
 801109c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	4613      	mov	r3, r2
 80110a2:	2200      	movs	r2, #0
 80110a4:	4621      	mov	r1, r4
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7ff fe94 	bl	8010dd4 <tcp_output_alloc_header_common>
 80110ac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d00c      	beq.n	80110ce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80110b4:	7dfb      	ldrb	r3, [r7, #23]
 80110b6:	2200      	movs	r2, #0
 80110b8:	6939      	ldr	r1, [r7, #16]
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f7ff ff3a 	bl	8010f34 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80110c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110c2:	683a      	ldr	r2, [r7, #0]
 80110c4:	6939      	ldr	r1, [r7, #16]
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7ff ff72 	bl	8010fb0 <tcp_output_control_segment>
 80110cc:	e000      	b.n	80110d0 <tcp_rst+0x8c>
    return;
 80110ce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80110d0:	371c      	adds	r7, #28
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd90      	pop	{r4, r7, pc}
 80110d6:	bf00      	nop
 80110d8:	08014af8 	.word	0x08014af8
 80110dc:	080152b8 	.word	0x080152b8
 80110e0:	08014b88 	.word	0x08014b88
 80110e4:	080152d4 	.word	0x080152d4

080110e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80110e8:	b590      	push	{r4, r7, lr}
 80110ea:	b087      	sub	sp, #28
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80110f4:	2300      	movs	r3, #0
 80110f6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <tcp_send_empty_ack+0x24>
 80110fe:	4b28      	ldr	r3, [pc, #160]	@ (80111a0 <tcp_send_empty_ack+0xb8>)
 8011100:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011104:	4927      	ldr	r1, [pc, #156]	@ (80111a4 <tcp_send_empty_ack+0xbc>)
 8011106:	4828      	ldr	r0, [pc, #160]	@ (80111a8 <tcp_send_empty_ack+0xc0>)
 8011108:	f000 fd62 	bl	8011bd0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801110c:	7dfb      	ldrb	r3, [r7, #23]
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	b2db      	uxtb	r3, r3
 8011112:	f003 0304 	and.w	r3, r3, #4
 8011116:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011118:	7d7b      	ldrb	r3, [r7, #21]
 801111a:	b29c      	uxth	r4, r3
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011120:	4618      	mov	r0, r3
 8011122:	f7f6 fe7e 	bl	8007e22 <lwip_htonl>
 8011126:	4603      	mov	r3, r0
 8011128:	2200      	movs	r2, #0
 801112a:	4621      	mov	r1, r4
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f7ff fec3 	bl	8010eb8 <tcp_output_alloc_header>
 8011132:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d109      	bne.n	801114e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	8b5b      	ldrh	r3, [r3, #26]
 801113e:	f043 0303 	orr.w	r3, r3, #3
 8011142:	b29a      	uxth	r2, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011148:	f06f 0301 	mvn.w	r3, #1
 801114c:	e023      	b.n	8011196 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801114e:	7dbb      	ldrb	r3, [r7, #22]
 8011150:	7dfa      	ldrb	r2, [r7, #23]
 8011152:	6939      	ldr	r1, [r7, #16]
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7ff feed 	bl	8010f34 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	3304      	adds	r3, #4
 8011160:	6939      	ldr	r1, [r7, #16]
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f7ff ff24 	bl	8010fb0 <tcp_output_control_segment>
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d007      	beq.n	8011184 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	8b5b      	ldrh	r3, [r3, #26]
 8011178:	f043 0303 	orr.w	r3, r3, #3
 801117c:	b29a      	uxth	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	835a      	strh	r2, [r3, #26]
 8011182:	e006      	b.n	8011192 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	8b5b      	ldrh	r3, [r3, #26]
 8011188:	f023 0303 	bic.w	r3, r3, #3
 801118c:	b29a      	uxth	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011192:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011196:	4618      	mov	r0, r3
 8011198:	371c      	adds	r7, #28
 801119a:	46bd      	mov	sp, r7
 801119c:	bd90      	pop	{r4, r7, pc}
 801119e:	bf00      	nop
 80111a0:	08014af8 	.word	0x08014af8
 80111a4:	080152f0 	.word	0x080152f0
 80111a8:	08014b88 	.word	0x08014b88

080111ac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80111ac:	b590      	push	{r4, r7, lr}
 80111ae:	b087      	sub	sp, #28
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111b4:	2300      	movs	r3, #0
 80111b6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d106      	bne.n	80111cc <tcp_keepalive+0x20>
 80111be:	4b18      	ldr	r3, [pc, #96]	@ (8011220 <tcp_keepalive+0x74>)
 80111c0:	f640 0224 	movw	r2, #2084	@ 0x824
 80111c4:	4917      	ldr	r1, [pc, #92]	@ (8011224 <tcp_keepalive+0x78>)
 80111c6:	4818      	ldr	r0, [pc, #96]	@ (8011228 <tcp_keepalive+0x7c>)
 80111c8:	f000 fd02 	bl	8011bd0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80111cc:	7dfb      	ldrb	r3, [r7, #23]
 80111ce:	b29c      	uxth	r4, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80111d4:	3b01      	subs	r3, #1
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7f6 fe23 	bl	8007e22 <lwip_htonl>
 80111dc:	4603      	mov	r3, r0
 80111de:	2200      	movs	r2, #0
 80111e0:	4621      	mov	r1, r4
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f7ff fe68 	bl	8010eb8 <tcp_output_alloc_header>
 80111e8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d102      	bne.n	80111f6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80111f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111f4:	e010      	b.n	8011218 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80111f6:	7dfb      	ldrb	r3, [r7, #23]
 80111f8:	2200      	movs	r2, #0
 80111fa:	6939      	ldr	r1, [r7, #16]
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f7ff fe99 	bl	8010f34 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	3304      	adds	r3, #4
 8011208:	6939      	ldr	r1, [r7, #16]
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff fed0 	bl	8010fb0 <tcp_output_control_segment>
 8011210:	4603      	mov	r3, r0
 8011212:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011214:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011218:	4618      	mov	r0, r3
 801121a:	371c      	adds	r7, #28
 801121c:	46bd      	mov	sp, r7
 801121e:	bd90      	pop	{r4, r7, pc}
 8011220:	08014af8 	.word	0x08014af8
 8011224:	08015310 	.word	0x08015310
 8011228:	08014b88 	.word	0x08014b88

0801122c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801122c:	b590      	push	{r4, r7, lr}
 801122e:	b08b      	sub	sp, #44	@ 0x2c
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011234:	2300      	movs	r3, #0
 8011236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d106      	bne.n	801124e <tcp_zero_window_probe+0x22>
 8011240:	4b4c      	ldr	r3, [pc, #304]	@ (8011374 <tcp_zero_window_probe+0x148>)
 8011242:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011246:	494c      	ldr	r1, [pc, #304]	@ (8011378 <tcp_zero_window_probe+0x14c>)
 8011248:	484c      	ldr	r0, [pc, #304]	@ (801137c <tcp_zero_window_probe+0x150>)
 801124a:	f000 fcc1 	bl	8011bd0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011252:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011254:	6a3b      	ldr	r3, [r7, #32]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d101      	bne.n	801125e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801125a:	2300      	movs	r3, #0
 801125c:	e086      	b.n	801136c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011264:	2bff      	cmp	r3, #255	@ 0xff
 8011266:	d007      	beq.n	8011278 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801126e:	3301      	adds	r3, #1
 8011270:	b2da      	uxtb	r2, r3
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	899b      	ldrh	r3, [r3, #12]
 801127e:	b29b      	uxth	r3, r3
 8011280:	4618      	mov	r0, r3
 8011282:	f7f6 fdb9 	bl	8007df8 <lwip_htons>
 8011286:	4603      	mov	r3, r0
 8011288:	b2db      	uxtb	r3, r3
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	d005      	beq.n	801129e <tcp_zero_window_probe+0x72>
 8011292:	6a3b      	ldr	r3, [r7, #32]
 8011294:	891b      	ldrh	r3, [r3, #8]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d101      	bne.n	801129e <tcp_zero_window_probe+0x72>
 801129a:	2301      	movs	r3, #1
 801129c:	e000      	b.n	80112a0 <tcp_zero_window_probe+0x74>
 801129e:	2300      	movs	r3, #0
 80112a0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80112a2:	7ffb      	ldrb	r3, [r7, #31]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	bf0c      	ite	eq
 80112a8:	2301      	moveq	r3, #1
 80112aa:	2300      	movne	r3, #0
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80112b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112b4:	b299      	uxth	r1, r3
 80112b6:	6a3b      	ldr	r3, [r7, #32]
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	8bba      	ldrh	r2, [r7, #28]
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7ff fdfa 	bl	8010eb8 <tcp_output_alloc_header>
 80112c4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d102      	bne.n	80112d2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80112cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80112d0:	e04c      	b.n	801136c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80112d2:	69bb      	ldr	r3, [r7, #24]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80112d8:	7ffb      	ldrb	r3, [r7, #31]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d011      	beq.n	8011302 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	899b      	ldrh	r3, [r3, #12]
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	b21b      	sxth	r3, r3
 80112e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80112ea:	b21c      	sxth	r4, r3
 80112ec:	2011      	movs	r0, #17
 80112ee:	f7f6 fd83 	bl	8007df8 <lwip_htons>
 80112f2:	4603      	mov	r3, r0
 80112f4:	b21b      	sxth	r3, r3
 80112f6:	4323      	orrs	r3, r4
 80112f8:	b21b      	sxth	r3, r3
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	819a      	strh	r2, [r3, #12]
 8011300:	e010      	b.n	8011324 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	3314      	adds	r3, #20
 8011308:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801130a:	6a3b      	ldr	r3, [r7, #32]
 801130c:	6858      	ldr	r0, [r3, #4]
 801130e:	6a3b      	ldr	r3, [r7, #32]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	891a      	ldrh	r2, [r3, #8]
 8011314:	6a3b      	ldr	r3, [r7, #32]
 8011316:	891b      	ldrh	r3, [r3, #8]
 8011318:	1ad3      	subs	r3, r2, r3
 801131a:	b29b      	uxth	r3, r3
 801131c:	2201      	movs	r2, #1
 801131e:	6939      	ldr	r1, [r7, #16]
 8011320:	f7fa fe56 	bl	800bfd0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011324:	6a3b      	ldr	r3, [r7, #32]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	4618      	mov	r0, r3
 801132c:	f7f6 fd79 	bl	8007e22 <lwip_htonl>
 8011330:	4603      	mov	r3, r0
 8011332:	3301      	adds	r3, #1
 8011334:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	2b00      	cmp	r3, #0
 8011340:	da02      	bge.n	8011348 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801134c:	2200      	movs	r2, #0
 801134e:	69b9      	ldr	r1, [r7, #24]
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f7ff fdef 	bl	8010f34 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3304      	adds	r3, #4
 801135c:	69b9      	ldr	r1, [r7, #24]
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7ff fe26 	bl	8010fb0 <tcp_output_control_segment>
 8011364:	4603      	mov	r3, r0
 8011366:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011368:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801136c:	4618      	mov	r0, r3
 801136e:	372c      	adds	r7, #44	@ 0x2c
 8011370:	46bd      	mov	sp, r7
 8011372:	bd90      	pop	{r4, r7, pc}
 8011374:	08014af8 	.word	0x08014af8
 8011378:	0801532c 	.word	0x0801532c
 801137c:	08014b88 	.word	0x08014b88

08011380 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011388:	f7fa ff10 	bl	800c1ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801138c:	4b0a      	ldr	r3, [pc, #40]	@ (80113b8 <tcpip_tcp_timer+0x38>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d103      	bne.n	801139c <tcpip_tcp_timer+0x1c>
 8011394:	4b09      	ldr	r3, [pc, #36]	@ (80113bc <tcpip_tcp_timer+0x3c>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d005      	beq.n	80113a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801139c:	2200      	movs	r2, #0
 801139e:	4908      	ldr	r1, [pc, #32]	@ (80113c0 <tcpip_tcp_timer+0x40>)
 80113a0:	20fa      	movs	r0, #250	@ 0xfa
 80113a2:	f000 f8f3 	bl	801158c <sys_timeout>
 80113a6:	e003      	b.n	80113b0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80113a8:	4b06      	ldr	r3, [pc, #24]	@ (80113c4 <tcpip_tcp_timer+0x44>)
 80113aa:	2200      	movs	r2, #0
 80113ac:	601a      	str	r2, [r3, #0]
  }
}
 80113ae:	bf00      	nop
 80113b0:	bf00      	nop
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	24007c50 	.word	0x24007c50
 80113bc:	24007c54 	.word	0x24007c54
 80113c0:	08011381 	.word	0x08011381
 80113c4:	24007c9c 	.word	0x24007c9c

080113c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80113cc:	4b0a      	ldr	r3, [pc, #40]	@ (80113f8 <tcp_timer_needed+0x30>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d10f      	bne.n	80113f4 <tcp_timer_needed+0x2c>
 80113d4:	4b09      	ldr	r3, [pc, #36]	@ (80113fc <tcp_timer_needed+0x34>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d103      	bne.n	80113e4 <tcp_timer_needed+0x1c>
 80113dc:	4b08      	ldr	r3, [pc, #32]	@ (8011400 <tcp_timer_needed+0x38>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d007      	beq.n	80113f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80113e4:	4b04      	ldr	r3, [pc, #16]	@ (80113f8 <tcp_timer_needed+0x30>)
 80113e6:	2201      	movs	r2, #1
 80113e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80113ea:	2200      	movs	r2, #0
 80113ec:	4905      	ldr	r1, [pc, #20]	@ (8011404 <tcp_timer_needed+0x3c>)
 80113ee:	20fa      	movs	r0, #250	@ 0xfa
 80113f0:	f000 f8cc 	bl	801158c <sys_timeout>
  }
}
 80113f4:	bf00      	nop
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	24007c9c 	.word	0x24007c9c
 80113fc:	24007c50 	.word	0x24007c50
 8011400:	24007c54 	.word	0x24007c54
 8011404:	08011381 	.word	0x08011381

08011408 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b086      	sub	sp, #24
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011414:	2006      	movs	r0, #6
 8011416:	f7f9 fd0b 	bl	800ae30 <memp_malloc>
 801141a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d109      	bne.n	8011436 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d151      	bne.n	80114cc <sys_timeout_abs+0xc4>
 8011428:	4b2a      	ldr	r3, [pc, #168]	@ (80114d4 <sys_timeout_abs+0xcc>)
 801142a:	22be      	movs	r2, #190	@ 0xbe
 801142c:	492a      	ldr	r1, [pc, #168]	@ (80114d8 <sys_timeout_abs+0xd0>)
 801142e:	482b      	ldr	r0, [pc, #172]	@ (80114dc <sys_timeout_abs+0xd4>)
 8011430:	f000 fbce 	bl	8011bd0 <iprintf>
    return;
 8011434:	e04a      	b.n	80114cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	2200      	movs	r2, #0
 801143a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	68ba      	ldr	r2, [r7, #8]
 8011440:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	68fa      	ldr	r2, [r7, #12]
 801144c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801144e:	4b24      	ldr	r3, [pc, #144]	@ (80114e0 <sys_timeout_abs+0xd8>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d103      	bne.n	801145e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011456:	4a22      	ldr	r2, [pc, #136]	@ (80114e0 <sys_timeout_abs+0xd8>)
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	6013      	str	r3, [r2, #0]
    return;
 801145c:	e037      	b.n	80114ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	685a      	ldr	r2, [r3, #4]
 8011462:	4b1f      	ldr	r3, [pc, #124]	@ (80114e0 <sys_timeout_abs+0xd8>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	1ad3      	subs	r3, r2, r3
 801146a:	0fdb      	lsrs	r3, r3, #31
 801146c:	f003 0301 	and.w	r3, r3, #1
 8011470:	b2db      	uxtb	r3, r3
 8011472:	2b00      	cmp	r3, #0
 8011474:	d007      	beq.n	8011486 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011476:	4b1a      	ldr	r3, [pc, #104]	@ (80114e0 <sys_timeout_abs+0xd8>)
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801147e:	4a18      	ldr	r2, [pc, #96]	@ (80114e0 <sys_timeout_abs+0xd8>)
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	6013      	str	r3, [r2, #0]
 8011484:	e023      	b.n	80114ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011486:	4b16      	ldr	r3, [pc, #88]	@ (80114e0 <sys_timeout_abs+0xd8>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	617b      	str	r3, [r7, #20]
 801148c:	e01a      	b.n	80114c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d00b      	beq.n	80114ae <sys_timeout_abs+0xa6>
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	685a      	ldr	r2, [r3, #4]
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	0fdb      	lsrs	r3, r3, #31
 80114a4:	f003 0301 	and.w	r3, r3, #1
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d007      	beq.n	80114be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	693a      	ldr	r2, [r7, #16]
 80114ba:	601a      	str	r2, [r3, #0]
        break;
 80114bc:	e007      	b.n	80114ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	617b      	str	r3, [r7, #20]
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d1e1      	bne.n	801148e <sys_timeout_abs+0x86>
 80114ca:	e000      	b.n	80114ce <sys_timeout_abs+0xc6>
    return;
 80114cc:	bf00      	nop
      }
    }
  }
}
 80114ce:	3718      	adds	r7, #24
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	08015350 	.word	0x08015350
 80114d8:	080153c0 	.word	0x080153c0
 80114dc:	08015400 	.word	0x08015400
 80114e0:	24007c94 	.word	0x24007c94

080114e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	4798      	blx	r3

  now = sys_now();
 80114f6:	f7f6 fa2f 	bl	8007958 <sys_now>
 80114fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	4b0f      	ldr	r3, [pc, #60]	@ (8011540 <lwip_cyclic_timer+0x5c>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4413      	add	r3, r2
 8011506:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	0fdb      	lsrs	r3, r3, #31
 8011510:	f003 0301 	and.w	r3, r3, #1
 8011514:	b2db      	uxtb	r3, r3
 8011516:	2b00      	cmp	r3, #0
 8011518:	d009      	beq.n	801152e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	4413      	add	r3, r2
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	4907      	ldr	r1, [pc, #28]	@ (8011544 <lwip_cyclic_timer+0x60>)
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff ff6e 	bl	8011408 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801152c:	e004      	b.n	8011538 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	4904      	ldr	r1, [pc, #16]	@ (8011544 <lwip_cyclic_timer+0x60>)
 8011532:	68f8      	ldr	r0, [r7, #12]
 8011534:	f7ff ff68 	bl	8011408 <sys_timeout_abs>
}
 8011538:	bf00      	nop
 801153a:	3718      	adds	r7, #24
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	24007c98 	.word	0x24007c98
 8011544:	080114e5 	.word	0x080114e5

08011548 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801154e:	2301      	movs	r3, #1
 8011550:	607b      	str	r3, [r7, #4]
 8011552:	e00e      	b.n	8011572 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011554:	4a0b      	ldr	r2, [pc, #44]	@ (8011584 <sys_timeouts_init+0x3c>)
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	4a08      	ldr	r2, [pc, #32]	@ (8011584 <sys_timeouts_init+0x3c>)
 8011562:	4413      	add	r3, r2
 8011564:	461a      	mov	r2, r3
 8011566:	4908      	ldr	r1, [pc, #32]	@ (8011588 <sys_timeouts_init+0x40>)
 8011568:	f000 f810 	bl	801158c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3301      	adds	r3, #1
 8011570:	607b      	str	r3, [r7, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2b02      	cmp	r3, #2
 8011576:	d9ed      	bls.n	8011554 <sys_timeouts_init+0xc>
  }
}
 8011578:	bf00      	nop
 801157a:	bf00      	nop
 801157c:	3708      	adds	r7, #8
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	08015924 	.word	0x08015924
 8011588:	080114e5 	.word	0x080114e5

0801158c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b086      	sub	sp, #24
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801159e:	d306      	bcc.n	80115ae <sys_timeout+0x22>
 80115a0:	4b0a      	ldr	r3, [pc, #40]	@ (80115cc <sys_timeout+0x40>)
 80115a2:	f240 1229 	movw	r2, #297	@ 0x129
 80115a6:	490a      	ldr	r1, [pc, #40]	@ (80115d0 <sys_timeout+0x44>)
 80115a8:	480a      	ldr	r0, [pc, #40]	@ (80115d4 <sys_timeout+0x48>)
 80115aa:	f000 fb11 	bl	8011bd0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80115ae:	f7f6 f9d3 	bl	8007958 <sys_now>
 80115b2:	4602      	mov	r2, r0
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	4413      	add	r3, r2
 80115b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	68b9      	ldr	r1, [r7, #8]
 80115be:	6978      	ldr	r0, [r7, #20]
 80115c0:	f7ff ff22 	bl	8011408 <sys_timeout_abs>
#endif
}
 80115c4:	bf00      	nop
 80115c6:	3718      	adds	r7, #24
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	08015350 	.word	0x08015350
 80115d0:	08015428 	.word	0x08015428
 80115d4:	08015400 	.word	0x08015400

080115d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b084      	sub	sp, #16
 80115dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80115de:	f7f6 f9bb 	bl	8007958 <sys_now>
 80115e2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80115e4:	4b1a      	ldr	r3, [pc, #104]	@ (8011650 <sys_check_timeouts+0x78>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	b2db      	uxtb	r3, r3
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d001      	beq.n	80115f2 <sys_check_timeouts+0x1a>
 80115ee:	f7f9 ffcb 	bl	800b588 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80115f2:	4b18      	ldr	r3, [pc, #96]	@ (8011654 <sys_check_timeouts+0x7c>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d022      	beq.n	8011644 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	68fa      	ldr	r2, [r7, #12]
 8011604:	1ad3      	subs	r3, r2, r3
 8011606:	0fdb      	lsrs	r3, r3, #31
 8011608:	f003 0301 	and.w	r3, r3, #1
 801160c:	b2db      	uxtb	r3, r3
 801160e:	2b00      	cmp	r3, #0
 8011610:	d11a      	bne.n	8011648 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	4a0f      	ldr	r2, [pc, #60]	@ (8011654 <sys_check_timeouts+0x7c>)
 8011618:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	4a0b      	ldr	r2, [pc, #44]	@ (8011658 <sys_check_timeouts+0x80>)
 801162c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801162e:	68b9      	ldr	r1, [r7, #8]
 8011630:	2006      	movs	r0, #6
 8011632:	f7f9 fc6d 	bl	800af10 <memp_free>
    if (handler != NULL) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d0d3      	beq.n	80115e4 <sys_check_timeouts+0xc>
      handler(arg);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6838      	ldr	r0, [r7, #0]
 8011640:	4798      	blx	r3
  do {
 8011642:	e7cf      	b.n	80115e4 <sys_check_timeouts+0xc>
      return;
 8011644:	bf00      	nop
 8011646:	e000      	b.n	801164a <sys_check_timeouts+0x72>
      return;
 8011648:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801164a:	3710      	adds	r7, #16
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	24007c41 	.word	0x24007c41
 8011654:	24007c94 	.word	0x24007c94
 8011658:	24007c98 	.word	0x24007c98

0801165c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011660:	f000 f9b6 	bl	80119d0 <rand>
 8011664:	4603      	mov	r3, r0
 8011666:	b29b      	uxth	r3, r3
 8011668:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801166c:	b29b      	uxth	r3, r3
 801166e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011672:	b29a      	uxth	r2, r3
 8011674:	4b01      	ldr	r3, [pc, #4]	@ (801167c <udp_init+0x20>)
 8011676:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011678:	bf00      	nop
 801167a:	bd80      	pop	{r7, pc}
 801167c:	2400002c 	.word	0x2400002c

08011680 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	4613      	mov	r3, r2
 801168c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d105      	bne.n	80116a0 <udp_input_local_match+0x20>
 8011694:	4b27      	ldr	r3, [pc, #156]	@ (8011734 <udp_input_local_match+0xb4>)
 8011696:	2287      	movs	r2, #135	@ 0x87
 8011698:	4927      	ldr	r1, [pc, #156]	@ (8011738 <udp_input_local_match+0xb8>)
 801169a:	4828      	ldr	r0, [pc, #160]	@ (801173c <udp_input_local_match+0xbc>)
 801169c:	f000 fa98 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d105      	bne.n	80116b2 <udp_input_local_match+0x32>
 80116a6:	4b23      	ldr	r3, [pc, #140]	@ (8011734 <udp_input_local_match+0xb4>)
 80116a8:	2288      	movs	r2, #136	@ 0x88
 80116aa:	4925      	ldr	r1, [pc, #148]	@ (8011740 <udp_input_local_match+0xc0>)
 80116ac:	4823      	ldr	r0, [pc, #140]	@ (801173c <udp_input_local_match+0xbc>)
 80116ae:	f000 fa8f 	bl	8011bd0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	7a1b      	ldrb	r3, [r3, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d00b      	beq.n	80116d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	7a1a      	ldrb	r2, [r3, #8]
 80116be:	4b21      	ldr	r3, [pc, #132]	@ (8011744 <udp_input_local_match+0xc4>)
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80116c6:	3301      	adds	r3, #1
 80116c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d001      	beq.n	80116d2 <udp_input_local_match+0x52>
    return 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	e02b      	b.n	801172a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80116d2:	79fb      	ldrb	r3, [r7, #7]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d018      	beq.n	801170a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d013      	beq.n	8011706 <udp_input_local_match+0x86>
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00f      	beq.n	8011706 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80116e6:	4b17      	ldr	r3, [pc, #92]	@ (8011744 <udp_input_local_match+0xc4>)
 80116e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80116ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116ee:	d00a      	beq.n	8011706 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	4b13      	ldr	r3, [pc, #76]	@ (8011744 <udp_input_local_match+0xc4>)
 80116f6:	695b      	ldr	r3, [r3, #20]
 80116f8:	405a      	eors	r2, r3
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	3308      	adds	r3, #8
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011702:	2b00      	cmp	r3, #0
 8011704:	d110      	bne.n	8011728 <udp_input_local_match+0xa8>
          return 1;
 8011706:	2301      	movs	r3, #1
 8011708:	e00f      	b.n	801172a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d009      	beq.n	8011724 <udp_input_local_match+0xa4>
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d005      	beq.n	8011724 <udp_input_local_match+0xa4>
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	4b09      	ldr	r3, [pc, #36]	@ (8011744 <udp_input_local_match+0xc4>)
 801171e:	695b      	ldr	r3, [r3, #20]
 8011720:	429a      	cmp	r2, r3
 8011722:	d101      	bne.n	8011728 <udp_input_local_match+0xa8>
        return 1;
 8011724:	2301      	movs	r3, #1
 8011726:	e000      	b.n	801172a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011728:	2300      	movs	r3, #0
}
 801172a:	4618      	mov	r0, r3
 801172c:	3710      	adds	r7, #16
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	08015474 	.word	0x08015474
 8011738:	080154e0 	.word	0x080154e0
 801173c:	08015504 	.word	0x08015504
 8011740:	0801552c 	.word	0x0801552c
 8011744:	24004d1c 	.word	0x24004d1c

08011748 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011748:	b590      	push	{r4, r7, lr}
 801174a:	b08d      	sub	sp, #52	@ 0x34
 801174c:	af02      	add	r7, sp, #8
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011752:	2300      	movs	r3, #0
 8011754:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d105      	bne.n	8011768 <udp_input+0x20>
 801175c:	4b7c      	ldr	r3, [pc, #496]	@ (8011950 <udp_input+0x208>)
 801175e:	22cf      	movs	r2, #207	@ 0xcf
 8011760:	497c      	ldr	r1, [pc, #496]	@ (8011954 <udp_input+0x20c>)
 8011762:	487d      	ldr	r0, [pc, #500]	@ (8011958 <udp_input+0x210>)
 8011764:	f000 fa34 	bl	8011bd0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d105      	bne.n	801177a <udp_input+0x32>
 801176e:	4b78      	ldr	r3, [pc, #480]	@ (8011950 <udp_input+0x208>)
 8011770:	22d0      	movs	r2, #208	@ 0xd0
 8011772:	497a      	ldr	r1, [pc, #488]	@ (801195c <udp_input+0x214>)
 8011774:	4878      	ldr	r0, [pc, #480]	@ (8011958 <udp_input+0x210>)
 8011776:	f000 fa2b 	bl	8011bd0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	895b      	ldrh	r3, [r3, #10]
 801177e:	2b07      	cmp	r3, #7
 8011780:	d803      	bhi.n	801178a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f7fa fa3a 	bl	800bbfc <pbuf_free>
    goto end;
 8011788:	e0de      	b.n	8011948 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011790:	4b73      	ldr	r3, [pc, #460]	@ (8011960 <udp_input+0x218>)
 8011792:	695b      	ldr	r3, [r3, #20]
 8011794:	4a72      	ldr	r2, [pc, #456]	@ (8011960 <udp_input+0x218>)
 8011796:	6812      	ldr	r2, [r2, #0]
 8011798:	4611      	mov	r1, r2
 801179a:	4618      	mov	r0, r3
 801179c:	f7f8 f898 	bl	80098d0 <ip4_addr_isbroadcast_u32>
 80117a0:	4603      	mov	r3, r0
 80117a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	881b      	ldrh	r3, [r3, #0]
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7f6 fb24 	bl	8007df8 <lwip_htons>
 80117b0:	4603      	mov	r3, r0
 80117b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	885b      	ldrh	r3, [r3, #2]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7f6 fb1c 	bl	8007df8 <lwip_htons>
 80117c0:	4603      	mov	r3, r0
 80117c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80117c4:	2300      	movs	r3, #0
 80117c6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80117c8:	2300      	movs	r3, #0
 80117ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80117cc:	2300      	movs	r3, #0
 80117ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117d0:	4b64      	ldr	r3, [pc, #400]	@ (8011964 <udp_input+0x21c>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80117d6:	e054      	b.n	8011882 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80117d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117da:	8a5b      	ldrh	r3, [r3, #18]
 80117dc:	89fa      	ldrh	r2, [r7, #14]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d14a      	bne.n	8011878 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80117e2:	7cfb      	ldrb	r3, [r7, #19]
 80117e4:	461a      	mov	r2, r3
 80117e6:	6839      	ldr	r1, [r7, #0]
 80117e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117ea:	f7ff ff49 	bl	8011680 <udp_input_local_match>
 80117ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d041      	beq.n	8011878 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80117f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f6:	7c1b      	ldrb	r3, [r3, #16]
 80117f8:	f003 0304 	and.w	r3, r3, #4
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d11d      	bne.n	801183c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d102      	bne.n	801180c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011808:	61fb      	str	r3, [r7, #28]
 801180a:	e017      	b.n	801183c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801180c:	7cfb      	ldrb	r3, [r7, #19]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d014      	beq.n	801183c <udp_input+0xf4>
 8011812:	4b53      	ldr	r3, [pc, #332]	@ (8011960 <udp_input+0x218>)
 8011814:	695b      	ldr	r3, [r3, #20]
 8011816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801181a:	d10f      	bne.n	801183c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	3304      	adds	r3, #4
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	429a      	cmp	r2, r3
 8011828:	d008      	beq.n	801183c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	3304      	adds	r3, #4
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	429a      	cmp	r2, r3
 8011836:	d101      	bne.n	801183c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801183a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801183e:	8a9b      	ldrh	r3, [r3, #20]
 8011840:	8a3a      	ldrh	r2, [r7, #16]
 8011842:	429a      	cmp	r2, r3
 8011844:	d118      	bne.n	8011878 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011848:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801184a:	2b00      	cmp	r3, #0
 801184c:	d005      	beq.n	801185a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011850:	685a      	ldr	r2, [r3, #4]
 8011852:	4b43      	ldr	r3, [pc, #268]	@ (8011960 <udp_input+0x218>)
 8011854:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011856:	429a      	cmp	r2, r3
 8011858:	d10e      	bne.n	8011878 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801185a:	6a3b      	ldr	r3, [r7, #32]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d014      	beq.n	801188a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011862:	68da      	ldr	r2, [r3, #12]
 8011864:	6a3b      	ldr	r3, [r7, #32]
 8011866:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011868:	4b3e      	ldr	r3, [pc, #248]	@ (8011964 <udp_input+0x21c>)
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011870:	4a3c      	ldr	r2, [pc, #240]	@ (8011964 <udp_input+0x21c>)
 8011872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011874:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011876:	e008      	b.n	801188a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187e:	68db      	ldr	r3, [r3, #12]
 8011880:	627b      	str	r3, [r7, #36]	@ 0x24
 8011882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011884:	2b00      	cmp	r3, #0
 8011886:	d1a7      	bne.n	80117d8 <udp_input+0x90>
 8011888:	e000      	b.n	801188c <udp_input+0x144>
        break;
 801188a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801188e:	2b00      	cmp	r3, #0
 8011890:	d101      	bne.n	8011896 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <udp_input+0x15a>
    for_us = 1;
 801189c:	2301      	movs	r3, #1
 801189e:	76fb      	strb	r3, [r7, #27]
 80118a0:	e00a      	b.n	80118b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	3304      	adds	r3, #4
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	4b2d      	ldr	r3, [pc, #180]	@ (8011960 <udp_input+0x218>)
 80118aa:	695b      	ldr	r3, [r3, #20]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	bf0c      	ite	eq
 80118b0:	2301      	moveq	r3, #1
 80118b2:	2300      	movne	r3, #0
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80118b8:	7efb      	ldrb	r3, [r7, #27]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d041      	beq.n	8011942 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80118be:	2108      	movs	r1, #8
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7fa f915 	bl	800baf0 <pbuf_remove_header>
 80118c6:	4603      	mov	r3, r0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00a      	beq.n	80118e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80118cc:	4b20      	ldr	r3, [pc, #128]	@ (8011950 <udp_input+0x208>)
 80118ce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80118d2:	4925      	ldr	r1, [pc, #148]	@ (8011968 <udp_input+0x220>)
 80118d4:	4820      	ldr	r0, [pc, #128]	@ (8011958 <udp_input+0x210>)
 80118d6:	f000 f97b 	bl	8011bd0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f7fa f98e 	bl	800bbfc <pbuf_free>
      goto end;
 80118e0:	e032      	b.n	8011948 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80118e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d012      	beq.n	801190e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80118e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ea:	699b      	ldr	r3, [r3, #24]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00a      	beq.n	8011906 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80118f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f2:	699c      	ldr	r4, [r3, #24]
 80118f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f6:	69d8      	ldr	r0, [r3, #28]
 80118f8:	8a3b      	ldrh	r3, [r7, #16]
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	4b1b      	ldr	r3, [pc, #108]	@ (801196c <udp_input+0x224>)
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011902:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011904:	e021      	b.n	801194a <udp_input+0x202>
        pbuf_free(p);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7fa f978 	bl	800bbfc <pbuf_free>
        goto end;
 801190c:	e01c      	b.n	8011948 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801190e:	7cfb      	ldrb	r3, [r7, #19]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d112      	bne.n	801193a <udp_input+0x1f2>
 8011914:	4b12      	ldr	r3, [pc, #72]	@ (8011960 <udp_input+0x218>)
 8011916:	695b      	ldr	r3, [r3, #20]
 8011918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801191c:	2be0      	cmp	r3, #224	@ 0xe0
 801191e:	d00c      	beq.n	801193a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011920:	4b0f      	ldr	r3, [pc, #60]	@ (8011960 <udp_input+0x218>)
 8011922:	899b      	ldrh	r3, [r3, #12]
 8011924:	3308      	adds	r3, #8
 8011926:	b29b      	uxth	r3, r3
 8011928:	b21b      	sxth	r3, r3
 801192a:	4619      	mov	r1, r3
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7fa f952 	bl	800bbd6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011932:	2103      	movs	r1, #3
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7f7 fbcf 	bl	80090d8 <icmp_dest_unreach>
      pbuf_free(p);
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7fa f95e 	bl	800bbfc <pbuf_free>
  return;
 8011940:	e003      	b.n	801194a <udp_input+0x202>
    pbuf_free(p);
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7fa f95a 	bl	800bbfc <pbuf_free>
  return;
 8011948:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801194a:	372c      	adds	r7, #44	@ 0x2c
 801194c:	46bd      	mov	sp, r7
 801194e:	bd90      	pop	{r4, r7, pc}
 8011950:	08015474 	.word	0x08015474
 8011954:	08015554 	.word	0x08015554
 8011958:	08015504 	.word	0x08015504
 801195c:	0801556c 	.word	0x0801556c
 8011960:	24004d1c 	.word	0x24004d1c
 8011964:	24007ca0 	.word	0x24007ca0
 8011968:	08015588 	.word	0x08015588
 801196c:	24004d2c 	.word	0x24004d2c

08011970 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011970:	b480      	push	{r7}
 8011972:	b085      	sub	sp, #20
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d01e      	beq.n	80119be <udp_netif_ip_addr_changed+0x4e>
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d01a      	beq.n	80119be <udp_netif_ip_addr_changed+0x4e>
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d017      	beq.n	80119be <udp_netif_ip_addr_changed+0x4e>
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d013      	beq.n	80119be <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011996:	4b0d      	ldr	r3, [pc, #52]	@ (80119cc <udp_netif_ip_addr_changed+0x5c>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	60fb      	str	r3, [r7, #12]
 801199c:	e00c      	b.n	80119b8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681a      	ldr	r2, [r3, #0]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d103      	bne.n	80119b2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	60fb      	str	r3, [r7, #12]
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d1ef      	bne.n	801199e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80119be:	bf00      	nop
 80119c0:	3714      	adds	r7, #20
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr
 80119ca:	bf00      	nop
 80119cc:	24007ca0 	.word	0x24007ca0

080119d0 <rand>:
 80119d0:	4b16      	ldr	r3, [pc, #88]	@ (8011a2c <rand+0x5c>)
 80119d2:	b510      	push	{r4, lr}
 80119d4:	681c      	ldr	r4, [r3, #0]
 80119d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119d8:	b9b3      	cbnz	r3, 8011a08 <rand+0x38>
 80119da:	2018      	movs	r0, #24
 80119dc:	f000 fb3c 	bl	8012058 <malloc>
 80119e0:	4602      	mov	r2, r0
 80119e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80119e4:	b920      	cbnz	r0, 80119f0 <rand+0x20>
 80119e6:	4b12      	ldr	r3, [pc, #72]	@ (8011a30 <rand+0x60>)
 80119e8:	4812      	ldr	r0, [pc, #72]	@ (8011a34 <rand+0x64>)
 80119ea:	2152      	movs	r1, #82	@ 0x52
 80119ec:	f000 facc 	bl	8011f88 <__assert_func>
 80119f0:	4911      	ldr	r1, [pc, #68]	@ (8011a38 <rand+0x68>)
 80119f2:	4b12      	ldr	r3, [pc, #72]	@ (8011a3c <rand+0x6c>)
 80119f4:	e9c0 1300 	strd	r1, r3, [r0]
 80119f8:	4b11      	ldr	r3, [pc, #68]	@ (8011a40 <rand+0x70>)
 80119fa:	6083      	str	r3, [r0, #8]
 80119fc:	230b      	movs	r3, #11
 80119fe:	8183      	strh	r3, [r0, #12]
 8011a00:	2100      	movs	r1, #0
 8011a02:	2001      	movs	r0, #1
 8011a04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011a08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011a0a:	480e      	ldr	r0, [pc, #56]	@ (8011a44 <rand+0x74>)
 8011a0c:	690b      	ldr	r3, [r1, #16]
 8011a0e:	694c      	ldr	r4, [r1, #20]
 8011a10:	4a0d      	ldr	r2, [pc, #52]	@ (8011a48 <rand+0x78>)
 8011a12:	4358      	muls	r0, r3
 8011a14:	fb02 0004 	mla	r0, r2, r4, r0
 8011a18:	fba3 3202 	umull	r3, r2, r3, r2
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	eb40 0002 	adc.w	r0, r0, r2
 8011a22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011a26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011a2a:	bd10      	pop	{r4, pc}
 8011a2c:	2400003c 	.word	0x2400003c
 8011a30:	0801593c 	.word	0x0801593c
 8011a34:	08015953 	.word	0x08015953
 8011a38:	abcd330e 	.word	0xabcd330e
 8011a3c:	e66d1234 	.word	0xe66d1234
 8011a40:	0005deec 	.word	0x0005deec
 8011a44:	5851f42d 	.word	0x5851f42d
 8011a48:	4c957f2d 	.word	0x4c957f2d

08011a4c <std>:
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	b510      	push	{r4, lr}
 8011a50:	4604      	mov	r4, r0
 8011a52:	e9c0 3300 	strd	r3, r3, [r0]
 8011a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a5a:	6083      	str	r3, [r0, #8]
 8011a5c:	8181      	strh	r1, [r0, #12]
 8011a5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011a60:	81c2      	strh	r2, [r0, #14]
 8011a62:	6183      	str	r3, [r0, #24]
 8011a64:	4619      	mov	r1, r3
 8011a66:	2208      	movs	r2, #8
 8011a68:	305c      	adds	r0, #92	@ 0x5c
 8011a6a:	f000 fa09 	bl	8011e80 <memset>
 8011a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011aa4 <std+0x58>)
 8011a70:	6263      	str	r3, [r4, #36]	@ 0x24
 8011a72:	4b0d      	ldr	r3, [pc, #52]	@ (8011aa8 <std+0x5c>)
 8011a74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011a76:	4b0d      	ldr	r3, [pc, #52]	@ (8011aac <std+0x60>)
 8011a78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ab0 <std+0x64>)
 8011a7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8011ab4 <std+0x68>)
 8011a80:	6224      	str	r4, [r4, #32]
 8011a82:	429c      	cmp	r4, r3
 8011a84:	d006      	beq.n	8011a94 <std+0x48>
 8011a86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011a8a:	4294      	cmp	r4, r2
 8011a8c:	d002      	beq.n	8011a94 <std+0x48>
 8011a8e:	33d0      	adds	r3, #208	@ 0xd0
 8011a90:	429c      	cmp	r4, r3
 8011a92:	d105      	bne.n	8011aa0 <std+0x54>
 8011a94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a9c:	f000 ba62 	b.w	8011f64 <__retarget_lock_init_recursive>
 8011aa0:	bd10      	pop	{r4, pc}
 8011aa2:	bf00      	nop
 8011aa4:	08011cb1 	.word	0x08011cb1
 8011aa8:	08011cd3 	.word	0x08011cd3
 8011aac:	08011d0b 	.word	0x08011d0b
 8011ab0:	08011d2f 	.word	0x08011d2f
 8011ab4:	24007ca4 	.word	0x24007ca4

08011ab8 <stdio_exit_handler>:
 8011ab8:	4a02      	ldr	r2, [pc, #8]	@ (8011ac4 <stdio_exit_handler+0xc>)
 8011aba:	4903      	ldr	r1, [pc, #12]	@ (8011ac8 <stdio_exit_handler+0x10>)
 8011abc:	4803      	ldr	r0, [pc, #12]	@ (8011acc <stdio_exit_handler+0x14>)
 8011abe:	f000 b869 	b.w	8011b94 <_fwalk_sglue>
 8011ac2:	bf00      	nop
 8011ac4:	24000030 	.word	0x24000030
 8011ac8:	0801286d 	.word	0x0801286d
 8011acc:	24000040 	.word	0x24000040

08011ad0 <cleanup_stdio>:
 8011ad0:	6841      	ldr	r1, [r0, #4]
 8011ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8011b04 <cleanup_stdio+0x34>)
 8011ad4:	4299      	cmp	r1, r3
 8011ad6:	b510      	push	{r4, lr}
 8011ad8:	4604      	mov	r4, r0
 8011ada:	d001      	beq.n	8011ae0 <cleanup_stdio+0x10>
 8011adc:	f000 fec6 	bl	801286c <_fflush_r>
 8011ae0:	68a1      	ldr	r1, [r4, #8]
 8011ae2:	4b09      	ldr	r3, [pc, #36]	@ (8011b08 <cleanup_stdio+0x38>)
 8011ae4:	4299      	cmp	r1, r3
 8011ae6:	d002      	beq.n	8011aee <cleanup_stdio+0x1e>
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f000 febf 	bl	801286c <_fflush_r>
 8011aee:	68e1      	ldr	r1, [r4, #12]
 8011af0:	4b06      	ldr	r3, [pc, #24]	@ (8011b0c <cleanup_stdio+0x3c>)
 8011af2:	4299      	cmp	r1, r3
 8011af4:	d004      	beq.n	8011b00 <cleanup_stdio+0x30>
 8011af6:	4620      	mov	r0, r4
 8011af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011afc:	f000 beb6 	b.w	801286c <_fflush_r>
 8011b00:	bd10      	pop	{r4, pc}
 8011b02:	bf00      	nop
 8011b04:	24007ca4 	.word	0x24007ca4
 8011b08:	24007d0c 	.word	0x24007d0c
 8011b0c:	24007d74 	.word	0x24007d74

08011b10 <global_stdio_init.part.0>:
 8011b10:	b510      	push	{r4, lr}
 8011b12:	4b0b      	ldr	r3, [pc, #44]	@ (8011b40 <global_stdio_init.part.0+0x30>)
 8011b14:	4c0b      	ldr	r4, [pc, #44]	@ (8011b44 <global_stdio_init.part.0+0x34>)
 8011b16:	4a0c      	ldr	r2, [pc, #48]	@ (8011b48 <global_stdio_init.part.0+0x38>)
 8011b18:	601a      	str	r2, [r3, #0]
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	2104      	movs	r1, #4
 8011b20:	f7ff ff94 	bl	8011a4c <std>
 8011b24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011b28:	2201      	movs	r2, #1
 8011b2a:	2109      	movs	r1, #9
 8011b2c:	f7ff ff8e 	bl	8011a4c <std>
 8011b30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011b34:	2202      	movs	r2, #2
 8011b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b3a:	2112      	movs	r1, #18
 8011b3c:	f7ff bf86 	b.w	8011a4c <std>
 8011b40:	24007ddc 	.word	0x24007ddc
 8011b44:	24007ca4 	.word	0x24007ca4
 8011b48:	08011ab9 	.word	0x08011ab9

08011b4c <__sfp_lock_acquire>:
 8011b4c:	4801      	ldr	r0, [pc, #4]	@ (8011b54 <__sfp_lock_acquire+0x8>)
 8011b4e:	f000 ba0a 	b.w	8011f66 <__retarget_lock_acquire_recursive>
 8011b52:	bf00      	nop
 8011b54:	24007de5 	.word	0x24007de5

08011b58 <__sfp_lock_release>:
 8011b58:	4801      	ldr	r0, [pc, #4]	@ (8011b60 <__sfp_lock_release+0x8>)
 8011b5a:	f000 ba05 	b.w	8011f68 <__retarget_lock_release_recursive>
 8011b5e:	bf00      	nop
 8011b60:	24007de5 	.word	0x24007de5

08011b64 <__sinit>:
 8011b64:	b510      	push	{r4, lr}
 8011b66:	4604      	mov	r4, r0
 8011b68:	f7ff fff0 	bl	8011b4c <__sfp_lock_acquire>
 8011b6c:	6a23      	ldr	r3, [r4, #32]
 8011b6e:	b11b      	cbz	r3, 8011b78 <__sinit+0x14>
 8011b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b74:	f7ff bff0 	b.w	8011b58 <__sfp_lock_release>
 8011b78:	4b04      	ldr	r3, [pc, #16]	@ (8011b8c <__sinit+0x28>)
 8011b7a:	6223      	str	r3, [r4, #32]
 8011b7c:	4b04      	ldr	r3, [pc, #16]	@ (8011b90 <__sinit+0x2c>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d1f5      	bne.n	8011b70 <__sinit+0xc>
 8011b84:	f7ff ffc4 	bl	8011b10 <global_stdio_init.part.0>
 8011b88:	e7f2      	b.n	8011b70 <__sinit+0xc>
 8011b8a:	bf00      	nop
 8011b8c:	08011ad1 	.word	0x08011ad1
 8011b90:	24007ddc 	.word	0x24007ddc

08011b94 <_fwalk_sglue>:
 8011b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b98:	4607      	mov	r7, r0
 8011b9a:	4688      	mov	r8, r1
 8011b9c:	4614      	mov	r4, r2
 8011b9e:	2600      	movs	r6, #0
 8011ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8011ba8:	d505      	bpl.n	8011bb6 <_fwalk_sglue+0x22>
 8011baa:	6824      	ldr	r4, [r4, #0]
 8011bac:	2c00      	cmp	r4, #0
 8011bae:	d1f7      	bne.n	8011ba0 <_fwalk_sglue+0xc>
 8011bb0:	4630      	mov	r0, r6
 8011bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bb6:	89ab      	ldrh	r3, [r5, #12]
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d907      	bls.n	8011bcc <_fwalk_sglue+0x38>
 8011bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	d003      	beq.n	8011bcc <_fwalk_sglue+0x38>
 8011bc4:	4629      	mov	r1, r5
 8011bc6:	4638      	mov	r0, r7
 8011bc8:	47c0      	blx	r8
 8011bca:	4306      	orrs	r6, r0
 8011bcc:	3568      	adds	r5, #104	@ 0x68
 8011bce:	e7e9      	b.n	8011ba4 <_fwalk_sglue+0x10>

08011bd0 <iprintf>:
 8011bd0:	b40f      	push	{r0, r1, r2, r3}
 8011bd2:	b507      	push	{r0, r1, r2, lr}
 8011bd4:	4906      	ldr	r1, [pc, #24]	@ (8011bf0 <iprintf+0x20>)
 8011bd6:	ab04      	add	r3, sp, #16
 8011bd8:	6808      	ldr	r0, [r1, #0]
 8011bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bde:	6881      	ldr	r1, [r0, #8]
 8011be0:	9301      	str	r3, [sp, #4]
 8011be2:	f000 fb19 	bl	8012218 <_vfiprintf_r>
 8011be6:	b003      	add	sp, #12
 8011be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bec:	b004      	add	sp, #16
 8011bee:	4770      	bx	lr
 8011bf0:	2400003c 	.word	0x2400003c

08011bf4 <_puts_r>:
 8011bf4:	6a03      	ldr	r3, [r0, #32]
 8011bf6:	b570      	push	{r4, r5, r6, lr}
 8011bf8:	6884      	ldr	r4, [r0, #8]
 8011bfa:	4605      	mov	r5, r0
 8011bfc:	460e      	mov	r6, r1
 8011bfe:	b90b      	cbnz	r3, 8011c04 <_puts_r+0x10>
 8011c00:	f7ff ffb0 	bl	8011b64 <__sinit>
 8011c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c06:	07db      	lsls	r3, r3, #31
 8011c08:	d405      	bmi.n	8011c16 <_puts_r+0x22>
 8011c0a:	89a3      	ldrh	r3, [r4, #12]
 8011c0c:	0598      	lsls	r0, r3, #22
 8011c0e:	d402      	bmi.n	8011c16 <_puts_r+0x22>
 8011c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c12:	f000 f9a8 	bl	8011f66 <__retarget_lock_acquire_recursive>
 8011c16:	89a3      	ldrh	r3, [r4, #12]
 8011c18:	0719      	lsls	r1, r3, #28
 8011c1a:	d502      	bpl.n	8011c22 <_puts_r+0x2e>
 8011c1c:	6923      	ldr	r3, [r4, #16]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d135      	bne.n	8011c8e <_puts_r+0x9a>
 8011c22:	4621      	mov	r1, r4
 8011c24:	4628      	mov	r0, r5
 8011c26:	f000 f8c5 	bl	8011db4 <__swsetup_r>
 8011c2a:	b380      	cbz	r0, 8011c8e <_puts_r+0x9a>
 8011c2c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c32:	07da      	lsls	r2, r3, #31
 8011c34:	d405      	bmi.n	8011c42 <_puts_r+0x4e>
 8011c36:	89a3      	ldrh	r3, [r4, #12]
 8011c38:	059b      	lsls	r3, r3, #22
 8011c3a:	d402      	bmi.n	8011c42 <_puts_r+0x4e>
 8011c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c3e:	f000 f993 	bl	8011f68 <__retarget_lock_release_recursive>
 8011c42:	4628      	mov	r0, r5
 8011c44:	bd70      	pop	{r4, r5, r6, pc}
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	da04      	bge.n	8011c54 <_puts_r+0x60>
 8011c4a:	69a2      	ldr	r2, [r4, #24]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	dc17      	bgt.n	8011c80 <_puts_r+0x8c>
 8011c50:	290a      	cmp	r1, #10
 8011c52:	d015      	beq.n	8011c80 <_puts_r+0x8c>
 8011c54:	6823      	ldr	r3, [r4, #0]
 8011c56:	1c5a      	adds	r2, r3, #1
 8011c58:	6022      	str	r2, [r4, #0]
 8011c5a:	7019      	strb	r1, [r3, #0]
 8011c5c:	68a3      	ldr	r3, [r4, #8]
 8011c5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c62:	3b01      	subs	r3, #1
 8011c64:	60a3      	str	r3, [r4, #8]
 8011c66:	2900      	cmp	r1, #0
 8011c68:	d1ed      	bne.n	8011c46 <_puts_r+0x52>
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	da11      	bge.n	8011c92 <_puts_r+0x9e>
 8011c6e:	4622      	mov	r2, r4
 8011c70:	210a      	movs	r1, #10
 8011c72:	4628      	mov	r0, r5
 8011c74:	f000 f85f 	bl	8011d36 <__swbuf_r>
 8011c78:	3001      	adds	r0, #1
 8011c7a:	d0d7      	beq.n	8011c2c <_puts_r+0x38>
 8011c7c:	250a      	movs	r5, #10
 8011c7e:	e7d7      	b.n	8011c30 <_puts_r+0x3c>
 8011c80:	4622      	mov	r2, r4
 8011c82:	4628      	mov	r0, r5
 8011c84:	f000 f857 	bl	8011d36 <__swbuf_r>
 8011c88:	3001      	adds	r0, #1
 8011c8a:	d1e7      	bne.n	8011c5c <_puts_r+0x68>
 8011c8c:	e7ce      	b.n	8011c2c <_puts_r+0x38>
 8011c8e:	3e01      	subs	r6, #1
 8011c90:	e7e4      	b.n	8011c5c <_puts_r+0x68>
 8011c92:	6823      	ldr	r3, [r4, #0]
 8011c94:	1c5a      	adds	r2, r3, #1
 8011c96:	6022      	str	r2, [r4, #0]
 8011c98:	220a      	movs	r2, #10
 8011c9a:	701a      	strb	r2, [r3, #0]
 8011c9c:	e7ee      	b.n	8011c7c <_puts_r+0x88>
	...

08011ca0 <puts>:
 8011ca0:	4b02      	ldr	r3, [pc, #8]	@ (8011cac <puts+0xc>)
 8011ca2:	4601      	mov	r1, r0
 8011ca4:	6818      	ldr	r0, [r3, #0]
 8011ca6:	f7ff bfa5 	b.w	8011bf4 <_puts_r>
 8011caa:	bf00      	nop
 8011cac:	2400003c 	.word	0x2400003c

08011cb0 <__sread>:
 8011cb0:	b510      	push	{r4, lr}
 8011cb2:	460c      	mov	r4, r1
 8011cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cb8:	f000 f90c 	bl	8011ed4 <_read_r>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	bfab      	itete	ge
 8011cc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8011cc4:	181b      	addge	r3, r3, r0
 8011cc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011cca:	bfac      	ite	ge
 8011ccc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011cce:	81a3      	strhlt	r3, [r4, #12]
 8011cd0:	bd10      	pop	{r4, pc}

08011cd2 <__swrite>:
 8011cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd6:	461f      	mov	r7, r3
 8011cd8:	898b      	ldrh	r3, [r1, #12]
 8011cda:	05db      	lsls	r3, r3, #23
 8011cdc:	4605      	mov	r5, r0
 8011cde:	460c      	mov	r4, r1
 8011ce0:	4616      	mov	r6, r2
 8011ce2:	d505      	bpl.n	8011cf0 <__swrite+0x1e>
 8011ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce8:	2302      	movs	r3, #2
 8011cea:	2200      	movs	r2, #0
 8011cec:	f000 f8e0 	bl	8011eb0 <_lseek_r>
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011cfa:	81a3      	strh	r3, [r4, #12]
 8011cfc:	4632      	mov	r2, r6
 8011cfe:	463b      	mov	r3, r7
 8011d00:	4628      	mov	r0, r5
 8011d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d06:	f000 b8f7 	b.w	8011ef8 <_write_r>

08011d0a <__sseek>:
 8011d0a:	b510      	push	{r4, lr}
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d12:	f000 f8cd 	bl	8011eb0 <_lseek_r>
 8011d16:	1c43      	adds	r3, r0, #1
 8011d18:	89a3      	ldrh	r3, [r4, #12]
 8011d1a:	bf15      	itete	ne
 8011d1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d26:	81a3      	strheq	r3, [r4, #12]
 8011d28:	bf18      	it	ne
 8011d2a:	81a3      	strhne	r3, [r4, #12]
 8011d2c:	bd10      	pop	{r4, pc}

08011d2e <__sclose>:
 8011d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d32:	f000 b8ad 	b.w	8011e90 <_close_r>

08011d36 <__swbuf_r>:
 8011d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d38:	460e      	mov	r6, r1
 8011d3a:	4614      	mov	r4, r2
 8011d3c:	4605      	mov	r5, r0
 8011d3e:	b118      	cbz	r0, 8011d48 <__swbuf_r+0x12>
 8011d40:	6a03      	ldr	r3, [r0, #32]
 8011d42:	b90b      	cbnz	r3, 8011d48 <__swbuf_r+0x12>
 8011d44:	f7ff ff0e 	bl	8011b64 <__sinit>
 8011d48:	69a3      	ldr	r3, [r4, #24]
 8011d4a:	60a3      	str	r3, [r4, #8]
 8011d4c:	89a3      	ldrh	r3, [r4, #12]
 8011d4e:	071a      	lsls	r2, r3, #28
 8011d50:	d501      	bpl.n	8011d56 <__swbuf_r+0x20>
 8011d52:	6923      	ldr	r3, [r4, #16]
 8011d54:	b943      	cbnz	r3, 8011d68 <__swbuf_r+0x32>
 8011d56:	4621      	mov	r1, r4
 8011d58:	4628      	mov	r0, r5
 8011d5a:	f000 f82b 	bl	8011db4 <__swsetup_r>
 8011d5e:	b118      	cbz	r0, 8011d68 <__swbuf_r+0x32>
 8011d60:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011d64:	4638      	mov	r0, r7
 8011d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	6922      	ldr	r2, [r4, #16]
 8011d6c:	1a98      	subs	r0, r3, r2
 8011d6e:	6963      	ldr	r3, [r4, #20]
 8011d70:	b2f6      	uxtb	r6, r6
 8011d72:	4283      	cmp	r3, r0
 8011d74:	4637      	mov	r7, r6
 8011d76:	dc05      	bgt.n	8011d84 <__swbuf_r+0x4e>
 8011d78:	4621      	mov	r1, r4
 8011d7a:	4628      	mov	r0, r5
 8011d7c:	f000 fd76 	bl	801286c <_fflush_r>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	d1ed      	bne.n	8011d60 <__swbuf_r+0x2a>
 8011d84:	68a3      	ldr	r3, [r4, #8]
 8011d86:	3b01      	subs	r3, #1
 8011d88:	60a3      	str	r3, [r4, #8]
 8011d8a:	6823      	ldr	r3, [r4, #0]
 8011d8c:	1c5a      	adds	r2, r3, #1
 8011d8e:	6022      	str	r2, [r4, #0]
 8011d90:	701e      	strb	r6, [r3, #0]
 8011d92:	6962      	ldr	r2, [r4, #20]
 8011d94:	1c43      	adds	r3, r0, #1
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d004      	beq.n	8011da4 <__swbuf_r+0x6e>
 8011d9a:	89a3      	ldrh	r3, [r4, #12]
 8011d9c:	07db      	lsls	r3, r3, #31
 8011d9e:	d5e1      	bpl.n	8011d64 <__swbuf_r+0x2e>
 8011da0:	2e0a      	cmp	r6, #10
 8011da2:	d1df      	bne.n	8011d64 <__swbuf_r+0x2e>
 8011da4:	4621      	mov	r1, r4
 8011da6:	4628      	mov	r0, r5
 8011da8:	f000 fd60 	bl	801286c <_fflush_r>
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d0d9      	beq.n	8011d64 <__swbuf_r+0x2e>
 8011db0:	e7d6      	b.n	8011d60 <__swbuf_r+0x2a>
	...

08011db4 <__swsetup_r>:
 8011db4:	b538      	push	{r3, r4, r5, lr}
 8011db6:	4b29      	ldr	r3, [pc, #164]	@ (8011e5c <__swsetup_r+0xa8>)
 8011db8:	4605      	mov	r5, r0
 8011dba:	6818      	ldr	r0, [r3, #0]
 8011dbc:	460c      	mov	r4, r1
 8011dbe:	b118      	cbz	r0, 8011dc8 <__swsetup_r+0x14>
 8011dc0:	6a03      	ldr	r3, [r0, #32]
 8011dc2:	b90b      	cbnz	r3, 8011dc8 <__swsetup_r+0x14>
 8011dc4:	f7ff fece 	bl	8011b64 <__sinit>
 8011dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dcc:	0719      	lsls	r1, r3, #28
 8011dce:	d422      	bmi.n	8011e16 <__swsetup_r+0x62>
 8011dd0:	06da      	lsls	r2, r3, #27
 8011dd2:	d407      	bmi.n	8011de4 <__swsetup_r+0x30>
 8011dd4:	2209      	movs	r2, #9
 8011dd6:	602a      	str	r2, [r5, #0]
 8011dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ddc:	81a3      	strh	r3, [r4, #12]
 8011dde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011de2:	e033      	b.n	8011e4c <__swsetup_r+0x98>
 8011de4:	0758      	lsls	r0, r3, #29
 8011de6:	d512      	bpl.n	8011e0e <__swsetup_r+0x5a>
 8011de8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011dea:	b141      	cbz	r1, 8011dfe <__swsetup_r+0x4a>
 8011dec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011df0:	4299      	cmp	r1, r3
 8011df2:	d002      	beq.n	8011dfa <__swsetup_r+0x46>
 8011df4:	4628      	mov	r0, r5
 8011df6:	f000 f8e5 	bl	8011fc4 <_free_r>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8011dfe:	89a3      	ldrh	r3, [r4, #12]
 8011e00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011e04:	81a3      	strh	r3, [r4, #12]
 8011e06:	2300      	movs	r3, #0
 8011e08:	6063      	str	r3, [r4, #4]
 8011e0a:	6923      	ldr	r3, [r4, #16]
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	f043 0308 	orr.w	r3, r3, #8
 8011e14:	81a3      	strh	r3, [r4, #12]
 8011e16:	6923      	ldr	r3, [r4, #16]
 8011e18:	b94b      	cbnz	r3, 8011e2e <__swsetup_r+0x7a>
 8011e1a:	89a3      	ldrh	r3, [r4, #12]
 8011e1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e24:	d003      	beq.n	8011e2e <__swsetup_r+0x7a>
 8011e26:	4621      	mov	r1, r4
 8011e28:	4628      	mov	r0, r5
 8011e2a:	f000 fd7f 	bl	801292c <__smakebuf_r>
 8011e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e32:	f013 0201 	ands.w	r2, r3, #1
 8011e36:	d00a      	beq.n	8011e4e <__swsetup_r+0x9a>
 8011e38:	2200      	movs	r2, #0
 8011e3a:	60a2      	str	r2, [r4, #8]
 8011e3c:	6962      	ldr	r2, [r4, #20]
 8011e3e:	4252      	negs	r2, r2
 8011e40:	61a2      	str	r2, [r4, #24]
 8011e42:	6922      	ldr	r2, [r4, #16]
 8011e44:	b942      	cbnz	r2, 8011e58 <__swsetup_r+0xa4>
 8011e46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e4a:	d1c5      	bne.n	8011dd8 <__swsetup_r+0x24>
 8011e4c:	bd38      	pop	{r3, r4, r5, pc}
 8011e4e:	0799      	lsls	r1, r3, #30
 8011e50:	bf58      	it	pl
 8011e52:	6962      	ldrpl	r2, [r4, #20]
 8011e54:	60a2      	str	r2, [r4, #8]
 8011e56:	e7f4      	b.n	8011e42 <__swsetup_r+0x8e>
 8011e58:	2000      	movs	r0, #0
 8011e5a:	e7f7      	b.n	8011e4c <__swsetup_r+0x98>
 8011e5c:	2400003c 	.word	0x2400003c

08011e60 <memcmp>:
 8011e60:	b510      	push	{r4, lr}
 8011e62:	3901      	subs	r1, #1
 8011e64:	4402      	add	r2, r0
 8011e66:	4290      	cmp	r0, r2
 8011e68:	d101      	bne.n	8011e6e <memcmp+0xe>
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	e005      	b.n	8011e7a <memcmp+0x1a>
 8011e6e:	7803      	ldrb	r3, [r0, #0]
 8011e70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011e74:	42a3      	cmp	r3, r4
 8011e76:	d001      	beq.n	8011e7c <memcmp+0x1c>
 8011e78:	1b18      	subs	r0, r3, r4
 8011e7a:	bd10      	pop	{r4, pc}
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	e7f2      	b.n	8011e66 <memcmp+0x6>

08011e80 <memset>:
 8011e80:	4402      	add	r2, r0
 8011e82:	4603      	mov	r3, r0
 8011e84:	4293      	cmp	r3, r2
 8011e86:	d100      	bne.n	8011e8a <memset+0xa>
 8011e88:	4770      	bx	lr
 8011e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8011e8e:	e7f9      	b.n	8011e84 <memset+0x4>

08011e90 <_close_r>:
 8011e90:	b538      	push	{r3, r4, r5, lr}
 8011e92:	4d06      	ldr	r5, [pc, #24]	@ (8011eac <_close_r+0x1c>)
 8011e94:	2300      	movs	r3, #0
 8011e96:	4604      	mov	r4, r0
 8011e98:	4608      	mov	r0, r1
 8011e9a:	602b      	str	r3, [r5, #0]
 8011e9c:	f7ee ff8e 	bl	8000dbc <_close>
 8011ea0:	1c43      	adds	r3, r0, #1
 8011ea2:	d102      	bne.n	8011eaa <_close_r+0x1a>
 8011ea4:	682b      	ldr	r3, [r5, #0]
 8011ea6:	b103      	cbz	r3, 8011eaa <_close_r+0x1a>
 8011ea8:	6023      	str	r3, [r4, #0]
 8011eaa:	bd38      	pop	{r3, r4, r5, pc}
 8011eac:	24007de0 	.word	0x24007de0

08011eb0 <_lseek_r>:
 8011eb0:	b538      	push	{r3, r4, r5, lr}
 8011eb2:	4d07      	ldr	r5, [pc, #28]	@ (8011ed0 <_lseek_r+0x20>)
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	4608      	mov	r0, r1
 8011eb8:	4611      	mov	r1, r2
 8011eba:	2200      	movs	r2, #0
 8011ebc:	602a      	str	r2, [r5, #0]
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	f7ee ffa3 	bl	8000e0a <_lseek>
 8011ec4:	1c43      	adds	r3, r0, #1
 8011ec6:	d102      	bne.n	8011ece <_lseek_r+0x1e>
 8011ec8:	682b      	ldr	r3, [r5, #0]
 8011eca:	b103      	cbz	r3, 8011ece <_lseek_r+0x1e>
 8011ecc:	6023      	str	r3, [r4, #0]
 8011ece:	bd38      	pop	{r3, r4, r5, pc}
 8011ed0:	24007de0 	.word	0x24007de0

08011ed4 <_read_r>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	4d07      	ldr	r5, [pc, #28]	@ (8011ef4 <_read_r+0x20>)
 8011ed8:	4604      	mov	r4, r0
 8011eda:	4608      	mov	r0, r1
 8011edc:	4611      	mov	r1, r2
 8011ede:	2200      	movs	r2, #0
 8011ee0:	602a      	str	r2, [r5, #0]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	f7ee ff4d 	bl	8000d82 <_read>
 8011ee8:	1c43      	adds	r3, r0, #1
 8011eea:	d102      	bne.n	8011ef2 <_read_r+0x1e>
 8011eec:	682b      	ldr	r3, [r5, #0]
 8011eee:	b103      	cbz	r3, 8011ef2 <_read_r+0x1e>
 8011ef0:	6023      	str	r3, [r4, #0]
 8011ef2:	bd38      	pop	{r3, r4, r5, pc}
 8011ef4:	24007de0 	.word	0x24007de0

08011ef8 <_write_r>:
 8011ef8:	b538      	push	{r3, r4, r5, lr}
 8011efa:	4d07      	ldr	r5, [pc, #28]	@ (8011f18 <_write_r+0x20>)
 8011efc:	4604      	mov	r4, r0
 8011efe:	4608      	mov	r0, r1
 8011f00:	4611      	mov	r1, r2
 8011f02:	2200      	movs	r2, #0
 8011f04:	602a      	str	r2, [r5, #0]
 8011f06:	461a      	mov	r2, r3
 8011f08:	f7ee fc48 	bl	800079c <_write>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d102      	bne.n	8011f16 <_write_r+0x1e>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	b103      	cbz	r3, 8011f16 <_write_r+0x1e>
 8011f14:	6023      	str	r3, [r4, #0]
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	24007de0 	.word	0x24007de0

08011f1c <__libc_init_array>:
 8011f1c:	b570      	push	{r4, r5, r6, lr}
 8011f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8011f54 <__libc_init_array+0x38>)
 8011f20:	4c0d      	ldr	r4, [pc, #52]	@ (8011f58 <__libc_init_array+0x3c>)
 8011f22:	1b64      	subs	r4, r4, r5
 8011f24:	10a4      	asrs	r4, r4, #2
 8011f26:	2600      	movs	r6, #0
 8011f28:	42a6      	cmp	r6, r4
 8011f2a:	d109      	bne.n	8011f40 <__libc_init_array+0x24>
 8011f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8011f5c <__libc_init_array+0x40>)
 8011f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8011f60 <__libc_init_array+0x44>)
 8011f30:	f000 fdb6 	bl	8012aa0 <_init>
 8011f34:	1b64      	subs	r4, r4, r5
 8011f36:	10a4      	asrs	r4, r4, #2
 8011f38:	2600      	movs	r6, #0
 8011f3a:	42a6      	cmp	r6, r4
 8011f3c:	d105      	bne.n	8011f4a <__libc_init_array+0x2e>
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}
 8011f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f44:	4798      	blx	r3
 8011f46:	3601      	adds	r6, #1
 8011f48:	e7ee      	b.n	8011f28 <__libc_init_array+0xc>
 8011f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f4e:	4798      	blx	r3
 8011f50:	3601      	adds	r6, #1
 8011f52:	e7f2      	b.n	8011f3a <__libc_init_array+0x1e>
 8011f54:	08015a24 	.word	0x08015a24
 8011f58:	08015a24 	.word	0x08015a24
 8011f5c:	08015a24 	.word	0x08015a24
 8011f60:	08015a28 	.word	0x08015a28

08011f64 <__retarget_lock_init_recursive>:
 8011f64:	4770      	bx	lr

08011f66 <__retarget_lock_acquire_recursive>:
 8011f66:	4770      	bx	lr

08011f68 <__retarget_lock_release_recursive>:
 8011f68:	4770      	bx	lr

08011f6a <memcpy>:
 8011f6a:	440a      	add	r2, r1
 8011f6c:	4291      	cmp	r1, r2
 8011f6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011f72:	d100      	bne.n	8011f76 <memcpy+0xc>
 8011f74:	4770      	bx	lr
 8011f76:	b510      	push	{r4, lr}
 8011f78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f80:	4291      	cmp	r1, r2
 8011f82:	d1f9      	bne.n	8011f78 <memcpy+0xe>
 8011f84:	bd10      	pop	{r4, pc}
	...

08011f88 <__assert_func>:
 8011f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f8a:	4614      	mov	r4, r2
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	4b09      	ldr	r3, [pc, #36]	@ (8011fb4 <__assert_func+0x2c>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	4605      	mov	r5, r0
 8011f94:	68d8      	ldr	r0, [r3, #12]
 8011f96:	b954      	cbnz	r4, 8011fae <__assert_func+0x26>
 8011f98:	4b07      	ldr	r3, [pc, #28]	@ (8011fb8 <__assert_func+0x30>)
 8011f9a:	461c      	mov	r4, r3
 8011f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fa0:	9100      	str	r1, [sp, #0]
 8011fa2:	462b      	mov	r3, r5
 8011fa4:	4905      	ldr	r1, [pc, #20]	@ (8011fbc <__assert_func+0x34>)
 8011fa6:	f000 fc89 	bl	80128bc <fiprintf>
 8011faa:	f000 fd2d 	bl	8012a08 <abort>
 8011fae:	4b04      	ldr	r3, [pc, #16]	@ (8011fc0 <__assert_func+0x38>)
 8011fb0:	e7f4      	b.n	8011f9c <__assert_func+0x14>
 8011fb2:	bf00      	nop
 8011fb4:	2400003c 	.word	0x2400003c
 8011fb8:	080159e6 	.word	0x080159e6
 8011fbc:	080159b8 	.word	0x080159b8
 8011fc0:	080159ab 	.word	0x080159ab

08011fc4 <_free_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4605      	mov	r5, r0
 8011fc8:	2900      	cmp	r1, #0
 8011fca:	d041      	beq.n	8012050 <_free_r+0x8c>
 8011fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fd0:	1f0c      	subs	r4, r1, #4
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	bfb8      	it	lt
 8011fd6:	18e4      	addlt	r4, r4, r3
 8011fd8:	f000 f8e8 	bl	80121ac <__malloc_lock>
 8011fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8012054 <_free_r+0x90>)
 8011fde:	6813      	ldr	r3, [r2, #0]
 8011fe0:	b933      	cbnz	r3, 8011ff0 <_free_r+0x2c>
 8011fe2:	6063      	str	r3, [r4, #4]
 8011fe4:	6014      	str	r4, [r2, #0]
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fec:	f000 b8e4 	b.w	80121b8 <__malloc_unlock>
 8011ff0:	42a3      	cmp	r3, r4
 8011ff2:	d908      	bls.n	8012006 <_free_r+0x42>
 8011ff4:	6820      	ldr	r0, [r4, #0]
 8011ff6:	1821      	adds	r1, r4, r0
 8011ff8:	428b      	cmp	r3, r1
 8011ffa:	bf01      	itttt	eq
 8011ffc:	6819      	ldreq	r1, [r3, #0]
 8011ffe:	685b      	ldreq	r3, [r3, #4]
 8012000:	1809      	addeq	r1, r1, r0
 8012002:	6021      	streq	r1, [r4, #0]
 8012004:	e7ed      	b.n	8011fe2 <_free_r+0x1e>
 8012006:	461a      	mov	r2, r3
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	b10b      	cbz	r3, 8012010 <_free_r+0x4c>
 801200c:	42a3      	cmp	r3, r4
 801200e:	d9fa      	bls.n	8012006 <_free_r+0x42>
 8012010:	6811      	ldr	r1, [r2, #0]
 8012012:	1850      	adds	r0, r2, r1
 8012014:	42a0      	cmp	r0, r4
 8012016:	d10b      	bne.n	8012030 <_free_r+0x6c>
 8012018:	6820      	ldr	r0, [r4, #0]
 801201a:	4401      	add	r1, r0
 801201c:	1850      	adds	r0, r2, r1
 801201e:	4283      	cmp	r3, r0
 8012020:	6011      	str	r1, [r2, #0]
 8012022:	d1e0      	bne.n	8011fe6 <_free_r+0x22>
 8012024:	6818      	ldr	r0, [r3, #0]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	6053      	str	r3, [r2, #4]
 801202a:	4408      	add	r0, r1
 801202c:	6010      	str	r0, [r2, #0]
 801202e:	e7da      	b.n	8011fe6 <_free_r+0x22>
 8012030:	d902      	bls.n	8012038 <_free_r+0x74>
 8012032:	230c      	movs	r3, #12
 8012034:	602b      	str	r3, [r5, #0]
 8012036:	e7d6      	b.n	8011fe6 <_free_r+0x22>
 8012038:	6820      	ldr	r0, [r4, #0]
 801203a:	1821      	adds	r1, r4, r0
 801203c:	428b      	cmp	r3, r1
 801203e:	bf04      	itt	eq
 8012040:	6819      	ldreq	r1, [r3, #0]
 8012042:	685b      	ldreq	r3, [r3, #4]
 8012044:	6063      	str	r3, [r4, #4]
 8012046:	bf04      	itt	eq
 8012048:	1809      	addeq	r1, r1, r0
 801204a:	6021      	streq	r1, [r4, #0]
 801204c:	6054      	str	r4, [r2, #4]
 801204e:	e7ca      	b.n	8011fe6 <_free_r+0x22>
 8012050:	bd38      	pop	{r3, r4, r5, pc}
 8012052:	bf00      	nop
 8012054:	24007dec 	.word	0x24007dec

08012058 <malloc>:
 8012058:	4b02      	ldr	r3, [pc, #8]	@ (8012064 <malloc+0xc>)
 801205a:	4601      	mov	r1, r0
 801205c:	6818      	ldr	r0, [r3, #0]
 801205e:	f000 b825 	b.w	80120ac <_malloc_r>
 8012062:	bf00      	nop
 8012064:	2400003c 	.word	0x2400003c

08012068 <sbrk_aligned>:
 8012068:	b570      	push	{r4, r5, r6, lr}
 801206a:	4e0f      	ldr	r6, [pc, #60]	@ (80120a8 <sbrk_aligned+0x40>)
 801206c:	460c      	mov	r4, r1
 801206e:	6831      	ldr	r1, [r6, #0]
 8012070:	4605      	mov	r5, r0
 8012072:	b911      	cbnz	r1, 801207a <sbrk_aligned+0x12>
 8012074:	f000 fcb8 	bl	80129e8 <_sbrk_r>
 8012078:	6030      	str	r0, [r6, #0]
 801207a:	4621      	mov	r1, r4
 801207c:	4628      	mov	r0, r5
 801207e:	f000 fcb3 	bl	80129e8 <_sbrk_r>
 8012082:	1c43      	adds	r3, r0, #1
 8012084:	d103      	bne.n	801208e <sbrk_aligned+0x26>
 8012086:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801208a:	4620      	mov	r0, r4
 801208c:	bd70      	pop	{r4, r5, r6, pc}
 801208e:	1cc4      	adds	r4, r0, #3
 8012090:	f024 0403 	bic.w	r4, r4, #3
 8012094:	42a0      	cmp	r0, r4
 8012096:	d0f8      	beq.n	801208a <sbrk_aligned+0x22>
 8012098:	1a21      	subs	r1, r4, r0
 801209a:	4628      	mov	r0, r5
 801209c:	f000 fca4 	bl	80129e8 <_sbrk_r>
 80120a0:	3001      	adds	r0, #1
 80120a2:	d1f2      	bne.n	801208a <sbrk_aligned+0x22>
 80120a4:	e7ef      	b.n	8012086 <sbrk_aligned+0x1e>
 80120a6:	bf00      	nop
 80120a8:	24007de8 	.word	0x24007de8

080120ac <_malloc_r>:
 80120ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120b0:	1ccd      	adds	r5, r1, #3
 80120b2:	f025 0503 	bic.w	r5, r5, #3
 80120b6:	3508      	adds	r5, #8
 80120b8:	2d0c      	cmp	r5, #12
 80120ba:	bf38      	it	cc
 80120bc:	250c      	movcc	r5, #12
 80120be:	2d00      	cmp	r5, #0
 80120c0:	4606      	mov	r6, r0
 80120c2:	db01      	blt.n	80120c8 <_malloc_r+0x1c>
 80120c4:	42a9      	cmp	r1, r5
 80120c6:	d904      	bls.n	80120d2 <_malloc_r+0x26>
 80120c8:	230c      	movs	r3, #12
 80120ca:	6033      	str	r3, [r6, #0]
 80120cc:	2000      	movs	r0, #0
 80120ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121a8 <_malloc_r+0xfc>
 80120d6:	f000 f869 	bl	80121ac <__malloc_lock>
 80120da:	f8d8 3000 	ldr.w	r3, [r8]
 80120de:	461c      	mov	r4, r3
 80120e0:	bb44      	cbnz	r4, 8012134 <_malloc_r+0x88>
 80120e2:	4629      	mov	r1, r5
 80120e4:	4630      	mov	r0, r6
 80120e6:	f7ff ffbf 	bl	8012068 <sbrk_aligned>
 80120ea:	1c43      	adds	r3, r0, #1
 80120ec:	4604      	mov	r4, r0
 80120ee:	d158      	bne.n	80121a2 <_malloc_r+0xf6>
 80120f0:	f8d8 4000 	ldr.w	r4, [r8]
 80120f4:	4627      	mov	r7, r4
 80120f6:	2f00      	cmp	r7, #0
 80120f8:	d143      	bne.n	8012182 <_malloc_r+0xd6>
 80120fa:	2c00      	cmp	r4, #0
 80120fc:	d04b      	beq.n	8012196 <_malloc_r+0xea>
 80120fe:	6823      	ldr	r3, [r4, #0]
 8012100:	4639      	mov	r1, r7
 8012102:	4630      	mov	r0, r6
 8012104:	eb04 0903 	add.w	r9, r4, r3
 8012108:	f000 fc6e 	bl	80129e8 <_sbrk_r>
 801210c:	4581      	cmp	r9, r0
 801210e:	d142      	bne.n	8012196 <_malloc_r+0xea>
 8012110:	6821      	ldr	r1, [r4, #0]
 8012112:	1a6d      	subs	r5, r5, r1
 8012114:	4629      	mov	r1, r5
 8012116:	4630      	mov	r0, r6
 8012118:	f7ff ffa6 	bl	8012068 <sbrk_aligned>
 801211c:	3001      	adds	r0, #1
 801211e:	d03a      	beq.n	8012196 <_malloc_r+0xea>
 8012120:	6823      	ldr	r3, [r4, #0]
 8012122:	442b      	add	r3, r5
 8012124:	6023      	str	r3, [r4, #0]
 8012126:	f8d8 3000 	ldr.w	r3, [r8]
 801212a:	685a      	ldr	r2, [r3, #4]
 801212c:	bb62      	cbnz	r2, 8012188 <_malloc_r+0xdc>
 801212e:	f8c8 7000 	str.w	r7, [r8]
 8012132:	e00f      	b.n	8012154 <_malloc_r+0xa8>
 8012134:	6822      	ldr	r2, [r4, #0]
 8012136:	1b52      	subs	r2, r2, r5
 8012138:	d420      	bmi.n	801217c <_malloc_r+0xd0>
 801213a:	2a0b      	cmp	r2, #11
 801213c:	d917      	bls.n	801216e <_malloc_r+0xc2>
 801213e:	1961      	adds	r1, r4, r5
 8012140:	42a3      	cmp	r3, r4
 8012142:	6025      	str	r5, [r4, #0]
 8012144:	bf18      	it	ne
 8012146:	6059      	strne	r1, [r3, #4]
 8012148:	6863      	ldr	r3, [r4, #4]
 801214a:	bf08      	it	eq
 801214c:	f8c8 1000 	streq.w	r1, [r8]
 8012150:	5162      	str	r2, [r4, r5]
 8012152:	604b      	str	r3, [r1, #4]
 8012154:	4630      	mov	r0, r6
 8012156:	f000 f82f 	bl	80121b8 <__malloc_unlock>
 801215a:	f104 000b 	add.w	r0, r4, #11
 801215e:	1d23      	adds	r3, r4, #4
 8012160:	f020 0007 	bic.w	r0, r0, #7
 8012164:	1ac2      	subs	r2, r0, r3
 8012166:	bf1c      	itt	ne
 8012168:	1a1b      	subne	r3, r3, r0
 801216a:	50a3      	strne	r3, [r4, r2]
 801216c:	e7af      	b.n	80120ce <_malloc_r+0x22>
 801216e:	6862      	ldr	r2, [r4, #4]
 8012170:	42a3      	cmp	r3, r4
 8012172:	bf0c      	ite	eq
 8012174:	f8c8 2000 	streq.w	r2, [r8]
 8012178:	605a      	strne	r2, [r3, #4]
 801217a:	e7eb      	b.n	8012154 <_malloc_r+0xa8>
 801217c:	4623      	mov	r3, r4
 801217e:	6864      	ldr	r4, [r4, #4]
 8012180:	e7ae      	b.n	80120e0 <_malloc_r+0x34>
 8012182:	463c      	mov	r4, r7
 8012184:	687f      	ldr	r7, [r7, #4]
 8012186:	e7b6      	b.n	80120f6 <_malloc_r+0x4a>
 8012188:	461a      	mov	r2, r3
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	42a3      	cmp	r3, r4
 801218e:	d1fb      	bne.n	8012188 <_malloc_r+0xdc>
 8012190:	2300      	movs	r3, #0
 8012192:	6053      	str	r3, [r2, #4]
 8012194:	e7de      	b.n	8012154 <_malloc_r+0xa8>
 8012196:	230c      	movs	r3, #12
 8012198:	6033      	str	r3, [r6, #0]
 801219a:	4630      	mov	r0, r6
 801219c:	f000 f80c 	bl	80121b8 <__malloc_unlock>
 80121a0:	e794      	b.n	80120cc <_malloc_r+0x20>
 80121a2:	6005      	str	r5, [r0, #0]
 80121a4:	e7d6      	b.n	8012154 <_malloc_r+0xa8>
 80121a6:	bf00      	nop
 80121a8:	24007dec 	.word	0x24007dec

080121ac <__malloc_lock>:
 80121ac:	4801      	ldr	r0, [pc, #4]	@ (80121b4 <__malloc_lock+0x8>)
 80121ae:	f7ff beda 	b.w	8011f66 <__retarget_lock_acquire_recursive>
 80121b2:	bf00      	nop
 80121b4:	24007de4 	.word	0x24007de4

080121b8 <__malloc_unlock>:
 80121b8:	4801      	ldr	r0, [pc, #4]	@ (80121c0 <__malloc_unlock+0x8>)
 80121ba:	f7ff bed5 	b.w	8011f68 <__retarget_lock_release_recursive>
 80121be:	bf00      	nop
 80121c0:	24007de4 	.word	0x24007de4

080121c4 <__sfputc_r>:
 80121c4:	6893      	ldr	r3, [r2, #8]
 80121c6:	3b01      	subs	r3, #1
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	b410      	push	{r4}
 80121cc:	6093      	str	r3, [r2, #8]
 80121ce:	da08      	bge.n	80121e2 <__sfputc_r+0x1e>
 80121d0:	6994      	ldr	r4, [r2, #24]
 80121d2:	42a3      	cmp	r3, r4
 80121d4:	db01      	blt.n	80121da <__sfputc_r+0x16>
 80121d6:	290a      	cmp	r1, #10
 80121d8:	d103      	bne.n	80121e2 <__sfputc_r+0x1e>
 80121da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121de:	f7ff bdaa 	b.w	8011d36 <__swbuf_r>
 80121e2:	6813      	ldr	r3, [r2, #0]
 80121e4:	1c58      	adds	r0, r3, #1
 80121e6:	6010      	str	r0, [r2, #0]
 80121e8:	7019      	strb	r1, [r3, #0]
 80121ea:	4608      	mov	r0, r1
 80121ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121f0:	4770      	bx	lr

080121f2 <__sfputs_r>:
 80121f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121f4:	4606      	mov	r6, r0
 80121f6:	460f      	mov	r7, r1
 80121f8:	4614      	mov	r4, r2
 80121fa:	18d5      	adds	r5, r2, r3
 80121fc:	42ac      	cmp	r4, r5
 80121fe:	d101      	bne.n	8012204 <__sfputs_r+0x12>
 8012200:	2000      	movs	r0, #0
 8012202:	e007      	b.n	8012214 <__sfputs_r+0x22>
 8012204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012208:	463a      	mov	r2, r7
 801220a:	4630      	mov	r0, r6
 801220c:	f7ff ffda 	bl	80121c4 <__sfputc_r>
 8012210:	1c43      	adds	r3, r0, #1
 8012212:	d1f3      	bne.n	80121fc <__sfputs_r+0xa>
 8012214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012218 <_vfiprintf_r>:
 8012218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801221c:	460d      	mov	r5, r1
 801221e:	b09d      	sub	sp, #116	@ 0x74
 8012220:	4614      	mov	r4, r2
 8012222:	4698      	mov	r8, r3
 8012224:	4606      	mov	r6, r0
 8012226:	b118      	cbz	r0, 8012230 <_vfiprintf_r+0x18>
 8012228:	6a03      	ldr	r3, [r0, #32]
 801222a:	b90b      	cbnz	r3, 8012230 <_vfiprintf_r+0x18>
 801222c:	f7ff fc9a 	bl	8011b64 <__sinit>
 8012230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012232:	07d9      	lsls	r1, r3, #31
 8012234:	d405      	bmi.n	8012242 <_vfiprintf_r+0x2a>
 8012236:	89ab      	ldrh	r3, [r5, #12]
 8012238:	059a      	lsls	r2, r3, #22
 801223a:	d402      	bmi.n	8012242 <_vfiprintf_r+0x2a>
 801223c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801223e:	f7ff fe92 	bl	8011f66 <__retarget_lock_acquire_recursive>
 8012242:	89ab      	ldrh	r3, [r5, #12]
 8012244:	071b      	lsls	r3, r3, #28
 8012246:	d501      	bpl.n	801224c <_vfiprintf_r+0x34>
 8012248:	692b      	ldr	r3, [r5, #16]
 801224a:	b99b      	cbnz	r3, 8012274 <_vfiprintf_r+0x5c>
 801224c:	4629      	mov	r1, r5
 801224e:	4630      	mov	r0, r6
 8012250:	f7ff fdb0 	bl	8011db4 <__swsetup_r>
 8012254:	b170      	cbz	r0, 8012274 <_vfiprintf_r+0x5c>
 8012256:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012258:	07dc      	lsls	r4, r3, #31
 801225a:	d504      	bpl.n	8012266 <_vfiprintf_r+0x4e>
 801225c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012260:	b01d      	add	sp, #116	@ 0x74
 8012262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012266:	89ab      	ldrh	r3, [r5, #12]
 8012268:	0598      	lsls	r0, r3, #22
 801226a:	d4f7      	bmi.n	801225c <_vfiprintf_r+0x44>
 801226c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801226e:	f7ff fe7b 	bl	8011f68 <__retarget_lock_release_recursive>
 8012272:	e7f3      	b.n	801225c <_vfiprintf_r+0x44>
 8012274:	2300      	movs	r3, #0
 8012276:	9309      	str	r3, [sp, #36]	@ 0x24
 8012278:	2320      	movs	r3, #32
 801227a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801227e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012282:	2330      	movs	r3, #48	@ 0x30
 8012284:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012434 <_vfiprintf_r+0x21c>
 8012288:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801228c:	f04f 0901 	mov.w	r9, #1
 8012290:	4623      	mov	r3, r4
 8012292:	469a      	mov	sl, r3
 8012294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012298:	b10a      	cbz	r2, 801229e <_vfiprintf_r+0x86>
 801229a:	2a25      	cmp	r2, #37	@ 0x25
 801229c:	d1f9      	bne.n	8012292 <_vfiprintf_r+0x7a>
 801229e:	ebba 0b04 	subs.w	fp, sl, r4
 80122a2:	d00b      	beq.n	80122bc <_vfiprintf_r+0xa4>
 80122a4:	465b      	mov	r3, fp
 80122a6:	4622      	mov	r2, r4
 80122a8:	4629      	mov	r1, r5
 80122aa:	4630      	mov	r0, r6
 80122ac:	f7ff ffa1 	bl	80121f2 <__sfputs_r>
 80122b0:	3001      	adds	r0, #1
 80122b2:	f000 80a7 	beq.w	8012404 <_vfiprintf_r+0x1ec>
 80122b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122b8:	445a      	add	r2, fp
 80122ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80122bc:	f89a 3000 	ldrb.w	r3, [sl]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f000 809f 	beq.w	8012404 <_vfiprintf_r+0x1ec>
 80122c6:	2300      	movs	r3, #0
 80122c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80122cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122d0:	f10a 0a01 	add.w	sl, sl, #1
 80122d4:	9304      	str	r3, [sp, #16]
 80122d6:	9307      	str	r3, [sp, #28]
 80122d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80122de:	4654      	mov	r4, sl
 80122e0:	2205      	movs	r2, #5
 80122e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122e6:	4853      	ldr	r0, [pc, #332]	@ (8012434 <_vfiprintf_r+0x21c>)
 80122e8:	f7ed fffa 	bl	80002e0 <memchr>
 80122ec:	9a04      	ldr	r2, [sp, #16]
 80122ee:	b9d8      	cbnz	r0, 8012328 <_vfiprintf_r+0x110>
 80122f0:	06d1      	lsls	r1, r2, #27
 80122f2:	bf44      	itt	mi
 80122f4:	2320      	movmi	r3, #32
 80122f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122fa:	0713      	lsls	r3, r2, #28
 80122fc:	bf44      	itt	mi
 80122fe:	232b      	movmi	r3, #43	@ 0x2b
 8012300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012304:	f89a 3000 	ldrb.w	r3, [sl]
 8012308:	2b2a      	cmp	r3, #42	@ 0x2a
 801230a:	d015      	beq.n	8012338 <_vfiprintf_r+0x120>
 801230c:	9a07      	ldr	r2, [sp, #28]
 801230e:	4654      	mov	r4, sl
 8012310:	2000      	movs	r0, #0
 8012312:	f04f 0c0a 	mov.w	ip, #10
 8012316:	4621      	mov	r1, r4
 8012318:	f811 3b01 	ldrb.w	r3, [r1], #1
 801231c:	3b30      	subs	r3, #48	@ 0x30
 801231e:	2b09      	cmp	r3, #9
 8012320:	d94b      	bls.n	80123ba <_vfiprintf_r+0x1a2>
 8012322:	b1b0      	cbz	r0, 8012352 <_vfiprintf_r+0x13a>
 8012324:	9207      	str	r2, [sp, #28]
 8012326:	e014      	b.n	8012352 <_vfiprintf_r+0x13a>
 8012328:	eba0 0308 	sub.w	r3, r0, r8
 801232c:	fa09 f303 	lsl.w	r3, r9, r3
 8012330:	4313      	orrs	r3, r2
 8012332:	9304      	str	r3, [sp, #16]
 8012334:	46a2      	mov	sl, r4
 8012336:	e7d2      	b.n	80122de <_vfiprintf_r+0xc6>
 8012338:	9b03      	ldr	r3, [sp, #12]
 801233a:	1d19      	adds	r1, r3, #4
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	9103      	str	r1, [sp, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	bfbb      	ittet	lt
 8012344:	425b      	neglt	r3, r3
 8012346:	f042 0202 	orrlt.w	r2, r2, #2
 801234a:	9307      	strge	r3, [sp, #28]
 801234c:	9307      	strlt	r3, [sp, #28]
 801234e:	bfb8      	it	lt
 8012350:	9204      	strlt	r2, [sp, #16]
 8012352:	7823      	ldrb	r3, [r4, #0]
 8012354:	2b2e      	cmp	r3, #46	@ 0x2e
 8012356:	d10a      	bne.n	801236e <_vfiprintf_r+0x156>
 8012358:	7863      	ldrb	r3, [r4, #1]
 801235a:	2b2a      	cmp	r3, #42	@ 0x2a
 801235c:	d132      	bne.n	80123c4 <_vfiprintf_r+0x1ac>
 801235e:	9b03      	ldr	r3, [sp, #12]
 8012360:	1d1a      	adds	r2, r3, #4
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	9203      	str	r2, [sp, #12]
 8012366:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801236a:	3402      	adds	r4, #2
 801236c:	9305      	str	r3, [sp, #20]
 801236e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012444 <_vfiprintf_r+0x22c>
 8012372:	7821      	ldrb	r1, [r4, #0]
 8012374:	2203      	movs	r2, #3
 8012376:	4650      	mov	r0, sl
 8012378:	f7ed ffb2 	bl	80002e0 <memchr>
 801237c:	b138      	cbz	r0, 801238e <_vfiprintf_r+0x176>
 801237e:	9b04      	ldr	r3, [sp, #16]
 8012380:	eba0 000a 	sub.w	r0, r0, sl
 8012384:	2240      	movs	r2, #64	@ 0x40
 8012386:	4082      	lsls	r2, r0
 8012388:	4313      	orrs	r3, r2
 801238a:	3401      	adds	r4, #1
 801238c:	9304      	str	r3, [sp, #16]
 801238e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012392:	4829      	ldr	r0, [pc, #164]	@ (8012438 <_vfiprintf_r+0x220>)
 8012394:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012398:	2206      	movs	r2, #6
 801239a:	f7ed ffa1 	bl	80002e0 <memchr>
 801239e:	2800      	cmp	r0, #0
 80123a0:	d03f      	beq.n	8012422 <_vfiprintf_r+0x20a>
 80123a2:	4b26      	ldr	r3, [pc, #152]	@ (801243c <_vfiprintf_r+0x224>)
 80123a4:	bb1b      	cbnz	r3, 80123ee <_vfiprintf_r+0x1d6>
 80123a6:	9b03      	ldr	r3, [sp, #12]
 80123a8:	3307      	adds	r3, #7
 80123aa:	f023 0307 	bic.w	r3, r3, #7
 80123ae:	3308      	adds	r3, #8
 80123b0:	9303      	str	r3, [sp, #12]
 80123b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123b4:	443b      	add	r3, r7
 80123b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80123b8:	e76a      	b.n	8012290 <_vfiprintf_r+0x78>
 80123ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80123be:	460c      	mov	r4, r1
 80123c0:	2001      	movs	r0, #1
 80123c2:	e7a8      	b.n	8012316 <_vfiprintf_r+0xfe>
 80123c4:	2300      	movs	r3, #0
 80123c6:	3401      	adds	r4, #1
 80123c8:	9305      	str	r3, [sp, #20]
 80123ca:	4619      	mov	r1, r3
 80123cc:	f04f 0c0a 	mov.w	ip, #10
 80123d0:	4620      	mov	r0, r4
 80123d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123d6:	3a30      	subs	r2, #48	@ 0x30
 80123d8:	2a09      	cmp	r2, #9
 80123da:	d903      	bls.n	80123e4 <_vfiprintf_r+0x1cc>
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d0c6      	beq.n	801236e <_vfiprintf_r+0x156>
 80123e0:	9105      	str	r1, [sp, #20]
 80123e2:	e7c4      	b.n	801236e <_vfiprintf_r+0x156>
 80123e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80123e8:	4604      	mov	r4, r0
 80123ea:	2301      	movs	r3, #1
 80123ec:	e7f0      	b.n	80123d0 <_vfiprintf_r+0x1b8>
 80123ee:	ab03      	add	r3, sp, #12
 80123f0:	9300      	str	r3, [sp, #0]
 80123f2:	462a      	mov	r2, r5
 80123f4:	4b12      	ldr	r3, [pc, #72]	@ (8012440 <_vfiprintf_r+0x228>)
 80123f6:	a904      	add	r1, sp, #16
 80123f8:	4630      	mov	r0, r6
 80123fa:	f3af 8000 	nop.w
 80123fe:	4607      	mov	r7, r0
 8012400:	1c78      	adds	r0, r7, #1
 8012402:	d1d6      	bne.n	80123b2 <_vfiprintf_r+0x19a>
 8012404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012406:	07d9      	lsls	r1, r3, #31
 8012408:	d405      	bmi.n	8012416 <_vfiprintf_r+0x1fe>
 801240a:	89ab      	ldrh	r3, [r5, #12]
 801240c:	059a      	lsls	r2, r3, #22
 801240e:	d402      	bmi.n	8012416 <_vfiprintf_r+0x1fe>
 8012410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012412:	f7ff fda9 	bl	8011f68 <__retarget_lock_release_recursive>
 8012416:	89ab      	ldrh	r3, [r5, #12]
 8012418:	065b      	lsls	r3, r3, #25
 801241a:	f53f af1f 	bmi.w	801225c <_vfiprintf_r+0x44>
 801241e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012420:	e71e      	b.n	8012260 <_vfiprintf_r+0x48>
 8012422:	ab03      	add	r3, sp, #12
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	462a      	mov	r2, r5
 8012428:	4b05      	ldr	r3, [pc, #20]	@ (8012440 <_vfiprintf_r+0x228>)
 801242a:	a904      	add	r1, sp, #16
 801242c:	4630      	mov	r0, r6
 801242e:	f000 f879 	bl	8012524 <_printf_i>
 8012432:	e7e4      	b.n	80123fe <_vfiprintf_r+0x1e6>
 8012434:	080159e7 	.word	0x080159e7
 8012438:	080159f1 	.word	0x080159f1
 801243c:	00000000 	.word	0x00000000
 8012440:	080121f3 	.word	0x080121f3
 8012444:	080159ed 	.word	0x080159ed

08012448 <_printf_common>:
 8012448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801244c:	4616      	mov	r6, r2
 801244e:	4698      	mov	r8, r3
 8012450:	688a      	ldr	r2, [r1, #8]
 8012452:	690b      	ldr	r3, [r1, #16]
 8012454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012458:	4293      	cmp	r3, r2
 801245a:	bfb8      	it	lt
 801245c:	4613      	movlt	r3, r2
 801245e:	6033      	str	r3, [r6, #0]
 8012460:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012464:	4607      	mov	r7, r0
 8012466:	460c      	mov	r4, r1
 8012468:	b10a      	cbz	r2, 801246e <_printf_common+0x26>
 801246a:	3301      	adds	r3, #1
 801246c:	6033      	str	r3, [r6, #0]
 801246e:	6823      	ldr	r3, [r4, #0]
 8012470:	0699      	lsls	r1, r3, #26
 8012472:	bf42      	ittt	mi
 8012474:	6833      	ldrmi	r3, [r6, #0]
 8012476:	3302      	addmi	r3, #2
 8012478:	6033      	strmi	r3, [r6, #0]
 801247a:	6825      	ldr	r5, [r4, #0]
 801247c:	f015 0506 	ands.w	r5, r5, #6
 8012480:	d106      	bne.n	8012490 <_printf_common+0x48>
 8012482:	f104 0a19 	add.w	sl, r4, #25
 8012486:	68e3      	ldr	r3, [r4, #12]
 8012488:	6832      	ldr	r2, [r6, #0]
 801248a:	1a9b      	subs	r3, r3, r2
 801248c:	42ab      	cmp	r3, r5
 801248e:	dc26      	bgt.n	80124de <_printf_common+0x96>
 8012490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012494:	6822      	ldr	r2, [r4, #0]
 8012496:	3b00      	subs	r3, #0
 8012498:	bf18      	it	ne
 801249a:	2301      	movne	r3, #1
 801249c:	0692      	lsls	r2, r2, #26
 801249e:	d42b      	bmi.n	80124f8 <_printf_common+0xb0>
 80124a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80124a4:	4641      	mov	r1, r8
 80124a6:	4638      	mov	r0, r7
 80124a8:	47c8      	blx	r9
 80124aa:	3001      	adds	r0, #1
 80124ac:	d01e      	beq.n	80124ec <_printf_common+0xa4>
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	6922      	ldr	r2, [r4, #16]
 80124b2:	f003 0306 	and.w	r3, r3, #6
 80124b6:	2b04      	cmp	r3, #4
 80124b8:	bf02      	ittt	eq
 80124ba:	68e5      	ldreq	r5, [r4, #12]
 80124bc:	6833      	ldreq	r3, [r6, #0]
 80124be:	1aed      	subeq	r5, r5, r3
 80124c0:	68a3      	ldr	r3, [r4, #8]
 80124c2:	bf0c      	ite	eq
 80124c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124c8:	2500      	movne	r5, #0
 80124ca:	4293      	cmp	r3, r2
 80124cc:	bfc4      	itt	gt
 80124ce:	1a9b      	subgt	r3, r3, r2
 80124d0:	18ed      	addgt	r5, r5, r3
 80124d2:	2600      	movs	r6, #0
 80124d4:	341a      	adds	r4, #26
 80124d6:	42b5      	cmp	r5, r6
 80124d8:	d11a      	bne.n	8012510 <_printf_common+0xc8>
 80124da:	2000      	movs	r0, #0
 80124dc:	e008      	b.n	80124f0 <_printf_common+0xa8>
 80124de:	2301      	movs	r3, #1
 80124e0:	4652      	mov	r2, sl
 80124e2:	4641      	mov	r1, r8
 80124e4:	4638      	mov	r0, r7
 80124e6:	47c8      	blx	r9
 80124e8:	3001      	adds	r0, #1
 80124ea:	d103      	bne.n	80124f4 <_printf_common+0xac>
 80124ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f4:	3501      	adds	r5, #1
 80124f6:	e7c6      	b.n	8012486 <_printf_common+0x3e>
 80124f8:	18e1      	adds	r1, r4, r3
 80124fa:	1c5a      	adds	r2, r3, #1
 80124fc:	2030      	movs	r0, #48	@ 0x30
 80124fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012502:	4422      	add	r2, r4
 8012504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012508:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801250c:	3302      	adds	r3, #2
 801250e:	e7c7      	b.n	80124a0 <_printf_common+0x58>
 8012510:	2301      	movs	r3, #1
 8012512:	4622      	mov	r2, r4
 8012514:	4641      	mov	r1, r8
 8012516:	4638      	mov	r0, r7
 8012518:	47c8      	blx	r9
 801251a:	3001      	adds	r0, #1
 801251c:	d0e6      	beq.n	80124ec <_printf_common+0xa4>
 801251e:	3601      	adds	r6, #1
 8012520:	e7d9      	b.n	80124d6 <_printf_common+0x8e>
	...

08012524 <_printf_i>:
 8012524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012528:	7e0f      	ldrb	r7, [r1, #24]
 801252a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801252c:	2f78      	cmp	r7, #120	@ 0x78
 801252e:	4691      	mov	r9, r2
 8012530:	4680      	mov	r8, r0
 8012532:	460c      	mov	r4, r1
 8012534:	469a      	mov	sl, r3
 8012536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801253a:	d807      	bhi.n	801254c <_printf_i+0x28>
 801253c:	2f62      	cmp	r7, #98	@ 0x62
 801253e:	d80a      	bhi.n	8012556 <_printf_i+0x32>
 8012540:	2f00      	cmp	r7, #0
 8012542:	f000 80d2 	beq.w	80126ea <_printf_i+0x1c6>
 8012546:	2f58      	cmp	r7, #88	@ 0x58
 8012548:	f000 80b9 	beq.w	80126be <_printf_i+0x19a>
 801254c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012554:	e03a      	b.n	80125cc <_printf_i+0xa8>
 8012556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801255a:	2b15      	cmp	r3, #21
 801255c:	d8f6      	bhi.n	801254c <_printf_i+0x28>
 801255e:	a101      	add	r1, pc, #4	@ (adr r1, 8012564 <_printf_i+0x40>)
 8012560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012564:	080125bd 	.word	0x080125bd
 8012568:	080125d1 	.word	0x080125d1
 801256c:	0801254d 	.word	0x0801254d
 8012570:	0801254d 	.word	0x0801254d
 8012574:	0801254d 	.word	0x0801254d
 8012578:	0801254d 	.word	0x0801254d
 801257c:	080125d1 	.word	0x080125d1
 8012580:	0801254d 	.word	0x0801254d
 8012584:	0801254d 	.word	0x0801254d
 8012588:	0801254d 	.word	0x0801254d
 801258c:	0801254d 	.word	0x0801254d
 8012590:	080126d1 	.word	0x080126d1
 8012594:	080125fb 	.word	0x080125fb
 8012598:	0801268b 	.word	0x0801268b
 801259c:	0801254d 	.word	0x0801254d
 80125a0:	0801254d 	.word	0x0801254d
 80125a4:	080126f3 	.word	0x080126f3
 80125a8:	0801254d 	.word	0x0801254d
 80125ac:	080125fb 	.word	0x080125fb
 80125b0:	0801254d 	.word	0x0801254d
 80125b4:	0801254d 	.word	0x0801254d
 80125b8:	08012693 	.word	0x08012693
 80125bc:	6833      	ldr	r3, [r6, #0]
 80125be:	1d1a      	adds	r2, r3, #4
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	6032      	str	r2, [r6, #0]
 80125c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80125c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80125cc:	2301      	movs	r3, #1
 80125ce:	e09d      	b.n	801270c <_printf_i+0x1e8>
 80125d0:	6833      	ldr	r3, [r6, #0]
 80125d2:	6820      	ldr	r0, [r4, #0]
 80125d4:	1d19      	adds	r1, r3, #4
 80125d6:	6031      	str	r1, [r6, #0]
 80125d8:	0606      	lsls	r6, r0, #24
 80125da:	d501      	bpl.n	80125e0 <_printf_i+0xbc>
 80125dc:	681d      	ldr	r5, [r3, #0]
 80125de:	e003      	b.n	80125e8 <_printf_i+0xc4>
 80125e0:	0645      	lsls	r5, r0, #25
 80125e2:	d5fb      	bpl.n	80125dc <_printf_i+0xb8>
 80125e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80125e8:	2d00      	cmp	r5, #0
 80125ea:	da03      	bge.n	80125f4 <_printf_i+0xd0>
 80125ec:	232d      	movs	r3, #45	@ 0x2d
 80125ee:	426d      	negs	r5, r5
 80125f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125f4:	4859      	ldr	r0, [pc, #356]	@ (801275c <_printf_i+0x238>)
 80125f6:	230a      	movs	r3, #10
 80125f8:	e011      	b.n	801261e <_printf_i+0xfa>
 80125fa:	6821      	ldr	r1, [r4, #0]
 80125fc:	6833      	ldr	r3, [r6, #0]
 80125fe:	0608      	lsls	r0, r1, #24
 8012600:	f853 5b04 	ldr.w	r5, [r3], #4
 8012604:	d402      	bmi.n	801260c <_printf_i+0xe8>
 8012606:	0649      	lsls	r1, r1, #25
 8012608:	bf48      	it	mi
 801260a:	b2ad      	uxthmi	r5, r5
 801260c:	2f6f      	cmp	r7, #111	@ 0x6f
 801260e:	4853      	ldr	r0, [pc, #332]	@ (801275c <_printf_i+0x238>)
 8012610:	6033      	str	r3, [r6, #0]
 8012612:	bf14      	ite	ne
 8012614:	230a      	movne	r3, #10
 8012616:	2308      	moveq	r3, #8
 8012618:	2100      	movs	r1, #0
 801261a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801261e:	6866      	ldr	r6, [r4, #4]
 8012620:	60a6      	str	r6, [r4, #8]
 8012622:	2e00      	cmp	r6, #0
 8012624:	bfa2      	ittt	ge
 8012626:	6821      	ldrge	r1, [r4, #0]
 8012628:	f021 0104 	bicge.w	r1, r1, #4
 801262c:	6021      	strge	r1, [r4, #0]
 801262e:	b90d      	cbnz	r5, 8012634 <_printf_i+0x110>
 8012630:	2e00      	cmp	r6, #0
 8012632:	d04b      	beq.n	80126cc <_printf_i+0x1a8>
 8012634:	4616      	mov	r6, r2
 8012636:	fbb5 f1f3 	udiv	r1, r5, r3
 801263a:	fb03 5711 	mls	r7, r3, r1, r5
 801263e:	5dc7      	ldrb	r7, [r0, r7]
 8012640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012644:	462f      	mov	r7, r5
 8012646:	42bb      	cmp	r3, r7
 8012648:	460d      	mov	r5, r1
 801264a:	d9f4      	bls.n	8012636 <_printf_i+0x112>
 801264c:	2b08      	cmp	r3, #8
 801264e:	d10b      	bne.n	8012668 <_printf_i+0x144>
 8012650:	6823      	ldr	r3, [r4, #0]
 8012652:	07df      	lsls	r7, r3, #31
 8012654:	d508      	bpl.n	8012668 <_printf_i+0x144>
 8012656:	6923      	ldr	r3, [r4, #16]
 8012658:	6861      	ldr	r1, [r4, #4]
 801265a:	4299      	cmp	r1, r3
 801265c:	bfde      	ittt	le
 801265e:	2330      	movle	r3, #48	@ 0x30
 8012660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012664:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012668:	1b92      	subs	r2, r2, r6
 801266a:	6122      	str	r2, [r4, #16]
 801266c:	f8cd a000 	str.w	sl, [sp]
 8012670:	464b      	mov	r3, r9
 8012672:	aa03      	add	r2, sp, #12
 8012674:	4621      	mov	r1, r4
 8012676:	4640      	mov	r0, r8
 8012678:	f7ff fee6 	bl	8012448 <_printf_common>
 801267c:	3001      	adds	r0, #1
 801267e:	d14a      	bne.n	8012716 <_printf_i+0x1f2>
 8012680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012684:	b004      	add	sp, #16
 8012686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801268a:	6823      	ldr	r3, [r4, #0]
 801268c:	f043 0320 	orr.w	r3, r3, #32
 8012690:	6023      	str	r3, [r4, #0]
 8012692:	4833      	ldr	r0, [pc, #204]	@ (8012760 <_printf_i+0x23c>)
 8012694:	2778      	movs	r7, #120	@ 0x78
 8012696:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801269a:	6823      	ldr	r3, [r4, #0]
 801269c:	6831      	ldr	r1, [r6, #0]
 801269e:	061f      	lsls	r7, r3, #24
 80126a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80126a4:	d402      	bmi.n	80126ac <_printf_i+0x188>
 80126a6:	065f      	lsls	r7, r3, #25
 80126a8:	bf48      	it	mi
 80126aa:	b2ad      	uxthmi	r5, r5
 80126ac:	6031      	str	r1, [r6, #0]
 80126ae:	07d9      	lsls	r1, r3, #31
 80126b0:	bf44      	itt	mi
 80126b2:	f043 0320 	orrmi.w	r3, r3, #32
 80126b6:	6023      	strmi	r3, [r4, #0]
 80126b8:	b11d      	cbz	r5, 80126c2 <_printf_i+0x19e>
 80126ba:	2310      	movs	r3, #16
 80126bc:	e7ac      	b.n	8012618 <_printf_i+0xf4>
 80126be:	4827      	ldr	r0, [pc, #156]	@ (801275c <_printf_i+0x238>)
 80126c0:	e7e9      	b.n	8012696 <_printf_i+0x172>
 80126c2:	6823      	ldr	r3, [r4, #0]
 80126c4:	f023 0320 	bic.w	r3, r3, #32
 80126c8:	6023      	str	r3, [r4, #0]
 80126ca:	e7f6      	b.n	80126ba <_printf_i+0x196>
 80126cc:	4616      	mov	r6, r2
 80126ce:	e7bd      	b.n	801264c <_printf_i+0x128>
 80126d0:	6833      	ldr	r3, [r6, #0]
 80126d2:	6825      	ldr	r5, [r4, #0]
 80126d4:	6961      	ldr	r1, [r4, #20]
 80126d6:	1d18      	adds	r0, r3, #4
 80126d8:	6030      	str	r0, [r6, #0]
 80126da:	062e      	lsls	r6, r5, #24
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	d501      	bpl.n	80126e4 <_printf_i+0x1c0>
 80126e0:	6019      	str	r1, [r3, #0]
 80126e2:	e002      	b.n	80126ea <_printf_i+0x1c6>
 80126e4:	0668      	lsls	r0, r5, #25
 80126e6:	d5fb      	bpl.n	80126e0 <_printf_i+0x1bc>
 80126e8:	8019      	strh	r1, [r3, #0]
 80126ea:	2300      	movs	r3, #0
 80126ec:	6123      	str	r3, [r4, #16]
 80126ee:	4616      	mov	r6, r2
 80126f0:	e7bc      	b.n	801266c <_printf_i+0x148>
 80126f2:	6833      	ldr	r3, [r6, #0]
 80126f4:	1d1a      	adds	r2, r3, #4
 80126f6:	6032      	str	r2, [r6, #0]
 80126f8:	681e      	ldr	r6, [r3, #0]
 80126fa:	6862      	ldr	r2, [r4, #4]
 80126fc:	2100      	movs	r1, #0
 80126fe:	4630      	mov	r0, r6
 8012700:	f7ed fdee 	bl	80002e0 <memchr>
 8012704:	b108      	cbz	r0, 801270a <_printf_i+0x1e6>
 8012706:	1b80      	subs	r0, r0, r6
 8012708:	6060      	str	r0, [r4, #4]
 801270a:	6863      	ldr	r3, [r4, #4]
 801270c:	6123      	str	r3, [r4, #16]
 801270e:	2300      	movs	r3, #0
 8012710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012714:	e7aa      	b.n	801266c <_printf_i+0x148>
 8012716:	6923      	ldr	r3, [r4, #16]
 8012718:	4632      	mov	r2, r6
 801271a:	4649      	mov	r1, r9
 801271c:	4640      	mov	r0, r8
 801271e:	47d0      	blx	sl
 8012720:	3001      	adds	r0, #1
 8012722:	d0ad      	beq.n	8012680 <_printf_i+0x15c>
 8012724:	6823      	ldr	r3, [r4, #0]
 8012726:	079b      	lsls	r3, r3, #30
 8012728:	d413      	bmi.n	8012752 <_printf_i+0x22e>
 801272a:	68e0      	ldr	r0, [r4, #12]
 801272c:	9b03      	ldr	r3, [sp, #12]
 801272e:	4298      	cmp	r0, r3
 8012730:	bfb8      	it	lt
 8012732:	4618      	movlt	r0, r3
 8012734:	e7a6      	b.n	8012684 <_printf_i+0x160>
 8012736:	2301      	movs	r3, #1
 8012738:	4632      	mov	r2, r6
 801273a:	4649      	mov	r1, r9
 801273c:	4640      	mov	r0, r8
 801273e:	47d0      	blx	sl
 8012740:	3001      	adds	r0, #1
 8012742:	d09d      	beq.n	8012680 <_printf_i+0x15c>
 8012744:	3501      	adds	r5, #1
 8012746:	68e3      	ldr	r3, [r4, #12]
 8012748:	9903      	ldr	r1, [sp, #12]
 801274a:	1a5b      	subs	r3, r3, r1
 801274c:	42ab      	cmp	r3, r5
 801274e:	dcf2      	bgt.n	8012736 <_printf_i+0x212>
 8012750:	e7eb      	b.n	801272a <_printf_i+0x206>
 8012752:	2500      	movs	r5, #0
 8012754:	f104 0619 	add.w	r6, r4, #25
 8012758:	e7f5      	b.n	8012746 <_printf_i+0x222>
 801275a:	bf00      	nop
 801275c:	080159f8 	.word	0x080159f8
 8012760:	08015a09 	.word	0x08015a09

08012764 <__sflush_r>:
 8012764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801276c:	0716      	lsls	r6, r2, #28
 801276e:	4605      	mov	r5, r0
 8012770:	460c      	mov	r4, r1
 8012772:	d454      	bmi.n	801281e <__sflush_r+0xba>
 8012774:	684b      	ldr	r3, [r1, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	dc02      	bgt.n	8012780 <__sflush_r+0x1c>
 801277a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801277c:	2b00      	cmp	r3, #0
 801277e:	dd48      	ble.n	8012812 <__sflush_r+0xae>
 8012780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012782:	2e00      	cmp	r6, #0
 8012784:	d045      	beq.n	8012812 <__sflush_r+0xae>
 8012786:	2300      	movs	r3, #0
 8012788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801278c:	682f      	ldr	r7, [r5, #0]
 801278e:	6a21      	ldr	r1, [r4, #32]
 8012790:	602b      	str	r3, [r5, #0]
 8012792:	d030      	beq.n	80127f6 <__sflush_r+0x92>
 8012794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	0759      	lsls	r1, r3, #29
 801279a:	d505      	bpl.n	80127a8 <__sflush_r+0x44>
 801279c:	6863      	ldr	r3, [r4, #4]
 801279e:	1ad2      	subs	r2, r2, r3
 80127a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80127a2:	b10b      	cbz	r3, 80127a8 <__sflush_r+0x44>
 80127a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80127a6:	1ad2      	subs	r2, r2, r3
 80127a8:	2300      	movs	r3, #0
 80127aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80127ac:	6a21      	ldr	r1, [r4, #32]
 80127ae:	4628      	mov	r0, r5
 80127b0:	47b0      	blx	r6
 80127b2:	1c43      	adds	r3, r0, #1
 80127b4:	89a3      	ldrh	r3, [r4, #12]
 80127b6:	d106      	bne.n	80127c6 <__sflush_r+0x62>
 80127b8:	6829      	ldr	r1, [r5, #0]
 80127ba:	291d      	cmp	r1, #29
 80127bc:	d82b      	bhi.n	8012816 <__sflush_r+0xb2>
 80127be:	4a2a      	ldr	r2, [pc, #168]	@ (8012868 <__sflush_r+0x104>)
 80127c0:	410a      	asrs	r2, r1
 80127c2:	07d6      	lsls	r6, r2, #31
 80127c4:	d427      	bmi.n	8012816 <__sflush_r+0xb2>
 80127c6:	2200      	movs	r2, #0
 80127c8:	6062      	str	r2, [r4, #4]
 80127ca:	04d9      	lsls	r1, r3, #19
 80127cc:	6922      	ldr	r2, [r4, #16]
 80127ce:	6022      	str	r2, [r4, #0]
 80127d0:	d504      	bpl.n	80127dc <__sflush_r+0x78>
 80127d2:	1c42      	adds	r2, r0, #1
 80127d4:	d101      	bne.n	80127da <__sflush_r+0x76>
 80127d6:	682b      	ldr	r3, [r5, #0]
 80127d8:	b903      	cbnz	r3, 80127dc <__sflush_r+0x78>
 80127da:	6560      	str	r0, [r4, #84]	@ 0x54
 80127dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127de:	602f      	str	r7, [r5, #0]
 80127e0:	b1b9      	cbz	r1, 8012812 <__sflush_r+0xae>
 80127e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127e6:	4299      	cmp	r1, r3
 80127e8:	d002      	beq.n	80127f0 <__sflush_r+0x8c>
 80127ea:	4628      	mov	r0, r5
 80127ec:	f7ff fbea 	bl	8011fc4 <_free_r>
 80127f0:	2300      	movs	r3, #0
 80127f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80127f4:	e00d      	b.n	8012812 <__sflush_r+0xae>
 80127f6:	2301      	movs	r3, #1
 80127f8:	4628      	mov	r0, r5
 80127fa:	47b0      	blx	r6
 80127fc:	4602      	mov	r2, r0
 80127fe:	1c50      	adds	r0, r2, #1
 8012800:	d1c9      	bne.n	8012796 <__sflush_r+0x32>
 8012802:	682b      	ldr	r3, [r5, #0]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d0c6      	beq.n	8012796 <__sflush_r+0x32>
 8012808:	2b1d      	cmp	r3, #29
 801280a:	d001      	beq.n	8012810 <__sflush_r+0xac>
 801280c:	2b16      	cmp	r3, #22
 801280e:	d11e      	bne.n	801284e <__sflush_r+0xea>
 8012810:	602f      	str	r7, [r5, #0]
 8012812:	2000      	movs	r0, #0
 8012814:	e022      	b.n	801285c <__sflush_r+0xf8>
 8012816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801281a:	b21b      	sxth	r3, r3
 801281c:	e01b      	b.n	8012856 <__sflush_r+0xf2>
 801281e:	690f      	ldr	r7, [r1, #16]
 8012820:	2f00      	cmp	r7, #0
 8012822:	d0f6      	beq.n	8012812 <__sflush_r+0xae>
 8012824:	0793      	lsls	r3, r2, #30
 8012826:	680e      	ldr	r6, [r1, #0]
 8012828:	bf08      	it	eq
 801282a:	694b      	ldreq	r3, [r1, #20]
 801282c:	600f      	str	r7, [r1, #0]
 801282e:	bf18      	it	ne
 8012830:	2300      	movne	r3, #0
 8012832:	eba6 0807 	sub.w	r8, r6, r7
 8012836:	608b      	str	r3, [r1, #8]
 8012838:	f1b8 0f00 	cmp.w	r8, #0
 801283c:	dde9      	ble.n	8012812 <__sflush_r+0xae>
 801283e:	6a21      	ldr	r1, [r4, #32]
 8012840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012842:	4643      	mov	r3, r8
 8012844:	463a      	mov	r2, r7
 8012846:	4628      	mov	r0, r5
 8012848:	47b0      	blx	r6
 801284a:	2800      	cmp	r0, #0
 801284c:	dc08      	bgt.n	8012860 <__sflush_r+0xfc>
 801284e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012856:	81a3      	strh	r3, [r4, #12]
 8012858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012860:	4407      	add	r7, r0
 8012862:	eba8 0800 	sub.w	r8, r8, r0
 8012866:	e7e7      	b.n	8012838 <__sflush_r+0xd4>
 8012868:	dfbffffe 	.word	0xdfbffffe

0801286c <_fflush_r>:
 801286c:	b538      	push	{r3, r4, r5, lr}
 801286e:	690b      	ldr	r3, [r1, #16]
 8012870:	4605      	mov	r5, r0
 8012872:	460c      	mov	r4, r1
 8012874:	b913      	cbnz	r3, 801287c <_fflush_r+0x10>
 8012876:	2500      	movs	r5, #0
 8012878:	4628      	mov	r0, r5
 801287a:	bd38      	pop	{r3, r4, r5, pc}
 801287c:	b118      	cbz	r0, 8012886 <_fflush_r+0x1a>
 801287e:	6a03      	ldr	r3, [r0, #32]
 8012880:	b90b      	cbnz	r3, 8012886 <_fflush_r+0x1a>
 8012882:	f7ff f96f 	bl	8011b64 <__sinit>
 8012886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d0f3      	beq.n	8012876 <_fflush_r+0xa>
 801288e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012890:	07d0      	lsls	r0, r2, #31
 8012892:	d404      	bmi.n	801289e <_fflush_r+0x32>
 8012894:	0599      	lsls	r1, r3, #22
 8012896:	d402      	bmi.n	801289e <_fflush_r+0x32>
 8012898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801289a:	f7ff fb64 	bl	8011f66 <__retarget_lock_acquire_recursive>
 801289e:	4628      	mov	r0, r5
 80128a0:	4621      	mov	r1, r4
 80128a2:	f7ff ff5f 	bl	8012764 <__sflush_r>
 80128a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80128a8:	07da      	lsls	r2, r3, #31
 80128aa:	4605      	mov	r5, r0
 80128ac:	d4e4      	bmi.n	8012878 <_fflush_r+0xc>
 80128ae:	89a3      	ldrh	r3, [r4, #12]
 80128b0:	059b      	lsls	r3, r3, #22
 80128b2:	d4e1      	bmi.n	8012878 <_fflush_r+0xc>
 80128b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128b6:	f7ff fb57 	bl	8011f68 <__retarget_lock_release_recursive>
 80128ba:	e7dd      	b.n	8012878 <_fflush_r+0xc>

080128bc <fiprintf>:
 80128bc:	b40e      	push	{r1, r2, r3}
 80128be:	b503      	push	{r0, r1, lr}
 80128c0:	4601      	mov	r1, r0
 80128c2:	ab03      	add	r3, sp, #12
 80128c4:	4805      	ldr	r0, [pc, #20]	@ (80128dc <fiprintf+0x20>)
 80128c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80128ca:	6800      	ldr	r0, [r0, #0]
 80128cc:	9301      	str	r3, [sp, #4]
 80128ce:	f7ff fca3 	bl	8012218 <_vfiprintf_r>
 80128d2:	b002      	add	sp, #8
 80128d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80128d8:	b003      	add	sp, #12
 80128da:	4770      	bx	lr
 80128dc:	2400003c 	.word	0x2400003c

080128e0 <__swhatbuf_r>:
 80128e0:	b570      	push	{r4, r5, r6, lr}
 80128e2:	460c      	mov	r4, r1
 80128e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128e8:	2900      	cmp	r1, #0
 80128ea:	b096      	sub	sp, #88	@ 0x58
 80128ec:	4615      	mov	r5, r2
 80128ee:	461e      	mov	r6, r3
 80128f0:	da0d      	bge.n	801290e <__swhatbuf_r+0x2e>
 80128f2:	89a3      	ldrh	r3, [r4, #12]
 80128f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80128f8:	f04f 0100 	mov.w	r1, #0
 80128fc:	bf14      	ite	ne
 80128fe:	2340      	movne	r3, #64	@ 0x40
 8012900:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012904:	2000      	movs	r0, #0
 8012906:	6031      	str	r1, [r6, #0]
 8012908:	602b      	str	r3, [r5, #0]
 801290a:	b016      	add	sp, #88	@ 0x58
 801290c:	bd70      	pop	{r4, r5, r6, pc}
 801290e:	466a      	mov	r2, sp
 8012910:	f000 f848 	bl	80129a4 <_fstat_r>
 8012914:	2800      	cmp	r0, #0
 8012916:	dbec      	blt.n	80128f2 <__swhatbuf_r+0x12>
 8012918:	9901      	ldr	r1, [sp, #4]
 801291a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801291e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012922:	4259      	negs	r1, r3
 8012924:	4159      	adcs	r1, r3
 8012926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801292a:	e7eb      	b.n	8012904 <__swhatbuf_r+0x24>

0801292c <__smakebuf_r>:
 801292c:	898b      	ldrh	r3, [r1, #12]
 801292e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012930:	079d      	lsls	r5, r3, #30
 8012932:	4606      	mov	r6, r0
 8012934:	460c      	mov	r4, r1
 8012936:	d507      	bpl.n	8012948 <__smakebuf_r+0x1c>
 8012938:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801293c:	6023      	str	r3, [r4, #0]
 801293e:	6123      	str	r3, [r4, #16]
 8012940:	2301      	movs	r3, #1
 8012942:	6163      	str	r3, [r4, #20]
 8012944:	b003      	add	sp, #12
 8012946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012948:	ab01      	add	r3, sp, #4
 801294a:	466a      	mov	r2, sp
 801294c:	f7ff ffc8 	bl	80128e0 <__swhatbuf_r>
 8012950:	9f00      	ldr	r7, [sp, #0]
 8012952:	4605      	mov	r5, r0
 8012954:	4639      	mov	r1, r7
 8012956:	4630      	mov	r0, r6
 8012958:	f7ff fba8 	bl	80120ac <_malloc_r>
 801295c:	b948      	cbnz	r0, 8012972 <__smakebuf_r+0x46>
 801295e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012962:	059a      	lsls	r2, r3, #22
 8012964:	d4ee      	bmi.n	8012944 <__smakebuf_r+0x18>
 8012966:	f023 0303 	bic.w	r3, r3, #3
 801296a:	f043 0302 	orr.w	r3, r3, #2
 801296e:	81a3      	strh	r3, [r4, #12]
 8012970:	e7e2      	b.n	8012938 <__smakebuf_r+0xc>
 8012972:	89a3      	ldrh	r3, [r4, #12]
 8012974:	6020      	str	r0, [r4, #0]
 8012976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801297a:	81a3      	strh	r3, [r4, #12]
 801297c:	9b01      	ldr	r3, [sp, #4]
 801297e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012982:	b15b      	cbz	r3, 801299c <__smakebuf_r+0x70>
 8012984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012988:	4630      	mov	r0, r6
 801298a:	f000 f81d 	bl	80129c8 <_isatty_r>
 801298e:	b128      	cbz	r0, 801299c <__smakebuf_r+0x70>
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	f023 0303 	bic.w	r3, r3, #3
 8012996:	f043 0301 	orr.w	r3, r3, #1
 801299a:	81a3      	strh	r3, [r4, #12]
 801299c:	89a3      	ldrh	r3, [r4, #12]
 801299e:	431d      	orrs	r5, r3
 80129a0:	81a5      	strh	r5, [r4, #12]
 80129a2:	e7cf      	b.n	8012944 <__smakebuf_r+0x18>

080129a4 <_fstat_r>:
 80129a4:	b538      	push	{r3, r4, r5, lr}
 80129a6:	4d07      	ldr	r5, [pc, #28]	@ (80129c4 <_fstat_r+0x20>)
 80129a8:	2300      	movs	r3, #0
 80129aa:	4604      	mov	r4, r0
 80129ac:	4608      	mov	r0, r1
 80129ae:	4611      	mov	r1, r2
 80129b0:	602b      	str	r3, [r5, #0]
 80129b2:	f7ee fa0f 	bl	8000dd4 <_fstat>
 80129b6:	1c43      	adds	r3, r0, #1
 80129b8:	d102      	bne.n	80129c0 <_fstat_r+0x1c>
 80129ba:	682b      	ldr	r3, [r5, #0]
 80129bc:	b103      	cbz	r3, 80129c0 <_fstat_r+0x1c>
 80129be:	6023      	str	r3, [r4, #0]
 80129c0:	bd38      	pop	{r3, r4, r5, pc}
 80129c2:	bf00      	nop
 80129c4:	24007de0 	.word	0x24007de0

080129c8 <_isatty_r>:
 80129c8:	b538      	push	{r3, r4, r5, lr}
 80129ca:	4d06      	ldr	r5, [pc, #24]	@ (80129e4 <_isatty_r+0x1c>)
 80129cc:	2300      	movs	r3, #0
 80129ce:	4604      	mov	r4, r0
 80129d0:	4608      	mov	r0, r1
 80129d2:	602b      	str	r3, [r5, #0]
 80129d4:	f7ee fa0e 	bl	8000df4 <_isatty>
 80129d8:	1c43      	adds	r3, r0, #1
 80129da:	d102      	bne.n	80129e2 <_isatty_r+0x1a>
 80129dc:	682b      	ldr	r3, [r5, #0]
 80129de:	b103      	cbz	r3, 80129e2 <_isatty_r+0x1a>
 80129e0:	6023      	str	r3, [r4, #0]
 80129e2:	bd38      	pop	{r3, r4, r5, pc}
 80129e4:	24007de0 	.word	0x24007de0

080129e8 <_sbrk_r>:
 80129e8:	b538      	push	{r3, r4, r5, lr}
 80129ea:	4d06      	ldr	r5, [pc, #24]	@ (8012a04 <_sbrk_r+0x1c>)
 80129ec:	2300      	movs	r3, #0
 80129ee:	4604      	mov	r4, r0
 80129f0:	4608      	mov	r0, r1
 80129f2:	602b      	str	r3, [r5, #0]
 80129f4:	f7ee fa16 	bl	8000e24 <_sbrk>
 80129f8:	1c43      	adds	r3, r0, #1
 80129fa:	d102      	bne.n	8012a02 <_sbrk_r+0x1a>
 80129fc:	682b      	ldr	r3, [r5, #0]
 80129fe:	b103      	cbz	r3, 8012a02 <_sbrk_r+0x1a>
 8012a00:	6023      	str	r3, [r4, #0]
 8012a02:	bd38      	pop	{r3, r4, r5, pc}
 8012a04:	24007de0 	.word	0x24007de0

08012a08 <abort>:
 8012a08:	b508      	push	{r3, lr}
 8012a0a:	2006      	movs	r0, #6
 8012a0c:	f000 f82c 	bl	8012a68 <raise>
 8012a10:	2001      	movs	r0, #1
 8012a12:	f7ee f9ab 	bl	8000d6c <_exit>

08012a16 <_raise_r>:
 8012a16:	291f      	cmp	r1, #31
 8012a18:	b538      	push	{r3, r4, r5, lr}
 8012a1a:	4605      	mov	r5, r0
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	d904      	bls.n	8012a2a <_raise_r+0x14>
 8012a20:	2316      	movs	r3, #22
 8012a22:	6003      	str	r3, [r0, #0]
 8012a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a28:	bd38      	pop	{r3, r4, r5, pc}
 8012a2a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012a2c:	b112      	cbz	r2, 8012a34 <_raise_r+0x1e>
 8012a2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a32:	b94b      	cbnz	r3, 8012a48 <_raise_r+0x32>
 8012a34:	4628      	mov	r0, r5
 8012a36:	f000 f831 	bl	8012a9c <_getpid_r>
 8012a3a:	4622      	mov	r2, r4
 8012a3c:	4601      	mov	r1, r0
 8012a3e:	4628      	mov	r0, r5
 8012a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a44:	f000 b818 	b.w	8012a78 <_kill_r>
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d00a      	beq.n	8012a62 <_raise_r+0x4c>
 8012a4c:	1c59      	adds	r1, r3, #1
 8012a4e:	d103      	bne.n	8012a58 <_raise_r+0x42>
 8012a50:	2316      	movs	r3, #22
 8012a52:	6003      	str	r3, [r0, #0]
 8012a54:	2001      	movs	r0, #1
 8012a56:	e7e7      	b.n	8012a28 <_raise_r+0x12>
 8012a58:	2100      	movs	r1, #0
 8012a5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012a5e:	4620      	mov	r0, r4
 8012a60:	4798      	blx	r3
 8012a62:	2000      	movs	r0, #0
 8012a64:	e7e0      	b.n	8012a28 <_raise_r+0x12>
	...

08012a68 <raise>:
 8012a68:	4b02      	ldr	r3, [pc, #8]	@ (8012a74 <raise+0xc>)
 8012a6a:	4601      	mov	r1, r0
 8012a6c:	6818      	ldr	r0, [r3, #0]
 8012a6e:	f7ff bfd2 	b.w	8012a16 <_raise_r>
 8012a72:	bf00      	nop
 8012a74:	2400003c 	.word	0x2400003c

08012a78 <_kill_r>:
 8012a78:	b538      	push	{r3, r4, r5, lr}
 8012a7a:	4d07      	ldr	r5, [pc, #28]	@ (8012a98 <_kill_r+0x20>)
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	4604      	mov	r4, r0
 8012a80:	4608      	mov	r0, r1
 8012a82:	4611      	mov	r1, r2
 8012a84:	602b      	str	r3, [r5, #0]
 8012a86:	f7ee f95f 	bl	8000d48 <_kill>
 8012a8a:	1c43      	adds	r3, r0, #1
 8012a8c:	d102      	bne.n	8012a94 <_kill_r+0x1c>
 8012a8e:	682b      	ldr	r3, [r5, #0]
 8012a90:	b103      	cbz	r3, 8012a94 <_kill_r+0x1c>
 8012a92:	6023      	str	r3, [r4, #0]
 8012a94:	bd38      	pop	{r3, r4, r5, pc}
 8012a96:	bf00      	nop
 8012a98:	24007de0 	.word	0x24007de0

08012a9c <_getpid_r>:
 8012a9c:	f7ee b94c 	b.w	8000d38 <_getpid>

08012aa0 <_init>:
 8012aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aa2:	bf00      	nop
 8012aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012aa6:	bc08      	pop	{r3}
 8012aa8:	469e      	mov	lr, r3
 8012aaa:	4770      	bx	lr

08012aac <_fini>:
 8012aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aae:	bf00      	nop
 8012ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ab2:	bc08      	pop	{r3}
 8012ab4:	469e      	mov	lr, r3
 8012ab6:	4770      	bx	lr
